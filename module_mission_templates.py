
# -*- coding: UTF-8 -*-
from header_common import *
from header_operations import *
from header_mission_templates import *
from header_animations import *
from header_sounds import *
from header_music import *
from header_items import *
from module_constants import *

## CC

from ID_items import *
from header_skills import *
from header_terrain_types import *
from module_my_mod_set import *
## CC
####################################################################################################################
#   Each mission-template is a tuple that contains the following fields:
#  1) Mission-template id (string): used for referencing mission-templates in other files.
#     The prefix mt_ is automatically added before each mission-template id
#
#  2) Mission-template flags (int): See header_mission-templates.py for a list of available flags
#  3) Mission-type(int): Which mission types this mission template matches.
#     For mission-types to be used with the default party-meeting system,
#     this should be 'charge' or 'charge_with_ally' otherwise must be -1.
#     
#  4) Mission description text (string).
#  5) List of spawn records (list): Each spawn record is a tuple that contains the following fields:
#    5.1) entry-no: Troops spawned from this spawn record will use this entry
#    5.2) spawn flags.
#    5.3) alter flags. which equipment will be overriden
#    5.4) ai flags.
#    5.5) Number of troops to spawn.
#    5.6) list of equipment to add to troops spawned from here (maximum 8).
#  6) List of triggers (list).
#     See module_triggers.py for infomation about triggers.
#
#  Please note that mission templates is work in progress and can be changed in the future versions.
# 
####################################################################################################################

pilgrim_disguise = [itm_pilgrim_hood,itm_pilgrim_disguise,itm_practice_staff, itm_flintlock_pistol_veteran,itm_assassin_dagger,itm_cartridges]
af_castle_lord = af_override_horse | af_override_weapons| af_require_civilian
freelancer_siege_triggers = (ti_on_agent_spawn, 0, 0, [(eq, "$freelancer_state", 1),], #+Freelancer
   [
    (get_player_agent_no, ":player"),
    (ge, ":player", 0),
    (agent_is_active, ":player"),
    (store_trigger_param_1, ":agent_no"),
    (eq, ":player", ":agent_no"),
    (agent_get_team, ":player_team", ":player"),
    (team_set_order_listener, ":player_team", -1),
    (val_add, ":player_team", 2),
    (agent_set_team, ":player", ":player_team"),
   ])

automatic_fire_test_2 = (
    0.1, 0, 0,
   [
      #(game_key_is_down, gk_attack),
      #(neg|game_key_is_down, gk_defend),
      #(get_player_agent_no, ":attacker_agent"), 
   ],
   [
      #(get_player_agent_no, ":attacker_agent"), 
    (set_fixed_point_multiplier, 1),
    (try_for_agents,":attacker_agent"),
      (agent_is_human,":attacker_agent"),
      (agent_is_alive,":attacker_agent"),
      (agent_get_wielded_item, ":agent_cur_weapon", ":attacker_agent", 0),
      (gt,":agent_cur_weapon", 0),
      (item_get_type, ":cur_weapon_type", ":agent_cur_weapon"),
      (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
      (this_or_next|eq,":cur_weapon_type",itp_type_crossbow),
      (eq,":cur_weapon_type",itp_type_musket),
      #(this_or_next|eq,":agent_cur_weapon","itm_van_helsing_crossbow"),
      (neg|item_has_property, ":agent_cur_weapon", itp_is_magic_staff),
      
      (assign,":automatic_fire",0),
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":attacker_agent", "itm_perk_musket_3"),
        (this_or_next|eq, ":cur_weapon_type", itp_type_pistol),
        (eq, ":cur_weapon_type", itp_type_musket),
        (assign,":automatic_fire",1),
      (try_end),
      
      (this_or_next|eq,":automatic_fire",1),
      (this_or_next|eq,":agent_cur_weapon","itm_power_musket_8barrel"),
      (this_or_next|eq,":agent_cur_weapon","itm_bonecrossbow_auto"),
      (this_or_next|eq,":agent_cur_weapon","itm_rat_musket_8barrel"),
      (this_or_next|eq,":agent_cur_weapon","itm_sissofbattle_A295"),
      (this_or_next|eq,":agent_cur_weapon","itm_drawf_musket_8barrel1"),
      (this_or_next|eq,":agent_cur_weapon","itm_drawf_musket_8barrel2"),
      (eq,":automatic_fire",1),
      
      
      (agent_get_attack_action, ":attack_action", ":attacker_agent"),
            
      (try_begin),
        (eq, ":attack_action", 1),
        #ticker trigger
        (agent_get_slot,":ticker_time",":attacker_agent",slot_agent_shoot_time_ticker),
        (try_begin),
          (le,":ticker_time",0),      
          
          #ticker trigger
          (item_get_speed_rating, ":ticker_time", ":agent_cur_weapon"),
          (val_max,":ticker_time",1),
          (store_div,":ticker_time",200,":ticker_time"),
          (agent_set_slot,":attacker_agent",slot_agent_shoot_time_ticker,":ticker_time"),    
            
          (assign,":cur_weapon_slot",-1),
          (assign,":item_slot_num",4),
          (try_for_range,":cur_item_slot",0,":item_slot_num"),
            (eq,":cur_weapon_slot",-1),
            (agent_get_item_slot, ":item_no", ":attacker_agent", ":cur_item_slot"),
            (eq,":item_no",":agent_cur_weapon"),
            (assign,":cur_weapon_slot",":cur_item_slot"),
            (assign,":item_slot_num", 0),
          (try_end),
                    
          (agent_get_item_cur_ammo, ":cur_ammo", ":attacker_agent",":cur_weapon_slot"),
          (gt,":cur_ammo",1),
          (val_sub,":cur_ammo",1),
          (try_begin),
            (this_or_next|eq,":agent_cur_weapon","itm_power_musket_8barrel"),
            (eq,":agent_cur_weapon","itm_zlmg"),
            (val_add,":cur_ammo",1),
          (try_end),
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":attacker_agent", "itm_perk_musket_6"),
            (val_add,":cur_ammo",1),
          (try_end),
          (agent_set_ammo,":attacker_agent",":agent_cur_weapon",":cur_ammo"),
                    
          (try_begin),
            (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
            (eq,":cur_weapon_type",itp_type_musket),
            (assign,":cur_ammo_type",itp_type_bullets),
            (assign,":cur_ammo_id","itm_cartridges"),#as default
          (else_try),
            (eq,":cur_weapon_type",itp_type_bow),
            (assign,":cur_ammo_type",itp_type_arrows),
            (assign,":cur_ammo_id","itm_arrows"),#as default
          (else_try),
            (assign,":cur_ammo_type",itp_type_bolts),
            (assign,":cur_ammo_id","itm_bolts"),#as default
          (try_end),
          #match the right ammmo type
          (assign,":item_slot_num",4),
          (try_for_range,":cur_item_slot",0,":item_slot_num"),
            (agent_get_item_slot, ":item_no", ":attacker_agent", ":cur_item_slot"),
            (gt,":item_no",-1),
            (item_get_type, ":item_type_2", ":item_no"),
            (eq,":item_type_2",":cur_ammo_type"),
            (agent_get_item_cur_ammo, ":cur_ammo", ":attacker_agent", ":cur_item_slot"),
            (gt,":cur_ammo",0),
            (assign,":cur_ammo_id",":item_no"),
            (assign,":item_slot_num",0),#break
          (try_end),
          
          (try_begin),
            (item_has_property, ":cur_ammo_id", itp_is_magic_staff),
            (assign,":cur_ammo_id","itm_cartridges"),#as default
            (try_begin),
              (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
              (eq,":cur_weapon_type",itp_type_musket),
              (assign,":cur_ammo_type",itp_type_bullets),
              (assign,":cur_ammo_id","itm_cartridges"),#as default
            (else_try),
              (eq,":cur_weapon_type",itp_type_bow),
              (assign,":cur_ammo_type",itp_type_arrows),
              (assign,":cur_ammo_id","itm_arrows"),#as default
            (else_try),
              (assign,":cur_ammo_type",itp_type_bolts),
              (assign,":cur_ammo_id","itm_bolts"),#as default
            (try_end),
          (try_end),
          
          #reduce ammo
          (assign,":killed",1),
          (try_begin),
            (eq,":agent_cur_weapon","itm_van_helsing_crossbow"),
            (assign,":killed",3),
          (else_try),
            (eq,":agent_cur_weapon","itm_van_helsing_crossbow_auto"),
            (assign,":killed",2),
          (else_try),
            (eq,":agent_cur_weapon","itm_rat_musket_8barrel"),
            (assign,":killed",2),
          (else_try),
            (eq,":agent_cur_weapon","itm_power_musket_8barrel"),
            (assign,":killed",4),
          (else_try),
            (neq,":cur_ammo_id","itm_cartridges_burst"),
            (eq,":agent_cur_weapon","itm_drawf_musket_8barrel2"),
            (assign,":killed",3),
          (else_try),
            (eq,":cur_ammo_id","itm_cartridges_burst"),
            (eq,":agent_cur_weapon","itm_drawf_musket_8barrel2"),
            (assign,":killed",4),
          (else_try),
            (eq,":cur_ammo_id","itm_cartridges_burst"),
            (eq,":agent_cur_weapon","itm_drawf_musket_8barrel1"),
            (assign,":killed",2),
          (else_try),
            (eq,":cur_ammo_id","itm_cartridges_burst"),
            (eq,":agent_cur_weapon","itm_zlmg"),
            (assign,":killed",2),
          (else_try),
            (eq,":cur_ammo_id","itm_cartridges_burst"),
            (eq,":agent_cur_weapon","itm_sissofbattle_A295"),
            (assign,":killed",4),
          (try_end),
          (assign,":flame_ammo",0),
          (try_begin), 
            (this_or_next|eq,":cur_ammo_id","itm_cartridges_sissofbattle_flame"),
            (this_or_next|eq,":cur_ammo_id","itm_cartridges_sissofbattle_flame_2"),
            (this_or_next|eq,":cur_ammo_id","itm_cartridges_sissofbattle_flame_cannon"),
            (this_or_next|eq,":cur_ammo_id","itm_fire_dragon_breath"),
            (this_or_next|eq,":cur_ammo_id","itm_lava_dragon_breath"),
            (this_or_next|eq,":cur_ammo_id","itm_gold_dragon_breath"),
            (this_or_next|eq,":cur_ammo_id","itm_red_dragon_breath"),
            (this_or_next|eq,":cur_ammo_id","itm_red_dragon_breath_2"),
            (eq,":cur_ammo_id","itm_cartridges_flame"),
            (assign,":flame_ammo",1),
          (try_end),
          
          
          (call_script, "script_cf_agent_oneshot", ":attacker_agent",1,":killed",":cur_ammo_id"),			
          #(add_missile, ":attacker_agent", pos25, ":bullet_speed", ":agent_cur_weapon", 0, ":cur_ammo_id",0),
          (try_begin),
            (eq,":flame_ammo",1),
            (call_script, "script_flame_cast_trigger", ":attacker_agent", ":cur_ammo_id"),
          (try_end),
          

        (else_try),
          (val_sub,":ticker_time",1),
          (agent_set_slot,":attacker_agent",slot_agent_shoot_time_ticker,":ticker_time"),
        (try_end),     
      (else_try),
        (agent_get_defend_action, ":defend_action_state", ":attacker_agent"),
        (this_or_next|gt,":defend_action_state",0),
        (gt,":attack_action",1),
        (item_get_speed_rating, ":ticker_time", ":agent_cur_weapon"),
        (val_max,":ticker_time",1),
        (store_div,":ticker_time",800,":ticker_time"),
        (agent_set_slot,":attacker_agent",slot_agent_shoot_time_ticker,":ticker_time"),      
      (try_end),
    (try_end),
    (try_for_agents,":attacker_agent"),
      (agent_is_human,":attacker_agent"),
      (agent_is_alive,":attacker_agent"),
      (agent_get_wielded_item, ":agent_cur_weapon", ":attacker_agent", 0),
      (gt,":agent_cur_weapon", 0),
      (item_get_type, ":cur_weapon_type", ":agent_cur_weapon"),
      
      (assign,":automatic_fire",0),
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":attacker_agent", "itm_perk_crossbow_4"),
        (eq,":cur_weapon_type",itp_type_crossbow),
        (assign,":automatic_fire",1),
      (else_try),
        (call_script, "script_cf_agent_has_skill", ":attacker_agent", "itm_perk_bow_4"),
        (eq, ":cur_weapon_type", itp_type_bow),
        (assign,":automatic_fire",1),
      (try_end),
      (eq, ":automatic_fire", 1),
      
      (agent_get_slot, ":stamina", ":attacker_agent", slot_agent_mana),
      
      (agent_get_attack_action, ":attack_action", ":attacker_agent"),
            
      (try_begin),
        (neg|game_key_is_down, gk_zoom),
        (ge, ":stamina", 50),
        (eq, ":attack_action", 1),
        #ticker trigger
        (agent_get_slot,":ticker_time",":attacker_agent",slot_agent_shoot_time_ticker),
        (try_begin),
          (le,":ticker_time",0),      
          
          #ticker trigger
          (item_get_speed_rating, ":ticker_time", ":agent_cur_weapon"),
          (val_max,":ticker_time",1),
          (store_div,":ticker_time",200,":ticker_time"),
          (agent_set_slot,":attacker_agent",slot_agent_shoot_time_ticker,":ticker_time"),    
            
          (agent_get_slot, ":stamina", ":attacker_agent", slot_agent_mana),
          (val_sub, ":stamina", 5),
          (agent_set_slot, ":attacker_agent", slot_agent_mana, ":stamina"),
          (try_begin),
            (eq,":cur_weapon_type",itp_type_crossbow),
            (assign,":cur_ammo_id","itm_bolts"),
          (else_try),
            (eq, ":cur_weapon_type", itp_type_bow),
            (assign,":cur_ammo_id","itm_ebony_arrow"),
          (try_end),
          #reduce ammo
          (assign,":killed",3),
          (try_begin),
            (eq,":agent_cur_weapon","itm_van_helsing_crossbow"),
            (val_add,":killed",9),
          (else_try),
            (eq,":agent_cur_weapon","itm_bonecrossbow_auto"),
            (val_add,":killed",3),
          (else_try),
            (eq,":agent_cur_weapon","itm_elven_bow"),
            (val_add,":killed",9),
          (try_end),
          
            (call_script, "script_cf_agent_oneshot", ":attacker_agent",0,1,":cur_ammo_id"), 
            (call_script, "script_cf_agent_oneshot", ":attacker_agent",1,":killed",":cur_ammo_id"), 
          
        (else_try),
          (val_sub,":ticker_time",1),
          (agent_set_slot,":attacker_agent",slot_agent_shoot_time_ticker,":ticker_time"),
        (try_end),     
      (else_try),
        (agent_get_defend_action, ":defend_action_state", ":attacker_agent"),
        (this_or_next|gt,":defend_action_state",0),
        (gt,":attack_action",1),
                                   
        (item_get_speed_rating, ":ticker_time", ":agent_cur_weapon"),
        (val_max,":ticker_time",1),
        (store_div,":ticker_time",800,":ticker_time"),
        (agent_set_slot,":attacker_agent",slot_agent_shoot_time_ticker,":ticker_time"),      
      (try_end),
    (try_end),
   ]
)

vortices_magic_trigger =   (
      1.0, 0, 0, [],
      [
        (set_fixed_point_multiplier, 1),
        (scene_prop_get_num_instances, ":num", "spr_dummy_lightning_burst"),
        (try_for_range_backwards, ":cur_dummy", 0, ":num"),
          (scene_prop_get_instance, ":instance_no", "spr_dummy_lightning_burst", ":cur_dummy"),
          (prop_instance_is_valid, ":instance_no"),
          (scene_prop_get_slot, ":shooter", ":instance_no", scene_prop_owner),
          (scene_prop_get_slot, ":old_time", ":instance_no", scene_prop_spawn_time),
          (store_mission_timer_a, ":cur_time"),
          (try_begin),
            (agent_is_alive,":shooter"),
            (agent_is_human,":shooter"),
            (ge, ":old_time", ":cur_time"),
            (prop_instance_get_position, pos20, ":instance_no"),
            (store_random_in_range, ":posx", -2,3),
            (store_random_in_range, ":posy", -2,3),
            (val_mul,":posx",100),
            (val_mul,":posy",100),
            (position_move_x,pos20,":posx"),
            (position_move_y,pos20,":posy"),
            (position_set_z_to_ground_level, pos20),
            (prop_instance_animate_to_position, ":instance_no", pos20, 80),
            (copy_position,pos52,pos20),
            (call_script, "script_cf_burst_pos52_magic_lightningball", ":shooter"),
          (else_try),  
            (scene_prop_fade_out, ":instance_no"),
          (try_end),
        (try_end),
        
        (scene_prop_get_num_instances, ":num", "spr_dummy_black_hold"),
        (try_for_range_backwards, ":cur_dummy", 0, ":num"),
          (scene_prop_get_instance, ":instance_no", "spr_dummy_black_hold", ":cur_dummy"),
          (prop_instance_is_valid, ":instance_no"),
          (scene_prop_get_slot, ":shooter", ":instance_no", scene_prop_owner),
          (scene_prop_get_slot, ":old_time", ":instance_no", scene_prop_spawn_time),
          (store_mission_timer_a, ":cur_time"),
          (try_begin),
            (agent_is_alive,":shooter"),
            (agent_is_human,":shooter"),
            (ge, ":old_time", ":cur_time"),
            (prop_instance_get_position, pos52, ":instance_no"),
            (call_script, "script_cf_burst_pos52_magic_black_hold", ":shooter"),
          (else_try),  
            (scene_prop_fade_out, ":instance_no"),
          (try_end),
        (try_end),
        
        (scene_prop_get_num_instances, ":num", "spr_dummy_incediary_cloud"),
        (try_for_range_backwards, ":cur_dummy", 0, ":num"),
          (scene_prop_get_instance, ":instance_no", "spr_dummy_incediary_cloud", ":cur_dummy"),
          (prop_instance_is_valid, ":instance_no"),
          (scene_prop_get_slot, ":shooter", ":instance_no", scene_prop_owner),
          (scene_prop_get_slot, ":old_time", ":instance_no", scene_prop_spawn_time),
          (store_mission_timer_a, ":cur_time"),
          (try_begin),
            (agent_is_alive,":shooter"),
            (agent_is_human,":shooter"),
            (ge, ":old_time", ":cur_time"),
            (prop_instance_get_position, pos20, ":instance_no"),
            (store_random_in_range, ":posx", -2,3),
            (store_random_in_range, ":posy", -2,3),
            (val_mul,":posx",100),
            (val_mul,":posy",100),
            (position_move_x,pos20,":posx"),
            (position_move_y,pos20,":posy"),
            (position_set_z_to_ground_level, pos20),
            (prop_instance_animate_to_position, ":instance_no", pos20, 80),
            (copy_position,pos52,pos20),
            (call_script, "script_cf_burst_pos52_magic_incediary_cloud_2", ":shooter"),
          (else_try),  
            (scene_prop_fade_out, ":instance_no"),
          (try_end),
        (try_end),
        
        (scene_prop_get_num_instances, ":num", "spr_dummy_mana_tempest"),
        (try_for_range_backwards, ":cur_dummy", 0, ":num"),
          (scene_prop_get_instance, ":instance_no", "spr_dummy_mana_tempest", ":cur_dummy"),
          (prop_instance_is_valid, ":instance_no"),
          (scene_prop_get_slot, ":shooter", ":instance_no", scene_prop_owner),
          (scene_prop_get_slot, ":old_time", ":instance_no", scene_prop_spawn_time),
          (store_mission_timer_a, ":cur_time"),
          (try_begin),
            (agent_is_alive,":shooter"),
            (agent_is_human,":shooter"),
            (ge, ":old_time", ":cur_time"),
            (prop_instance_get_position, pos52, ":instance_no"),
            (call_script, "script_cf_burst_pos52_magic_mana_tempest_2", ":shooter"),
          (else_try),  
            (scene_prop_fade_out, ":instance_no"),
          (try_end),
        (try_end),
        
        (scene_prop_get_num_instances, ":num", "spr_dummy_death_cloud"),
        (try_for_range_backwards, ":cur_dummy", 0, ":num"),
          (scene_prop_get_instance, ":instance_no", "spr_dummy_death_cloud", ":cur_dummy"),
          (prop_instance_is_valid, ":instance_no"),
          (scene_prop_get_slot, ":shooter", ":instance_no", scene_prop_owner),
          (scene_prop_get_slot, ":old_time", ":instance_no", scene_prop_spawn_time),
          (store_mission_timer_a, ":cur_time"),
          (try_begin),
            (agent_is_alive,":shooter"),
            (agent_is_human,":shooter"),
            (ge, ":old_time", ":cur_time"),
            (prop_instance_get_position, pos20, ":instance_no"),
            (store_random_in_range, ":posx", -2,3),
            (store_random_in_range, ":posy", -2,3),
            (val_mul,":posx",100),
            (val_mul,":posy",100),
            (position_move_x,pos20,":posx"),
            (position_move_y,pos20,":posy"),
            (position_set_z_to_ground_level, pos20),
            (prop_instance_animate_to_position, ":instance_no", pos20, 80),
            (copy_position,pos52,pos20),
            (call_script, "script_cf_burst_pos52_magic_death_cloud_2", ":shooter"),
          (else_try),  
            (scene_prop_fade_out, ":instance_no"),
          (try_end),
        (try_end),
        
        (scene_prop_get_num_instances, ":num", "spr_dummy_Frost_cloud"),
        (try_for_range_backwards, ":cur_dummy", 0, ":num"),
          (scene_prop_get_instance, ":instance_no", "spr_dummy_Frost_cloud", ":cur_dummy"),
          (prop_instance_is_valid, ":instance_no"),
          (scene_prop_get_slot, ":shooter", ":instance_no", scene_prop_owner),
          (scene_prop_get_slot, ":old_time", ":instance_no", scene_prop_spawn_time),
          (store_mission_timer_a, ":cur_time"),
          (try_begin),
            (agent_is_alive,":shooter"),
            (agent_is_human,":shooter"),
            (ge, ":old_time", ":cur_time"),
            (prop_instance_get_position, pos20, ":instance_no"),
            (store_random_in_range, ":posx", -2,3),
            (store_random_in_range, ":posy", -2,3),
            (val_mul,":posx",100),
            (val_mul,":posy",100),
            (position_move_x,pos20,":posx"),
            (position_move_y,pos20,":posy"),
            (position_set_z_to_ground_level, pos20),
            (prop_instance_animate_to_position, ":instance_no", pos20, 80),
            (copy_position,pos52,pos20),
            (call_script, "script_cf_burst_pos52_magic_Frost_cloudr", ":shooter"),
          (else_try),  
            (scene_prop_fade_out, ":instance_no"),
          (try_end),
        (try_end),
     ])

vortices_magic_trigger_2 =   (
      1.0, 0, 0, [],
      [
        (store_mission_timer_a, ":cur_time"),
        
        (try_for_agents, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (agent_is_active, ":agent_no"),
          (agent_is_alive, ":agent_no"),
        
          (agent_get_slot, ":instance_no", ":agent_no", slot_agent_vortice),
          (try_begin),
            (gt,":instance_no",0),
            (prop_instance_is_valid, ":instance_no"),
            (scene_prop_get_slot, ":old_time", ":instance_no", scene_prop_spawn_time),
            (try_begin),
              (ge, ":old_time", ":cur_time"),
              (prop_instance_get_scene_prop_kind, ":scene_prop_kind", ":instance_no"),
              (try_begin),
                (eq, ":scene_prop_kind", "spr_dummy_lightning_burst"),
                (prop_instance_get_position, pos20, ":instance_no"),
                (store_random_in_range, ":posx", -2,3),
                (store_random_in_range, ":posy", -2,3),
                (val_mul,":posx",100),
                (val_mul,":posy",100),
                (position_move_x,pos20,":posx"),
                (position_move_y,pos20,":posy"),
                (position_set_z_to_ground_level, pos20),
                (prop_instance_animate_to_position, ":instance_no", pos20, 80),
                (copy_position,pos52,pos20),
                (call_script, "script_cf_burst_pos52_magic_lightningball", ":agent_no"),
              (try_end),
            (else_try),  
              (scene_prop_fade_out, ":instance_no"),
            (try_end),
          (try_end),
        (try_end),
     ])

init_forcefield_on_back =(
  0.3, 0, 0, [(eq, "$g_weapon_fire_particle", 0),],
    [
    (get_player_agent_no, ":player_agent"),
    (try_for_agents, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (try_begin),
        (this_or_next|neg|agent_is_routed, ":agent_no"),
        (this_or_next|neg|agent_is_active, ":agent_no"),
        (neg|agent_is_alive, ":agent_no"),
        (agent_get_slot, ":cur_forcefield", ":agent_no", slot_agent_forcefield_id),
        (agent_get_slot, ":instance_no", ":agent_no", slot_agent_forcefield_instance_no),
        (scene_prop_get_instance, ":cur_forcefield_prop_instance", ":cur_forcefield", ":instance_no"),
        (prop_instance_get_position, pos0, ":cur_forcefield_prop_instance"),
        (position_move_z, pos0, -2000),
        (prop_instance_set_position, ":cur_forcefield_prop_instance", pos0),
        (prop_instance_receive_damage, ":cur_forcefield_prop_instance", ":player_agent", 100),
        (scene_prop_fade_out, ":cur_forcefield_prop_instance"),
      (try_end),
      
      (agent_is_alive, ":agent_no"),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      
      (try_begin),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_counter),
        (gt, ":timer", 0),
        (troop_get_slot, ":special", ":troop_no", slot_troop_special_ability),
        (this_or_next|eq,":special",stoneskin),
        (eq,":special", holy_light),
        (assign, ":cur_forcefield", "spr_propspell_forcefield2"),
      (else_try),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_passiv_counter),
        (gt, ":timer", 0),
        (troop_get_slot, ":special", ":troop_no", slot_troop_special_ability_passive),
        (try_begin),
          (eq,":special", revelation),
          (assign, ":cur_forcefield", "spr_propspell_forcefield2"),
        (else_try),
          (eq,":special", bubble_dreams),
          (assign, ":cur_forcefield", "spr_propspell_forcefield1"),
        (try_end),
      (else_try),
        (agent_get_slot, ":extra_hp", ":agent_no", slot_agent_extra_shield),
        (gt, ":extra_hp", 0),
        (assign, ":cur_forcefield", "spr_propspell_forcefield1"),
      (else_try),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_affect_time),
        (gt, ":timer", 0),
        (agent_get_slot, ":special", ":agent_no", slot_agent_special_ability_affect_type),
        (try_begin),
          (eq,":special", stoneskin),
          (assign, ":cur_forcefield", "spr_propspell_forcefield2"),
        (else_try),
          (this_or_next|eq,":special", grasp),
          (eq,":special", entangle),
          (assign, ":cur_forcefield", "spr_propspell_vinecage"),
        (try_end),
      (else_try),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_debuff_affect_time),
        (gt, ":timer", 0),
        (agent_get_slot, ":special", ":agent_no", slot_agent_debuff_affect_type),
        (try_begin),
          (this_or_next|eq,":special","itm_magic_phantasmogoria"),
          (eq,":special", "itm_magic_net_of_amyntok"),
          (assign, ":cur_forcefield", "spr_propspell_netofamyntok"),
        (try_end),
      (else_try),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_buff_affect_time),
        (gt, ":timer", 0),
        (agent_get_slot, ":special", ":agent_no", slot_agent_buff_affect_type),
        (try_begin),
          (eq,":special", "itm_magic_flaming_sword_of_rhuin"),
          (assign, ":cur_forcefield", "spr_propspell_sword3"),
        (else_try),
          (eq,":special", "itm_magic_okkams_mindrazor"),
          (assign, ":cur_forcefield", "spr_propspell_sword2"),
        (else_try),
          (eq,":special", "itm_magic_frostblade"),
          (assign, ":cur_forcefield", "spr_propspell_sword1"),
        (else_try),
          (eq,":special", "itm_magic_cascading_fire_cloak"),
          (assign, ":cur_forcefield", "spr_propspell_forcefield3"),
        (else_try),
          (eq,":special", "itm_magic_wyssans_wildform"),
          (assign, ":cur_forcefield", "spr_propspell_forcefield5"),
        (else_try),
          (eq,":special", "itm_magic_panns_impenetrable_belt"),
          (assign, ":cur_forcefield", "spr_propspell_forcefield5"),
        (else_try),
          (eq,":special", "itm_magic_shield_of_cold"),
          (assign, ":cur_forcefield", "spr_propspell_forcefield1"),
        (else_try),
          (eq,":special", "itm_magic_flesh_to_stone"),
          (assign, ":cur_forcefield", "spr_propspell_forcefield4"),
        (try_end),
      (else_try),
        (assign, ":cur_forcefield", -1),
      (try_end),

      (agent_get_attached_scene_prop, ":attached_forcefield", ":agent_no"),
      (try_begin),
        (gt, ":attached_forcefield", -1),
        (agent_get_slot, ":cur_forcefield_old", ":agent_no", slot_agent_forcefield_id),
        (this_or_next|neq, ":cur_forcefield", ":cur_forcefield_old"),
        (eq, ":cur_forcefield", -1),
        (agent_get_slot, ":cur_forcefield_old", ":agent_no", slot_agent_forcefield_id),
        (agent_get_slot, ":instance_no", ":agent_no", slot_agent_forcefield_instance_no),
        (scene_prop_get_instance, ":cur_forcefield_prop_instance", ":cur_forcefield_old", ":instance_no"),
        (prop_instance_get_position, pos0, ":cur_forcefield_prop_instance"),
        (position_move_z, pos0, -2000),
        (prop_instance_set_position, ":cur_forcefield_prop_instance", pos0),
        (prop_instance_receive_damage, ":cur_forcefield_prop_instance", ":agent_no", 100),
        (scene_prop_fade_out, ":cur_forcefield_prop_instance"),
        (agent_set_attached_scene_prop, ":agent_no", -1),
      (try_end),

      (gt, ":cur_forcefield", -1),
      (try_begin),
        (le, ":attached_forcefield", -1),
        (scene_prop_get_num_instances, ":instance_no", ":cur_forcefield"),
        (spawn_scene_prop, ":cur_forcefield"),
        (agent_set_slot, ":agent_no", slot_agent_forcefield_id, ":cur_forcefield"),
        (agent_set_slot, ":agent_no", slot_agent_forcefield_instance_no, ":instance_no"),
        (scene_prop_get_instance, ":cur_forcefield_prop_instance", ":cur_forcefield", ":instance_no"),
        (scene_prop_set_slot, ":cur_forcefield_prop_instance", scene_prop_owner, ":agent_no"),
        (agent_set_attached_scene_prop, ":agent_no", ":cur_forcefield_prop_instance"),
        (agent_set_attached_scene_prop_x, ":agent_no", 0),
        (agent_set_attached_scene_prop_z, ":agent_no", 0),
      (else_try),
        (agent_get_slot, ":cur_forcefield", ":agent_no", slot_agent_forcefield_id),
        (agent_get_slot, ":instance_no", ":agent_no", slot_agent_forcefield_instance_no),
        (scene_prop_get_instance, ":cur_forcefield_prop_instance", ":cur_forcefield", ":instance_no"),
        (agent_set_attached_scene_prop, ":agent_no", ":cur_forcefield_prop_instance"),
        (agent_set_attached_scene_prop_x, ":agent_no", 0),
        (agent_set_attached_scene_prop_z, ":agent_no", 0),
      (try_end),
    (try_end),
    
        (try_for_prop_instances, ":instance_no"),
          (prop_instance_get_scene_prop_kind, ":cur_forcefield", ":instance_no"),
          (try_begin),
            (is_between, ":cur_forcefield", "spr_propspell_forcefield1", "spr_spell_target_1"),
            (scene_prop_get_slot, ":agent_no", ":instance_no", scene_prop_owner),
            (this_or_next|neg|agent_is_routed, ":agent_no"),
            (this_or_next|neg|agent_is_active, ":agent_no"),
            (neg|agent_is_alive, ":agent_no"),
            (prop_instance_receive_damage, ":instance_no", ":player_agent", 100),
          (try_end),
        (try_end),
    
    ])

clear_forcefield_on_back =(
  ti_on_agent_killed_or_wounded, 0, 0, [],
    [
      (store_trigger_param_1, ":agent_no"),
      
      (agent_get_attached_scene_prop, ":attached_forcefield", ":agent_no"),
      (try_begin),
        (gt, ":attached_forcefield", -1),
        (agent_get_slot, ":cur_forcefield", ":agent_no", slot_agent_forcefield_id),
        (agent_get_slot, ":instance_no", ":agent_no", slot_agent_forcefield_instance_no),
        (scene_prop_get_instance, ":cur_forcefield_prop_instance", ":cur_forcefield", ":instance_no"),
        (prop_instance_get_position, pos0, ":cur_forcefield_prop_instance"),
        (position_move_z, pos0, -2000),
        (prop_instance_set_position, ":cur_forcefield_prop_instance", pos0),
        (prop_instance_receive_damage, ":cur_forcefield_prop_instance", ":agent_no", 100),
        (scene_prop_fade_out, ":cur_forcefield_prop_instance"),
        (agent_set_attached_scene_prop, ":agent_no", -1),
      (try_end),
    ])
    

magic_trigger_1  =(
    0, 0, 0, [], 
    [
  (get_player_agent_no,":player"),

  (assign, ":skill_rate", 25),

  (try_begin),
    (eq, "$g_game_difficulty",1),
    (assign, ":skill_rate", 25),
    (assign, ":extra_cooldown", 4),
  (else_try),  
    (eq, "$g_game_difficulty",2),
    (assign, ":skill_rate", 50),
    (assign, ":extra_cooldown", 3),
  (else_try),  
    (eq, "$g_game_difficulty",3),
    (assign, ":skill_rate", 75),
    (assign, ":extra_cooldown", 2),
  (else_try),  
    (eq, "$g_game_difficulty",4),
    (assign, ":skill_rate", 100),
    (assign, ":extra_cooldown", 1),
  (try_end),
  
  (try_begin),
    (eq, "$g_agent_use_shield_bash",0),
    (assign, ":skill_rate", 0),
  (try_end),
  
  (try_for_agents, ":agent_no"),
    (agent_is_human, ":agent_no"),
    (agent_is_active, ":agent_no"),
    (agent_is_alive, ":agent_no"),
    (agent_get_troop_id, ":troop_no", ":agent_no"),
        
    (agent_get_slot, ":cooldown", ":agent_no", slot_agent_shield_bash_timer),
    (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
    (try_begin),
      (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_magic_6"),
      (assign,":cooldown",0),
    (try_end),  
    (try_begin),
      (eq,":cooldown",0),
      (neq,":agent_no",":player"),
      
      (assign, ":choose_magic",-1),
        
      (try_begin),
        (eq,":choose_magic",-1),
        (store_random_in_range, ":r", 0, 100),
        (this_or_next|troop_is_hero, ":troop_no"),
        (gt, ":skill_rate", ":r"),
        (try_for_range, ":slot_spell", slot_troop_spell_1, slot_troop_spell_end),
            (eq, ":choose_magic", -1),
            (store_sub, ":offset", ":slot_spell", slot_troop_spell_1),
            
            (store_add, ":slot_spell_cd", slot_agent_spell_1_cooldown, ":offset"),

            (agent_get_slot, ":cooldown_2", ":agent_no", ":slot_spell_cd"),
            (eq, ":cooldown_2", 0),
            (troop_get_slot, ":magic_id", ":troop_no", ":slot_spell"),
            (item_get_slot, ":magic_cost", ":magic_id", slot_item_magic_cost),
            (gt, ":magic_id", 0),
            (item_get_slot, ":magic_type", ":magic_id", slot_item_magic_type),
            (neg|eq,":magic_type",special_ability),
            (neg|eq,":magic_type",special_ability_extra),
            (neg|eq,":magic_type",special_ability_passive),

            (gt, ":stamina", ":magic_cost"),
            (assign, ":choose_magic",":magic_id"),
            
            (agent_set_slot, ":agent_no", slot_agent_cur_magic, ":slot_spell"),
        (try_end),
          
        (try_begin),
          (store_random_in_range, ":r", 0, 121),
          #(this_or_next|troop_is_hero, ":troop_no"),
          (gt, ":skill_rate", ":r"),
          #(eq,":choose_magic",-1),
          (troop_get_slot, ":bash_id", ":troop_no", slot_troop_has_bash),
          (gt,":bash_id",-1),
          (assign, ":choose_magic",-2),
          
            (agent_get_attack_action, ":action", ":agent_no"),
            (agent_get_defend_action, ":action_2", ":agent_no"),
            (this_or_next|is_between, ":action", 1, 7), 
            (is_between, ":action_2", 1, 3), 
          
          (try_begin),
            (item_slot_eq, ":bash_id", slot_item_magic_type, quick_spell),
            
            (item_get_slot, ":magic_cost", ":bash_id", slot_item_magic_cost),
            (ge, ":stamina", ":magic_cost"),
            (agent_set_animation, ":agent_no", "anim_shoot_lefthand",1),  
            (call_script, "script_cf_magic_cast_trigger", ":agent_no", ":bash_id"),
            (val_sub, ":stamina", ":magic_cost"),
            (agent_play_sound, ":agent_no", "snd_spell_cast"),
            (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (item_get_slot, ":magic_cooldown", ":bash_id", slot_item_magic_cooldown),
            (val_add, ":magic_cooldown", ":extra_cooldown"),
            (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, ":magic_cooldown"),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_magic_5"),
              (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, 1),
            (try_end),  
          (else_try),
            (item_slot_eq, ":bash_id", slot_item_magic_type, bash),
            (item_get_slot, ":magic_cost", ":bash_id", slot_item_magic_cost),
            (ge, ":stamina", ":magic_cost"),
            (val_sub, ":stamina", ":magic_cost"),
            (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (call_script, "script_cf_agent_use_bash", ":agent_no", 1),
            (val_add, ":extra_cooldown", 3),
            (gt,":extra_cooldown",":cooldown"),
            (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, ":extra_cooldown"),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_magic_5"),
              (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, 1),
            (try_end),  
          (try_end),
        (try_end),
          
        (try_begin),
          (eq,":choose_magic",-1),
          (val_add, ":extra_cooldown", 3),
          (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, ":extra_cooldown"),
        (else_try),  
          (gt, ":choose_magic", -1),
          (item_get_slot, ":magic_type", ":choose_magic", slot_item_magic_type),
          (item_get_slot, ":magic_cost", ":choose_magic", slot_item_magic_cost),
          (item_get_slot, ":magic_cooldown", ":choose_magic", slot_item_magic_cooldown),
          #(item_get_slot, ":cast_time", ":choose_magic", slot_item_magic_cast_time),

          (assign, ":slot_spell_cd",slot_agent_spell_1_cooldown),
          (try_begin),
            (assign, ":cur_magic_slot",-1),
            (try_for_range, ":slot_spell", slot_troop_spell_1, slot_troop_spell_end),
              (eq, ":cur_magic_slot", -1),
              (troop_get_slot, ":magic_id", ":troop_no", ":slot_spell"),
              (eq, ":magic_id", ":choose_magic"),
              (assign, ":cur_magic_slot", ":slot_spell"),
            (try_end),
            (store_sub, ":offset", ":cur_magic_slot", slot_troop_spell_1),
            (store_add, ":slot_spell_cd", slot_agent_spell_1_cooldown, ":offset"),
          (try_end),
          (agent_get_slot, ":cooldown_2", ":agent_no", ":slot_spell_cd"),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_magic_6"),
            (neq,":magic_type",voice),
            (val_add,":magic_cost",5),
            (assign,":cooldown_2",0),
          (try_end),  
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_magic_1"),
            (val_sub,":magic_cooldown",5),
            (val_clamp,":magic_cooldown",1,31),
          (try_end),  
          (try_begin),
            (eq,":magic_type",quick_spell),
            (eq,":cooldown_2",0),

            (agent_get_wielded_item, ":weapon", ":agent_no", 0),
            (gt,":weapon",0),
            (item_has_property, ":weapon", itp_is_magic_staff),
            (agent_get_attack_action, ":action", ":agent_no"),
            (this_or_next|eq, ":action", 2), #readying_attack.
            (eq, ":action", 1), #readying_attack.
            (ge, ":stamina", ":magic_cost"),
            (call_script, "script_cf_magic_cast_trigger", ":agent_no", ":choose_magic"),
            (val_sub, ":stamina", ":magic_cost"),
            (agent_play_sound, ":agent_no", "snd_spell_cast"),
            (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (agent_set_slot, ":agent_no", ":slot_spell_cd", ":magic_cooldown"),
            (val_add, ":extra_cooldown", 3),
            (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, ":extra_cooldown"),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_magic_5"),
              (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, 1),
            (try_end),  
          (else_try),
            (eq,":magic_type",buff),
            (eq,":cooldown_2",0),
            
            (ge, ":stamina", ":magic_cost"),
            (call_script, "script_cf_magic_buff_trigger", ":agent_no", ":choose_magic"),
            (val_sub, ":stamina", ":magic_cost"),
            (agent_play_sound, ":agent_no", "snd_spell_cast"),
            (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (agent_set_slot, ":agent_no", ":slot_spell_cd", ":magic_cooldown"),
            (val_add, ":extra_cooldown", 3),
            (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, ":extra_cooldown"),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_magic_5"),
              (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, 1),
            (try_end),  
          (else_try),
            (eq,":magic_type",spell),
            (eq,":cooldown_2",0),
            
            (agent_get_wielded_item, ":weapon", ":agent_no", 0),
            (gt,":weapon",0),
            (item_has_property, ":weapon", itp_is_magic_staff),
            (agent_get_attack_action, ":action", ":agent_no"),
            (this_or_next|eq, ":action", 2), #readying_attack.
            (eq, ":action", 1), #readying_attack.
            
            (ge, ":stamina", ":magic_cost"),
            (call_script, "script_cf_magic_cast_trigger_2", ":agent_no", ":choose_magic"),
            (val_sub, ":stamina", ":magic_cost"),
            (agent_play_sound, ":agent_no", "snd_spell_cast"),
            (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (agent_set_slot, ":agent_no", ":slot_spell_cd", ":magic_cooldown"),
            (val_add, ":extra_cooldown", 3),
            (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, ":extra_cooldown"),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_magic_5"),
              (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, 1),
            (try_end),  
          (else_try),
            (eq,":magic_type",voice),
            (eq,":cooldown_2",0),
            (agent_get_attack_action, ":action", ":agent_no"),
            (eq,":action", 1),#readying_attack
            (call_script, "script_cf_agent_dragon_voice", ":agent_no", ":choose_magic"),
            (agent_set_slot, ":agent_no", ":slot_spell_cd", ":magic_cooldown"),
            (val_add, ":extra_cooldown", 3),
            (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, ":extra_cooldown"),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_magic_5"),
              (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, 1),
            (try_end),  
          (else_try),
            (eq,":magic_type",bash),
            (eq,":cooldown_2",0),
            (agent_get_attack_action, ":action", ":agent_no"),
            (agent_get_defend_action, ":action_2", ":agent_no"),
            (this_or_next|is_between, ":action", 1, 7), 
            (is_between, ":action_2", 1, 3), 
            
            (ge, ":stamina", ":magic_cost"),
            (call_script, "script_cf_agent_use_bash", ":agent_no", 2),
            (val_sub, ":stamina", ":magic_cost"),
            (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (agent_set_slot, ":agent_no", ":slot_spell_cd", ":magic_cooldown"),
            (agent_get_slot, ":cooldown", ":agent_no", slot_agent_shield_bash_timer),
            (val_add, ":extra_cooldown", 3),
            (gt,":extra_cooldown",":cooldown"),
            (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, ":extra_cooldown"),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_magic_5"),
              (agent_set_slot, ":agent_no", slot_agent_shield_bash_timer, 1),
            (try_end),  
          (try_end),
        (try_end),
      (try_end),
    (try_end),
  (try_end),
          
])                  

magic_trigger_player  =(
    0, 0, 0, [], 
    [
    (get_player_agent_no,":player"),
    (agent_is_alive,":player"),
    (agent_get_troop_id, ":player_no", ":player"),
    
    
    (agent_get_slot, ":cooldown", ":player", slot_agent_shield_bash_timer),
    
    (store_current_scene,":current_scene"),
    (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_walls"),
    
    (agent_get_slot, ":cur_magic_slot", ":player", slot_agent_cur_magic),
    (try_begin),
      (neg|is_between,":cur_magic_slot",slot_troop_spell_1, slot_troop_spell_end),
      (try_for_range, ":slot_spell", slot_troop_spell_1, slot_troop_spell_end),
        (neg|is_between,":cur_magic_slot",slot_troop_spell_1, slot_troop_spell_end),
        (troop_get_slot, ":magic_id", ":player_no", ":slot_spell"),
        (ge, ":magic_id", 0),
        (assign, ":cur_magic_slot", ":slot_spell"),
      (try_end),
      (is_between,":cur_magic_slot",slot_troop_spell_1, slot_troop_spell_end),
      (agent_set_slot, ":player", slot_agent_cur_magic, ":cur_magic_slot"),
    (try_end),
    
    (try_begin),
        (key_clicked, "$key_special_7"),
        (try_begin),
          (eq, ":cur_magic_slot", slot_troop_spell_1),
          (assign, ":cur_magic_slot", slot_troop_spell_end),
        (try_end),
        (store_add, ":new_magic_slot", ":cur_magic_slot", -1),
        (agent_set_slot, ":player", slot_agent_cur_magic, ":new_magic_slot"),
    (else_try),
        (key_clicked, "$key_special_8"),
        (store_add, ":new_magic_slot", ":cur_magic_slot", 1),
        (try_begin),
          (eq, ":new_magic_slot", slot_troop_spell_end),
          (assign, ":new_magic_slot", slot_troop_spell_1),
        (try_end),
        (agent_set_slot, ":player", slot_agent_cur_magic, ":new_magic_slot"),
    (try_end),
    
    (try_begin),
      (call_script, "script_cf_agent_has_skill", ":player", "itm_perk_magic_6"),
      (assign,":cooldown",0),
    (try_end),  
    
    (try_begin),
      (eq,":cooldown",0),
      (agent_get_slot, ":cur_magic_slot", ":player", slot_agent_cur_magic),
      (gt,":cur_magic_slot",0),
      (troop_get_slot, ":choose_magic", ":player_no", ":cur_magic_slot"),
      (gt,":choose_magic",0),
      (item_get_slot, ":magic_type", ":choose_magic", slot_item_magic_type),
      (item_get_slot, ":magic_cost", ":choose_magic", slot_item_magic_cost),
      (item_get_slot, ":magic_cooldown", ":choose_magic", slot_item_magic_cooldown),
      #(item_get_slot, ":cast_time", ":choose_magic", slot_item_magic_cast_time),

      (store_sub, ":offset", ":cur_magic_slot", slot_troop_spell_1),
      (store_add, ":slot_spell_cd", slot_agent_spell_1_cooldown, ":offset"),
      (agent_get_slot, ":cooldown_2", ":player", ":slot_spell_cd"),

      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":player", "itm_perk_magic_6"),
        (neq,":magic_type",voice),
        (val_add,":magic_cost",5),
        (assign,":cooldown_2",0),
      (try_end),  
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":player", "itm_perk_magic_1"),
        (val_sub,":magic_cooldown",5),
        (val_clamp,":magic_cooldown",1,31),
      (try_end),  

      (try_begin),
        (gt,":cooldown_2",0),
        #(this_or_next|key_is_down, "$key_special_6"),
        (key_clicked, "$key_special_6"),
        (assign, reg50, ":cooldown"),
        (display_message, "@magic cooldown ({reg50} seconds)."),
      (else_try),
        (key_clicked, "$key_special_6"),
        (eq,":magic_type",voice),
        (eq,":cooldown_2",0),
        (call_script, "script_cf_agent_dragon_voice", ":player", ":choose_magic"),

        (gt, ":slot_spell_cd", 0),
        (agent_set_slot, ":player", ":slot_spell_cd", ":magic_cooldown"),
        (agent_set_slot, ":player", slot_agent_shield_bash_timer, 5),
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":player", "itm_perk_magic_5"),
          (agent_set_slot, ":player", slot_agent_shield_bash_timer, 1),
        (try_end),  
      (else_try),
        (game_key_is_down, gk_attack),
        (this_or_next|game_key_is_down,gk_defend),
        (game_key_clicked,gk_defend),
        (eq,1,0),
        (eq,":cooldown_2",0),
        (agent_get_wielded_item, ":weapon", ":player", 0),
        (gt,":weapon",0),
        (item_has_property, ":weapon", itp_is_magic_staff),
        (gt, ":slot_spell_cd", 0),
        (try_begin),
          (this_or_next|eq,":magic_type",quick_spell),
          (this_or_next|eq,":magic_type",buff),
          (eq,":magic_type",spell),
          (agent_get_slot, ":stamina", ":player", slot_agent_mana),
          (ge, ":stamina", ":magic_cost"),
          (call_script, "script_cf_magic_cast_trigger", ":player", ":choose_magic"),
          (val_sub, ":stamina", ":magic_cost"),
          (agent_set_slot, ":player", ":slot_spell_cd", ":magic_cooldown"),
          (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
          (agent_play_sound, ":player", "snd_spell_cast"),
          (agent_set_slot, ":player", slot_agent_shield_bash_timer, 5),
          (eq,":magic_type",quick_spell),
          (agent_set_slot, ":player", slot_agent_shield_bash_timer, 2),
        (try_end),
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":player", "itm_perk_magic_5"),
          (agent_set_slot, ":player", slot_agent_shield_bash_timer, 1),
        (try_end),  
      (else_try),
        (key_clicked, "$key_special_6"),
        (eq,":magic_type",quick_spell),
        (eq,":cooldown_2",0),
        (agent_get_wielded_item, ":weapon", ":player", 0),
        (gt,":weapon",0),
        (try_begin),
          (neg|item_has_property, ":weapon", itp_is_magic_staff),
          (display_message, "@cast magic need magic_staff"),
        (try_end),
        (item_has_property, ":weapon", itp_is_magic_staff),
        
        (agent_get_slot, ":stamina", ":player", slot_agent_mana),
        (ge, ":stamina", ":magic_cost"),
        (call_script, "script_cf_magic_cast_trigger", ":player", ":choose_magic"),
        (val_sub, ":stamina", ":magic_cost"),
        (agent_set_slot, ":player", ":slot_spell_cd", ":magic_cooldown"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
        (agent_play_sound, ":player", "snd_spell_cast"),
        (agent_set_slot, ":player", slot_agent_shield_bash_timer, 2),
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":player", "itm_perk_magic_5"),
          (agent_set_slot, ":player", slot_agent_shield_bash_timer, 1),
        (try_end),  
      (else_try),
        (key_clicked, "$key_special_6"),
        (eq,":magic_type",buff),
        (eq,":cooldown_2",0),
        (agent_get_slot, ":stamina", ":player", slot_agent_mana),
        (ge, ":stamina", ":magic_cost"),
        (call_script, "script_cf_magic_buff_trigger", ":player", ":choose_magic",),
        (val_sub, ":stamina", ":magic_cost"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
        (agent_play_sound, ":player", "snd_spell_cast"),
        (agent_set_slot, ":player", ":slot_spell_cd", ":magic_cooldown"),
        (agent_set_slot, ":player", slot_agent_shield_bash_timer, 1),
      (else_try),
        (key_clicked, "$key_special_6"),
        (eq,":magic_type",spell),
        (eq,":cooldown_2",0),
        (agent_get_wielded_item, ":weapon", ":player", 0),
        (gt,":weapon",0),
        (item_has_property, ":weapon", itp_is_magic_staff),
        (agent_get_slot, ":stamina", ":player", slot_agent_mana),
        (ge, ":stamina", ":magic_cost"),
        (call_script, "script_cf_magic_cast_trigger_2", ":player", ":choose_magic",),
        (val_sub, ":stamina", ":magic_cost"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
        (agent_play_sound, ":player", "snd_spell_cast"),
        (gt, ":slot_spell_cd", 0),
        (agent_set_slot, ":player", ":slot_spell_cd", ":magic_cooldown"),
        (agent_set_slot, ":player", slot_agent_shield_bash_timer, 5),
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":player", "itm_perk_magic_5"),
          (agent_set_slot, ":player", slot_agent_shield_bash_timer, 1),
        (try_end),  
      (else_try),
        (key_clicked, "$key_special_6"),
        (eq,":magic_type",bash),
        (eq,":cooldown_2",0),
        (call_script, "script_cf_agent_use_bash", ":player", 2),
        (gt, ":slot_spell_cd", 0),
        (agent_set_slot, ":player", ":slot_spell_cd", ":magic_cooldown"),
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":player", "itm_perk_magic_5"),
          (agent_set_slot, ":player", slot_agent_shield_bash_timer, 1),
        (try_end),  
      (else_try),
        #(this_or_next|key_is_down, "$key_special_6"),
        (key_clicked, "$key_special_6"),
        (assign, reg1, ":stamina"),
        (display_message, "@not enough mana^mana: {reg1}/100"),    
      (try_end),
    (try_end),
])

## CC
custom_commander_check_player_can_join_battle = (
  0, 0, ti_once,
  [
    (neq,"$g_player_troop","trp_player"),
    (store_troop_health, "$g_player_begin_hp", "trp_player"),
    (neg|troop_is_wounded, "trp_player"),
    (get_player_agent_no, ":player_agent"),
    (ge, ":player_agent", 0),
    (agent_get_team, ":player_team", ":player_agent"),
    (agent_get_position, pos49, ":player_agent"),
    (position_move_x, pos49, -100),
    (set_spawn_position, pos49),
    (spawn_agent,"trp_player"),
    (agent_set_team, reg0, ":player_team"),
  ], [])

custom_commander_check_player_can_join_battle_dismounted = (
  0, 0, ti_once,
  [
    (neq,"$g_player_troop","trp_player"),
    (store_troop_health, "$g_player_begin_hp", "trp_player"),
    (neg|troop_is_wounded, "trp_player"),
    (get_player_agent_no, ":player_agent"),
    (ge, ":player_agent", 0),
    (agent_get_team, ":player_team", ":player_agent"),
    (agent_get_position, pos49, ":player_agent"),
    (position_move_x, pos49, -100),
    (set_spawn_position, pos49),
    (troop_get_inventory_slot, ":player_horse_item", "trp_player", ek_horse),
    (troop_get_inventory_slot_modifier, ":player_horse_item_modifier", "trp_player", ek_horse),
    (troop_set_inventory_slot, "trp_player", ek_horse, -1),
    (spawn_agent,"trp_player"),
    (agent_set_team, reg0, ":player_team"),
    (troop_set_inventory_slot, "trp_player", ek_horse, ":player_horse_item"),
    (troop_set_inventory_slot_modifier, "trp_player", ek_horse, ":player_horse_item_modifier"),
  ], [])
  
custom_commander_camera = (
  0, 0, 0, [(neg|main_hero_fallen)], 
  [
    (get_player_agent_no, ":player_agent"),
    (agent_get_look_position, pos1, ":player_agent"),
    (position_move_z, pos1, "$g_camera_z"),
    (position_move_y, pos1, "$g_camera_y"),
    (agent_get_horse, ":horse_agent", ":player_agent"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (position_move_z, pos1, 90),
    (try_end),
    (mission_cam_set_position, pos1),
    (try_begin),
      (key_is_down, "$g_camera_up"),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_z", 5),
    (else_try),
      (key_is_down, "$g_camera_down"),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_z", 5),
    (else_try),
      (key_is_down, "$g_camera_left"),
      (mission_cam_set_mode, 1),
      (val_add, "$g_camera_y", 5),
    (else_try),
      (key_is_down, "$g_camera_right"),
      (mission_cam_set_mode, 1),
      (val_sub, "$g_camera_y", 5),
    (try_end),
    (try_begin),
      (this_or_next|game_key_clicked, gk_view_char),
      (this_or_next|game_key_clicked, gk_zoom),
      (game_key_clicked, gk_cam_toggle),
      (mission_cam_set_mode, 0),
    (try_end),
  ])
  
custom_commander_agent_refill_ammo = (
  0, 180, 0, [],
  [
  (get_player_agent_no, ":player_agent"),
  (assign, ":has_refilling", 0),
  (try_for_agents, ":agent_no"),
    #(agent_get_troop_id, ":troop_no", ":agent_no"),
    (agent_is_alive, ":agent_no"),
    (agent_is_human, ":agent_no"),
    #(agent_get_ammo, ":agent_ammo", ":agent_no"),
    (assign, ":has_range", 0),

    (try_for_range, ":cur_slot", 0, 4),
      (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
      (ge, ":cur_weapon", 0),
      (eq, ":has_range", 0),
      (item_get_type, ":i_type", ":cur_weapon"),
      (this_or_next|is_between, ":i_type", itp_type_bow,itp_type_goods),
      (is_between, ":i_type", itp_type_pistol,itp_type_bullets),# not ranger weapon
      (assign, ":has_range", 1),
    (try_end),
    
    (eq, ":has_range", 1),

    (call_script, "script_get_agent_refill_ammo_times", ":agent_no"),
    (assign, ":refill_ammo_times", reg0),
    (try_begin),
      (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_bow_3"),
      (val_add,":refill_ammo_times",2),
    (try_end),  
    
    (agent_get_slot,":times",":agent_no",slot_agent_refill_ammo_times),
    (ge,":refill_ammo_times", ":times"),
    #(le, ":agent_ammo", 1),
    (try_begin),
      (eq, ":has_refilling", 0),
      (display_message, "@refilling ammo", 0x00ff00),
      (assign, ":has_refilling", 1),
    (try_end),  
    (agent_refill_ammo, ":agent_no"),
    (val_add,":times",1),
    
    
    (agent_set_slot, ":agent_no", slot_agent_refill_ammo_times, ":times"),
    (eq, ":agent_no", ":player_agent"),

    (display_message, "@your ammo refilling", 0x00ff00),
  (try_end),
  ])

custom_commander_cheat_refill_ammo = (
  0, 0, 0, [
    (get_player_agent_no, ":player_agent"),
    (gt, ":player_agent", -1),
  ],
  [
  (get_player_agent_no, ":player_agent"),
  (gt, ":player_agent", -1),
  (try_begin),
    #(neg|key_is_down, "$key_special_3"),
    (key_clicked, "$key_special_3"),
    (agent_get_slot, ":is_charging", ":player_agent", slot_agent_horse_is_charging),
    (val_add, ":is_charging", 1),
    (val_mod, ":is_charging", 2),
    (agent_set_slot, ":player_agent", slot_agent_horse_is_charging, ":is_charging"),
    (try_begin),
      (eq, "$g_report_shot_distance", 1),
      (eq, ":is_charging", 1),
      (display_message, "@start charging!", 0xFF0000),
    (else_try),
      (eq, "$g_report_shot_distance", 1),
      (eq, ":is_charging", 0),
      (display_message, "@Stop charging!", 0xFF0000),
    (try_end),
  (try_end),
  
  (try_begin),
    #(neg|key_is_down, "$key_special_0"),
    (key_clicked, "$key_special_0"),
    (agent_get_slot, ":magic_attack", ":player_agent", slot_agent_player_braced),
    (val_add, ":magic_attack", 1),
    (val_mod, ":magic_attack", 2),
    (agent_set_slot, ":player_agent", slot_agent_player_braced, ":magic_attack"),
    (try_begin),
      (eq, "$g_report_shot_distance", 1),
      (eq, ":magic_attack", 1),
      (display_message, "@start magic_attack!", 0xFF0000),
    (else_try),
      (eq, "$g_report_shot_distance", 1),
      (eq, ":magic_attack", 0),
      (display_message, "@Stop magic_attack!", 0xFF0000),
    (try_end),
  (try_end),
  
           (try_begin),
             (get_player_agent_no,":player_agent"),
             (agent_is_alive,":player_agent"),
             (agent_get_horse, ":horse_no", ":player_agent"),
             (le, ":horse_no", -1),
             #(agent_get_slot, ":cur_animation", ":player_agent", slot_player_before_action),
             (agent_slot_eq, ":player_agent", slot_agent_shield_bash_timer, 0),
             (assign, ":can_roll", 0),
             (assign, ":roll", 0),
             (try_begin),
                 (call_script, "script_cf_agent_has_skill", ":player_agent", bash_roll),
                 (assign, ":can_roll", 1),
             (try_end),
             (try_begin),
                 (call_script, "script_cf_agent_has_skill", ":player_agent", bash_swift_strike),
                 (assign, ":can_roll", 2),
             (try_end),
             (gt, ":can_roll", 0),
             (try_begin),
               (game_key_is_down, gk_move_forward), 
               (game_key_clicked, gk_jump),
               (assign, ":roll", 1),
               (try_begin),
                 (eq, ":can_roll", 2),
                 (agent_set_animation,":player_agent","anim_dash_forward"),
               (else_try),
                 (agent_set_animation,":player_agent","anim_fangun_forward"),
                 (play_sound, "snd_tc_fangun"),
               (try_end),
               (agent_set_slot, ":player_agent", slot_agent_shield_bash_timer, 1),
             (else_try),
               (game_key_is_down, gk_move_backward), 
               (game_key_clicked, gk_jump),
               (assign, ":roll", 1),
               (try_begin),
                 (eq, ":can_roll", 2),
                 (agent_set_animation,":player_agent","anim_dash_backward"),
               (else_try),
                 (agent_set_animation,":player_agent","anim_fangun_backward"),
                 (play_sound, "snd_tc_fangun"),
               (try_end),
               (agent_set_slot, ":player_agent", slot_agent_shield_bash_timer, 1),
             (else_try),
               (game_key_is_down, gk_move_left), 
               (game_key_clicked, gk_jump),
               (assign, ":roll", 1),
               (try_begin),
                 (eq, ":can_roll", 2),
                 (agent_set_animation,":player_agent","anim_dash_left"),
               (else_try),
                 (agent_set_animation,":player_agent","anim_fangun_left"),
                 (play_sound, "snd_tc_fangun"),
               (try_end),
               (agent_set_slot, ":player_agent", slot_agent_shield_bash_timer, 1),
             (else_try),
               (game_key_is_down, gk_move_right), 
               (game_key_clicked, gk_jump),
               (assign, ":roll", 1),
               (try_begin),
                 (eq, ":can_roll", 2),
                 (agent_set_animation,":player_agent","anim_dash_right"),
               (else_try),
                 (agent_set_animation,":player_agent","anim_fangun_right"),
                 (play_sound, "snd_tc_fangun"),
               (try_end),
               (agent_set_slot, ":player_agent", slot_agent_shield_bash_timer, 1),
             (try_end),
             
             (try_begin),
               (eq, ":roll", 1),
               (agent_get_wielded_item, ":wielded", ":player_agent", 0),
               (ge, ":wielded", 0),
               (item_get_type, ":type", ":wielded"),
               (try_begin),
                 (call_script, "script_cf_agent_has_skill", ":player_agent", "itm_perk_musket_2"),
                 (this_or_next|eq, ":type", itp_type_pistol),
                 (eq, ":type", itp_type_musket),
                 (agent_set_ammo,":player_agent",":wielded",6),
               (else_try),  
                 (call_script, "script_cf_agent_has_skill", ":player_agent", "itm_perk_crossbow_2"),
                 (eq, ":type", itp_type_crossbow),
                 (agent_set_ammo,":player_agent",":wielded",6),
               (try_end),
             (try_end),
             
           (try_end),
           
           (try_begin),
             (get_player_agent_no,":player_agent"),
             (agent_is_alive,":player_agent"),
             (agent_get_horse, ":horse_no", ":player_agent"),
             
             (assign, ":fly_agent", -1),
             (try_begin),
               (le, ":horse_no", -1),
               (assign, ":fly_agent", ":player_agent"),
             (else_try),
               (item_has_property, ":horse_no", itp_is_magic_staff),
               (assign, ":fly_agent", ":horse_no"),
             (try_end),
             (gt, ":fly_agent", -1),
                          
             (agent_get_slot, ":timer_2", ":player_agent", slot_agent_is_fly),
             (gt, ":timer_2", 0),
             (agent_set_no_dynamics, ":fly_agent", 1),
             (agent_get_position, pos12, ":fly_agent"),
             
             (agent_get_look_position,pos9,":player_agent"),
             (position_copy_rotation,pos12,pos9),
             (copy_position,pos13,pos12),
             
             (try_begin),
               (game_key_is_down, gk_move_forward), 
               (position_move_y,pos12,25),
             (else_try),
               (game_key_is_down, gk_move_backward), 
               (position_move_y,pos12,-25),
             (else_try),
               (game_key_is_down, gk_move_left), 
               (position_move_x,pos12,-25),
             (else_try),
               (game_key_is_down, gk_move_right), 
               (position_move_x,pos12,25),
             (else_try),
               (game_key_is_down, gk_jump), 
               (position_move_z,pos12,25),
             (else_try),
               (game_key_is_down, gk_crouch), 
               (position_move_z,pos12,-25),
             (try_end),
             (position_has_line_of_sight_to_position, pos13, pos12),
             (agent_set_position, ":fly_agent", pos12),
             (position_get_distance_to_ground_level, ":distance_to_ground", pos12),
             (try_begin),
               (lt, ":distance_to_ground", 0),
               (position_set_z_to_ground_level, pos12),
               (agent_set_no_dynamics, ":fly_agent", 0),
             (try_end),                
           (try_end),
             
  #(try_begin),
  #  (key_is_down, key_left_control),
  #  (try_begin),
  #    (key_clicked, key_a),
  #    (agent_refill_ammo, ":player_agent"),
  #    (agent_set_slot, ":player_agent", slot_agent_refill_ammo_times, 0),
  #  (else_try),
  #    (key_is_down, key_left_alt),
  #    (key_clicked, key_a),
  #    (try_for_agents, ":agent_no"),
  #      (agent_refill_ammo, ":agent_no"),
  #      (agent_set_slot, ":agent_no", slot_agent_refill_ammo_times, 0),
  #    (try_end),
  #  (else_try),
  #    (key_clicked, key_h),
  #    (agent_get_horse, ":horse_agent", ":player_agent"),
  #    (ge, ":horse_agent", 0),
  #    (agent_set_hit_points, ":horse_agent", 100),
  #  (else_try),
  #    (is_cheat_mode_enabled),
  #    (key_is_down, key_left_alt),
  #    (key_clicked, key_f4),
  #  
  #    (try_for_agents,":agent"),
  #      (agent_is_alive,":agent"),
  #      (agent_is_human,":agent"),
  #    
  #      (this_or_next|agent_is_ally,":player_agent"),
  #      (agent_is_ally,":agent"),
  #      (this_or_next|neg|agent_is_ally,":agent"),
  #      (neg|agent_is_ally,":player_agent"),
  #      (agent_set_hit_points,":agent",0, 1),
  #      (agent_deliver_damage_to_agent, ":player_agent", ":agent"),
  #    (try_end),
  #  (else_try),
  #    (is_cheat_mode_enabled),
  #    (neg|key_is_down, key_left_alt),
  #    (key_clicked, key_f4),
  #    (assign,":victim",-1),
  #    (try_for_agents,":agent"),
  #      (agent_is_alive,":agent"),
  #      (agent_is_human,":agent"),
  #      (eq,":victim",-1),
  #    
  #      (this_or_next|agent_is_ally,":player_agent"),
  #      (agent_is_ally,":agent"),
  #      (this_or_next|neg|agent_is_ally,":agent"),
  #      (neg|agent_is_ally,":player_agent"),
  #          
  #      (assign,":victim",":agent"),
  #    (try_end),
  #    (gt,":victim",-1),
  #    (agent_set_hit_points,":victim",0, 1),
  #    (agent_deliver_damage_to_agent, ":player_agent", ":victim"),
  #  (try_end),
  (neg|is_vanilla_warband),
  (key_clicked, key_caps_lock),
  (try_begin),
    (eq, "$game_paused", 1),
    (stop_time, 0),
    (assign, "$game_paused", 0),
  (else_try),
    (stop_time, 1),
    (assign, "$game_paused", 1),  
  (try_end),
  ])

set_player_target = (
  0.0, 0, 0, [
    #(this_or_next|game_key_is_down, game_key_is_down),
    #(key_is_down, key_left_shift),
    #(neg|game_key_clicked, gk_attack),
    #(neg|game_key_is_down, gk_attack),
  ],
  [
    (get_player_agent_no, ":player_agent"),
    (try_begin),
      (key_clicked, key_left_shift),
      (agent_get_look_position,pos23,":player_agent"),

      (assign, ":result", -1),
      (assign, ":min_distance", 10000),
      (try_for_agents, ":cur_agent"),
        (agent_is_alive, ":cur_agent"),
        (neg|eq, ":cur_agent", ":player_agent"),
        (agent_is_human, ":cur_agent"),
        
        (this_or_next|agent_is_ally,":cur_agent"),
        (agent_is_ally,":player_agent"),
        (this_or_next|neg|agent_is_ally,":player_agent"),
        (neg|agent_is_ally,":cur_agent"),
        
        (agent_get_position, pos2, ":cur_agent"),
        (position_move_z, pos2, 130),
        (neg|position_is_behind_position, pos2, pos23),
        (position_has_line_of_sight_to_position, pos2, pos23),
        (get_distance_between_positions, ":cur_distance", pos23, pos2),
        (neg|ge, ":cur_distance", ":min_distance"),
        (assign, ":min_distance", ":cur_distance"),
        (assign, ":result", ":cur_agent"),
      (try_end),
      (gt, ":result", -1),
      (agent_set_slot, ":player_agent", slot_agent_player_target, ":result"),   
    (try_end),
    

    (try_begin),
      (this_or_next|game_key_is_down, gk_attack),
      (key_is_down, key_left_shift),
      (agent_get_troop_id, ":cur_troop", ":player_agent"), 
      (agent_get_slot, ":cur_magic_slot", ":player_agent", slot_agent_cur_magic),
      (gt,":cur_magic_slot",0),
      (troop_get_slot, ":choose_magic", ":cur_troop", ":cur_magic_slot"),
      (gt,":choose_magic",0),
      
      (store_sub, ":offset", ":cur_magic_slot", slot_troop_spell_1),
      (store_add, ":slot_spell_cd", slot_agent_spell_1_cooldown, ":offset"),
      (agent_get_slot, ":cooldown_2", ":player_agent", ":slot_spell_cd"),
      (eq,":cooldown_2",0),
      (item_get_slot, ":magic_type", ":choose_magic", slot_item_magic_type),
      
      (agent_get_wielded_item, ":weapon", ":player_agent", 0),
      (gt,":weapon",0),
      (assign,":pass",0),
      (try_begin),
        (game_key_is_down, gk_attack),
        (item_has_property, ":weapon", itp_is_magic_staff),
        (this_or_next|eq,":magic_type",quick_spell),
        (this_or_next|eq,":magic_type",buff),
        (eq,":magic_type",spell),
        (assign,":pass",1),
      (else_try),
        (key_is_down, key_left_shift),
        (try_begin),
          (this_or_next|eq,":magic_type",quick_spell),
          (eq,":magic_type",spell),
          (item_has_property, ":weapon", itp_is_magic_staff),
          (assign,":pass",1),
        (else_try),
          (this_or_next|eq,":magic_type",voice),
          (eq,":magic_type",buff),
          (assign,":pass",1),
        (try_end),
      (try_end),
      (eq,":pass",1),
      (this_or_next|eq,":magic_type",voice),
      (this_or_next|eq,":magic_type",quick_spell),
      (this_or_next|eq,":magic_type",buff),
      (eq,":magic_type",spell),
      (store_skill_level, ":power", skl_magic_power, ":cur_troop"),
      (try_begin),
        (eq, ":choose_magic","itm_magic_penumbral_pendulum"),
        (agent_get_look_position,pos3,":player_agent"),
        (agent_get_position,pos4,":player_agent"),
        (position_copy_rotation,pos4,pos3),
      
        (assign,":damage_rage",150),
        (store_mul,":damage_rage_add",":power", 10),
        (val_add,":damage_rage",":damage_rage_add"),
      
        (try_for_range,":POSY",0,":power"),
          (copy_position,pos2,pos4),
          (val_mul,":POSY",100),
          (position_move_y,pos2,":POSY"),
          (val_div,":POSY",100),
          (position_set_z_to_ground_level, pos2),
          (position_move_z,pos2,100),
          
          (copy_position, pos1, pos2),
          (position_move_z, pos1, 120),
          (call_script, "script_shift_pos1_along_y_axis_to_ground", 100, 30000),
          
          (try_for_range,":o",0,12),
            (copy_position, pos3, pos1),
            (val_mul,":o",30),
            (position_rotate_z, pos3, ":o", 1),
            (position_move_y, pos3, ":damage_rage",0),
            (position_set_z_to_ground_level, pos3),
            (particle_system_burst, "psys_fat_arrow_red", pos3, 1),
          (try_end),
        (try_end),
      (else_try),
      
        (eq,":magic_type",voice),
        (assign,":voice_type",-1),
        (assign, ":type", ":choose_magic"),
        (try_begin),
          (eq, ":type", "itm_voice_cyclone"),
          (assign,":voice_type",2),
        (else_try),
          (eq, ":type", "itm_voice_unrelenting_force"),
          (assign,":voice_type",1),
        (else_try),
          (eq, ":type", "itm_voice_disarm"),
          (assign,":voice_type",1),
        (else_try),
          (eq, ":type", "itm_voice_dismaying_shout"),
          (assign,":voice_type",2),
        (else_try),
          (eq, ":type", "itm_voice_bend_will"),
          (assign,":voice_type",1),
        (else_try),
          (eq, ":type", "itm_voice_fire_breath"),
          (assign,":voice_type",1),
        (else_try),
          (eq, ":type", "itm_voice_frost_breath"),
          (assign,":voice_type",2),
        (else_try),
          (eq, ":type", "itm_voice_ice_form"),
          (assign,":voice_type",1),
        (else_try),
          (eq, ":type", "itm_voice_marked_for_death"),
          (assign,":voice_type",1),
        (else_try),
          (eq, ":type", "itm_voice_soul_tear"),
          (assign,":voice_type",1),
        (else_try),
          (eq, ":type", "itm_voice_drain_vitality"),
          (assign,":voice_type",2),
        (try_end),
        (gt,":voice_type",0),
        (try_begin),
          (eq, ":voice_type", 1),
          (agent_get_look_position,pos3,":player_agent"),
          (agent_get_position,pos4,":player_agent"),
          (position_copy_rotation,pos4,pos3),
          
          (assign,":end_cound",21),
          (try_for_range,":POSY",0,":end_cound"),
            (copy_position,pos2,pos4),
            (val_mul,":POSY",150),
            (position_move_y,pos2,":POSY"),
            (val_div,":POSY",150),
            (position_set_z_to_ground_level, pos2),
            (copy_position, pos1, pos2),
            (position_move_z, pos1, 120),
            (call_script, "script_shift_pos1_along_y_axis_to_ground", 100, 30000),
            (try_for_range,":o",0,12),
              (copy_position, pos8, pos1),
              (val_mul,":o",30),
              (position_rotate_z, pos8, ":o", 1),
              (position_move_y, pos8, 150,0),
              (position_set_z_to_ground_level, pos8),
              (particle_system_burst, "psys_fat_arrow_red", pos8, 1),
            (try_end),
            (copy_position,pos5,pos4),#pos7    pos5
            (copy_position,pos6,pos4),
            (copy_position,pos7,pos4),#pos6    pos4
            (position_move_z,pos5,150),
            (position_move_y,pos6,100),
            (position_move_y,pos7,100),
            (position_move_z,pos7,150),
            (try_begin),
              (neg|position_has_line_of_sight_to_position, pos6, pos5),
              #(neg|position_has_line_of_sight_to_position, pos7, pos5),
              (neg|position_has_line_of_sight_to_position, pos6, pos4),
              (assign,":end_cound",0),
            (try_end),
          (try_end),
        (else_try),
          (agent_get_look_position,pos3,":player_agent"),
          (agent_get_position,pos4,":player_agent"),
          (position_copy_rotation,pos4,pos3),
          (try_for_range,":POSY",0,11),
            (copy_position,pos2,pos4),
            (val_mul,":POSY",160),
            (position_move_y,pos2,":POSY"),
            (val_div,":POSY",160),
            (try_begin), 
              (eq,":POSY",0),
              (assign,":begin",0),
              (assign,":end",0),
            (else_try),
              (is_between,":POSY",1,3),
              (assign,":begin",0),
              (assign,":end",1),
            (else_try),
              (is_between,":POSY",3,5),
              (assign,":begin",-1),
              (assign,":end",2),
            (else_try),
              (is_between,":POSY",5,7),
              (assign,":begin",-2),
              (assign,":end",3),
            (else_try),
              (is_between,":POSY",7,9),
              (assign,":begin",-3),
              (assign,":end",4),
            (else_try),
              (is_between,":POSY",9,11),
              (assign,":begin",-4),
              (assign,":end",5),
            (try_end),
            (try_for_range,":POSX",":begin",":end"),
              (val_mul,":POSX",160),
              (position_move_x,pos2,":POSX"),
              (position_set_z_to_ground_level, pos2),
              
              (copy_position, pos1, pos2),
              (position_move_z, pos1, 120),
              (try_for_range,":o",0,12),
                (copy_position, pos8, pos1),
                (val_mul,":o",30),
                (position_rotate_z, pos8, ":o", 1),
                (position_move_y, pos8, 150,0),
                (position_set_z_to_ground_level, pos8),
                (particle_system_burst, "psys_fat_arrow_red", pos8, 1),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
      (else_try),
        (assign,":max_range",100),
        (assign,":range_add",0),
        (try_begin),
          (this_or_next|eq, ":choose_magic","itm_magic_walk_between_worlds"),
          (this_or_next|eq, ":choose_magic","itm_magic_infernal_gateway"),
          (this_or_next|eq, ":choose_magic","itm_magic_steed_of_shadows"),
          (this_or_next|eq, ":choose_magic","itm_magic_melkoths_mystifying_miasma"),
          (this_or_next|eq, ":choose_magic","itm_magic_entangling"),
          (this_or_next|eq, ":choose_magic", "itm_magic_transmutation_of_lead"),
          (this_or_next|eq, ":choose_magic", "itm_magic_wind_blast"),
          (this_or_next|eq, ":choose_magic", "itm_magic_net_of_amyntok"),
          (this_or_next|eq, ":choose_magic", "itm_magic_blinding_light"),
          (this_or_next|eq, ":choose_magic", "itm_magic_banishment"),
          (eq,":magic_type",buff),
          (store_mul,":range_add",":power", 100),
        (else_try),
          (this_or_next|eq, ":choose_magic","itm_magic_lightningball"),
          (eq, ":choose_magic", "itm_magic_lightning_burst"),
          (assign,":max_range",300),
          (store_mul,":range_add",":power", 40),
        (else_try),
          (this_or_next|eq, ":choose_magic","itm_magic_tzeentch_firestorm"),
          (this_or_next|eq, ":choose_magic","itm_magic_pink_fire_of_tzeentch"),
          (this_or_next|eq, ":choose_magic","itm_magic_death_cloud_dummy"),
          (this_or_next|eq, ":choose_magic","itm_magic_death_cloud"),
          (this_or_next|eq, ":choose_magic","itm_magic_paralysis_cloud"),
          (this_or_next|eq, ":choose_magic","itm_magic_chill_wind"),
          (this_or_next|eq, ":choose_magic","itm_magic_frost_cloud"),
          (this_or_next|eq, ":choose_magic","itm_magic_mana_tempest"),
          (this_or_next|eq, ":choose_magic","itm_magic_incediary_cloud_dummy"),
          (eq, ":choose_magic", "itm_magic_flame_storm"),
          (assign,":max_range",300),
          (store_mul,":range_add",":power", 40),
        (else_try),
          (eq, ":choose_magic", "itm_magic_comet_of_casandora"),
          (store_mul,":range_add",50, 30),
        (else_try),
          (this_or_next|eq, ":choose_magic","itm_magic_blizzard"),
          (eq, ":choose_magic", "itm_magic_apocalypse"),
          (store_mul,":range_add",50, 25),
        (else_try),
          (this_or_next|eq, ":choose_magic","itm_magic_arcane_orb"),
          (this_or_next|eq, ":choose_magic","itm_magic_miasma_of_pestilence"),
          (this_or_next|eq, ":choose_magic","itm_magic_glean_magic"),
          (this_or_next|eq, ":choose_magic","itm_magic_frozen_orb"),
          (this_or_next|eq, ":choose_magic","itm_magic_deadly_cold"),
          (this_or_next|eq, ":choose_magic","itm_magic_arcane_unforging"),
          (this_or_next|eq, ":choose_magic","itm_magic_soul_quench"),
          (this_or_next|eq, ":choose_magic","itm_magic_soul_leech"),
          (this_or_next|eq, ":choose_magic","itm_magic_word_of_pain"),
          (this_or_next|eq, ":choose_magic","itm_magic_bray_scream"),
          (this_or_next|eq, ":choose_magic","itm_magic_animal_mastery"),
          (this_or_next|eq, ":choose_magic", "itm_magic_plague_of_rust"),
          (this_or_next|eq, ":choose_magic", "itm_magic_pyroblast"),
          (this_or_next|eq, ":choose_magic", "itm_magic_fireball_2"),
          (eq, ":choose_magic", "itm_magic_fireball"),
          (assign,":max_range",200),
          (store_mul,":range_add",":power", 50),
        (else_try),
          (this_or_next|eq, ":choose_magic","itm_magic_arcane_orb"),
          (assign,":max_range",200),
          (store_mul,":range_add",":power", 30),
        (else_try),
          (this_or_next|eq, ":choose_magic", "itm_magic_black_hold_2"),
          (this_or_next|eq, ":choose_magic","itm_magic_oblivion"),
          (this_or_next|eq, ":choose_magic","itm_magic_pit_of_shades"),
          (assign,":max_range",200),
          (store_mul,":range_add",":power", 100),
        (else_try),
          (eq, ":choose_magic", "itm_magic_fire_ray"),
          (assign,":max_range",150),
          (store_mul,":range_add",":power", 20),
        (else_try),
          (eq, ":choose_magic", "itm_magic_amber_spear"),
          (assign,":max_range",50),
          (store_mul,":range_add",":power", 50),
        (else_try),
          (eq, ":choose_magic", "itm_magic_doom_bolt"),
          (assign,":max_range",50),
          (store_mul,":range_add",":power", 30),
        (else_try),
          (this_or_next|eq, ":choose_magic","itm_magic_poison_dummy"),
          (this_or_next|eq, ":choose_magic","itm_magic_poison"),
          (eq, ":choose_magic", "itm_magic_spirit_leech"),
          (assign,":max_range",200),
          (store_mul,":range_add",":power", 10),
        (else_try),
          (this_or_next|eq, ":choose_magic","itm_magic_pavane_of_slaanesh"),
          (eq, ":choose_magic", "itm_magic_spark"),
          (store_mul,":range_add",":power", 60),
        (else_try),
          (this_or_next|eq, ":choose_magic","itm_magic_column_of_fire"),
          (this_or_next|eq, ":choose_magic","itm_magic_apotheosis"),
          (this_or_next|eq, ":choose_magic","itm_magic_earth_blood"),
          (eq, ":choose_magic", "itm_magic_heal_near"),
          (store_mul,":range_add",":power", 40),
        (else_try),
          (this_or_next|eq, ":choose_magic", "itm_magic_heaven_fist_throw_1"),
          (this_or_next|eq, ":choose_magic", "itm_magic_heaven_fist_dummy"),
          (this_or_next|eq, ":choose_magic", "itm_magic_heaven_fist_throw_2"),
          (this_or_next|eq, ":choose_magic", "itm_magic_heaven_fist"),
          (eq, ":choose_magic", "itm_magic_burnished_gauntlet"),
          (store_mul,":range_add",":power", 30),
        (else_try),
          (this_or_next|eq, ":choose_magic","itm_magic_slow"),
          (eq, ":choose_magic", "itm_magic_ice_ray"),
          (store_mul,":range_add",":power", 20),
        (else_try),
          (eq, ":choose_magic","itm_magic_armageddon"),
          (assign,":damage",0),
          (store_div,":spec_power",":power", 2),
          (val_add,":damage",":spec_power"),
          (val_add,":damage",1),
          (try_begin),
            (agent_has_item_equipped,":player_agent","itm_magic_book_7"),
            (val_add,":damage",":spec_power"),
          (try_end),
          (store_mul,":range_add",50, ":damage"),
        (else_try),
          (this_or_next|eq, ":choose_magic","itm_magic_dispel_magic"),
          (this_or_next|eq, ":choose_magic","itm_magic_gaze_of_nagash"),
          (eq, ":choose_magic","itm_magic_shadow_bolt"),
          (store_mul,":range_add",":power", 50),
        (try_end),
        (val_add,":max_range",":range_add"),
        
        (agent_get_look_position, pos1, ":player_agent"),
        (position_move_z, pos1, 120),
        (call_script, "script_shift_pos1_along_y_axis_to_ground", 100, 30000),

        (try_for_range,":o",0,12),
          (copy_position, pos4, pos1),
          (val_mul,":o",30),
          (position_rotate_z, pos4, ":o", 1),
          (position_move_y, pos4, ":max_range",0),
          (position_set_z_to_ground_level, pos4),
          (particle_system_burst, "psys_fat_arrow_red", pos4, 1),
        (try_end),
      (try_end),
    (try_end),
      
    (try_begin),
      (neg|game_key_clicked, gk_attack),
      (neg|game_key_is_down, gk_attack),
      (key_is_down, key_left_shift),
      (agent_get_look_position, pos1, ":player_agent"),
      (position_move_z, pos1, 120),
      (call_script, "script_shift_pos1_along_y_axis_to_ground", 100, 30000),
      (assign, "$skill_mask_start", 1),
      (particle_system_burst, "psys_fat_arrow", pos1, 1),
      (copy_position, pos43, pos1),
      
      
      (try_begin),
        (agent_get_slot, ":target", ":player_agent", slot_agent_player_target),
        (gt, ":target", 0),
        (agent_get_position, pos1, ":target"),
        (position_move_z, pos1, 120),
        (particle_system_burst, "psys_fat_arrow_red", pos1, 1),
      (try_end),
      (neg|key_is_down, key_left_shift),
      (game_key_clicked,gk_defend),
      (assign, "$skill_mask_start", 0),
    (try_end),
    
    
    
  ])
    
    
custom_commander_change_weather = (
  ti_before_mission_start, 0, 0, [],
   [
    (call_script, "script_change_rain_or_snow"),
    (assign, "$g_show_hp_agent", -1),
    (assign, "$g_enemy_hpbar_showtime", 0),
   ])

custom_commander_toggle_charging = (
  0, 0, 0, [],
   [
    (get_player_agent_no, ":agent_no"),
    (agent_get_horse, ":horse_agent", ":agent_no"),
    (ge, ":horse_agent", 0),
    (try_begin),
      (key_clicked, "$key_special_3"),
      (agent_get_slot, ":is_charging", ":agent_no", slot_agent_horse_is_charging),
      (val_add, ":is_charging", 1),
      (val_mod, ":is_charging", 2),
      (agent_set_slot, ":agent_no", slot_agent_horse_is_charging, ":is_charging"),
    (try_end),
   ])

custom_commander_horse_speed = (
  1, 0, 0, [],
  [
    
   (try_begin),
     (eq,"$background_type",cb_noble),
     (eq,"$background_answer_2",cb2_page),
     (neg|eq,"$background_answer_3",cb3_squire),
     (assign, ":r", 1),
   (else_try),
     (eq,"$background_answer_3",cb3_squire),
     (eq,"$background_answer_2",cb2_page),
     (neg|eq,"$background_type",cb_noble),
     (assign, ":r", 1),          
    (else_try),
      (eq,"$background_type",cb_noble),
      (neg|eq,"$background_answer_2",cb2_page),
      (eq,"$background_answer_3",cb3_squire),
      (assign, ":r", 1),     
    (else_try),
      (eq,"$background_type",cb_noble),
      (eq,"$background_answer_2",cb2_page),
      (eq,"$background_answer_3",cb3_squire),
      (assign, ":r", 1),     
    (try_end),
    (get_player_agent_no, ":player_agent"),

  (try_for_agents, ":agent_no"),
    (agent_is_alive, ":agent_no"),
    (agent_is_human, ":agent_no"),
    (agent_get_horse, ":horse_agent", ":agent_no"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      (try_begin),
        (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_foot),
        (eq, ":item_modifier", imod_thick),
        (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_gloves),
        (eq, ":item_modifier", imod_superb),
        (agent_set_no_death_knock_down_only, ":horse_agent", 1),
      (else_try),
        (this_or_next|is_between,":troop_no", kings_begin, kings_end),
        (this_or_next|eq,":troop_no", "trp_rus_boyar"),
        (this_or_next|eq,":troop_no", "trp_rus_boyar_2"),
        (this_or_next|eq,":troop_no", "trp_rus_palace_guard"),
        (this_or_next|eq,":troop_no", "trp_npc3"),
        (this_or_next|eq,":troop_no", "trp_npc5"),
        (this_or_next|eq,":troop_no", "trp_npc17"),
        (this_or_next|eq,":troop_no", "trp_npc23"),
        (this_or_next|eq,":troop_no", "trp_npc12"),
        (this_or_next|eq,":troop_no", "trp_polish_knight_4"),
        #(this_or_next|eq,":troop_no", "trp_angle"),
        #(this_or_next|eq,":troop_no", "trp_archangle"),
        (this_or_next|eq,":troop_no", "trp_undead_horse_1"),
        (this_or_next|eq,":troop_no", "trp_undead_horse_2"),
        (this_or_next|eq,":troop_no", "trp_undead_horse_3"),
        (troop_slot_eq, ":troop_no", slot_troop_special_ability_passive, undead_horse),
        (agent_set_no_death_knock_down_only, ":horse_agent", 1),
      (else_try),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_bow_7"),
        (agent_set_no_death_knock_down_only, ":horse_agent", 1),
      (else_try),
        (agent_set_no_death_knock_down_only, ":horse_agent", 0),
      (try_end),
    (try_end),
  (try_end),
  
  (try_for_agents, ":agent_no"),
    (agent_is_alive, ":agent_no"),
    (agent_is_human, ":agent_no"),
    (agent_get_horse, ":horse_agent", ":agent_no"),
    (try_begin),
      (ge, ":horse_agent", 0),
      (neg|agent_is_human,":horse_agent"),
      (store_agent_hit_points, ":horse_hp",":horse_agent"),
      
      (agent_get_troop_id, ":agent_troop", ":agent_no"),
      (store_skill_level, ":skl_level", skl_riding, ":agent_troop"),
      
      (store_sub, ":lost_hp", 100, ":horse_hp"),
      (try_begin),
        (le, ":lost_hp", 20),
        (val_div, ":lost_hp", 2),
        (store_add, ":speed_factor", 100, ":lost_hp"),
      (else_try),
        (val_div, ":lost_hp", 2),
        (store_sub, ":speed_factor", 120, ":lost_hp"),
      (try_end),
      
      #chenwz      
      (try_begin),
        (neq, ":agent_no", ":player_agent"),
        (agent_get_party_id, ":agent_party", ":agent_no"),
        (eq, ":agent_party", "p_main_party"),
        (eq, ":r", 1),
        (assign, ":speed_factor", 120),
      (try_end),
      #chenwz      
      
      (try_begin),
        (store_add, ":speed_multi", ":skl_level", 5),
        (val_mul, ":speed_multi", ":speed_multi"),
        (val_div, ":speed_multi", 4),
        (val_clamp, ":speed_multi", 10,51),
      (try_end),

      (try_begin),
        (troop_get_slot, ":special", ":agent_troop", slot_troop_special_ability_extra),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_extra_counter),
        (gt, ":timer", 0),
        (try_begin),
          (eq,":special", skill_charge),
          (val_add, ":speed_factor", ":speed_multi"), 
        (else_try),
          (eq,":special", rage_charge),
          (val_add, ":speed_factor", ":speed_multi"), 
        (try_end),
      (try_end),
      
      (try_begin),
        (troop_get_slot, ":special", ":agent_troop", slot_troop_special_ability),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_counter),
        (gt, ":timer", 0),
        (try_begin),
          (eq,":special", rage_strike),
          (val_add, ":speed_factor", ":speed_multi"), 
        (try_end),
      (try_end),
      
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", powercharge),
        #(troop_slot_eq, ":agent_troop", slot_troop_special_ability_passive, powercharge),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_passiv_counter),
        (gt, ":timer", 0),
        (val_add, ":speed_factor", ":speed_multi"), 
      (try_end),
      
      (try_begin),
        (troop_get_inventory_slot_modifier, ":item_modifier",":agent_troop", ek_gloves),
        (eq, ":item_modifier", imod_superb),
        (val_add, ":speed_factor", 20), 
      (try_end),

      
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent_no", slot_agent_special_ability_affect_time),
        (gt, ":timer_2", 0),
        (agent_get_slot, ":special_2", ":agent_no", slot_agent_special_ability_affect_type),
        (try_begin),
          (eq,":special_2", "itm_voice_slow_time"),
          (val_add, ":speed_factor", -1000), 
          (agent_set_animation,":horse_agent","anim_horse_rear"),
        (else_try),
          (eq,":special_2", "itm_voice_become_ethereal"),
          (val_add, ":speed_factor", 50), 
        (else_try),
          (eq,":special_2", fright_aura),
          (val_add, ":speed_factor", -75), 
        (else_try),
          (eq,":special_2", grasp),
          (agent_set_animation,":horse_agent","anim_horse_rear"),
        (else_try),
          (eq,":special_2", entangle),
          (agent_set_animation,":horse_agent","anim_horse_rear"),
        (try_end),
      (try_end),
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent_no", slot_agent_debuff_affect_time),
        (gt, ":timer_2", 0),
        (agent_get_slot, ":special_2", ":agent_no", slot_agent_debuff_affect_type),
        (try_begin),
          (this_or_next|eq,":special_2","itm_magic_phantasmogoria"),
          (eq,":special_2", "itm_magic_net_of_amyntok"),
          (val_add, ":speed_factor", -1000), 
          (agent_set_animation,":horse_agent","anim_horse_rear"),
        (else_try),
          (eq,":special_2", "itm_magic_curse_of_anraheir"),
          (val_add, ":speed_factor", -25), 
        (else_try),
          (eq,":special_2", "itm_magic_mana_tempest"),
          (val_add, ":speed_factor", -1000), 
        (else_try),
          (eq,":special_2", "itm_magic_acquiescence"),
          (val_add, ":speed_factor", -45), 
        (else_try),
          (eq,":special_2", "itm_magic_miasma_of_pestilence"),
          (val_add, ":speed_factor", -50), 
        (else_try),
      (try_end),
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent_no", slot_agent_buff_affect_time),
        (gt, ":timer_2", 0),
        (agent_get_slot, ":special_2", ":agent_no", slot_agent_buff_affect_type),
        (try_begin),
          (eq,":special_2", "itm_magic_panns_impenetrable_belt"),
          (val_add, ":speed_factor", 50), 
        (else_try),
          (eq,":special_2", "itm_magic_bironas_timewarp"),
          (val_add, ":speed_factor", 25), 
        (else_try),
          (eq,":special_2", "itm_magic_light_of_battle"),
          (val_add, ":speed_factor", 25), 
        (else_try),
          (eq,":special_2", "itm_magic_shield_of_cold"),
          (val_add, ":speed_factor", -50), 
        (else_try),
          (eq,":special_2", "itm_magic_flesh_to_stone"),
          (val_add, ":speed_factor", -25), 
        (else_try),
          (eq,":special_2", "itm_magic_power_of_darkness"),
          (val_add, ":speed_factor", 33), 
        (else_try),
          (eq,":special_2", "itm_magic_hysterical_frenzy"),
          (val_add, ":speed_factor", 50), 
        (else_try),
          (eq,":special_2", "itm_magic_fleshy_abundance"),
          (val_add, ":speed_factor", -50), 
        (try_end),
      (try_end),
           

      (agent_set_speed_modifier, ":horse_agent", ":speed_factor"),
      (agent_set_horse_speed_factor, ":agent_no", ":speed_factor"),
    (try_end),
  (try_end),

    (set_fixed_point_multiplier, 1000),
        (try_for_agents, ":agent_no"),
            (agent_is_alive, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_is_non_player, ":agent_no"),

            (neg|agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, taunt),
            (neg|agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, mummy_curse),

            (neg|agent_slot_eq, ":agent_no", slot_agent_is_skirmish, 1),
            (agent_get_horse, ":horse_no", ":agent_no"),
            (assign, ":melee_weapon", -1),
            (assign, ":agent_shield", -1),
            (try_begin),
               (agent_slot_eq, ":agent_no", slot_agent_is_running_away, 0),
               (agent_get_team, ":team_no", ":agent_no"),

               (gt, ":horse_no", -1),
               (assign, ":thrown_ammo", 0),
                
               (agent_get_slot,":agent_2_hand",":agent_no",slot_agent_two_handed_wp),
               (agent_get_slot,":agent_1_hand",":agent_no",slot_agent_one_handed_wp),
               (agent_get_slot,":agent_spear",":agent_no",slot_agent_spear_wp),
               (agent_get_slot,":agent_lance",":agent_no",slot_agent_lance_wp),
                
               (try_begin),
                 (gt, ":agent_lance", 0),
                 (assign, ":agent_spear", ":agent_lance"),
               (try_end),
                
               (try_for_range, ":item", 0, 4),
                  (agent_get_item_slot, ":item_weapon", ":agent_no", ":item"),
                  (gt, ":item_weapon", 0),
                  (item_get_type, ":item_weapon_type", ":item_weapon"),
                  (try_begin),
                    (eq, ":item_weapon_type", itp_type_thrown),
                    (agent_get_ammo_for_slot, ":ammo_for_slot", ":agent_no", ":item"),
                    (val_add, ":thrown_ammo", ":ammo_for_slot"),
                  (else_try),
                    (eq, ":item_weapon_type", itp_type_shield),
                    (assign, ":agent_shield", ":item_weapon"),
                  (try_end),
               (try_end),
                
               (try_begin),
                 (try_begin),
                   (gt, ":agent_1_hand", 0),
                   (assign, ":melee_weapon", ":agent_1_hand"),
                 (else_try),
                   (gt, ":agent_2_hand", 0),
                   (assign, ":melee_weapon", ":agent_2_hand"),
                 (else_try),
                   (gt, ":agent_spear", 0),
                   (assign, ":melee_weapon", ":agent_spear"),
                 (try_end),
                 (try_begin),
                   (eq, ":agent_shield", -1),
                   (gt, ":agent_2_hand", 0),
                   (assign, ":melee_weapon", ":agent_2_hand"),
                 (try_end),
               (try_end),
                
                (agent_get_slot,":ranged_weapon",":agent_no",slot_agent_horsebow),
                
                (gt, ":ranged_weapon", -1),
                (agent_get_ammo, ":ammo", ":agent_no", 0),
                (val_sub, ":ammo", ":thrown_ammo"),
                (gt, ":ammo", 0),
                (agent_set_slot, ":agent_no", slot_agent_is_skirmish, 2),

                (agent_get_division, ":class_no", ":agent_no"),
                
                (team_get_weapon_usage_order, ":weapon_usage_order", ":team_no", ":class_no"),
                (team_get_movement_order, ":movement_order", ":team_no", ":class_no"),
                (team_get_hold_fire_order, ":hold_fire", ":team_no", ":class_no"),
                (neg|eq, ":hold_fire", aordr_hold_your_fire),
                (neg|eq, ":weapon_usage_order", wordr_use_melee_weapons),
                (neg|eq, ":weapon_usage_order", wordr_use_blunt_weapons),
                (eq, ":movement_order", mordr_charge),

                (agent_get_position, pos1, ":agent_no"),
                (agent_get_speed, pos0, ":agent_no"),
                (position_get_y,":speed_y",pos0),
                (assign, ":distance_closest", 100000),#1000m
                (assign, ":enemies_closest", -1),
                (try_for_agents, ":enemies"),
                    (agent_is_alive, ":enemies"),
                    (agent_is_human, ":enemies"),
                    (agent_get_position, pos2, ":enemies"),
                    (agent_get_team, ":enemies_team", ":enemies"),
                    (teams_are_enemies, ":team_no", ":enemies_team"),
                    (get_distance_between_positions, ":distance", pos1, pos2),
                    (try_begin),
                      (agent_slot_eq, ":enemies", slot_agent_is_running_away, 1),
                      (val_add, ":distance", 10000),
                    (try_end),
                    (try_begin),
                      (agent_get_horse, ":enemies_horse", ":enemies"),
                      (gt, ":enemies_horse", -1),
                      (agent_get_speed, pos0, ":enemies"),
                      (position_get_y,":speed_enemies",pos0),
                      (store_sub, ":speed_1", ":speed_enemies", ":speed_y"),
                      (position_transform_position_to_local, pos0, pos1, pos2),
                      (position_get_rotation_around_z, ":angle_1", pos0),
                      (convert_to_fixed_point, ":angle_1"),
                      (store_cos, ":cos", ":angle_1"),
                      (store_sin, ":sin", ":angle_1"),
                      (position_get_x, ":x1", pos0),
                      (position_get_y, ":y1", pos0),
                      (position_normalize_origin, ":d1", pos0),
                      (store_mul, ":k1", ":x1", ":cos"),
                      (store_mul, ":k2", ":y1", ":sin"),
                      (store_add, ":speed_relevant", ":k1", ":k2"),
                      (val_mul, ":speed_relevant", ":speed_enemies",),
                      (val_div, ":speed_relevant", ":d1"),
                      (convert_from_fixed_point, ":speed_relevant"),
                      (val_abs, ":speed_relevant"),
                      (try_begin),
                        (lt, ":speed_relevant", 3000),
                        (store_div, ":distance_cavalry", ":speed_1",5),
                        (val_max, ":distance_cavalry", 0),
                        (val_add, ":distance_cavalry", 500),
                        (val_sub, ":distance", ":distance_cavalry"),
                      (else_try),
                        (val_add, ":distance", 5000),
                      (try_end),
                    (else_try),
                      (agent_get_wielded_item, ":weapon_hold", ":enemies", 1),
                      (neg|gt, ":weapon_hold", 1),
                      (val_sub, ":distance", 500),
                    (try_end),
                    (lt, ":distance", ":distance_closest"),
                    (assign, ":distance_closest", ":distance"),
                    (assign, ":enemies_closest", ":enemies"),
                (try_end),

                (neq, ":enemies_closest", -1),
                (agent_get_position, pos3, ":enemies_closest"),
                (get_distance_between_positions, ":distance_true", pos1, pos3),

                (assign, ":speed_limit", 1000),
                (try_begin),
                    (agent_get_wielded_item, ":weapon_hold", ":agent_no", 0),
                    (gt, ":weapon_hold", 0),
                    (item_get_type, ":weapon_type", ":weapon_hold"),
                    (this_or_next|eq, ":weapon_type", itp_type_bow),
                    (this_or_next|eq, ":weapon_type", itp_type_pistol),
                    (eq, ":weapon_type", itp_type_musket),
                    (agent_get_bone_position, pos4, ":agent_no", 8, 1),
                    (agent_get_bone_position, pos5, ":enemies_closest", 9, 1),
                    (position_has_line_of_sight_to_position, pos4, pos5),
                    (agent_set_look_target_agent, ":agent_no", ":enemies_closest"),
                    (try_begin),
                      (assign, ":shoot_distance", 4000),
                      (agent_get_attack_action, ":attack_action", ":agent_no"),
                      (eq, ":attack_action", 1),
                      (try_begin),
                        (gt, ":distance_closest", 700),
                        (le, ":distance_closest", ":shoot_distance"),
                        (store_div, ":speed_limit", ":speed_y",2000),#
                        (val_max, ":speed_limit", 0),
                      (try_end),
                      (eq, ":weapon_type", itp_type_bow),
                      (try_begin),
                        (le, ":distance_true", ":shoot_distance"),
                        (agent_set_defend_action, ":agent_no", -2, 1),
                        (agent_set_attack_action, ":agent_no", 3, 0),
                      (else_try),
                        (gt, ":distance_true", ":shoot_distance"),
                        (agent_set_attack_action, ":agent_no", -2, 1),
                        (agent_set_defend_action, ":agent_no", 3, 1),
                      (try_end),
                    (else_try),
                      (eq, ":weapon_type", itp_type_bow),
                      (le, ":distance_true", ":shoot_distance"),#
                      (agent_get_combat_state, ":combat_state", ":agent_no"),
                      (neq, ":combat_state", 8),
                      (agent_set_attack_action, ":agent_no", 3, 1),
                    (try_end),
                (try_end),
                (agent_set_speed_limit, ":agent_no", ":speed_limit"),
                (try_begin),
                  (agent_slot_eq, ":enemies_closest", slot_agent_is_running_away, 0),
                  (lt, ":distance_closest", 12000),
                  (try_begin),
                    (get_scene_boundaries, pos6, pos7),
                    (position_transform_position_to_local, pos0, pos6,pos1),
                    (position_get_x, ":left", pos0),
                    (position_get_y, ":down", pos0),
                    (position_transform_position_to_local, pos0, pos6,pos7),
                    (position_get_x, ":map_width", pos0),
                    (position_get_y, ":map_height", pos0),
                    (store_sub, ":right", ":map_width", ":left"),
                    (store_sub, ":up", ":map_height", ":down"),
                    (position_transform_position_to_local, pos0, pos1, pos3),
                    (position_get_x, ":enemies_x", pos0),
                    (position_get_y, ":enemies_y", pos0),
                    (assign, ":effect", 0),
                    (assign, ":boundary", 1500),
                    (try_begin),
                      (neg|gt, ":distance_closest", 1000),
                      (assign, ":effect", -78),
                    (else_try),
                      (gt, ":distance_closest", 2500),
                      (position_transform_position_to_local, pos0, pos6,pos3),
                      (position_get_x, ":left_enemy", pos0),
                      (position_get_y, ":down_enemy", pos0),
                      (store_sub, ":right_enemy", ":map_width", ":left_enemy"),
                      (store_sub, ":up_enemy", ":map_height", ":down_enemy"),
                      (assign, ":distance_to_boundary", ":boundary"),
                      (val_min, ":distance_to_boundary", ":left_enemy"),
                      (val_min, ":distance_to_boundary", ":up_enemy"),
                      (val_min, ":distance_to_boundary", ":right_enemy"),
                      (val_min, ":distance_to_boundary", ":down_enemy"),
                      (try_begin),
                        (lt, ":distance_to_boundary", ":boundary"),
                        (assign, ":effect", 90),
                      (else_try),
                        (assign, ":effect", 45),
                      (try_end),
                    (try_end),
                    (convert_to_fixed_point, ":effect"),
                    (assign, ":distance_to_boundary", ":boundary"),
                    (val_min, ":distance_to_boundary", ":left"),
                    (val_min, ":distance_to_boundary", ":up"),
                    (val_min, ":distance_to_boundary", ":right"),
                    (val_min, ":distance_to_boundary", ":down"),
                    (try_begin),
                      (lt, ":distance_closest", 1000),
                      (lt, ":distance_to_boundary", ":boundary"),
                      (agent_slot_eq, ":enemies_closest", slot_agent_is_running_away, 0),
                      (store_div, ":map_middle_x", ":map_width", 20),
                      (store_div, ":map_middle_y", ":map_height", 20),
                      (position_copy_origin, pos10, pos6),
                      (position_move_x, pos10, ":map_middle_x", 1),
                      (position_move_y, pos10, ":map_middle_y", 1),
                      (get_distance_between_positions,":distance_middle", pos10, pos1),
                      (position_transform_position_to_local, pos0, pos1, pos10),
                      (position_get_x, ":map_middle_x", pos0),
                      (position_get_y, ":map_middle_y", pos0),
                      (val_mul, ":map_middle_x", 100),
                      (val_mul, ":map_middle_y", 100),
                      (val_mul, ":enemies_x", 100),
                      (val_mul, ":enemies_y", 100),
                      (store_div,":cos_middle",":map_middle_x",":distance_middle"),
                      (store_div,":sin_middle",":map_middle_y",":distance_middle"),
                      (store_div,":cos_enemies",":enemies_x",":distance_true"),
                      (store_div,":sin_enemies",":enemies_y",":distance_true"),
                      (store_acos, ":angle_cos", ":cos_middle"),
                      (store_asin, ":angle_sin", ":sin_middle"),
                      (store_acos, ":angle_cos_enemies", ":cos_enemies"),
                      (store_asin, ":angle_sin_enemies", ":sin_enemies"),
                      (try_begin),
                        (lt, ":angle_sin", 0),
                        (val_mul,":angle_cos", -1),
                        (val_add,":angle_cos", 360000),
                      (try_end),
                      (try_begin),
                        (lt, ":angle_sin_enemies", 0),
                        (val_mul,":angle_cos_enemies", -1),
                        (val_add,":angle_cos_enemies", 360000),
                      (try_end),
                      (store_sub, ":k2", ":angle_cos", ":angle_cos_enemies"),
                      (val_sub, ":k2", 270000),
                      (val_sub, ":k2", ":effect"),
                      (store_add, ":effect", ":k2", ":effect"),
                      (try_begin),
                        (lt, ":angle_cos", ":angle_cos_enemies"),
                        (val_add, ":effect", 360000),
                      (try_end),
                      (val_clamp,":effect",-210000, 15000),
                      (agent_set_attack_action, ":agent_no", -2, 1),
                      (agent_set_defend_action, ":agent_no", 3, 1),
                    (try_end),

                    (try_begin,),
                      (this_or_next|eq, ":weapon_type", itp_type_musket),
                      (eq, ":weapon_type", itp_type_pistol),
                      (val_mul, ":effect", -1),
                      (val_add, ":effect", 180000),
                    (try_end),
                    (store_cos, ":cos", ":effect"),
                    (store_sin, ":sin", ":effect"),
                    (store_mul, ":k_x1", ":cos", ":enemies_y",),
                    (store_mul, ":k_x2", ":sin", ":enemies_x",),
                    (store_mul, ":k_y1", ":sin", ":enemies_y",),
                    (store_mul, ":k_y2", ":cos", ":enemies_x",),
                    (store_add, ":move_x",":k_x1", ":k_x2"),
                    (store_sub, ":move_y",":k_y1", ":k_y2"),
                    (position_move_x, pos1, ":move_x", 0),
                    (position_move_y, pos1, ":move_y", 0),
                  (try_end),
                  (agent_set_scripted_destination, ":agent_no", pos1, 1),
                (else_try),
                  (agent_clear_scripted_mode, ":agent_no"),
                  (agent_force_rethink, ":agent_no"),
                (try_end),
                (try_begin),
                  (agent_slot_eq, ":enemies_closest", slot_agent_is_running_away, 0),
                  (gt,":distance_true",500),
                  (agent_set_wielded_item, ":agent_no", ":ranged_weapon"),
                (else_try),
                  (le, ":distance_true", 500),
                  (gt, ":melee_weapon", -1),
                  (agent_get_horse, ":enemies_horse", ":enemies_closest"),
                  (gt, ":enemies_horse", -1),
                  (agent_set_wielded_item, ":agent_no", ":melee_weapon"),
                  (agent_set_attack_action, ":agent_no", -2, 1),
                  (agent_set_scripted_destination, ":agent_no", pos3, 1),
                (try_end),
            (else_try),
                (try_begin),
                  (agent_slot_eq, ":agent_no", slot_agent_is_skirmish, 0),
                  (agent_set_slot, ":agent_no", slot_agent_is_skirmish, 1),
                (else_try),
                  (agent_slot_eq, ":agent_no", slot_agent_is_skirmish, 2),
                  (this_or_next|agent_slot_eq, ":agent_no", slot_agent_is_running_away, 1),
                  (this_or_next|lt, ":horse_no", 0),
                  (this_or_next|eq, ":ammo", 0),
                  (this_or_next|eq, ":hold_fire", aordr_hold_your_fire),
                  (this_or_next|eq, ":weapon_usage_order", wordr_use_melee_weapons),
                  (this_or_next|eq, ":weapon_usage_order", wordr_use_blunt_weapons),
                  (this_or_next|eq, ":enemies_closest", -1),
                  (neq, ":movement_order", mordr_charge),
                  (agent_clear_scripted_mode, ":agent_no"),
                  (agent_set_speed_limit, ":agent_no", 100),
                  (agent_force_rethink, ":agent_no"),
                  (agent_set_attack_action, ":agent_no", -2, 1),
                  (agent_set_slot, ":agent_no", slot_agent_is_skirmish, 3),
                (try_end),
            (try_end),
        (try_end),

  ])



custom_commander_fill_agent_empty_wpn_slot =(
  ti_on_agent_spawn, 0, 0, [],
    [
      (store_trigger_param_1, ":agent_no"),
      (store_random_in_range, ":rand", 1, 11),
      (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":rand"),
      (agent_set_slot, ":agent_no", slot_agent_cur_magic, slot_troop_spell_1),
      
      #(get_player_agent_no, ":player_agent"),
      
      ## add lance if needed
      (assign, ":special_wpn_type", -1),
      
      (assign, ":has_pike", 0),
      (assign, ":has_lance", 0),
      (assign, ":has_spear", 0),
      
      (assign, ":has_polearm", 0),
      (assign, ":has_two_handed", 0),

      (assign, ":has_shield", 0),
      (assign, ":has_one_handed", 0),
      (assign, ":has_range_wp", 0),
      
      (assign, ":has_thrown", 0),
      (try_begin),
        (agent_is_human, ":agent_no"), # human
        (agent_get_troop_id, ":troop_no", ":agent_no"),
                
        (neg|troop_is_hero, ":troop_no"),
        
        (try_for_range, ":cur_slot", 0, 4),
          (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
          (gt, ":cur_weapon", 0),
          (try_begin),
            (is_between, ":cur_weapon", "itm_sg_human_small","itm_sg_human_big"),
            (agent_unequip_item, ":agent_no", ":cur_weapon"),
          (try_end),  
          (call_script,"script_get_weapon_type",":cur_weapon"),
          (assign,":weapon_type",reg0),
          (item_get_type, ":type", ":cur_weapon"),
          (try_begin),
            (eq,":weapon_type",slot_agent_spear_wp),
            (val_add, ":has_spear", 1),
          (else_try),
            (eq,":weapon_type",slot_agent_two_handed_wp),
            (val_add, ":has_two_handed", 1),
            (try_begin),
              (eq, ":type", itp_type_two_handed_wpn),
              (val_add, ":has_two_handed", 1),
            (else_try),
              (eq, ":type", itp_type_polearm),
              (val_add, ":has_polearm", 1),
            (try_end),  
          (else_try),
            (eq,":weapon_type",slot_agent_pike_wp),
            (val_add, ":has_pike", 1),
          (else_try),
            (eq, ":type", itp_type_shield),
            (val_add, ":has_shield", 1),
          (else_try),
            (eq,":weapon_type",slot_agent_one_handed_wp),
            (val_add, ":has_one_handed", 1),
          (else_try),
            (eq,":weapon_type",slot_agent_lance_wp),
            (val_add, ":has_lance", 1),
          (else_try),
            (eq, ":type", itp_type_bow),
            (assign, ":special_wpn_type", 0),
            (assign, ":has_range_wp", 1),
          (else_try),
            (eq, ":type", itp_type_crossbow),
            (assign, ":special_wpn_type", 1),
            (assign, ":has_range_wp", 1),
          (else_try),
            (eq, ":type", itp_type_thrown),
            (assign, ":special_wpn_type", 2),
            #(assign, ":has_range_wp", 2),
            (val_add, ":has_thrown", 1),
          (else_try),
            (this_or_next|eq, ":type", itp_type_pistol),
            (eq, ":type", itp_type_musket),
            (assign, ":special_wpn_type", 3),
            (assign, ":has_range_wp", 1),
          (try_end),
        (try_end),
        
        (try_begin),
          (ge, ":has_spear", 2),
          (try_for_range, ":cur_slot", 0, 4),
            (ge, ":has_spear", 2),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (ge, ":cur_weapon", 0),
            (call_script,"script_get_weapon_type",":cur_weapon"),
            (assign,":weapon_type",reg0),
            (eq,":weapon_type",slot_agent_spear_wp),
            (agent_unequip_item, ":agent_no", ":cur_weapon", ":cur_slot"),
            (val_sub, ":has_spear", 1),
          (try_end),
        (try_end),
                
        (try_begin),
          (store_add, ":has_two_handed_wp", ":has_polearm",":has_two_handed"),
          (ge, ":has_two_handed_wp", 2),
          (try_for_range, ":cur_slot", 0, 4),
            (ge, ":has_two_handed_wp", 2),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (ge, ":cur_weapon", 0),
            (call_script,"script_get_weapon_type",":cur_weapon"),
            (assign,":weapon_type",reg0),
            (eq,":weapon_type",slot_agent_two_handed_wp),
            (try_begin),
              (eq, ":type", itp_type_two_handed_wpn),
              (val_sub, ":has_two_handed", 1),
            (else_try),
              (eq, ":type", itp_type_polearm),
              (val_sub, ":has_polearm", 1),
            (try_end),  
            (agent_unequip_item, ":agent_no", ":cur_weapon", ":cur_slot"),
            (val_sub, ":has_two_handed_wp", 1),
          (try_end),
        (try_end),

        (try_begin),#remove_lance_in_siege
          (party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
          (ge, ":has_lance", 1),
          (try_for_range, ":cur_slot", 0, 4),
            (ge, ":has_lance", 1),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (ge, ":cur_weapon", 0),
            (call_script,"script_get_weapon_type",":cur_weapon"),
            (assign,":weapon_type",reg0),
            (eq,":weapon_type",slot_agent_lance_wp),
            (agent_unequip_item, ":agent_no", ":cur_weapon", ":cur_slot"),
            (val_sub, ":has_lance", 1),
          (try_end),
        (else_try),#add_lance
          (neg|party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
          (troop_is_mounted, ":troop_no"),
          (eq, ":has_lance", 0),
          (assign, ":add_lance", -1),
          
          (try_begin),
            (ge, ":has_range_wp", 1),
            (this_or_next|eq, ":special_wpn_type", 1),
            (eq, ":special_wpn_type", 2),
            (eq, ":has_spear", 0),
            (assign, ":add_lance", 1),
          (else_try),
            (eq, ":has_range_wp", 1),
            (eq, ":special_wpn_type", 3),
            (store_random_in_range, ":random_no", 0, 3),
            (eq,":random_no", 0),
            (eq, ":has_spear", 0),
            (assign, ":add_lance", 1),
          (else_try),
            (eq, ":has_range_wp", 1),
            (eq, ":special_wpn_type", 0),
            (eq, ":has_spear", 0),
            (eq, ":has_shield", 0),
            (assign, ":add_lance", 1),
          (else_try),
            (eq, ":has_range_wp", 0),
            (eq, ":has_spear", 0),
            (assign, ":add_lance", 1),
          (try_end),

          (eq, ":add_lance", 1),
          (assign, ":end_cond", 4),
          (try_for_range, ":cur_slot", 0, ":end_cond"),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (lt, ":cur_weapon", 0),
            (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", 4),
            (assign, ":fitfull_weapon", reg0),
            (gt, ":fitfull_weapon", -1),
            (agent_equip_item, ":agent_no", ":fitfull_weapon", ":cur_slot"),
            (assign, ":end_cond", 0), # stop
            (val_add, ":has_lance", 1),
          (try_end),
        (try_end),
 
        (try_begin),#remove_pike_in_siege
          (party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
          (ge, ":has_pike", 1),
          
          (this_or_next|ge, ":has_one_handed", 1),
          (this_or_next|ge, ":has_polearm", 1),
          (ge, ":has_two_handed", 1),
          
          (agent_get_team, ":agent_team", ":agent_no"),
          (neg|eq, "$defender_team", ":agent_team"), 
          (neg|eq, "$defender_team_2", ":agent_team"), 
          (try_for_range, ":cur_slot", 0, 4),
            (ge, ":has_pike", 1),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (is_between, ":cur_weapon", "itm_pike","itm_ashwood_pike"), 
            (agent_unequip_item, ":agent_no", ":cur_weapon", ":cur_slot"),
            (val_sub, ":has_pike", 1),
          (else_try),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (is_between, ":cur_weapon", "itm_swiss_halberd","itm_bec_de_corbin_a"), 
            (val_sub, ":has_pike", 1),
            (val_add, ":has_polearm", 1),
            (val_add, ":has_two_handed", 1),
          (try_end),
        (else_try),#add_pike
          (eq, ":has_pike", 0),
          #(neg|party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
          (neg|troop_is_mounted, ":troop_no"),
          (lt, ":has_spear", 1),
          (lt, ":has_lance", 1),
          (assign, ":end_cond", 4),
          (try_for_range, ":cur_slot", 0, ":end_cond"),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (lt, ":cur_weapon", 0),
            (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", 5),
            (assign, ":fitfull_weapon", reg0),
            (gt, ":fitfull_weapon", -1),
            (agent_equip_item, ":agent_no", ":fitfull_weapon", ":cur_slot"),
            (assign, ":end_cond", 0), # stop
            (val_add, ":has_pike", 1),
          (try_end),
        (try_end),
 
        (try_begin),#add_one_handed
          (eq, ":has_one_handed", 0),
          (this_or_next|troop_is_mounted, ":troop_no"),
          (this_or_next|eq, ":has_shield", 1),
          (this_or_next|party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
          (eq, ":has_two_handed", 0),
          (assign, ":end_cond", 4),
          (try_for_range, ":cur_slot", 0, ":end_cond"),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (lt, ":cur_weapon", 0),
            (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", 10),
            (assign, ":fitfull_weapon", reg0),
            (gt, ":fitfull_weapon", -1),
            (agent_equip_item, ":agent_no", ":fitfull_weapon", ":cur_slot"),
            (assign, ":end_cond", 0), # stop
            (val_add, ":has_one_handed", 1),
          (try_end),
        (try_end),
        
        (try_begin),#add_polearm
          (eq, ":has_polearm", 0),
          (this_or_next|eq, ":has_one_handed", 0),
          (neg|party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
          
          (lt, ":has_two_handed", 1),
          #(lt, ":has_range_wp", 1),
          (lt, ":has_spear", 1),
                    
          (assign, ":end_cond", 4),
          (try_for_range, ":cur_slot", 0, ":end_cond"),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (lt, ":cur_weapon", 0),
            (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", 6),
            (assign, ":fitfull_weapon", reg0),
            (gt, ":fitfull_weapon", -1),
            (agent_equip_item, ":agent_no", ":fitfull_weapon", ":cur_slot"),
            (assign, ":end_cond", 0), # stop
            (val_add, ":has_polearm", 1),
          (try_end),
        (try_end),
        
        (try_begin),#add_two_handed
          (eq, ":has_two_handed", 0),
          (store_skill_level,":v_shield",skl_shield,":troop_no"), 
          (this_or_next|eq, ":has_one_handed", 0),
          (this_or_next|eq, ":has_thrown", 1),
          (le,":v_shield",4),   
          (assign, ":pass", 0),
          (try_begin),
            (neg|troop_is_mounted, ":troop_no"),
            (eq, ":has_one_handed", 1),
            (eq, ":has_shield", 1),
            (store_random_in_range, ":pass", 0, 3),
          (try_end),
          (this_or_next|eq, ":pass", 0),
          (this_or_next|eq, ":has_polearm", 0),
          (this_or_next|eq, ":has_shield", 0),
          (eq, ":has_range_wp", 0),
          #(eq, ":has_thrown", 1),
          (assign, ":end_cond", 4),
          (try_for_range, ":cur_slot", 0, ":end_cond"),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (lt, ":cur_weapon", 0),
            (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", 8),
            (assign, ":fitfull_weapon", reg0),
            (gt, ":fitfull_weapon", -1),
            (agent_equip_item, ":agent_no", ":fitfull_weapon", ":cur_slot"),
            (assign, ":end_cond", 0), # stop
            (val_add, ":has_two_handed", 1),
          (try_end),
        (try_end),
        
        (try_begin),#add_shield
          (eq, ":has_shield", 0),
          (store_skill_level,":v_shield",skl_shield,":troop_no"), 
          (this_or_next|party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
          (gt,":v_shield",4),   
          (this_or_next|party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
          (this_or_next|eq, ":has_two_handed", 0),
          (this_or_next|eq, ":has_range_wp", 0),
          (eq, ":has_range_wp", 2),
          (assign, ":end_cond", 4),
          (try_for_range, ":cur_slot", 0, ":end_cond"),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (lt, ":cur_weapon", 0),
            (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", 9),
            (assign, ":fitfull_weapon", reg0),
            (gt, ":fitfull_weapon", -1),
            (agent_equip_item, ":agent_no", ":fitfull_weapon", ":cur_slot"),
            (assign, ":end_cond", 0), # stop
            (assign, ":has_shield", 1),
          (try_end),
        (try_end),
        
        (try_begin),#add_spear
          (eq, ":has_spear", 0),
          (lt, ":has_pike", 1),
          (lt, ":has_polearm", 1),
          (lt, ":has_lance", 1),
          (assign, ":end_cond", 4),
          (try_for_range, ":cur_slot", 0, ":end_cond"),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (lt, ":cur_weapon", 0),
            (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", 7),
            (assign, ":fitfull_weapon", reg0),
            (gt, ":fitfull_weapon", -1),
            (agent_equip_item, ":agent_no", ":fitfull_weapon", ":cur_slot"),
            (assign, ":end_cond", 0), # stop
            (val_add, ":has_spear", 1),
          (try_end),
        (try_end),
     
        (try_begin),
          (assign, ":has_melee", 0),
          (try_for_range, ":cur_slot", 0, 4),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (gt, ":cur_weapon", 0),
            (item_get_type, ":type", ":cur_weapon"),
            (this_or_next|eq, ":type", itp_type_two_handed_wpn),
            (this_or_next|eq, ":type", itp_type_polearm),
            (eq, ":type", itp_type_one_handed_wpn),
            (val_add, ":has_melee", 1),
          (try_end),
          (eq, ":has_melee", 0),
          (assign, ":end_cond", 4),
          (try_for_range, ":cur_slot", 0, ":end_cond"),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (lt, ":cur_weapon", 0),
            (assign, ":add_weapon", -1),
            (try_for_range, ":r", 6, 11),
              (neg|eq, ":r", 9),
              (eq, ":add_weapon", -1),
              (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", ":r"),
              (assign, ":fitfull_weapon", reg0),
              (gt, ":fitfull_weapon", -1),
              (assign, ":add_weapon", ":fitfull_weapon"),
            (try_end),
            (gt, ":add_weapon", -1),
            (agent_equip_item, ":agent_no", ":add_weapon", ":cur_slot"),            
            (assign, ":end_cond", 0), # stop
          (try_end),
        (try_end),
        
        (try_begin),
          (eq, 1, 0),
          (eq, ":has_thrown", 0),
          (lt, ":has_pike", 1),
          (lt, ":has_polearm", 1),
          (lt, ":has_lance", 1),
          (assign, ":end_cond", 4),
          (try_for_range, ":cur_slot", 0, ":end_cond"),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (lt, ":cur_weapon", 0),
            (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", 2),
            (assign, ":fitfull_weapon", reg0),
            (gt, ":fitfull_weapon", -1),
            (agent_equip_item, ":agent_no", ":fitfull_weapon", ":cur_slot"),
            (assign, ":end_cond", 0), # stop
            (val_add, ":has_thrown", 1),
          (try_end),
        (try_end),
        
        (try_begin),
          (eq, ":has_range_wp", 1),
          (neg|eq, ":special_wpn_type", -1),
          (try_for_range, ":cur_slot", 0, 4),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (lt, ":cur_weapon", 0),
            (call_script, "script_get_fitfull_weapon_for_empty_slot", ":troop_no", ":special_wpn_type"),
            (assign, ":fitfull_weapon", reg0),
            (gt, ":fitfull_weapon", -1),
            (agent_equip_item, ":agent_no", ":fitfull_weapon", ":cur_slot"),
          (try_end),
        (try_end),
      (try_end),

        (try_for_range, ":cur_slot", 0, 4),
          (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
          (gt, ":cur_weapon", 0),
          (call_script,"script_get_weapon_type",":cur_weapon"),
          (assign,":weapon_type",reg0),
          (gt, ":weapon_type", -1),
          (agent_set_slot,":agent_no",":weapon_type",":cur_weapon"),
        (try_end),
    ])

custom_commander_agent_weapons_fix =(
  1, 0, 0, [],
    [
      (get_player_agent_no, ":player_agent"),
      (try_for_agents, ":agent_no"),
        (agent_is_alive, ":agent_no"),
        (agent_is_human, ":agent_no"),
        (agent_get_troop_id, ":troop_no", ":agent_no"),
        (neq, ":agent_no", ":player_agent"),
        
        (agent_get_team, ":agent_team", ":agent_no"),
        (agent_get_division, ":agent_division", ":agent_no"),
        (team_get_weapon_usage_order, ":weapon_usage_order", ":agent_team", ":agent_division"),
        #(team_get_hold_fire_order, ":hold_fire_order", ":agent_team", ":agent_division"),
        
        (store_add, ":slot", slot_team_d0_order_weapon, ":agent_division"),
        (team_get_slot, ":caba_weapon_order", ":agent_team", ":slot"),
        (store_add, ":slot", slot_team_d0_order_shield, ":agent_division"),
        (team_get_slot, ":shield_order", ":agent_team", ":slot"),
        
        (eq, ":weapon_usage_order", wordr_use_any_weapon),   
        (this_or_next|eq, ":caba_weapon_order",0),
        (eq, ":caba_weapon_order", clear), # For Caba'drin orders; no active weapon order
            
        (agent_get_ammo, ":num_ammo", ":agent_no"),
        
        (try_begin),
          (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, mummy_curse),
          (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, taunt),
          #(this_or_next|eq, ":hold_fire_order", wordr_use_melee_weapons),
          (le, ":num_ammo", 0),
          (agent_get_wielded_item, ":weapon_item", ":agent_no", 0),
          (gt, ":weapon_item", 0),
          (agent_get_horse, ":horse_agent", ":agent_no"),
          (neg|ge, ":horse_agent", 0),            
          (team_get_movement_order, ":movement_order", ":agent_team", ":agent_division"),

          (agent_get_slot,":agent_2_hand",":agent_no",slot_agent_two_handed_wp),
          (agent_get_slot,":agent_pike",":agent_no",slot_agent_pike_wp),
          (agent_get_slot,":agent_spear",":agent_no",slot_agent_spear_wp),
          (agent_get_slot,":agent_1_hand",":agent_no",slot_agent_one_handed_wp),
          (agent_get_slot,":agent_lance",":agent_no",slot_agent_lance_wp),
          
          (assign,":agent_shield",-1),
          (try_for_range, ":cur_slot", 0, 4),
            (neg|agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, taunt),
            (eq,":agent_shield",-1),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (gt, ":cur_weapon", 0),
            (item_get_type, ":i_type", ":cur_weapon"),
            (eq, ":i_type", itp_type_shield),
            (assign,":agent_shield",":cur_weapon"),
          (try_end),


          (try_begin),
            (neg|eq, ":weapon_item", "itm_jingubang"), 
            (this_or_next|item_has_property, ":weapon_item", itp_couchable),
            (eq, ":weapon_item",":agent_lance"),
            (assign, ":end_cond", slot_agent_pike_wp),
            (try_for_range, ":cur_slot", slot_agent_two_handed_wp, ":end_cond"),
              (agent_get_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
              (gt, ":cur_weapon", 0),
              (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
              (assign, ":end_cond", 0), # stop
            (try_end),
          (try_end),
          
          (try_begin),
            (gt,":agent_shield",-1),
            (neg|eq,":shield_order",0),
            (this_or_next|eq, ":weapon_item",":agent_1_hand"),
            (eq, ":weapon_item",":agent_spear"),
            (agent_get_wielded_item, ":shield", ":agent_no", 1),
            (lt, ":shield", 0),
            (agent_set_wielded_item, ":agent_no", ":agent_shield"),
          (try_end),
          
          (try_begin),
            (neg|agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, taunt),
            (this_or_next|eq, ":weapon_item",":agent_2_hand"),
            (eq, ":weapon_item",":agent_1_hand"),
            (gt,":agent_pike",0),
            (item_get_weapon_length, ":pike_length", ":weapon_item"),
            (val_add,":pike_length", 150),
            (try_begin),
              (eq, ":weapon_item",":agent_2_hand"),
              (call_script, "script_cf_agent_check_no_enemies_nearby", ":agent_no", 650),
              (agent_set_wielded_item, ":agent_no", ":agent_pike"),
            (else_try),
              (eq, ":weapon_item",":agent_1_hand"),
              (gt,":agent_shield",0),
              (neg|eq,":shield_order",1),
                #(val_div, ":pike_length", 2),
              (call_script, "script_cf_agent_check_no_enemies_nearby", ":agent_no", 650),
              (agent_set_wielded_item, ":agent_no", ":agent_pike"),
            (else_try), 
              (eq, ":weapon_item",":agent_1_hand"),
              (val_div, ":pike_length", 2),
              (call_script, "script_cf_agent_check_no_enemies_nearby", ":agent_no", ":pike_length"),
              (agent_set_wielded_item, ":agent_no", ":agent_pike"),
            (try_end),
          (else_try),
            (agent_slot_eq, ":agent_no", slot_agent_spearwall, 0),
            (eq, ":weapon_item",":agent_pike"),
            (item_get_weapon_length, ":pike_length", ":weapon_item"),
            (val_sub,":pike_length", 100),
            (try_begin),
              (agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, taunt),
              (try_for_range, ":cur_slot", slot_agent_two_handed_wp, slot_agent_spear_wp),
                (agent_get_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                (gt, ":cur_weapon", 0),
                (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
              (try_end),
            (else_try), 
              (gt,":agent_2_hand",0),
              (val_div, ":pike_length", 2),
              (call_script, "script_cf_agent_check_enemies_nearby", ":agent_no", ":pike_length"),
              (agent_set_wielded_item, ":agent_no", ":agent_2_hand"),
            (else_try), 
              (gt,":agent_1_hand",0),
              (gt,":agent_shield",0),
              (neg|eq,":shield_order",0),
              (call_script, "script_cf_agent_check_enemies_nearby", ":agent_no", 200),
              (agent_set_wielded_item, ":agent_no", ":agent_1_hand"),
              (agent_set_wielded_item, ":agent_no", ":agent_shield"),
            (else_try), 
              (gt,":agent_1_hand",0),
              (neg|eq,":movement_order",mordr_stand_ground),
              #(val_div, ":pike_length", 3),
              #(call_script, "script_cf_agent_check_enemies_nearby", ":agent_no", 200),
              (call_script, "script_cf_agent_check_enemies_nearby", ":agent_no", 150),
              (agent_set_wielded_item, ":agent_no", ":agent_1_hand"),
            (try_end),    
          (else_try), 
            (agent_slot_eq, ":agent_no", slot_agent_spearwall, 0),
            (gt,":agent_spear",0),
            (assign,":use_spear",0),
            (try_begin),
              (party_slot_eq, "p_main_party", slot_party_pref_wu_spear, 1),   
              (assign,":use_spear",1),
            (else_try),
              (party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),  
              (try_begin),
                (this_or_next|eq,":movement_order",mordr_follow),
                (eq,":movement_order",mordr_charge),
                (assign,":use_spear",-1),
              (else_try),
                (assign,":use_spear",-1),
                (call_script, "script_cf_agent_check_no_enemies_nearby", ":agent_no", 150),
                (assign,":use_spear",1),
              (try_end),
            (else_try), 
              (party_slot_eq,"p_main_party", slot_party_is_in_siege, 0),  
              (party_slot_eq, "p_main_party", slot_party_pref_wu_spear, 0),   
              (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 3000),
              (assign,":num_enemie",reg0),
              (call_script, "script_agent_get_num_enemies_cav_nearby", ":agent_no", 3000),
              (assign,":enemies_cav",reg0),
              (val_div,":num_enemie",2),
              (try_begin),
                (ge,":enemies_cav",":num_enemie"),
              (else_try),
                (lt,":enemies_cav",":num_enemie"),
                (try_begin),
                  (eq,":movement_order",mordr_follow),
                  (assign,":use_spear",-1),
                (else_try),
                  (this_or_next|eq,":movement_order",mordr_stand_ground),
                  (eq,":movement_order",mordr_hold),
                  (assign, ":use_spear", 1),
                (try_end),
              (try_end),
            (try_end),
          (else_try), 
            (gt,":agent_spear",0),
            (eq,1,0),
            (agent_get_position, pos1, ":agent_no"), # Find distance of nearest 3 enemies
            (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":agent_team", pos1),
            (assign, ":avg_dist", reg0),
            (assign, ":closest_dist", reg1),
              
            (assign,":use_spear",0),
                        
            (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 3000),
            (assign,":num_enemie",reg0),
            (call_script, "script_agent_get_num_enemies_cav_nearby", ":agent_no", 3000),
            (assign,":enemies_cav",reg0),
            (val_div,":num_enemie",2),

            (try_begin),
              (party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),   
              (party_slot_eq, "p_main_party", slot_party_pref_wu_spear, 1),   
              (assign,":use_spear",1),
            (else_try),
              (party_slot_eq,"p_main_party", slot_party_is_in_siege, 0),   
              (this_or_next|eq,":movement_order",mordr_stand_ground),
              (eq,":movement_order",mordr_hold),
              (assign, ":use_spear", 1),
            (else_try),
              (party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),   
              (ge,":enemies_cav",":num_enemie"),
              (try_begin),
                (this_or_next|eq,":movement_order",mordr_follow),
                (eq,":movement_order",mordr_charge),
                (neq,":use_spear",1),
              (try_end),
              (assign,":use_spear",1),
            (else_try),
              (party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),   
              (lt,":enemies_cav",":num_enemie"),
              (try_begin),
                (this_or_next|lt, ":closest_dist", 300), # Closest enemy within 3 meters?
                (lt, ":avg_dist", 700), # Are the 3 enemies within an average of 7 meters?
                (agent_get_combat_state, ":combat", ":agent_no"),
                (gt, ":combat", 3), # Agent currently in combat? ...avoids switching before contact
                #(eq, ":weapon_item", ":agent_spear"), # Still using spear?
                (assign,":use_spear",-1),
              (else_try),
              (party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),   
                (this_or_next|eq,":movement_order",mordr_follow),
                (eq,":movement_order",mordr_charge),
                (assign, ":use_spear", -1),
              (try_end),
            (try_end),
            #(eq,":use_spear",1),
            (agent_get_wielded_item, ":wielded", ":agent_no", 0), # Get wielded
            (try_begin), #Weapon Use
              (eq,":use_spear",-1),
              (eq, ":wielded", ":agent_spear"), 
              (call_script, "script_weapon_use_backup_weapon", ":agent_no", 1), # Then equip a close weapon
            (else_try),
              (eq,":use_spear",1),
              (neq, ":wielded", ":agent_spear"), 
              (agent_set_wielded_item, ":agent_no", ":agent_spear"), # Then equip it!                
            (try_end),
          (else_try),
            (eq,":agent_spear",0),
            (eq,":agent_pike",0),
            (gt, ":agent_1_hand",0),
            (gt, ":agent_2_hand",0),

            (assign,":use_1_hand",0),

            (try_begin),
              (party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
              (party_slot_eq, "p_main_party", slot_party_pref_wu_spear, 1),
              (item_get_type, ":type", ":agent_2_hand"),
              (eq, ":type", itp_type_polearm),
              (assign,":use_1_hand",-1),
            (else_try),
              (agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, taunt),
              (assign,":use_1_hand",-1),
            (else_try),
              (gt,":agent_shield",0),
              (item_get_type, ":type", ":agent_2_hand"),
              (assign,":use_1_hand", 0),
              (try_begin),
                (eq, ":type", itp_type_polearm),
                (try_begin),
                  (eq,":movement_order",mordr_charge),
                  
                  (try_begin),
                    (call_script, "script_cf_agent_check_enemies_nearby", ":agent_no", 1000),
                    (assign,":use_1_hand", -1),
                  (else_try),
                    (assign,":use_1_hand", 1),
                  (try_end),
                (else_try),
                  (this_or_next|eq,":movement_order",mordr_stand_ground),
                  (eq,":movement_order",mordr_hold),
                  (try_begin),
                    (call_script, "script_cf_agent_check_enemies_nearby", ":agent_no", 300),
                    (assign,":use_1_hand", -1),
                  (else_try),
                    (assign,":use_1_hand", 1),
                  (try_end),
                (else_try),
                  (party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
                  (eq, ":weapon_item", ":agent_2_hand"),
                  (call_script, "script_cf_agent_check_no_enemies_nearby", ":agent_no", 500),
                  (assign,":use_1_hand", 1),
                (else_try),
                  #(neg|eq,":shield_order",1),
                  (call_script, "script_cf_agent_check_enemies_nearby", ":agent_no", 600),
                  (assign,":use_1_hand", -1),
                (try_end),
              (else_try),
                (eq, ":type", itp_type_two_handed_wpn),
                (try_begin),
                  (eq,":movement_order",mordr_charge),
                  (try_begin),
                    (call_script, "script_cf_agent_check_enemies_nearby", ":agent_no", 600),
                    (assign,":use_1_hand", -1),
                  (else_try),
                    (assign,":use_1_hand", 1),
                  (try_end),
                (else_try),
                  (this_or_next|eq,":movement_order",mordr_stand_ground),
                  (eq,":movement_order",mordr_hold),
                  (assign,":use_1_hand", 1),
                (else_try),
                  (neg|eq,":movement_order",mordr_charge),
                  (neg|eq,":movement_order",mordr_stand_ground),
                  (neg|eq,":movement_order",mordr_hold),
                  (eq, ":weapon_item", ":agent_2_hand"),
                  
                  (try_begin),
                    (call_script, "script_cf_agent_check_no_enemies_nearby", ":agent_no", 450),
                    (assign,":use_1_hand", 1),
                  #(else_try),
                    #(assign,":use_1_hand", -1),
                  (try_end),
                (try_end),
              (try_end),
            (else_try),
              (lt,":agent_shield",0),
              (assign,":use_1_hand",-1),
            (try_end),

            (try_begin),
              (eq,":use_1_hand",-1),
              (eq, ":weapon_item",":agent_1_hand"),
              (gt, ":agent_2_hand",0),
              (agent_set_wielded_item, ":agent_no", ":agent_2_hand"),
            (else_try),
              (eq,":use_1_hand",1),
              (eq, ":weapon_item",":agent_2_hand"),
              (gt, ":agent_1_hand",0),
              (agent_set_wielded_item, ":agent_no", ":agent_1_hand"),
              (try_begin),
                (neg|eq,":shield_order",0),
                (gt,":agent_shield",0),
                (agent_set_wielded_item, ":agent_no", ":agent_shield"),
              (try_end),
            (try_end),
            
          (try_end),
        (try_end),
        
        (try_begin),
          (gt, ":num_ammo", 0), # horse archer
          (agent_slot_eq, ":agent_no", slot_agent_is_skirmish, 3),
          (assign, ":switch_to_ranger_wpns", 0), # 0 = not switch, 1 = switch to ranger weapons, -1 = switch to short weapons
          (agent_get_wielded_item, ":weapon_item", ":agent_no", 0),
          (gt, ":weapon_item", 0),
          (agent_get_horse, ":horse_agent", ":agent_no"),
          (store_skill_level, ":skill_level", "skl_horse_archery", ":troop_no"),
          
          (agent_get_slot,":agent_2_hand",":agent_no",slot_agent_two_handed_wp),
          (agent_get_slot,":agent_1_hand",":agent_no",slot_agent_one_handed_wp),
          (agent_get_slot,":agent_spear",":agent_no",slot_agent_spear_wp),
          (agent_get_slot,":agent_lance",":agent_no",slot_agent_lance_wp),
          (agent_get_slot,":agent_horsebow",":agent_no",slot_agent_horsebow),

          (try_begin),
            (ge, ":agent_spear", 0),
            (gt, ":agent_lance", 0),
            (assign, ":agent_spear", ":agent_lance"),
          (try_end),

          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, force_jump),
            (agent_get_slot, ":time", ":agent_no", slot_agent_special_ability_counter),
            (gt,":time",0),
            (assign, ":horse_agent", ":agent_no"),
            (assign, ":skill_level", 10),
          (try_end),
          
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, dive),
            (agent_get_slot, ":time", ":agent_no", slot_agent_special_ability_counter),
            (gt,":time",0),
            (assign, ":horse_agent", ":agent_no"),
          (else_try),
            (ge, ":horse_agent", 0),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, dive),
            (agent_get_slot, ":time", ":agent_no", slot_agent_special_ability_counter),
            (lt,":time",0),
            (assign, ":horse_agent", -1),
          (try_end),

          (assign,":agent_shield",-1),
          (try_for_range, ":cur_slot", 0, 4),
            (neg|agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, taunt),
            (eq,":agent_shield",-1),
            (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
            (gt, ":cur_weapon", 0),
            (item_get_type, ":i_type", ":cur_weapon"),
            (eq, ":i_type", itp_type_shield),
            (assign,":agent_shield",":cur_weapon"),
          (try_end),
          
          # decide switch aim
          (try_begin),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, taunt),
            (agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, mummy_curse),
            (assign, ":switch_to_ranger_wpns", -1),
          (else_try),
          
          
          
            (ge, ":horse_agent", 0),
            #(party_slot_eq, "p_main_party", slot_party_pref_wu_harcher, 0),
            (set_fixed_point_multiplier, 10),
            (agent_get_speed, pos1, ":agent_no"),
            (position_get_y, ":agent_speed", pos1),
            (try_begin),
              (item_get_type, ":i_type", ":agent_horsebow"),
              (eq, ":i_type", itp_type_pistol),
              (try_begin),
                (ge, ":agent_spear", 0),
                (try_begin),
                  (ge, ":agent_speed", 60),
                  (neg|eq, ":weapon_item", ":agent_spear"),
                  (agent_set_wielded_item, ":agent_no", ":agent_spear"),
                  (assign, ":switch_to_ranger_wpns", 0),
                (else_try),
                  (le, ":agent_speed", 40),
                  (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 200),
                  (assign, ":num_enemies", reg0),
                  (ge, ":num_enemies", 2),
                  (assign, ":end_cond", slot_agent_spear_wp),
                  (try_for_range, ":cur_slot", slot_agent_two_handed_wp, ":end_cond"),
                    (agent_get_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                    (gt, ":cur_weapon", 0),
                    (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
                    (assign, ":end_cond", 0), # stop
                  (try_end),
                  (assign, ":switch_to_ranger_wpns", 0),
                (else_try),
                  (le, ":agent_speed", 40),
                  (neg|eq, ":weapon_item", ":agent_horsebow"),
                  (agent_set_wielded_item, ":agent_no", ":agent_horsebow"),
                  (assign, ":switch_to_ranger_wpns", 0),
                (try_end),
              (else_try),
                (try_begin),
                  (ge, ":agent_speed", 40),
                  (assign, ":switch_to_ranger_wpns", 1),
                (else_try),
                  (le, ":agent_speed", 40),
                  (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 150),
                  (assign, ":num_enemies", reg0),
                  (ge, ":num_enemies", 1),
                  (assign, ":switch_to_ranger_wpns", -1),
                (try_end),
              (try_end),
            (else_try),
              (gt, ":agent_spear", 0),
              (try_begin),
                (ge, ":agent_speed", 60),
                (neg|eq, ":weapon_item", ":agent_spear"),
                (agent_set_wielded_item, ":agent_no", ":agent_spear"),
                (assign, ":switch_to_ranger_wpns", 0),
              (else_try),
                (le, ":agent_speed", 20),
                (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 500),
                (assign, ":num_enemies", reg0),
                (lt, ":num_enemies", 1),
                (agent_set_wielded_item, ":agent_no", ":agent_horsebow"),
                (assign, ":switch_to_ranger_wpns", 0),
              (else_try),
                (le, ":agent_speed", 40),
                (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 200),
                (assign, ":num_enemies", reg0),
                (ge, ":num_enemies", 1),
                (assign, ":end_cond", slot_agent_spear_wp),
                (try_for_range, ":cur_slot", slot_agent_two_handed_wp, ":end_cond"),
                  (agent_get_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                  (gt, ":cur_weapon", 0),
                  (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
                  (assign, ":end_cond", 0), # stop
                (try_end),
                (assign, ":switch_to_ranger_wpns", 0),
              (try_end),
            (else_try),
              (ge, ":agent_speed", 80),
              (gt, ":skill_level", 0), 
              (assign, ":switch_to_ranger_wpns", 1),
            (else_try),
              (le, ":agent_speed", 20),
              (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 500),
              (assign, ":num_enemies", reg0),
              (lt, ":num_enemies", 1),
              (assign, ":switch_to_ranger_wpns", 1),
            (else_try),
              (le, ":agent_speed", 40),
              (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 200),
              (assign, ":num_enemies", reg0),
              (ge, ":num_enemies", 1),
              (assign, ":switch_to_ranger_wpns", -1),
            (try_end),
          (else_try),
            (gt, ":weapon_item", 0),
            (item_get_type, ":i_type", ":weapon_item"),
            (neg|is_between, ":i_type", itp_type_bow,itp_type_goods),
            (neg|is_between, ":i_type", itp_type_pistol,itp_type_bullets),# not ranger weapon
            (this_or_next|gt,":agent_2_hand",0),
            (gt,":agent_1_hand",0),
            (try_begin),
              (assign, ":weapon_item_2", ":weapon_item"),
              (val_add, ":weapon_item_2", -1),
              (item_get_type, ":type", ":weapon_item_2"),
              (eq, ":type", itp_type_thrown),
              (assign, ":switch_to_ranger_wpns", -2),
            (else_try),
              (gt,":agent_shield",0),
              (item_get_type, ":type", ":agent_2_hand"),
              (try_begin),
                (eq, ":type", itp_type_polearm),
                (party_slot_eq,"p_main_party", slot_party_is_in_siege, 1),
                (try_begin),
                  (neg|eq,":shield_order",1),
                  (call_script, "script_cf_agent_check_enemies_nearby", ":agent_no", 500),
                  (assign,":switch_to_ranger_wpns", -3),
                (else_try),
                  (call_script, "script_cf_agent_check_no_enemies_nearby", ":agent_no", 500),
                  (assign, ":switch_to_ranger_wpns", -4),
                (try_end),
              (else_try),
                (eq, ":type", itp_type_two_handed_wpn),
                (try_begin),
                  (eq, ":weapon_item", ":agent_2_hand"),
                  (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 1000),
                  (assign, ":num_enemies", reg0),
                  (le, ":num_enemies", 0),
                  (try_for_range, ":cur_slot", 0, 4),
                    (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                    (gt, ":cur_weapon", 0),
                    (item_get_type, ":i_type", ":cur_weapon"),
                    (neg|is_between, ":i_type", itp_type_shield,itp_type_goods),
                    (neg|is_between, ":i_type", itp_type_pistol,itp_type_bullets),# not ranger weapon
                    (neq, ":cur_weapon", ":agent_2_hand"),
                    (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
                  (try_end),
                (try_end),
              (try_end),
            (else_try),
              (eq, ":weapon_item",":agent_1_hand"),
              (lt,":agent_shield",0),
              (assign,":switch_to_ranger_wpns", -3),
            (try_end),
          (try_end),
          
          # execute switch aim
          (try_begin),
            (eq, ":switch_to_ranger_wpns", -1),
            (try_begin),
              (gt, ":weapon_item", 0),
              (item_get_type, ":i_type", ":weapon_item"),
              (this_or_next|is_between, ":i_type", itp_type_bow,itp_type_goods),# ranger weapon
              (is_between, ":i_type", itp_type_pistol,itp_type_bullets),
              (try_for_range, ":cur_slot", 0, 4),
                (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                (gt, ":cur_weapon", 0),
                (item_get_type, ":i_type", ":cur_weapon"),
                (neg|is_between, ":i_type", itp_type_shield,itp_type_goods),
                (neg|is_between, ":i_type", itp_type_pistol,itp_type_bullets),# not ranger weapon
                (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":switch_to_ranger_wpns", -2),
            (try_begin),
              (gt, ":weapon_item", 0),
              (item_get_type, ":i_type", ":weapon_item"),
              (neg|is_between, ":i_type", itp_type_bow,itp_type_goods),
              (neg|is_between, ":i_type", itp_type_pistol,itp_type_bullets),# not ranger weapon

              (assign, ":weapon_item_2", ":weapon_item"),
              (val_add, ":weapon_item_2", -1),
              (item_get_type, ":type", ":weapon_item_2"),
              (eq, ":type", itp_type_thrown),
              (try_for_range, ":cur_slot", 0, 4),
                (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                (gt, ":cur_weapon", 0),
                (item_get_type, ":i_type", ":cur_weapon"),
                (neg|is_between, ":i_type", itp_type_shield,itp_type_goods),
                (neg|is_between, ":i_type", itp_type_pistol,itp_type_bullets),# not ranger weapon
                (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":switch_to_ranger_wpns", -3),
            (eq, ":weapon_item",":agent_1_hand"),
            (gt, ":agent_2_hand",0),
            (agent_set_wielded_item, ":agent_no", ":agent_2_hand"),
          (else_try),
            (eq, ":switch_to_ranger_wpns", -4),
            (eq, ":weapon_item",":agent_2_hand"),
            (gt, ":agent_1_hand",0),
            (agent_set_wielded_item, ":agent_no", ":agent_1_hand"),
            (try_begin),
              (neg|eq,":shield_order",0),
              (gt,":agent_shield",0),
              (agent_set_wielded_item, ":agent_no", ":agent_shield"),
            (try_end),
          (else_try),
            (eq, ":switch_to_ranger_wpns", 1),
            (try_begin),
              (gt, ":weapon_item", 0),
              (item_get_type, ":i_type", ":weapon_item"),
              (neg|is_between, ":i_type", itp_type_bow,itp_type_goods),
              (neg|is_between, ":i_type", itp_type_pistol,itp_type_bullets),# not ranger weapon

              #(is_between,":i_type", itp_type_one_handed_wpn, itp_type_arrows),# not ranger weapon
              #(neg|is_between, ":weapon_item", ranged_weapons_begin, ranged_weapons_end),
              (try_for_range, ":cur_slot", 0, 4),
                (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                (gt, ":cur_weapon", 0),
                (item_get_type, ":i_type", ":cur_weapon"),
                (this_or_next|is_between, ":i_type", itp_type_bow,itp_type_goods),# ranger weapon
                (is_between, ":i_type", itp_type_pistol,itp_type_bullets),
                
                (neg|item_has_property, ":cur_weapon", itp_cant_use_on_horseback),
                (neg|item_has_property, ":cur_weapon", itp_cant_reload_on_horseback),
                (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
              (try_end),
            (try_end),
          (try_end),
          
        (else_try),
          #(this_or_next|eq, ":hold_fire_order", aordr_hold_your_fire),
          (this_or_next|agent_set_slot, ":agent_no", slot_agent_is_skirmish, 1),
          (le, ":num_ammo", 0),
          # (le, ":num_ammo", 0), # melee
          
          (agent_get_horse, ":horse_agent", ":agent_no"),
          (assign, ":switch_to_lances", 0), # 0 = not switch, 1 = switch to lances, -1 = switch to short weapons
          (agent_get_wielded_item, ":weapon_item", ":agent_no", 0),
          # decide switch aim
          (gt, ":weapon_item", 0),
          (try_begin),
            (ge, ":horse_agent", 0),
            

            (agent_get_slot,":agent_2_hand",":agent_no",slot_agent_two_handed_wp),
            (agent_get_slot,":agent_1_hand",":agent_no",slot_agent_one_handed_wp),
            (agent_get_slot,":agent_spear",":agent_no",slot_agent_spear_wp),
            (agent_get_slot,":agent_lance",":agent_no",slot_agent_lance_wp),

            (assign,":agent_shield",-1),
            (try_for_range, ":cur_slot", 0, 4),
              (neg|agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, taunt),
              (eq,":agent_shield",-1),
              (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
              (gt, ":cur_weapon", 0),
              (item_get_type, ":i_type", ":cur_weapon"),
              (eq, ":i_type", itp_type_shield),
              (assign,":agent_shield",":cur_weapon"),
            (try_end),

            (this_or_next|gt, ":agent_spear", 0),
            (gt, ":agent_lance", 0),
            
            #(party_slot_eq, "p_main_party", slot_party_pref_wu_lance, 0),
            (set_fixed_point_multiplier, 10),
            (agent_get_speed, pos1, ":agent_no"),
            (position_get_y, ":agent_speed", pos1),
            (try_begin),
              (ge, ":agent_speed", 80),
              (assign, ":switch_to_lances", 1),
            (else_try),
              (le, ":agent_speed", 20),
              (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 2000),
              (assign, ":num_enemies", reg0),
              (le, ":num_enemies", 0),
              (assign, ":switch_to_lances", 1),
            (else_try),
              (le, ":agent_speed", 40),
              (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 200),
              (assign, ":num_enemies", reg0),
              (ge, ":num_enemies", 1),
              (assign, ":switch_to_lances", -1),
            (try_end),
          (else_try),
            (assign, ":switch_to_lances", -1),
          (try_end),
                    
          # execute switch aim
          (try_begin),
            (eq, ":switch_to_lances", -1),
            (try_begin),
              (gt, ":weapon_item", 0),
              #(item_get_type, ":i_type", ":weapon_item"),
              (call_script,"script_get_weapon_type",":weapon_item"),
              (assign,":weapon_type",reg0),
              (this_or_next|eq, ":weapon_type", slot_agent_spear_wp),
              (eq, ":weapon_type", slot_agent_lance_wp),
              
              (try_begin),
                (gt, ":agent_2_hand",0),
                (gt, ":agent_1_hand",0),
                (try_begin),
                  (item_get_type, ":i_type", ":agent_2_hand"),
                  (eq, ":i_type", itp_type_polearm),
                  (agent_set_wielded_item, ":agent_no", ":agent_1_hand"),
                (else_try),
                  (gt,":agent_shield",0),
                  (neg|eq,":shield_order",0),
                  (agent_set_wielded_item, ":agent_no", ":agent_1_hand"),
                (else_try),
                  (agent_set_wielded_item, ":agent_no", ":agent_2_hand"),
                (try_end),
              (else_try),
                (gt, ":agent_1_hand",0),
                #(le, ":agent_2_hand",0),
                (agent_set_wielded_item, ":agent_no", ":agent_1_hand"),
              (else_try),
                #(le, ":agent_1_hand",0)
                (gt, ":agent_2_hand",0),
                (agent_set_wielded_item, ":agent_no", ":agent_2_hand"),
              (else_try),
                (try_for_range, ":cur_slot", 0, 4),
                  (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                  (gt, ":cur_weapon", 0),
                  (item_get_type, ":i_type", ":cur_weapon"),
                  (neq, ":i_type", itp_type_shield),
                  (neq, ":i_type", itp_type_polearm),
                  (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
                (try_end),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":switch_to_lances", 1),
            (try_begin),
              (gt, ":weapon_item", 0),
              (call_script,"script_get_weapon_type",":weapon_item"),
              (assign,":weapon_type",reg0),
              (neg|eq, ":weapon_type", slot_agent_spear_wp),
              (neg|eq, ":weapon_type", slot_agent_lance_wp),
              
              (try_for_range, ":cur_slot", 0, 4),
                (agent_get_item_slot, ":cur_weapon", ":agent_no", ":cur_slot"),
                (gt, ":cur_weapon", 0),
                
                (call_script,"script_get_weapon_type",":cur_weapon"),
                (assign,":type",reg0),
                (this_or_next|eq, ":type", slot_agent_spear_wp),
                (eq, ":type", slot_agent_lance_wp),
                (agent_set_wielded_item, ":agent_no", ":cur_weapon"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),

    (try_end),
  ])
#(game_key_is_down, gk_defend),(game_key_clicked, gk_attack)

shield_bash_time  =(
   1, 0, 0, [],
   [
    (get_player_agent_no,":player"),
    
    
    
    (try_for_agents, ":agent"),
      (agent_is_human, ":agent"),
      (agent_is_active, ":agent"),
      (agent_is_alive, ":agent"),
      (agent_set_slot, ":agent", slot_agent_has_been_special_ability, 0),

      (agent_get_troop_id, ":shooter_troop", ":agent"),
      (try_begin),
        (agent_get_slot, ":timer", ":agent", slot_agent_shield_bash_timer),
        (val_add, ":timer", -1),
        (val_max, ":timer", 0),
        (agent_set_slot, ":agent", slot_agent_shield_bash_timer, ":timer"),
      (try_end),   
       
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_special_ability_extra_counter),
        (gt, ":timer_2", 0),
        (val_sub, ":timer_2", 1),
        (val_max, ":timer_2", 0),
        (agent_set_slot, ":agent", slot_agent_special_ability_extra_counter, ":timer_2"),
      (try_end),    
      
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent", "itm_perk_thrown_7"),
        (agent_refill_ammo, ":agent"),
      (try_end),  
      
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_spell_1_cooldown),
        (gt, ":timer_2", 0),
        (val_sub, ":timer_2", 1),
        (val_max, ":timer_2", 0),
        (agent_set_slot, ":agent", slot_agent_spell_1_cooldown, ":timer_2"),
      (try_end),    
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_spell_2_cooldown),
        (gt, ":timer_2", 0),
        (val_sub, ":timer_2", 1),
        (val_max, ":timer_2", 0),
        (agent_set_slot, ":agent", slot_agent_spell_2_cooldown, ":timer_2"),
      (try_end),    
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_spell_3_cooldown),
        (gt, ":timer_2", 0),
        (val_sub, ":timer_2", 1),
        (val_max, ":timer_2", 0),
        (agent_set_slot, ":agent", slot_agent_spell_3_cooldown, ":timer_2"),
      (try_end),    
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_spell_4_cooldown),
        (gt, ":timer_2", 0),
        (val_sub, ":timer_2", 1),
        (val_max, ":timer_2", 0),
        (agent_set_slot, ":agent", slot_agent_spell_4_cooldown, ":timer_2"),
      (try_end),    
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_spell_cast_time),
        (gt, ":timer_2", 0),
        (val_sub, ":timer_2", 1),
        (val_max, ":timer_2", 0),
        (agent_set_slot, ":agent", slot_agent_spell_cast_time, ":timer_2"),
      (try_end),    
            
      (try_begin),
        (agent_get_slot, ":time", ":agent", slot_agent_is_fly),
        (neg|eq, ":agent",":player"),
        (agent_get_animation, ":anim", ":agent"),
        (gt,":time",0),
        (agent_get_horse, ":horse_agent", ":agent"),
        (lt, ":horse_agent", 0),
        (this_or_next|is_between,":time",5,10),
        (this_or_next|neq, ":anim", "anim_sw_force_jump3"),
        (neq, ":anim", "anim_sw_force_jump2"),
        
        (try_begin),
          (this_or_next|eq,":shooter_troop","trp_ghost"),
          (this_or_next|eq,":shooter_troop","trp_wight"),
          (this_or_next|eq,":shooter_troop","trp_demon_5"),
          (this_or_next|eq,":shooter_troop","trp_we_recruit"),
          (this_or_next|eq,":shooter_troop","trp_dryad"),
          (this_or_next|eq,":shooter_troop","trp_pixie"),
          (this_or_next|eq,":shooter_troop","trp_undead_magic_1"),
          
          (this_or_next|eq,":shooter_troop","trp_air_elemental_2"),
          (this_or_next|eq,":shooter_troop","trp_air_elemental_3"),
          (this_or_next|eq,":shooter_troop","trp_fire_elemental_2"),
          (this_or_next|eq,":shooter_troop","trp_fire_elemental_3"),
          
          (this_or_next|eq,":shooter_troop","trp_air_elemental"),
          (eq,":shooter_troop","trp_fire_elemental"),
          (agent_set_animation, ":agent", "anim_sw_force_jump3", 0),
        (else_try),
          (agent_set_animation, ":agent", "anim_sw_force_jump2", 0),
        (try_end),        
        (agent_set_slot, ":agent", slot_agent_courage_score, 50000),
      (else_try),
        (agent_get_slot, ":time", ":agent", slot_agent_is_fly),
        (le, ":time", 0),
        (agent_get_horse, ":horse_agent", ":agent"),
        (lt, ":horse_agent", 0),
        (agent_get_animation, ":anim", ":agent"),
        (this_or_next|eq, ":anim", "anim_sw_force_jump3"),
        (eq, ":anim", "anim_sw_force_jump2"),
        (call_script, "script_cf_agent_set_animation",  ":agent",  "anim_bash_stun", 0),
      (try_end),     
            
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_is_fly),
        (gt, ":timer_2", 0),
        (val_sub, ":timer_2", 1),
        (try_begin),
          (gt, ":timer_2", 0),
          (eq, ":agent",":player"),
          (agent_set_no_dynamics, ":player", 1),
        (else_try),
          (eq, ":timer_2", 0),
          (eq, ":agent",":player"),
          (agent_set_no_dynamics, ":player", 0),
        (try_end),
        (val_max, ":timer_2", 0),
        (agent_set_slot, ":agent", slot_agent_is_fly, ":timer_2"),
      (try_end),  
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_resilience),
        (gt, ":timer_2", 0),
        (val_sub, ":timer_2", 1),
        (val_max, ":timer_2", 0),
        (agent_set_slot, ":agent", slot_agent_resilience, ":timer_2"),
      (try_end),   
      (try_begin),
        (agent_get_slot, ":time3", ":agent", slot_agent_is_fly),
        (ge,":time3",1),
        (eq, ":agent",":player"),
        (agent_get_position, pos12, ":player"),
        (position_get_distance_to_terrain, ":player_z", pos12),
        (val_div,":player_z",300),
        (store_agent_hit_points, ":inflicted_agent_hp", ":player", 1),
        (val_sub,":inflicted_agent_hp",":player_z"),
        (val_max,":inflicted_agent_hp",1),
        (agent_set_hit_points, ":player",":inflicted_agent_hp",1),
      (try_end),  
      (try_begin),
        (eq, 1, 0),
        (agent_get_animation, ":anim", ":agent", 0),
        (this_or_next|eq, ":anim", "anim_sw_force_jump3"),
        (this_or_next|eq, ":anim", "anim_sw_force_jump2"),
        (eq, ":anim", "anim_power_jump"),
        (agent_get_slot, ":timer", ":agent", slot_agent_special_damage_time),
        (agent_get_slot, ":special", ":agent", slot_agent_special_damage_type),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_is_fly),
        (this_or_next|le,":timer_2", 0),
        (this_or_next|le,":timer", 0),
        (eq,":special",power_jump),
        (agent_set_no_dynamics, ":agent", 0),
        (agent_set_animation, ":agent", "anim_bash_stun", 0),
      (try_end),  
      
      
      (try_begin),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_special_ability_extra_cooldown),
        (gt, ":timer_2", 0),
        (val_sub, ":timer_2", 1),
        (val_clamp, ":timer_2", 0, 101),
        (agent_set_slot, ":agent", slot_agent_special_ability_extra_cooldown, ":timer_2"),
        (eq,":timer_2",0),
        (eq, ":agent",":player"),
        (call_script, "script_str_store_key_name", s8, "$key_special_4"),
        (display_message, "@your special_ability_cooldown is over! clicked {s8} use ", 0xFF0000),
      (try_end),  
      
        
      (try_begin),
        (agent_get_slot, ":time", ":agent", slot_agent_special_ability_counter),
        (gt, ":time", 0),
        (val_sub, ":time", 1),
        (agent_set_slot, ":agent", slot_agent_special_ability_counter, ":time"),
        (eq,":time",0),
        (eq, ":agent",":player"),
        (display_message, "@your special_ability_effect is over!"),
        #(display_message, "@your special_ability_effect is over!", 0xFF0000),
      (else_try),
        (agent_get_slot, ":timer_2", ":agent", slot_agent_special_ability_cooldown),
        (gt, ":timer_2", 0),
        (val_sub, ":timer_2", 1),
        (agent_set_slot, ":agent", slot_agent_special_ability_cooldown, ":timer_2"),
        (eq,":timer_2",0),
        (eq, ":agent",":player"),
        (call_script, "script_str_store_key_name", s8, "$key_special_2"),
        (display_message, "@your special_ability_cooldown is over! clicked {s8} use ", 0xFF0000),
      (try_end),    
            
         
      (try_begin),
        (agent_get_horse, ":horse_agent", ":agent"),
        (gt, ":horse_agent", 0),
        (agent_get_slot, ":time", ":agent", slot_agent_is_fly),
        (gt,":time",0),
        (agent_get_animation, ":anim", ":horse_agent"),
        (this_or_next|is_between,":time",5,10),
        #(this_or_next|is_between,":time",15,20),
        (neq, ":anim", "anim_horse_jump2"),
        (agent_set_animation, ":horse_agent", "anim_horse_jump2", 0),
        (agent_set_slot, ":agent", slot_agent_courage_score, 5000),
      (else_try),
        (agent_get_horse, ":horse_agent", ":agent"),
        (gt, ":horse_agent", 0),
        (agent_get_slot, ":time", ":agent", slot_agent_is_fly),
        (le, ":time", 0),
        (agent_get_animation, ":anim", ":horse_agent"),
        (eq, ":anim", "anim_horse_jump2"),
        (agent_set_animation, ":horse_agent", "anim_horse_jump_end"),
        (neg|eq,":agent",":player"),
        (call_script, "script_cf_agent_dive", ":agent"),
      (try_end),        
      
      
      
      
      (try_begin),
        (get_player_agent_no,":player_agent"),
        (agent_is_alive,":player_agent"),
        (agent_get_slot, ":charge_time", ":player_agent", slot_player_charge_time),
        (try_begin),
                (key_is_down, key_left_mouse_button),
                (val_add,":charge_time", 1),
        (else_try),
                (key_clicked, key_left_mouse_button),
                (assign,":charge_time", 0),
        (else_try),
                (assign,":charge_time", 0),
        (try_end),
        (val_clamp, ":charge_time", 0, 101),
        (agent_set_slot, ":player_agent", slot_player_charge_time, ":charge_time"),
      (try_end),
      
      (try_begin),
        (agent_get_slot, ":agent_mana", ":agent", slot_agent_mana),
        #(val_add, ":agent_mana", 1),
        
        (troop_get_type, ":agent_gender", ":shooter_troop"),
        (try_begin),
          (neg|is_currently_night),
          (eq, ":agent_gender", tf_male),
          (val_add, ":agent_mana", 3),
        (else_try),
          (eq, ":agent_gender", tf_male),
          (val_add, ":agent_mana", 2),
        (else_try),
          (neg|is_currently_night),
          (this_or_next|eq, ":agent_gender", tf_female),
          (eq, ":agent_gender", tf_male_elf),
          (val_add, ":agent_mana", 2),
        (else_try),
          (is_currently_night),
          (eq, ":agent_gender", tf_female_elf),
          (val_add, ":agent_mana", 3),
        (else_try),
          (eq, ":agent_gender", tf_female_elf),
          (val_add, ":agent_mana", 2),
        (else_try),
          (is_currently_night),
          (this_or_next|eq, ":agent_gender", tf_undead),
          (eq, ":agent_gender", tf_vampire),
          (val_add, ":agent_mana", 2),
        (else_try),
          (val_add, ":agent_mana", 1),
        (try_end),
      
        (try_begin),
          (store_skill_level, ":power", skl_magic_skill, ":shooter_troop"),
          (val_div, ":power", 3),
          (val_add, ":agent_mana", ":power"),
        (try_end),
      
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":agent", meditation),
          #(troop_slot_eq, ":shooter_troop", slot_troop_special_ability_passive, meditation),
          (val_add, ":agent_mana", 5),
        (try_end),
      
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":agent", "itm_perk_magic_6"),
          #(troop_slot_eq, ":shooter_troop", slot_troop_special_ability_passive, meditation),
          (val_add, ":agent_mana", -10),
        (try_end),
        
        (try_begin),
          (agent_has_item_equipped,":agent","itm_mask_of_blades"),
          (val_add, ":agent_mana", -10),
        (try_end),
      
        (try_begin),
          (troop_slot_eq, ":shooter_troop", slot_troop_special_ability, Khorne_blessing), 
          (agent_slot_ge, ":agent", slot_agent_special_ability_counter, 1),
          (val_add, ":agent_mana", -10),
        (try_end),
        (try_begin),
          (troop_slot_eq, ":shooter_troop", slot_troop_special_ability, tzeentch_arcane), 
          (agent_slot_ge, ":agent", slot_agent_special_ability_counter, 1),
          (val_add, ":agent_mana", 10),
        (try_end),
        (try_begin),
          (agent_slot_eq, ":agent", slot_agent_special_ability_affect_type, Khorne_blessing), 
          (agent_slot_ge, ":agent", slot_agent_special_ability_affect_time, 1),
          (val_add, ":agent_mana", -10),
        (try_end),
        (try_begin),
          (agent_has_item_equipped,":agent","itm_dawnbreaker_armor"),
          (neg|is_currently_night),
          (val_add, ":agent_mana", 5),
        (try_end),
        (try_begin),
          (agent_has_item_equipped,":agent","itm_magic_mana"),
          (val_add, ":agent_mana", 5),
        (try_end),
        (try_begin),
          (store_current_scene,":current_scene"),
          (neg|is_between, ":current_scene", "scn_town_1_center", "scn_town_1_castle"),
          (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_prison"),
          (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
          (troop_get_inventory_slot_modifier, ":item_modifier",":shooter_troop", ek_head),
          (try_begin),
            #(eq, ":item_modifier", imod_well_made),
           # (val_add, ":agent_mana", 3),
        #  (else_try),
            (eq, ":item_modifier", imod_superb),
            (neg|is_currently_night),
            (val_add, ":agent_mana", 2),
          (try_end),
        (try_end),
        
        
        
        (try_begin),
          (store_current_scene,":current_scene"),
          (neg|is_between, ":current_scene", "scn_town_1_center", "scn_town_1_castle"),
          (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_prison"),
          (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
          (troop_get_inventory_slot_modifier, ":item_modifier",":shooter_troop", ek_foot),
          (eq, ":item_modifier", imod_well_made),
          (val_add, ":agent_mana", 3),
        (try_end),
        
        (try_begin),
          (this_or_next|agent_has_item_equipped,":agent","itm_mirkwood_helm_e"),
          (this_or_next|agent_has_item_equipped,":agent","itm_mages_shade"),
          (this_or_next|agent_has_item_equipped,":agent","itm_valkyrie_helm_3"),
          (this_or_next|agent_has_item_equipped,":agent","itm_bishop_great_helm"),
          (this_or_next|agent_has_item_equipped,":agent","itm_grey_knight_head"),

          (this_or_next|agent_has_item_equipped,":agent","itm_wizard_hat_4"),
          (this_or_next|agent_has_item_equipped,":agent","itm_crown"),
          (agent_has_item_equipped,":agent","itm_tomb_king_helmet"),
          (val_add,":agent_mana",3),
        (else_try),
          (this_or_next|agent_has_item_equipped,":agent","itm_druid_cap"),
          (this_or_next|agent_has_item_equipped,":agent","itm_wizard_hood_2_2"),
          (this_or_next|agent_has_item_equipped,":agent","itm_bishop_mitre"),
          (this_or_next|agent_has_item_equipped,":agent","itm_valkyrie_helm_2"),
          (this_or_next|agent_has_item_equipped,":agent","itm_lich_helm"),
          (this_or_next|agent_has_item_equipped,":agent","itm_archlich_armor"),
          (this_or_next|agent_has_item_equipped,":agent","itm_wizard_hat_3"),
          (this_or_next|agent_has_item_equipped,":agent","itm_highlander_hat1"),
          (this_or_next|agent_has_item_equipped,":agent","itm_highlander_hat1_1"),
          (agent_has_item_equipped,":agent","itm_ogre_nemean_helm"),
          (val_add,":agent_mana",2),
        (else_try),
        
          
          
          (this_or_next|agent_has_item_equipped,":agent","itm_priest_cap_2"),
          (this_or_next|agent_has_item_equipped,":agent","itm_priest_cap_1"),
          (this_or_next|agent_has_item_equipped,":agent","itm_valkyrie_helm_1"),
          (this_or_next|agent_has_item_equipped,":agent","itm_wizard_hat_2_2"),
          (this_or_next|agent_has_item_equipped,":agent","itm_wizard_hat_2_1"),
          (this_or_next|agent_has_item_equipped,":agent","itm_wizard_hat"),
          (this_or_next|agent_has_item_equipped,":agent","itm_demon_hood"),
          (agent_has_item_equipped,":agent","itm_scull_head"),
          (val_add,":agent_mana",1),
        (try_end),
        

        (try_begin),
          (agent_has_item_equipped,":agent","itm_death_finger"),
          (val_add,":agent_mana",2),
        (try_end),

        (try_begin),
          (this_or_next|agent_has_item_equipped,":agent","itm_enchanter_staff"),
          (agent_has_item_equipped,":agent","itm_demon_knight_shield"),
          (val_add,":agent_mana",2),
        (else_try),
          (this_or_next|agent_has_item_equipped,":agent","itm_enchanter_staff_1"),
          (this_or_next|agent_has_item_equipped,":agent","itm_antimage_shield"),
          (agent_has_item_equipped,":agent","itm_mandolin"),
          (val_add,":agent_mana",3),
        (try_end),
        
        (try_begin),
          (this_or_next|agent_has_item_equipped,":agent","itm_ogre_nemean_helm"),
          (this_or_next|agent_has_item_equipped,":agent","itm_balor_body"),
          (this_or_next|agent_has_item_equipped,":agent","itm_demon_warrior_body"),
          (this_or_next|agent_has_item_equipped,":agent","itm_tzeentch_chosen_armor"),
          (this_or_next|agent_has_item_equipped,":agent","itm_caesar_mask"),
          (agent_has_item_equipped,":agent","itm_dragonpriest_helm_1"),
          (val_add,":agent_mana",30),
        (else_try),
          (this_or_next|agent_has_item_equipped,":agent","itm_fire_dragon_sword"),
          (this_or_next|agent_has_item_equipped,":agent","itm_lava_dragon_sword"),
          (this_or_next|agent_has_item_equipped,":agent","itm_green_dragon_sword"),
          (this_or_next|agent_has_item_equipped,":agent","itm_red_dragon_sword"),
          (this_or_next|agent_has_item_equipped,":agent","itm_black_dragon_sword"),
          (agent_has_item_equipped,":agent","itm_gold_dragon_sword"),
          (val_add,":agent_mana",30),
        (try_end),
        
        
        (try_begin),
          (agent_has_item_equipped,":agent","itm_enchanter_robe"),
          (val_add,":agent_mana",4),
        (else_try),
          (this_or_next|agent_has_item_equipped,":agent","itm_saint_robe"),
          (this_or_next|agent_has_item_equipped,":agent","itm_druid_robe_2"),
          (this_or_next|agent_has_item_equipped,":agent","itm_dragonpriest_armor"),
          (this_or_next|agent_has_item_equipped,":agent","itm_empire_priest"),
          (this_or_next|agent_has_item_equipped,":agent","itm_archlich_armor"),
          (this_or_next|agent_has_item_equipped,":agent","itm_grim_raider_armor_2"),
          (agent_has_item_equipped,":agent","itm_mistress_armor"),
          (val_add,":agent_mana",3),
        (else_try),
          (this_or_next|agent_has_item_equipped,":agent","itm_ramun_jacket"),
          (this_or_next|agent_has_item_equipped,":agent","itm_druid_robe_1"),
          (this_or_next|agent_has_item_equipped,":agent","itm_magic_robe_4"),
          (this_or_next|agent_has_item_equipped,":agent","itm_magic_robe_3"),
          (this_or_next|agent_has_item_equipped,":agent","itm_nec_robe"),
          (this_or_next|agent_has_item_equipped,":agent","itm_pit_lord_sword"),
          (agent_has_item_equipped,":agent","itm_lich_armor"),
          (val_add,":agent_mana",2),
        (else_try),
          (this_or_next|agent_has_item_equipped,":agent","itm_magic_robe_2_2"),
          (this_or_next|agent_has_item_equipped,":agent","itm_magic_robe"),
          (this_or_next|agent_has_item_equipped,":agent","itm_magic_robe_2_1"),
          (agent_has_item_equipped,":agent","itm_vampire_tunic"),
          (val_add,":agent_mana",1),
        (try_end),
      
        #(store_character_level,":level",":shooter_troop"),
        #(store_skill_level, ":skl_level", skl_reserved_3, ":shooter_troop"),
        #(val_div, ":level", 10),
        #(val_add, ":agent_mana", ":level"),
        #(val_add, ":agent_mana", ":skl_level"),
        #(val_add, ":agent_mana", ":skl_level"),
        (val_clamp, ":agent_mana", 0, 101),
        (agent_set_slot, ":agent", slot_agent_mana, ":agent_mana"),
      (try_end),  
     
      (try_begin),
        (agent_get_slot, ":stamina", ":agent", slot_agent_stamina),
        (val_add, ":stamina", 1),
        (try_begin),
            (agent_get_slot, ":affect", ":agent", slot_agent_special_ability_affect_time),
            (gt, ":affect", 0),
            (agent_get_slot, ":special", ":agent", slot_agent_special_ability_affect_type),
            (this_or_next|eq,":special", Khorne_blessing),
            (this_or_next|eq,":special", wound_strike),
            (eq,":special", weakness),
            (val_add, ":stamina", -10),
        
        
        (try_end),
        
        (try_begin),
          (troop_slot_eq, ":shooter_troop", slot_troop_special_ability, tzeentch_arcane), 
          (agent_slot_ge, ":agent", slot_agent_special_ability_counter, 1),
          (val_add, ":stamina", -10),
        (try_end),
        (try_begin),
          (troop_slot_eq, ":shooter_troop", slot_troop_special_ability, Khorne_blessing), 
          (agent_slot_ge, ":agent", slot_agent_special_ability_counter, 1),
          (val_add, ":stamina", 10),
        (try_end),
        (try_begin),
          (agent_has_item_equipped,":agent","itm_mask_of_blades"),
          (val_add, ":stamina", 5),
        (else_try),  
          (agent_has_item_equipped,":agent","itm_dawnbreaker_armor"),
          (neg|is_currently_night),
          (val_add, ":stamina", 5),
        (else_try),  
          (agent_has_item_equipped,":agent","itm_saint_robe"),
          (val_add, ":stamina", 1),
        (try_end),
        (try_begin),
          (store_current_scene,":current_scene"),
          (neg|is_between, ":current_scene", "scn_town_1_center", "scn_town_1_castle"),
          (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_prison"),
          (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
          (troop_get_inventory_slot_modifier, ":item_modifier",":shooter_troop", ek_head),
          (try_begin),
            (eq, ":item_modifier", imod_superb),
            (neg|is_currently_night),
            (val_add, ":stamina", 2),
          (try_end),
        (try_end),
        
        (try_begin),
          (store_current_scene,":current_scene"),
          (neg|is_between, ":current_scene", "scn_town_1_center", "scn_town_1_castle"),
          (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_prison"),
          (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
          (troop_get_inventory_slot_modifier, ":item_modifier",":shooter_troop", ek_foot),
          (eq, ":item_modifier", imod_superb),
          (val_add, ":stamina", 1),
        (try_end),
        
        
        (val_clamp, ":stamina", 0, 101),
        (agent_set_slot, ":agent", slot_agent_stamina, ":stamina"),
      (try_end),  
        
      (try_begin),
        (agent_get_slot, ":charm_timer", ":agent", slot_agent_charm_time),
        (neg|eq, ":charm_timer", 0),
        (val_add, ":charm_timer", -1),
        (try_begin),
          (this_or_next|eq, "$g_battle_result", 1),
          (eq, "$g_battle_result", -1),
          (assign, ":charm_timer", -1),
        (try_end),
        (val_max, ":charm_timer", 0),
        (agent_set_slot, ":agent", slot_agent_charm_time, ":charm_timer"),
        (try_begin),
          (eq, ":charm_timer", 0),
          (agent_get_slot, ":old_team", ":agent", slot_agent_old_team_set),
          (agent_set_team, ":agent", ":old_team"),
          (agent_force_rethink, ":agent"),
        (try_end),
      (try_end),  
        
      (try_begin),
        (agent_get_slot, ":spawned_timer", ":agent", slot_agent_spawned),
        (neg|eq, ":spawned_timer", 0),
        (val_add, ":spawned_timer", -1),
        (try_begin),
          (this_or_next|eq, "$g_battle_result", 1),
          (eq, "$g_battle_result", -1),
          (assign, ":spawned_timer", -1),
        (try_end),
        (val_max, ":spawned_timer", 0),
        (agent_set_slot, ":agent", slot_agent_spawned, ":spawned_timer"),
        (try_begin),
          (agent_get_division , ":agent_division", ":agent"),
          (neg|eq, ":agent_division", grc_spearmen),
          (agent_set_division, ":agent", grc_spearmen),
        (try_end),
        
        (try_begin),
          (eq, ":spawned_timer", 0),
          #(agent_set_hit_points,":agent",0),
          #(agent_deliver_damage_to_agent, ":agent", ":agent"),
          (agent_fade_out, ":agent"),
        (try_end),
      (try_end),  
    (try_end),
            
    
   ])

shield_bash_player = (0, 0, 0, 
       [],
       [
        (get_player_agent_no,":player"),
        (agent_is_alive,":player"),
        (agent_slot_eq, ":player", slot_agent_shield_bash_timer, 0),
        

        (assign, ":pass", 0),
        (try_begin),
          (game_key_is_down, gk_attack),
          (game_key_clicked, gk_defend),
          (assign, ":pass", 1),
        (else_try),
          (game_key_is_down, gk_defend),
          (game_key_clicked, gk_attack),
          (assign, ":pass", 1),
        (else_try),
          (key_clicked, "$key_special_5"),
          (agent_get_troop_id, ":troop_id", ":player"),
          (troop_get_slot, ":bash_id", ":troop_id", slot_troop_has_bash),
          (neg|gt,":bash_id",0),
          (neg|item_slot_eq, ":bash_id", slot_item_magic_type, quick_spell),
          (neg|item_slot_eq, ":bash_id", slot_item_magic_type, bash),
          (assign, ":pass", 1),
        (else_try),
          (key_clicked, "$key_special_5"),
          (agent_get_troop_id, ":troop_id", ":player"),
          (troop_get_slot, ":bash_id", ":troop_id", slot_troop_has_bash),
          (eq,":bash_id","itm_bash_shield_bash"),
          (assign, ":pass", 1),
        (try_end),
        
        (try_begin),
          (eq, ":pass", 1),
          (agent_get_horse,":horse",":player"),
          (neg|gt,":horse",0),
          (agent_get_wielded_item, ":shield", ":player", 1),
          (gt, ":shield", 0),
          (item_get_type, ":weapontype", ":shield"),
          (eq, ":weapontype", itp_type_shield),
          
          (call_script,"script_cf_agent_shield_bash",":player",-1),
          (agent_set_slot, ":player", slot_agent_shield_bash_timer, 2),
        (else_try),
           (key_clicked, "$key_special_5"),
           (agent_get_action_dir, ":action_dir", ":player"),
           (try_begin),
             (eq,":action_dir", -1),
             (call_script, "script_cf_agent_use_bash", ":player", 1),
           (else_try),
             (call_script, "script_cf_agent_use_bash", ":player", 3),
           (try_end),
        (try_end),
           
        
        
        ])

shield_bash_agent = (
       1, 0, 0, [(eq,"$g_agent_use_shield_bash", 1),],
     [(get_player_agent_no,":player"),
      (try_for_agents,":agent"),
          (agent_is_alive,":agent"),
          (agent_is_human,":agent"),
          (neq,":agent",":player"),
          (agent_get_troop_id, ":troop_id", ":agent"),
          (agent_get_action_dir, ":action_dir", ":agent"),
          (agent_get_wielded_item,":wielded_item",":agent",0),
          (agent_get_wielded_item, ":shield", ":agent", 1),
          
          (agent_slot_eq, ":agent", slot_agent_is_running_away, 0), #Isn't routing.
          (agent_slot_eq, ":agent", slot_agent_shield_bash_timer, 0),
                     
          (call_script, "script_cf_agent_check_enemies_nearby", ":agent", 200),
          
          (store_random_in_range, ":rand", 3, 6),
                    
          (try_begin),
            (eq, "$g_game_difficulty",1),
            (val_add, ":rand", 4),
          (else_try),  
            (eq, "$g_game_difficulty",2),
            (val_add, ":rand", 3),
          (else_try),  
            (eq, "$g_game_difficulty",3),
            (val_add, ":rand", 2),
          (try_end),
              
        (try_begin),
          (agent_get_horse,":horse",":agent"),
          (neg|gt,":horse",0),
          (gt, ":shield", 0),
          (troop_get_type, ":agent_gender", ":troop_id"),
          #(neg|eq, ":agent_gender", tf_giant_dwarf),
          (neg|eq, ":agent_gender", tf_titan),
          (neg|eq, ":agent_gender", tf_troll),
          (store_skill_level,":v_shield",skl_shield,":troop_id"), 
          (gt,":v_shield",4),   
          (item_get_type, ":weapontype", ":shield"),
          (eq, ":weapontype", itp_type_shield),
          
          (call_script,"script_cf_agent_shield_bash",":agent",-1),
          (agent_set_slot, ":agent", slot_agent_shield_bash_timer, ":rand"),
        (else_try),
           (troop_is_hero,":troop_id"),
           (gt,":wielded_item", 0),
           (agent_get_attack_action, ":action", ":agent"),
           (agent_get_action_dir, ":action_dir", ":player"),
           (try_begin),
             (eq,":action", 1),#readying_attack
             (call_script, "script_cf_agent_use_bash", ":agent", 1),
          (else_try),
             (neq,":action_dir", -1),
             #(eq,":action", 2),#readying_attack
             (call_script, "script_cf_agent_use_bash", ":agent", 3),
          (try_end),
        (else_try),
          (this_or_next|eq, ":agent_gender", tf_giant_dwarf),
          (this_or_next|eq, ":agent_gender", tf_titan),
          (eq, ":agent_gender", tf_troll),
           (agent_get_slot, ":stamina", ":agent", slot_agent_stamina),
          (agent_get_attack_action, ":action", ":agent"),
          (this_or_next|eq, ":action", 0), #readying_attack.
          (eq, ":action", 1), #readying_attack.
          (call_script,"script_cf_crushing_blow_agent",":agent"),
          (agent_set_slot, ":agent", slot_agent_shield_bash_timer, ":rand"),
          (agent_set_slot, ":agent", slot_agent_stamina, ":stamina"),
        (try_end),
      (try_end),
     ])


battle_kill_underwater = (
  5, 0, 0, [],
 [ 
  (try_for_agents,":agent"),
   (agent_is_alive,":agent"),
   (agent_get_position,pos1,":agent"),
   (position_get_z, ":pos_z", pos1),
   (try_begin),
    (le, ":pos_z",-1500), #agent is about 6ft underwater
    (store_agent_hit_points,":hp",":agent",1),
    (val_sub,":hp",7),
    (try_begin),
     (le, ":hp", 0),
     (agent_set_hit_points,":agent",0,0),
    (else_try),
     (agent_set_hit_points,":agent",":hp",1),
    (try_end),    
    (play_sound,"snd_man_grunt"),
    (agent_deliver_damage_to_agent,":agent",":agent"), 
   (try_end),
  (try_end),
 ])

horse_speed = (0, 0, 3, [(key_clicked, key_m)], [
      (get_player_agent_no,":agent"),
      (try_begin),
        (agent_get_horse,":horse",":agent"),
        (agent_get_speed, pos1, ":horse"),
        (position_get_y, ":y_speed", pos1),
        (assign, reg3, ":y_speed"),
        (display_message,"@^y_speed:{reg3},"),
   (try_end),      
    ])
    
horses_spook = (
   0, 0, 10, [],#Every ten seconds
       [
    (store_current_scene,":current_scene"),
    (neg|is_between, ":current_scene", "scn_town_1_center", "scn_town_1_castle"),
    (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_prison"),
    (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),

    (try_for_agents, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_is_human, ":agent_no"),
      #(agent_get_troop_id, ":troop_no", ":agent_no"),
      #(agent_get_wielded_item,":wielded_item",":agent_no",0),
      #(agent_get_wielded_item,":shield",":agent_no",1),
      
      (try_begin),
        (agent_has_item_equipped,":agent_no","itm_command_helm"),
        (call_script, "script_cf_agent_mass_haste", ":agent_no"),
      (else_try),
        (agent_has_item_equipped,":agent_no","itm_frankenstein_head"),
        (call_script, "script_cf_agent_taunt", ":agent_no"),
      (try_end),
      
      (try_begin),
        (agent_has_item_equipped,":agent_no","itm_lordaeron"),
        (call_script, "script_cf_agent_inspire", ":agent_no"),
      (try_end),
      
      (try_begin),
        (agent_has_item_equipped,":agent_no","itm_death_finger"),
        (agent_get_position,pos5,":agent_no"),
        (copy_position,pos51,pos5),
        (position_move_z,pos51,-300),
        (position_move_y,pos51,-300),
        (call_script,"script_cf_agent_spawn_agent_to_pos51", ":agent_no", "trp_draugr_lord", 1),
        (call_script,"script_cf_agent_spawn_agent_to_pos51", ":agent_no", "trp_skeleton_archer", 1),
      (try_end),
      
      (try_begin),
        (agent_has_item_equipped,":agent_no","itm_curse_armor"),
        (call_script, "script_cf_agent_curse_armor", ":agent_no"),
        #(call_script, "script_cf_agent_warcry", ":agent_no"),
      (else_try),
        (agent_has_item_equipped,":agent_no","itm_saint_robe"),
        (call_script, "script_cf_agent_regeneration", ":agent_no"),
      (else_try),
        (agent_has_item_equipped,":agent_no","itm_assault_plate"),
        (call_script, "script_cf_agent_assault_plate", ":agent_no"),
        #(call_script, "script_cf_agent_fright_aura", ":agent_no"),
      (try_end),
    (try_end),
    ])
    
horses_spook2 = (
   0, 0, 5, [],#Every ten seconds
       [
    (store_current_scene,":current_scene"),
    (neg|is_between, ":current_scene", "scn_town_1_center", "scn_town_1_castle"),
    (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_prison"),
    (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
    (try_for_agents, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      #(agent_get_wielded_item,":wielded_item",":agent_no",0),
      #(agent_get_wielded_item,":shield",":agent_no",1),
      
        
      (try_begin),
        (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_body),
        #(try_begin),
          (eq, ":item_modifier", imod_well_made),
          (store_agent_hit_points, ":hp", ":agent_no", 0),
          (val_add, ":hp", 20),
          (agent_set_hit_points, ":agent_no", ":hp", 0),
        #(try_end),
      (try_end),
      
      (try_begin),
        (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_head),
        (try_begin),
          (eq, ":item_modifier", imod_well_made),
          (agent_get_slot, ":agent_mana", ":agent_no", slot_agent_mana),
          (val_add, ":agent_mana", 20),
          (val_clamp, ":agent_mana", 0, 101),
          (agent_set_slot, ":agent_no", slot_agent_mana, ":agent_mana"),
        (try_end),
      (try_end),
    (try_end),
    ])
    
horses_spook3 = (
   0, 0, 30, [],#Every ten seconds
       [
    (store_current_scene,":current_scene"),
    (neg|is_between, ":current_scene", "scn_town_1_center", "scn_town_1_castle"),
    (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_prison"),
    (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
    (try_for_agents, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      #(agent_get_wielded_item,":wielded_item",":agent_no",0),
      #(agent_get_wielded_item,":shield",":agent_no",1),
      
      (try_begin),
        (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_body),
        (eq, ":item_modifier", imod_superb),
        (call_script, "script_cf_agent_inspire", ":agent_no"),
      (try_end),
      
      (try_begin),
        (agent_has_item_equipped,":agent_no","itm_death_grip"),
        (call_script, "script_cf_agent_grasp", ":agent_no"),
      (try_end),
      
      
      (try_begin),
        (agent_has_item_equipped,":agent_no","itm_excalibur_1"),
        (agent_get_position,pos5,":agent_no"),
        (copy_position,pos51,pos5),
        (position_move_z,pos51,-300),
        (position_move_y,pos51,-300),
          (store_random_in_range, ":r", 0, 3),
          (try_begin),
            (troop_is_hero,":troop_no"),
            (eq, ":r", 0),
            (assign,":spawn_troop_id","trp_gold_dragon"),
          (else_try),
            (eq, ":r", 1),
            (assign,":spawn_troop_id","trp_ent_1"),
          (else_try),
            (assign,":spawn_troop_id","trp_ent_2"),
          (try_end),
        (call_script,"script_cf_agent_spawn_agent_to_pos51", ":agent_no", ":spawn_troop_id", 1),
      (try_end),
      
      (try_begin),
        (agent_has_item_equipped,":agent_no","itm_excalibur_2"),
        (agent_get_position,pos5,":agent_no"),
        (copy_position,pos51,pos5),
        (position_move_z,pos51,-300),
        (position_move_y,pos51,-300),
          (store_random_in_range, ":r", 0, 3),
          (try_begin),
            (troop_is_hero,":troop_no"),
            (eq, ":r", 0),
            (assign,":spawn_troop_id","trp_england_knight_4"),
          (else_try),
            (eq, ":r", 1),
            (assign,":spawn_troop_id","trp_england_billmen_3"),
          (else_try),
            (assign,":spawn_troop_id","trp_england_swordsman_3"),
          (try_end),
        (call_script,"script_cf_agent_spawn_agent_to_pos51", ":agent_no", ":spawn_troop_id", 2),
      (try_end),
      
      (try_begin),
        (agent_has_item_equipped,":agent_no","itm_ramun_jacket"),
        
        (try_for_range,":unused",0,2),
          (agent_get_position,pos5,":agent_no"),
          (copy_position,pos51,pos5),
          (position_move_z,pos51,-300),
          (position_move_y,pos51,-300),
          (store_random_in_range, ":spawn_troop_id", "trp_we_recruit", "trp_caravan_master"),
          (call_script,"script_cf_agent_spawn_agent_to_pos51", ":agent_no", ":spawn_troop_id", 1),
        (try_end),
        
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_adventurer_troop_1"),
        (agent_has_item_equipped,":agent_no","itm_shadow_robes"),
        (agent_get_position,pos5,":agent_no"),
        (copy_position,pos51,pos5),
        (position_move_z,pos51,-300),
        (position_move_y,pos51,-300),
          (store_random_in_range, ":r", 0, 3),
          (try_begin),
            (troop_is_hero,":troop_no"),
            (eq, ":r", 0),
            (assign,":spawn_troop_id","trp_wraith"),
          (else_try),
            (neg|troop_is_hero,":troop_no"),
            (eq, ":r", 0),
            (assign,":spawn_troop_id","trp_wight"),
          (else_try),
            (assign,":spawn_troop_id","trp_ghost"),
          (try_end),
        (call_script,"script_cf_agent_spawn_agent_to_pos51", ":agent_no", ":spawn_troop_id", 1),
      (try_end),
        
    (try_end),
    ])
    
    
kill_troop_trigger =(
  ti_on_agent_killed_or_wounded, 0, 0, [],
    [
      (store_trigger_param_1, ":dead_agent_no"),
      (store_trigger_param_2, ":killer_agent"),
      
      (agent_get_attached_scene_prop, ":attached_forcefield", ":dead_agent_no"),
      (try_begin),
        (gt, ":attached_forcefield", -1),
        (agent_get_slot, ":cur_forcefield", ":dead_agent_no", slot_agent_forcefield_id),
        (agent_get_slot, ":instance_no", ":dead_agent_no", slot_agent_forcefield_instance_no),
        (scene_prop_get_instance, ":cur_forcefield_prop_instance", ":cur_forcefield", ":instance_no"),
        (prop_instance_get_position, pos0, ":cur_forcefield_prop_instance"),
        (position_move_z, pos0, -2000),
        (prop_instance_set_position, ":cur_forcefield_prop_instance", pos0),
        (prop_instance_receive_damage, ":cur_forcefield_prop_instance", ":dead_agent_no", 100),
        (scene_prop_fade_out, ":cur_forcefield_prop_instance"),
        (agent_set_attached_scene_prop, ":dead_agent_no", -1),
      (try_end),
      
      #(store_trigger_param, ":wounded_flag", 3), # 0 = agent is killed, 1 = agent is wounded   
    (try_begin),
      (gt, ":dead_agent_no", -1),
      (gt, ":killer_agent", -1),
                                         
      (agent_is_human, ":killer_agent"),
      (agent_is_human, ":dead_agent_no"),
      
      (set_fixed_point_multiplier, 1),
      (agent_get_troop_id, ":dead_troop", ":dead_agent_no"),
      (agent_get_troop_id, ":dealer_troop", ":killer_agent"),
      
      
      (assign,":blessing",0),
       (try_begin),
        (troop_slot_eq, ":dealer_troop", slot_troop_special_ability, Khorne_blessing), 
        (agent_slot_ge, ":killer_agent", slot_agent_special_ability_counter, 1),
		(try_begin),
		  (agent_get_slot, ":time", ":killer_agent", slot_agent_special_ability_counter),
		  (val_add,":time",1),
		  (agent_set_slot, ":killer_agent", slot_agent_special_ability_counter, ":time"),
		(try_end), 
        (assign,":blessing",1),
      (try_end),
      
      (try_begin),
        (troop_slot_eq, ":dealer_troop", slot_troop_special_ability, wrath), 
        (agent_slot_ge, ":killer_agent", slot_agent_special_ability_counter, 1),
		  (try_begin),
		  (agent_get_slot, ":time", ":killer_agent", slot_agent_special_ability_counter),
		  (ge,":time",6),
		  (val_add,":time",1),
		  (agent_set_slot, ":killer_agent", slot_agent_special_ability_counter, ":time"),
		  (else_try),
		  (agent_get_slot, ":time", ":killer_agent", slot_agent_special_ability_counter),
		  (le,":time",6),
		  (agent_set_slot, ":killer_agent", slot_agent_special_ability_counter, 7),
		  (try_end), 
	
        (assign,":blessing",1),
      (try_end),
      (try_begin),
        (troop_slot_eq, ":dealer_troop", slot_troop_special_ability, awaken), 
        (agent_slot_ge, ":killer_agent", slot_agent_special_ability_counter, 1),
        (assign,":blessing",1),
      (try_end),

      
      (try_begin),
        (get_player_agent_no, ":player_agent"),
        (neg|agent_is_ally, ":dead_agent_no"),
        (agent_is_human, ":dead_agent_no"),
        (eq, ":killer_agent",":player_agent"),
        (store_character_level,":dead_level",":dead_troop"),
        (try_begin),
          (this_or_next|eq,"$freelancer_state",1),
          (this_or_next|agent_has_item_equipped,":player_agent","itm_midas_hand"),
          (this_or_next|eq,"$freelancer_state",1),
          (this_or_next|eq,"$background_type",cb_thief),
          (eq,"$background_answer_2",cb2_urchin),
          (try_begin),
            (party_get_skill_level, ":loot_level", "p_main_party", skl_looting),
            (val_max,":loot_level",1),
            #(val_div,":loot_level",2),
            (store_random_in_range,":loot_gold",0,":dead_level"),
            (val_mul,":loot_gold",":loot_level"),
            (val_min,":loot_gold",300),
            (set_show_messages, 0),
            (troop_add_gold,"trp_player",":loot_gold"),
            (set_show_messages, 1),
            (try_begin),
              (eq, "$g_report_shot_distance", 1),
              (gt,":loot_gold",0),
              (assign,reg3,":loot_gold"),
              (display_message,"@you get {reg3} money by looting skill",0xFFFE9B00),
            (try_end),
          (try_end),
        (try_end),
        (try_begin),
          (eq,"$freelancer_state",1),
          (store_mul, ":contribution", ":dead_level", 1),
          (try_begin),
            (troop_is_hero, ":dead_troop"),
            (val_mul, ":contribution", 3),
          (try_end),
          (try_begin),
            (ge,":contribution",1),
            (call_script,"script_change_player_contribution",":contribution"),
          (try_end),
        (try_end),
      (try_end),  
      
      (try_begin),
        (agent_get_slot, ":timer", ":killer_agent", slot_agent_stamina),
        (try_begin),
          (troop_is_hero,":dealer_troop"),
          (val_add, ":timer", 5),
        (else_try),
          (val_add, ":timer", 1),
        (try_end),
        (try_begin),
          (eq,":blessing",1),
          (val_add, ":timer", 5),
        (try_end),
        
        (val_min, ":timer", 100),
        (agent_set_slot, ":killer_agent", slot_agent_stamina, ":timer"),
      (try_end),
      (try_begin),
        (agent_get_wielded_item,":wielded_item",":killer_agent",0),
        (agent_get_wielded_item,":shield",":killer_agent",1),
        
        (agent_get_kill_count, ":num_killed", ":killer_agent"),
        (agent_get_kill_count, ":num_wounded", ":killer_agent", 1),
        (val_add, ":num_killed", ":num_wounded"),
        (gt, ":num_killed", 0),
      
      
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":killer_agent", "itm_perk_two_hand_7"),
          (item_get_type, ":item_type", ":wielded_item"),
          (eq, ":item_type", itp_type_two_handed_wpn),
          (troop_get_slot, ":max_hp", ":dealer_troop", slot_troop_max_hp),
          (assign,":troop_max_hp", ":max_hp"),
          (val_div, ":troop_max_hp", 10),
          (val_mul,":troop_max_hp", -1),
          (call_script, "script_change_agent_shield", ":killer_agent", ":troop_max_hp"),
        (try_end),
      
      (try_end),
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":killer_agent", "itm_perk_bow_7"),
          (item_get_type, ":item_type", ":wielded_item"),
          (eq, ":item_type", itp_type_bow),
          (agent_get_slot, ":extra_hp", ":killer_agent", slot_agent_extra_hp),
          (le, ":extra_hp", 200),
          (val_add,":extra_hp", 200),
          (agent_set_slot, ":killer_agent", slot_agent_extra_hp, ":extra_hp"),
        (try_end),
      
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":killer_agent", "itm_perk_polearm_7"),
          (item_get_type, ":item_type", ":wielded_item"),
          (eq, ":item_type", itp_type_polearm),
          (agent_get_slot, ":extra_hp", ":killer_agent", slot_agent_extra_hp),
          (val_add,":extra_hp", ":dead_level"),
          (agent_set_slot, ":killer_agent", slot_agent_extra_hp, ":extra_hp"),
        (try_end),
      
        (try_begin),
        
        #  (agent_has_item_equipped,":dead_agent_no","itm_caesar_mask"),
        #  (agent_get_position,pos51,":dead_agent_no"),
        #  (position_move_z,pos51,300),
        #  (position_move_y,pos51,300),
        #  (call_script,"script_cf_agent_spawn_agent_to_pos51", ":dead_agent_no", "trp_lich_3", 2),
        #(else_try),
          (eq,":shield","itm_eggshield_2"),
          (agent_get_horse,":horse",":killer_agent"),
          (neg|gt,":horse",0),
          (call_script,"script_cf_agent_shield_bash",":killer_agent",-1),
        (else_try),
          (eq,":shield","itm_mandolin"),
          (val_mod, ":num_killed",11),
          (eq,":num_killed", 10),
          (call_script, "script_cf_agent_charm", ":killer_agent"),
        (else_try),
          (eq,":shield","itm_dragon_shield"),
          (val_mod, ":num_killed",6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_dragon_voice", ":killer_agent","itm_voice_unrelenting_force"),
        (else_try),
          (eq,":wielded_item","itm_flamberge_fire"),
          (agent_set_slot, ":killer_agent", slot_agent_special_ability_affect_type, berserk),
          (agent_set_slot, ":killer_agent", slot_agent_special_ability_affect_time, 15),
          (agent_get_horse,":horse",":killer_agent"),
          (neg|gt,":horse",0),
          (agent_set_slot, ":killer_agent", slot_agent_flamberge_attack_chance, 1),
        (else_try),
          (eq,":wielded_item","itm_bastard_sword_d_fire"),
          (agent_set_slot, ":killer_agent", slot_agent_special_ability_affect_type, inspire),
          (agent_set_slot, ":killer_agent", slot_agent_special_ability_affect_time, 30),
        (else_try),
          (this_or_next|eq,":wielded_item","itm_calibur"),
          (eq,":wielded_item","itm_calibur"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_battlecry", ":killer_agent"),
          (call_script, "script_cf_agent_fright_aura", ":killer_agent"),
        (else_try),
          (this_or_next|eq,":wielded_item","itm_excalibur_1"),
          (eq,":wielded_item","itm_excalibur_1"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_inspire", ":killer_agent"),
          (call_script, "script_cf_agent_battlecry", ":killer_agent"),
          
        (else_try),
          (this_or_next|eq,":wielded_item","itm_long_axe_d_alt"),
          (eq,":wielded_item","itm_long_axe_d"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_battlecry", ":killer_agent"),
          (call_script, "script_cf_agent_warcry", ":killer_agent"),
        (else_try),
          (this_or_next|eq,":wielded_item","itm_excalibur_2"),
          (eq,":wielded_item","itm_trgba"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_fright_aura", ":killer_agent"),
        (else_try),
          (eq,":wielded_item","itm_flame_blade"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_bloodlust", ":killer_agent"),
          (call_script, "script_cf_agent_warcry", ":killer_agent"),
          (call_script, "script_cf_agent_warcry", ":killer_agent"),
        (else_try),
          #(this_or_next|eq,":wielded_item","itm_zamorak"),
          #(this_or_next|eq,":wielded_item","itm_burning_axe"),
          (eq,":wielded_item","itm_crossbow_cannon"),
          (store_random_in_range, ":r", 0, 1),
            (eq, ":r", 0),
            (agent_get_position,pos51,":dead_agent_no"),
            
            (call_script, "script_get_troop_max_hp", ":dead_troop"),
            (assign, ":dead_troop_hp", reg0),
            (position_move_z,pos51,500),
            (add_missile, ":killer_agent", pos51, 100, "itm_granata", 0, "itm_granata", 0),#半成品，先随便丢个雷
           
                                                                                 
        (else_try),
          (this_or_next|eq,":wielded_item","itm_dawnbreaker_1"),
          (eq,":wielded_item","itm_dawnbreaker"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_spell_dispel", ":killer_agent"),
          #(call_script, "script_cf_agent_dawnbreaker", ":killer_agent", ":dead_agent_no"),
        (else_try),
          (eq,":wielded_item","itm_chaos_axe"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (store_random_in_range, ":r", 0, 5),
          (try_begin),
            (eq, ":r", 0),
            (call_script, "script_cf_agent_battlecry", ":killer_agent"),
          (else_try),
            (eq, ":r", 1),
            (call_script, "script_cf_agent_fright_aura", ":killer_agent"),
          (else_try),
            (eq, ":r", 2),
            (call_script, "script_cf_agent_warcry", ":killer_agent"),
          (else_try),
            (eq, ":r", 3),
            (call_script, "script_cf_agent_taunt", ":killer_agent"),
          (else_try),
            (eq, ":r", 4),
            (call_script, "script_cf_agent_bloodlust", ":killer_agent"),
          (else_try),
            (eq, ":r", 8),
            (agent_get_position,pos51,":dead_agent_no"),
            (call_script, "script_get_troop_max_hp", ":dead_troop"),
            (assign, ":dead_troop_hp", reg0),
            (call_script, "script_magic_deliver_area_damage", ":killer_agent", ":dead_troop_hp", 3, 10),
          (try_end),
        (else_try),
          (eq,":wielded_item","itm_charonscall"),
          (call_script, "script_get_troop_max_hp", ":dead_troop"),
          (assign, ":dead_troop_hp", reg0),
          (val_mul, ":dead_troop_hp", 25),
          (val_div, ":dead_troop_hp", 100),
          (store_agent_hit_points, ":current_health", ":killer_agent", 0),
          (val_add, ":current_health", ":dead_troop_hp"),
          (agent_set_hit_points, ":killer_agent", ":current_health", 0),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_fright_aura", ":killer_agent"),
        (else_try),
          #(this_or_next|eq,":dealer_troop", "trp_archangle"),
          (eq,":wielded_item","itm_aurora_blade"),
          (agent_get_slot, ":stamina", ":killer_agent", slot_agent_mana),
          (val_add, ":stamina", 5),
          (agent_set_slot, ":killer_agent", slot_agent_mana, ":stamina"),
          (call_script, "script_cf_agent_spell_dispel", ":killer_agent"),
          #(call_script, "script_cf_agent_call_lightning", ":killer_agent"),
        (else_try),
          (eq,":wielded_item","itm_destroyer"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (agent_get_position,pos5,":dead_agent_no"),
          (copy_position,pos51,pos5),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":r", 7),
            (assign,":spawn_troop_id","trp_werewolf_1_a"),
          (else_try),
            (eq, ":r", 6),
            (assign,":spawn_troop_id","trp_mummy_2_1"),
          (else_try),
            (eq, ":r", 5),
            (assign,":spawn_troop_id","trp_mummy_2_2"),
          (else_try),
            (assign,":spawn_troop_id","trp_mummy_2"),
          (try_end),
          (call_script,"script_cf_agent_spawn_agent_to_pos51", ":killer_agent", ":spawn_troop_id", 1),
          (call_script, "script_cf_agent_warcry", ":killer_agent"),
        (else_try),
          (eq,":wielded_item","itm_khorne_axe"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_bloodlust", ":killer_agent"),
          (agent_get_position,pos5,":dead_agent_no"),
          (copy_position,pos51,pos5),
          (call_script,"script_cf_agent_spawn_agent_to_pos51", ":killer_agent", "trp_demon_1_2", 1),
          (call_script, "script_cf_agent_warcry", ":killer_agent"),
        (else_try),
          (eq,":wielded_item","itm_skycutter"),
          (try_begin),
            (store_mod, ":num_killed_2", ":num_killed", 7),
            (eq,":num_killed_2", 6),
            (agent_get_position,pos5,":dead_agent_no"),
            (copy_position,pos51,pos5),
            (call_script,"script_cf_agent_spawn_agent_to_pos51", ":killer_agent", "trp_angle", 1),
          (else_try),
            (store_mod, ":num_killed_2", ":num_killed", 6),
            (eq,":num_killed_2", 5),
            (call_script, "script_cf_agent_inspire", ":killer_agent"),
          (try_end),
        (else_try),
          (eq,":wielded_item","itm_frostmourne"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (agent_get_position,pos5,":dead_agent_no"),
          (copy_position,pos51,pos5),
          (call_script,"script_cf_agent_spawn_agent_to_pos51", ":killer_agent", "trp_draugr_lord", 3),
          #(call_script, "script_cf_agent_forst_ring", ":killer_agent"),
          #(call_script, "script_cf_agent_warcry", ":killer_agent"),
        (else_try),
          (eq,":wielded_item","itm_aurora_blade"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_haste", ":killer_agent"),
          (call_script, "script_cf_agent_slow", ":killer_agent"),
          (call_script, "script_cf_agent_slow", ":killer_agent"),
        (else_try),
          (this_or_next|eq,":wielded_item","itm_grief_1"),
          (eq,":wielded_item","itm_grief_2"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_forst_ring", ":killer_agent"),
          (call_script, "script_cf_agent_haste", ":killer_agent"),
          (call_script, "script_cf_agent_slow", ":killer_agent"),
       # (else_try),
       #   (eq,":wielded_item","itm_golem_crusher"),
       #   (val_mod, ":num_killed", 6),
       #   (eq,":num_killed", 5),
       #   (call_script, "script_cf_agent_earth_shock", ":killer_agent"),
        (else_try),
          (this_or_next|eq,":wielded_item","itm_karztev_bow"),
          (this_or_next|eq,":wielded_item","itm_destroyer"),
          (this_or_next|eq,":wielded_item","itm_swiftness_sword"),
          (this_or_next|eq,":wielded_item","itm_soul_stealer"),
          (this_or_next|eq,":wielded_item","itm_black_knight_sword"),
          
          (this_or_next|eq,":wielded_item","itm_grief_1"),
          (this_or_next|eq,":wielded_item","itm_grief_2"),
        
          (this_or_next|eq,":wielded_item","itm_grey_knight_staff"),
          (this_or_next|eq,":wielded_item","itm_grey_knight_poleaxe"),
        
          (this_or_next|eq,":wielded_item","itm_calibur"),
          (this_or_next|eq,":wielded_item","itm_serpent_sword"),
          (this_or_next|eq,":wielded_item","itm_gwilith"),
          (this_or_next|eq,":wielded_item","itm_pit_lord_sword"),
          (this_or_next|eq,":wielded_item","itm_serpent_dagger"),
          (this_or_next|eq,":wielded_item","itm_black_hole_sword"),
          (this_or_next|eq,":wielded_item","itm_aroundight"),
          
          (eq,":wielded_item","itm_frostfang"),
          (agent_get_slot, ":stamina", ":killer_agent", slot_agent_mana),
          (val_add, ":stamina", 5),
          (val_clamp, ":stamina", 0, 101),
          (agent_set_slot, ":killer_agent", slot_agent_mana, ":stamina"),
          
          
        (try_end),
        
        (try_begin),
          (agent_has_item_equipped,":killer_agent","itm_dwarf_crown"),
          (val_mod, ":num_killed", 5),
          (eq,":num_killed", 4),
          (call_script, "script_cf_agent_stoneskin", ":killer_agent"),
        (else_try),
          (agent_has_item_equipped,":killer_agent","itm_death_grip"),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (call_script, "script_cf_agent_fright_aura", ":killer_agent"),
        (else_try),
          (agent_has_item_equipped,":killer_agent","itm_death_skull"),
          (val_mod, ":num_killed", 3),
          (eq,":num_killed", 2),
          (call_script, "script_cf_agent_dragons_fear", ":killer_agent"),
          (call_script, "script_cf_agent_warcry", ":killer_agent"),
        (try_end),
        
        (try_begin),
          (eq,":dealer_troop", "trp_npc23"),
          (agent_slot_eq, ":killer_agent", slot_agent_spell_cast_time, 0),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (agent_get_position,pos5,":dead_agent_no"),
          (copy_position,pos51,pos5),
          (call_script,"script_cf_agent_spawn_agent_to_pos51", ":killer_agent", "trp_archangle", 1),
          (call_script, "script_cf_agent_holy_light", ":killer_agent"),
          (agent_set_slot, ":killer_agent", slot_agent_spell_cast_time, 1),
        (else_try),
          (eq,":dealer_troop", "trp_npc12"),
          (agent_slot_eq, ":killer_agent", slot_agent_spell_cast_time, 0),
          (val_mod, ":num_killed", 6),
          (eq,":num_killed", 5),
          (agent_get_position,pos5,":dead_agent_no"),
          (copy_position,pos51,pos5),
          (try_begin),
            (store_random_in_range,":r",0,4),
            (try_begin),
              (ge, ":r", 3),
              (assign,":spawn_troop_id","trp_red_dragon"),
            (else_try),
              (ge, ":r", 2),
              (assign,":spawn_troop_id","trp_green_dragon"),
            (else_try), 
              (ge, ":r", 1),
              (assign,":spawn_troop_id","trp_fire_dragon"),
            (else_try),  
              (assign,":spawn_troop_id","trp_bone_dragon"),
          (try_end),
          (try_end),
          (call_script,"script_cf_agent_spawn_agent_to_pos51", ":killer_agent", ":spawn_troop_id", 1),
          (call_script, "script_cf_agent_holy_light", ":killer_agent"),
          (agent_set_slot, ":killer_agent", slot_agent_spell_cast_time, 1),
        (else_try),
          (this_or_next|eq,":wielded_item","itm_auriels_bow"),
          (this_or_next|eq,":dealer_troop","trp_archangle"),
          (eq,":dealer_troop", "trp_angle"),
          (val_mod, ":num_killed", 5),
          (gt,":num_killed", 1),
          (call_script, "script_cf_agent_inspire", ":killer_agent"),
        (try_end),
        
     # (try_end),多出来的

      (try_begin),
        (this_or_next|eq,":dead_troop", "trp_goblin_bomber"),
        (eq,":dead_troop", "trp_rat_bomber"),
        (agent_get_position,pos51,":dead_agent_no"),
        (play_sound_at_position, "snd_cannon_shot", pos51),
        (particle_system_burst, "psys_explosive_explosion_sparks_a", pos51, 35),
        (particle_system_burst, "psys_explosive_explosion_sparks_b", pos51, 35),
        (particle_system_burst, "psys_bomb_smoke", pos51, 35),
        (particle_system_burst, "psys_bomb_dust", pos51, 15),
          
        (try_for_agents,":possable_agent"),
          (agent_is_alive,":possable_agent"),
          (agent_get_position,pos3,":possable_agent"),
          (get_distance_between_positions,":dist",pos51,pos3),
          (le,":dist",600),
          (assign,":agent",":possable_agent"),
          (store_random_in_range, ":thrust_damage", 200, 300),  
          (call_script, "script_magic_deliver_damage_to_agent", ":dead_agent_no", ":agent", ":thrust_damage", burn, 3, 15),
          (try_begin),
             (neg|agent_is_human,":agent"),
             (agent_set_animation,":agent","anim_horse_rear"), 
             (agent_deliver_damage_to_agent,":dead_agent_no",":agent"),
          (else_try),
             (neg|agent_slot_ge,":agent",slot_agent_extra_shield,1),
             (call_script, "script_cf_agent_set_animation",  ":agent", "anim_bash_out_2",0),
          (try_end),
        (try_end),
      (else_try),
        (eq,":dead_troop", "trp_zombie_2"),
        (agent_get_position,pos51,":dead_agent_no"),
        (call_script, "script_magic_deliver_area_damage", ":dead_agent_no", 75, 6, 13),
      (try_end),
      (troop_get_type, ":agent_gender", ":dealer_troop"),
      
      
      (try_begin),
        (this_or_next|agent_has_item_equipped,":killer_agent","itm_khorne_helm"),
        (this_or_next|agent_has_item_equipped,":killer_agent","itm_stone_mask"),
        (this_or_next|eq,":dealer_troop", "trp_demon_3"),
        (this_or_next|eq,":dealer_troop", "trp_demon_4_2"),
        (this_or_next|eq,":dealer_troop", "trp_demon_5"),
        (this_or_next|eq,":dealer_troop", "trp_angle"),
        (this_or_next|eq,":dealer_troop", "trp_archangle"),
        (eq, ":agent_gender", tf_vampire),
        (call_script, "script_get_troop_max_hp", ":dead_troop"),
        (assign, ":dead_troop_hp", reg0),
        (val_mul, ":dead_troop_hp", 15),
        (val_div, ":dead_troop_hp", 100),
        (store_agent_hit_points, ":current_health", ":killer_agent", 0),
        (val_add, ":current_health", ":dead_troop_hp"),
        (agent_set_hit_points, ":killer_agent", ":current_health", 0),
      (try_end),
      (try_begin),
        (assign,":result", 0),
        (try_begin),
          (call_script, "script_cf_agent_has_skill", ":killer_agent", life_drain),
          (assign,":result", reg1),
        (try_end),
        (this_or_next|eq, ":result", 1),
        (this_or_next|eq,":blessing",1),
        (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, spirit_link),
        (call_script, "script_get_troop_max_hp", ":dead_troop"),
        (assign, ":dead_troop_hp", reg0),
        (val_mul, ":dead_troop_hp", 15),
        (val_div, ":dead_troop_hp", 100),
        (store_agent_hit_points, ":current_health", ":killer_agent", 0),
        (val_add, ":current_health", ":dead_troop_hp"),
        (agent_set_hit_points, ":killer_agent", ":current_health", 0),
      (try_end),
            
      (try_begin),
        (agent_is_human, ":dead_agent_no"),
        (agent_get_slot, ":spawned_timer", ":dead_agent_no", slot_agent_spawned),
        (agent_get_slot, ":extra_hp", ":dead_agent_no", slot_agent_extra_hp),
        (le, ":extra_hp", 0),
        (gt, ":spawned_timer", 0),
        (agent_fade_out, ":dead_agent_no"),
      (try_end),  
      
      (try_begin),
        (agent_is_human, ":dead_agent_no"),
        (this_or_next|is_between,":dead_troop", kings_begin, kings_end),
        (this_or_next|eq,":dead_troop", "trp_polish_knight_4"),
        (this_or_next|eq,":dead_troop", "trp_npc3"),
        (this_or_next|eq,":dead_troop", "trp_npc5"),
        (this_or_next|eq,":dead_troop", "trp_npc17"),
        (this_or_next|eq,":dead_troop", "trp_npc23"),
        (this_or_next|eq,":dead_troop", "trp_npc12"),
        (this_or_next|eq,":dead_troop", "trp_rus_boyar"),
        (this_or_next|eq,":dead_troop", "trp_rus_boyar_2"),
        (this_or_next|eq,":dead_troop", "trp_rus_palace_guard"),
        #(this_or_next|eq,":dead_troop", "trp_archangle"),
        (this_or_next|eq,":dead_troop", "trp_undead_horse_1"),
        (this_or_next|eq,":dead_troop", "trp_undead_horse_2"),
        (this_or_next|eq,":dead_troop", "trp_undead_horse_3"),
        (troop_slot_eq, ":dead_troop", slot_troop_special_ability_passive, undead_horse),
        (call_script,"script_kill_agent_horse", ":dead_agent_no"), 
      (try_end),
    (try_end),
      
    ])
    
delay_action_trigger = (0, 0.5, 0, [], [
     (try_for_agents,":killer_agent_no"),
       (agent_is_alive, ":killer_agent_no"),
       (agent_is_human, ":killer_agent_no"),
       (agent_get_troop_id, ":agent_troop", ":killer_agent_no"),
        (agent_get_wielded_item,":wielded_item",":killer_agent_no",0),
        
        
        (agent_get_team, ":agent_team", ":killer_agent_no"),
        (agent_get_division, ":agent_division", ":killer_agent_no"),
        (team_get_movement_order, ":movement_order", ":agent_team", ":agent_division"),
        
        (try_begin),
          (this_or_next|eq,":movement_order",mordr_fire_at_my_command),
          (this_or_next|eq,":movement_order",mordr_all_fire_now),
          (this_or_next|eq,":movement_order",mordr_left_fire_now),
          (this_or_next|eq,":movement_order",mordr_middle_fire_now),
          (eq,":movement_order",mordr_right_fire_now),
          (agent_set_slot,":killer_agent_no",slot_agent_archer_state,2),
       (try_end),
              
      #(try_begin),

        # (troop_slot_eq, ":agent_troop", slot_troop_special_ability, wrath), 
        # (agent_slot_ge, ":killer_agent_no", slot_agent_special_ability_counter, 5),
        # (agent_slot_ge, ":killer_agent_no", slot_agent_special_ability_counter, 80),
      
        # (agent_get_action_dir, ":action_dir", ":killer_agent_no"),
        # (try_begin),
           # (eq, ":action_dir", 3),
           # (call_script, "script_cf_agent_power_strike", ":killer_agent_no"),
        # (else_try),
           # (this_or_next|eq, ":action_dir", 2),
           # (eq, ":action_dir", 1),
           # (call_script,"script_cf_agent_cleave",":killer_agent_no", 1,0),
        # (else_try),
           # (eq, ":action_dir", 0),
           # (call_script, "script_cf_agent_rush", ":killer_agent_no"),
        # (try_end),
        
        
         # (ge, ":action_dir", 0),
        
         # (agent_get_slot, ":stamina", ":killer_agent_no", slot_agent_stamina),
         # (val_add, ":stamina", -30),
         # (val_clamp, ":stamina", 0, 101),
         # (agent_set_slot, ":killer_agent_no", slot_agent_stamina, ":stamina"),
       #(try_end),

       (try_begin),
         (agent_slot_eq, ":killer_agent_no", slot_agent_special_ability_affect_type, "itm_voice_storm_call"), 
         (agent_slot_ge, ":killer_agent_no", slot_agent_spell_cast_time, 1),
         (call_script, "script_cf_agent_voice_storm_call", ":killer_agent_no"),
       (try_end),
       (try_begin),
         (troop_slot_eq, ":agent_troop", slot_troop_special_ability, omnislash), 
         (agent_slot_ge, ":killer_agent_no", slot_agent_special_ability_counter, 1),
         (call_script,"script_cf_agent_shadow_blade",":killer_agent_no"),
       (else_try),  
         (troop_slot_eq, ":agent_troop", slot_troop_special_ability, dragron_flame_burst), 
         (agent_slot_ge, ":killer_agent_no", slot_agent_special_ability_counter, 1),
         (call_script,"script_cf_agent_flamestrike_extra",":killer_agent_no"),
       (try_end),
       (try_begin),
         (troop_slot_eq, ":agent_troop", slot_troop_special_ability_extra, haste_reload),
         (agent_slot_ge, ":killer_agent_no", slot_agent_special_ability_extra_counter, 15),
         (agent_get_wielded_item, ":agent_cur_weapon", ":killer_agent_no", 0),
         (gt,":agent_cur_weapon", 0),
         (item_get_type, ":cur_weapon_type", ":agent_cur_weapon"),
         (this_or_next|eq,":cur_weapon_type",itp_type_thrown),
         (this_or_next|eq,":cur_weapon_type",itp_type_bow),
         (this_or_next|eq,":cur_weapon_type",itp_type_crossbow),
         (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
         (eq,":cur_weapon_type",itp_type_musket),
         (try_begin),
           (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
           (eq,":cur_weapon_type",itp_type_musket),
           #(assign,":cur_ammo_type",itp_type_bullets),
           (assign,":cur_ammo_id","itm_cartridges"),#as default
         (else_try),
           (eq,":cur_weapon_type",itp_type_crossbow),
           #(assign,":cur_ammo_type",itp_type_bolts),
           (assign,":cur_ammo_id","itm_bolts"),#as default
         (else_try),
           (eq,":cur_weapon_type",itp_type_bow),
           #(assign,":cur_ammo_type",itp_type_arrows),
           (assign,":cur_ammo_id","itm_arrows"),#as default
         (else_try),
           #(assign,":cur_ammo_type",itp_type_thrown),
           (assign,":cur_ammo_id",":agent_cur_weapon"),#as default
         (try_end),
         (call_script, "script_cf_agent_aimshot", ":killer_agent_no",1,":cur_ammo_id"),
       (try_end),
       (try_begin),
         (troop_slot_eq, ":agent_troop", slot_troop_special_ability, luanwu), 
         (agent_slot_ge, ":killer_agent_no", slot_agent_special_ability_counter, 1),
         (call_script,"script_cf_agent_cleave",":killer_agent_no", 1,0),
       (else_try),  
         (agent_slot_ge, ":killer_agent_no", slot_agent_flamberge_attack_chance, 1),
         (gt, ":wielded_item",0),
         (item_get_type, ":type", ":wielded_item"),
         (try_begin),
           (this_or_next|eq, ":type", itp_type_polearm),
           (this_or_next|eq, ":type", itp_type_two_handed_wpn),
           (eq, ":type", itp_type_one_handed_wpn),
           (agent_get_slot, ":stamina", ":killer_agent_no", slot_agent_flamberge_attack_chance),
           (val_add, ":stamina", -1),
           (val_clamp, ":stamina", 0, 101),
           (agent_set_slot, ":killer_agent_no", slot_agent_flamberge_attack_chance, ":stamina"),
           (call_script,"script_cf_agent_cleave",":killer_agent_no", 1,0),
         (try_end),
       (try_end),
     (try_end),
     
    ])
 
init_troop_extra_power = (
  1, 0, 0, [],
  [
  (set_fixed_point_multiplier, 1),
  (try_for_agents, ":agent_no"),
    (agent_is_alive, ":agent_no"),
    (agent_is_human, ":agent_no"),
    (agent_get_troop_id, ":troop_no", ":agent_no"),
    (troop_get_type, ":agent_gender", ":troop_no"),
    
    #(try_begin),
    #  (call_script, "script_get_troop_max_hp", ":troop_no"),
    #  (assign, ":max_hp", reg0),
    #  (agent_set_max_hit_points,":agent_no",":max_hp",1),
    #(try_end),
    
    (assign, ":damage_factor", 100), 
    (assign, ":reload_speed_factor", 100), 
    (assign, ":weapon_speed_factor", 100), 
    (assign, ":accuracy_factor", 100), 
    (assign, ":speed_factor", 100), 
    (assign, ":ranged_damage_factor", 100), 
    (try_begin),
    
    
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_two_hand_3"),
        (val_add, ":damage_factor", 50), 
        (val_add, ":reload_speed_factor", 50), 
        (val_add, ":weapon_speed_factor", 50), 
        (val_add, ":speed_factor", 50), 
        (store_agent_hit_points, ":hp", ":agent_no"),
        (le, ":hp", 50),
        (val_add, ":damage_factor", 50), 
      (try_end),
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_thrown_1"),
        (val_add, ":speed_factor", 25), 
      (try_end),
      
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_thrown_7"),
        (val_add, ":speed_factor", 50), 
        (val_add, ":accuracy_factor", 100), 
      (try_end),
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_bow_1"),
        (this_or_next|game_key_is_down, gk_move_forward),
        (this_or_next|game_key_is_down, gk_move_backward),
        (this_or_next|game_key_is_down, gk_move_left),
        (this_or_next|game_key_is_down, gk_move_right),
        (neg|troop_is_hero, ":troop_no"),
        (val_add, ":accuracy_factor", 50),
      (try_end),
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_bow_5"),
        (val_add, ":speed_factor", 25),
      (try_end),
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_crossbow_1"),
        (val_add, ":reload_speed_factor", 25),
      (try_end),
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_musket_1"),
        (val_add, ":reload_speed_factor", 50),
      (try_end),
      
      (try_begin),
        (eq, ":troop_no", "trp_knight_4_20"),
        (val_add, ":ranged_damage_factor", 300), 
        (val_add, ":reload_speed_factor", 400), 
        (val_add, ":damage_factor", 100), 
        (val_add, ":accuracy_factor", 100), 
        (val_add, ":speed_factor", 50), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_england_longbowm_4"),
        (this_or_next|eq, ":troop_no", "trp_england_longbowm_3"),
        (this_or_next|eq, ":troop_no", "trp_england_longbowm_2"),
        (eq, ":troop_no", "trp_england_longbowm_1"),
        (val_add, ":damage_factor", 25), 
        (val_add, ":reload_speed_factor", 100), 
        (val_add, ":accuracy_factor", 50), 
      (else_try),
        #(this_or_next|eq, ":troop_no", "trp_sissofbattle"),
        #(this_or_next|eq, ":troop_no", "trp_sissofbattle_s"),
      
        (this_or_next|eq, ":troop_no", "trp_grandelf_cavalry"),
        (this_or_next|eq, ":troop_no", "trp_grandelf_swordman"),
        (this_or_next|eq, ":troop_no", "trp_grandelf_marksman"),
        (this_or_next|eq, ":troop_no", "trp_grandelf_arcane_archer"),
        (this_or_next|eq, ":troop_no", "trp_grandelf_swordman_adv"),
      
        (this_or_next|eq, ":troop_no", "trp_quick_battle_troop_9"),
        (this_or_next|eq, ":troop_no", "trp_welsh_longbowm_2"),
        (this_or_next|eq, ":troop_no", "trp_welsh_longbowm_3"),
        (this_or_next|eq, ":troop_no", "trp_welsh_spearman_1"),
        (this_or_next|eq, ":troop_no", "trp_welsh_spearman_2"),
        (eq, ":troop_no", "trp_welsh_longbowm_1"),
        (val_add, ":damage_factor", 25), 
        (val_add, ":reload_speed_factor", 100), 
        (val_add, ":weapon_speed_factor", 100), 
        (val_add, ":accuracy_factor", 50), 
        (val_add, ":speed_factor", 50), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_rus_dvor_cavalry_2"),
        (this_or_next|eq, ":troop_no", "trp_rus_dvor_cavalry"),
        (this_or_next|eq, ":troop_no", "trp_scottish_guard"),
        (eq, ":troop_no", "trp_adventurer"),
        (val_add, ":damage_factor", 25), 
        (val_add, ":reload_speed_factor", 100), 
        (val_add, ":weapon_speed_factor", 100), 
        (val_add, ":accuracy_factor", 50), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_rat_1"),
        (this_or_next|eq ,":troop_no", "trp_rat_2"),
        (this_or_next|eq, ":troop_no", "trp_rat_3"),
        (this_or_next|eq, ":troop_no", "trp_rat_4"),
        (this_or_next|eq, ":troop_no", "trp_rat_5_1"),
        (this_or_next|eq, ":troop_no", "trp_rat_5_2"),

        (this_or_next|eq, ":troop_no", "trp_woodelf_sworddancer"),
        (this_or_next|eq, ":troop_no", "trp_assassin"),
        (this_or_next|eq, ":troop_no", "trp_ninjia"),
        (this_or_next|eq, ":troop_no", "trp_ninjia_adv"),
        (eq, ":troop_no", "trp_sarranid_assasin"),
        (val_add, ":reload_speed_factor", 25), 
        (val_add, ":weapon_speed_factor", 25), 
        (val_add, ":speed_factor", 50), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_scottish_swordman"),
        (this_or_next|eq, ":troop_no", "trp_scottish_axeman"),
        (this_or_next|eq, ":troop_no", "trp_scottish_pikeman_2"),
        (this_or_next|eq, ":troop_no", "trp_scottish_pikeman"),
        (this_or_next|eq, ":troop_no", "trp_demon_4_2"),
        (eq, ":troop_no", "trp_scottish_jav"),
        (val_add, ":accuracy_factor", 50), 
        (val_add, ":damage_factor", 20), 
        (val_add, ":reload_speed_factor", 50), 
        (val_add, ":weapon_speed_factor", 50), 
        (val_add, ":speed_factor", 25), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_swiss_swordman"),
        (this_or_next|eq, ":troop_no", "trp_swiss_pikeman"),
        (this_or_next|eq, ":troop_no", "trp_swiss_pikeman_2"),
        (this_or_next|eq, ":troop_no", "trp_swiss_halberd"),
        (this_or_next|eq, ":troop_no", "trp_woodelf_spearman"),
        (this_or_next|eq, ":troop_no", "trp_woodelf_swordman"),
        (eq, ":troop_no", "trp_swiss_halberd_2"),
        (val_add, ":damage_factor", 25), 
        (val_add, ":reload_speed_factor", 50), 
        (val_add, ":weapon_speed_factor", 50), 
        (val_add, ":speed_factor", 50), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_grandelf_guard"),
      
      
        (this_or_next|eq, ":troop_no", "trp_iberian_town_footman_3"),
        (this_or_next|eq, ":troop_no", "trp_demon_5"),
        (this_or_next|eq, ":troop_no", "trp_quick_battle_troop_8"),
        (this_or_next|eq ,":troop_no", "trp_demon_2"),
        (this_or_next|eq, ":troop_no", "trp_dwarf_berserker"),
        (this_or_next|eq, ":troop_no", "trp_cheat_man"),
        (this_or_next|eq, ":troop_no", "trp_god_choosen_berserker"),
        (eq, ":troop_no", "trp_mercenary_berserker"),
        #(agent_set_max_hit_points,":agent_no",200,1),
        (val_add, ":damage_factor", 50), 
        (val_add, ":reload_speed_factor", 50), 
        (val_add, ":weapon_speed_factor", 50), 
        (val_add, ":speed_factor", 50), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_mummy_3"),
        (this_or_next|eq, ":troop_no", "trp_ghazis_1"),
        (this_or_next|eq, ":troop_no", "trp_ghazis_2"),
        (eq, ":troop_no", "trp_strange_warrior"),
        (val_add, ":damage_factor", 20), 
        (val_add, ":reload_speed_factor", 20), 
        (val_add, ":weapon_speed_factor", 20), 
        (val_add, ":speed_factor", 20), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_zombie_2"),
        (this_or_next|eq, ":troop_no", "trp_zombie_1"),
        (this_or_next|eq, ":troop_no", "trp_mummy_2"),
        (eq, ":troop_no", "trp_mummy_3"),
        (val_add, ":speed_factor", -25), 
      (else_try),
        (neg|is_currently_night),
        (this_or_next|eq, ":troop_no", "trp_hospitaller_knight_2"),
        (this_or_next|eq, ":troop_no", "trp_hospitaller_knight"),
        (this_or_next|eq, ":troop_no", "trp_teutonic_horse_1"),
        (this_or_next|eq, ":troop_no", "trp_teutonic_horse_2"),
        (eq, ":troop_no", "trp_teutonic_horse_3"),
        (val_add, ":damage_factor", 25), 
        (val_add, ":reload_speed_factor", 50), 
        (val_add, ":weapon_speed_factor", 50), 
        (val_add, ":speed_factor", 25), 
      (else_try),
        (this_or_next|eq,":troop_no", "trp_german_twohander_4"),
        (eq, ":troop_no", "trp_grey_knight_terminator"),
        (val_add, ":reload_speed_factor", 50), 
        (val_add, ":weapon_speed_factor", 50), 
        #(val_add, ":speed_factor", 50), 
      (else_try),
      
        (this_or_next|eq, ":troop_no", "trp_golem_4"),
        (this_or_next|eq, ":troop_no", "trp_demon_3"),

        (this_or_next|eq, ":troop_no", "trp_cyclop"),
        (this_or_next|eq, ":troop_no", "trp_undead_magic_1"),
        (this_or_next|eq ,":troop_no", "trp_demon_1"),
        (this_or_next|eq, ":troop_no", "trp_demon_4"),
        (this_or_next|eq, ":troop_no", "trp_werewolf_1_a"),
        (eq, ":troop_no", "trp_werewolf_1"),
        (val_add, ":reload_speed_factor", 50), 
        (val_add, ":weapon_speed_factor", 50), 
        (val_add, ":speed_factor", 50), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_bone_dragon"),
        (this_or_next|eq, ":troop_no", "trp_ghost_dragon"),
        (this_or_next|eq, ":troop_no", "trp_lich_dragon"),
      
        (this_or_next|eq, ":troop_no", "trp_fire_dragon"),
        (this_or_next|eq, ":troop_no", "trp_lava_dragon"),
        (this_or_next|eq, ":troop_no", "trp_red_dragon"),
        (this_or_next|eq, ":troop_no", "trp_black_dragon"),
        (this_or_next|eq, ":troop_no", "trp_green_dragon"),
        (eq, ":troop_no", "trp_gold_dragon"),
        (val_add, ":damage_factor", 100), 
        (val_add, ":accuracy_factor", 100), 
        (val_add, ":reload_speed_factor", 200), 
        (val_add, ":weapon_speed_factor", 50), 
        (val_add, ":speed_factor", 150), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_pixie"),
        (this_or_next|eq, ":troop_no", "trp_dryad"),
        (this_or_next|eq, ":troop_no", "trp_ghost"),
        (eq, ":troop_no", "trp_wight"),
        (val_add, ":reload_speed_factor", 50), 
        (val_add, ":weapon_speed_factor", 50), 
        (val_add, ":speed_factor", 100), 
      (else_try),
        (this_or_next|eq, ":troop_no", "trp_angle"),
        (this_or_next|eq, ":troop_no", "trp_archangle"),
        (this_or_next|eq,":troop_no", "trp_firefly"),
        (eq, ":troop_no", "trp_dragonfly"),
        (val_add, ":reload_speed_factor", 100), 
        (val_add, ":weapon_speed_factor", 100), 
        (val_add, ":speed_factor", 100), 
      (try_end),

      (try_begin),
        (is_between,":troop_no",tavernkeepers_begin,tavernkeepers_end),
        (val_add, ":speed_factor", -1000), 
      (try_end),

      (try_begin),
        (eq, ":troop_no", "trp_hired_assassin"),
        (try_begin),
          #(eq, "$g_start_hired_assassin_fight", 1),
          (neg|eq, "$g_start_hired_assassin_fight", 2),
          (agent_set_visibility, ":agent_no", 0),
        (else_try),
          (eq, "$g_start_hired_assassin_fight", 2),
          (agent_set_visibility, ":agent_no", 1),
        (try_end),
      (try_end),
      (try_begin),
        (try_begin),
          (eq, ":agent_gender", tf_male_elf),
          (val_add, ":speed_factor", 15), 
          (val_add, ":accuracy_factor", 20), 
          (val_add, ":weapon_speed_factor", -10),
          (val_add, ":reload_speed_factor", -10), 
        (else_try),
          (eq, ":agent_gender", tf_titan),
          #(val_add, ":speed_factor", -10), 
          (val_add, ":weapon_speed_factor", -10),
          (val_add, ":reload_speed_factor", -10), 
          (val_add, ":damage_factor", 25),
        (else_try),
          (this_or_next|eq, ":agent_gender", tf_giant_dwarf),
          (eq, ":agent_gender", tf_troll),
          #(val_add, ":speed_factor", -10), 
          (val_add, ":speed_factor", 10), 
          (val_add, ":weapon_speed_factor", -10),
          (val_add, ":reload_speed_factor", -10), 
          (val_add, ":damage_factor", 50),
        (else_try),
          (eq, ":agent_gender", tf_demon_human),
          (val_add, ":speed_factor", -10), 
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":damage_factor", 20),
        (else_try),
          (is_currently_night),
          (this_or_next|eq, ":agent_gender", tf_orc),
          (this_or_next|eq, ":agent_gender", tf_ogre),
          (this_or_next|eq, ":agent_gender", tf_female_elf),
          (eq, ":agent_gender", tf_beastman),
          (val_add, ":weapon_speed_factor", 50), 
          (val_add, ":reload_speed_factor", 50), 
          (val_add, ":speed_factor", 25), 
        (else_try),
          (this_or_next|eq, ":agent_gender", tf_orc),
          (this_or_next|eq, ":agent_gender", tf_ogre),
          (this_or_next|eq, ":agent_gender", tf_female_elf),
          (eq, ":agent_gender", tf_beastman),
          (val_add, ":weapon_speed_factor", 15), 
          (val_add, ":reload_speed_factor", 15), 
        (else_try),
          (eq, ":agent_gender", tf_dwarf),
          (val_add, ":speed_factor", -15), 
          (val_add, ":damage_factor", 15), 
          (val_add, ":reload_speed_factor", 50), 
          (val_add, ":reload_speed_factor", 50), 
        (else_try),
          (is_currently_night),
          (this_or_next|eq, ":agent_gender", tf_undead),
          (eq, ":agent_gender", tf_vampire),
          (val_add, ":speed_factor", 25), 
          (val_add, ":weapon_speed_factor", 25),
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":damage_factor", 25),
        (else_try),
          (neg|is_currently_night),
          (eq, ":agent_gender", tf_vampire),
          (val_add, ":speed_factor", -25), 
          (val_add, ":weapon_speed_factor", -25),
          (val_add, ":reload_speed_factor", -25), 
          (val_add, ":damage_factor", -25),
        (try_end),
        
        (try_begin),
          (eq, ":agent_gender", tf_ogre),
          (agent_get_kill_count, ":num_killed", ":agent_no"),
          (agent_get_kill_count, ":num_wounded", ":agent_no", 1),
          (val_add, ":num_killed", ":num_wounded"),
          (gt, ":num_killed", 0),
          (store_mul,":killed_bount",":num_killed", 10),
          
          (val_min, ":killed_bount", 151),
          (val_add, ":damage_factor", ":killed_bount"), 
          (val_add, ":weapon_speed_factor", ":killed_bount"), 
          #(val_add, ":reload_speed_factor", ":killed_bount"), 
          (val_add, ":speed_factor", ":killed_bount"), 
          (val_mul, ":num_killed", -3),
          (val_clamp, ":num_killed", -50, 1),
          (val_add, ":accuracy_factor", ":num_killed"),
          (val_add, ":ranged_damage_factor", ":num_killed"), 
        (try_end),
      (try_end),

      (try_begin),
        (agent_get_wielded_item,":wielded_item",":agent_no",0),
        (gt,":wielded_item", 0),
        (item_get_type, ":item_type", ":wielded_item"),
        (try_begin),
          (this_or_next|eq, ":item_type", itp_type_pistol),
          (eq, ":item_type", itp_type_musket),
          (neg|item_has_property, ":wielded_item", itp_is_magic_staff),
          (store_skill_level,":precise_shot","skl_precise_shot",":troop_no"),
          (store_mul, ":precise_shot_bount", ":precise_shot", 10),
          (val_add, ":ranged_damage_factor", ":precise_shot_bount"), 
          
          (store_mul, ":precise_shot_bount", ":precise_shot", 6),
          (val_add, ":reload_speed_factor", ":precise_shot_bount"), 
          
          (store_mul, ":precise_shot_bount", ":precise_shot", 6),
          (val_add, ":accuracy_factor", ":precise_shot_bount"), 
        (else_try),
          (this_or_next|eq, ":item_type", itp_type_pistol),
          (eq, ":item_type", itp_type_musket),
          (item_has_property, ":wielded_item", itp_is_magic_staff),
          (store_skill_level,":precise_shot","skl_magic_skill",":troop_no"),
          (store_mul, ":precise_shot_bount", ":precise_shot", 10),
          (val_add, ":ranged_damage_factor", ":precise_shot_bount"), 
          
          (store_mul, ":precise_shot_bount", ":precise_shot", 6),
          (val_add, ":reload_speed_factor", ":precise_shot_bount"), 
          
          (store_mul, ":precise_shot_bount", ":precise_shot", 6),
          (val_add, ":accuracy_factor", ":precise_shot_bount"), 
        (else_try),
          (eq, ":item_type", itp_type_crossbow),
          (store_skill_level,":precise_shot","skl_precise_shot",":troop_no"),
          (store_mul, ":precise_shot_bount", ":precise_shot", 16),
          (val_add, ":ranged_damage_factor", ":precise_shot_bount"), 
          
          (store_proficiency_level, ":crossbow_proficiency", ":troop_no", wpt_crossbow),
          (store_mul, ":ranged_damage_modifier", ":crossbow_proficiency", 15),
          (val_div, ":ranged_damage_modifier", 100),
          (val_add, ":ranged_damage_modifier", 85),
          (val_add, ":ranged_damage_factor", ":ranged_damage_modifier"), 
          
          (store_mul, ":precise_shot_bount", ":precise_shot", 4),
          (val_add, ":reload_speed_factor", ":precise_shot_bount"), 
          
          (store_mul, ":precise_shot_bount", ":precise_shot", 4),
          (val_add, ":accuracy_factor", ":precise_shot_bount"), 
          
          
          
          
        (else_try),
          (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
          (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
          (eq, ":item_type", itp_type_polearm),
          (store_skill_level, ":dest_skill_level", "skl_power_strike", ":troop_no"),
          (val_mul, ":dest_skill_level", 8),
          (val_add, ":damage_factor", ":dest_skill_level"),
        (else_try),
          (eq, ":item_type", itp_type_thrown),
          (agent_has_item_equipped,":agent_no","itm_giant_gauntlets"),
          (val_add, ":damage_factor", 50),
          (val_add, ":ranged_damage_factor", 50),
        (try_end),
        
        (agent_get_party_id, ":agent_party", ":agent_no"),
        (try_begin),
          (gt, ":agent_party", -1),
          (party_stack_get_troop_id, ":party_leader", ":agent_party", 0),
          (troop_is_hero, ":party_leader"),
          #(neq, ":troop_no", ":party_leader"),
          (try_begin),
            (store_skill_level, ":encouragement_level", "skl_offense", ":party_leader"),
            (val_mul, ":encouragement_level", 5),
            (val_add, ":damage_factor", ":encouragement_level"), 
            (val_add, ":ranged_damage_factor", ":encouragement_level"), 
          (try_end),
          (try_begin),
            (store_skill_level, ":encouragement_level", "skl_archer_comman", ":party_leader"),
            (val_mul, ":encouragement_level", 5),
            (val_add, ":ranged_damage_factor", ":encouragement_level"), 
          (try_end),
          (try_begin),
            (this_or_next|is_between, ":troop_no", "trp_se_tribesman", "trp_mummy_2_1"),
            (this_or_next|is_between, ":troop_no", "trp_ghost", "trp_wraith"),
            (this_or_next|is_between, ":troop_no", "trp_air_elemental", "trp_human_magic_1"),
            (this_or_next|is_between, ":troop_no", "trp_golem_1", "trp_sissofbattle"),
            (this_or_next|is_between, ":troop_no", "trp_air_elemental", "trp_air_elemental"),
            (this_or_next|is_between,":troop_no","trp_demon_1","trp_demon_3"),
            (this_or_next|eq,":troop_no","trp_dryad"),
            (this_or_next|eq,":troop_no","trp_pixie"),
            (this_or_next|eq,":troop_no","trp_inferno"),
            (eq,":troop_no","trp_inferno"),
            (party_get_skill_level, ":encouragement_level", ":agent_party", "skl_undead_master"),

            (store_skill_level, ":encouragement_level", "skl_undead_master", ":party_leader"),
            (val_mul, ":encouragement_level", 10),
            (val_add, ":damage_factor", ":encouragement_level"), 
          (try_end),
          
          
          (try_begin),
            (this_or_next|is_between, ":troop_no", "trp_troll_1", "trp_ogre_cannon"),
            (this_or_next|is_between, ":troop_no", "trp_ent_1", "trp_grandelf_cavalry"),
            (this_or_next|is_between, ":troop_no", "trp_demon_3", "trp_demon_5"),
            (this_or_next|is_between, ":troop_no", "trp_angle", "trp_titan_0"),
            (this_or_next|is_between, ":troop_no", "trp_mummy_2_1", "trp_lich_3"),
            (this_or_next|eq,":troop_no","trp_demon_8"),
            (this_or_next|eq,":troop_no","trp_huge_inferno"),
            (this_or_next|eq,":troop_no","trp_demon_human_5_2"),
            (this_or_next|eq,":troop_no","trp_gargoyle"),
            (this_or_next|eq, ":troop_no", "trp_bone_dragon"),
            (this_or_next|eq, ":troop_no", "trp_ghost_dragon"),
            
            (this_or_next|eq,":troop_no","trp_gargoyle"),
            (this_or_next|eq, ":troop_no", "trp_bone_dragon"),
            (eq,":troop_no","trp_ghost_dragon"),
            (party_get_skill_level, ":encouragement_level", ":agent_party", "skl_undead_master"),
            (val_mul, ":encouragement_level", 5),
            (val_add, ":damage_factor", ":encouragement_level"), 
          (try_end),
        (try_end),
      (try_end),
      (try_begin),
        (store_skill_level, ":physique_level", "skl_physique", ":troop_no"),
        (store_mul, ":speed_modifier", ":physique_level", 5),
        (val_add, ":speed_factor", ":speed_modifier"),
      (try_end),


      (try_begin),
        (store_current_scene,":current_scene"),
        (neg|is_between, ":current_scene", "scn_town_1_center", "scn_town_1_castle"),
        (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_prison"),
        (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
        (troop_is_hero,":troop_no"),
        (try_begin),#ek_gloves
          (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_gloves),
          (try_begin),
            (eq, ":item_modifier", imod_sturdy),
            (val_add, ":speed_factor", 10), 
          (else_try),
            (eq, ":item_modifier", imod_thick),
            (val_add, ":accuracy_factor", 25), 
            (val_add, ":reload_speed_factor", 50), 
          (else_try),
            (eq, ":item_modifier", imod_hardened),
            (agent_get_wielded_item,":wielded_item",":agent_no",0),
            (gt,":wielded_item", 0),
            (item_get_type, ":item_type", ":wielded_item"),
            (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
            (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
            (eq, ":item_type", itp_type_polearm),
            (val_add, ":damage_factor", 20), 
          (else_try),
            (eq, ":item_modifier", imod_superb),
            (agent_get_horse, ":horse_agent", ":agent_no"),
            (gt, ":horse_agent", 0),
            (val_add, ":damage_factor", 20), 
          (try_end),
        (try_end),
       
        (try_begin),#ek_head
          (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_head),
          (try_begin),
            (eq, ":item_modifier", imod_sturdy),
            (val_add, ":speed_factor", 10), 
          (else_try),
          
            (this_or_next|agent_has_item_equipped,":agent_no","itm_enchanter_robe"),
            (this_or_next|agent_has_item_equipped,":agent_no","itm_barrier_leg"),
            (eq, ":item_modifier", imod_thick),
            (agent_set_slot, ":agent_no", slot_agent_special_damage_type, 0),
                                                                              
                                                                             
            (agent_set_slot, ":agent_no", slot_agent_special_damage_power, 0),
            (agent_set_slot, ":agent_no", slot_agent_special_damage_time, 0),
            (agent_set_slot, ":agent_no", slot_agent_debuff_affect_type, 0),
            (agent_set_slot, ":agent_no", slot_agent_debuff_affect_time, 0),
            (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_affect_time),
            (gt, ":timer", 0),
            (try_begin),
              (agent_get_slot, ":special", ":agent_no", slot_agent_special_ability_affect_type),
              (this_or_next|eq,":special", weakness),
              (this_or_next|eq,":special", wound_strike),
              (this_or_next|eq,":special", slow),
              (this_or_next|eq,":special", mummy_curse),
              (this_or_next|eq,":special", entangle),
              (eq,":special", fright_aura),
              (agent_set_slot, ":agent_no", slot_agent_special_ability_affect_time, 0),
            (try_end),
          (else_try),
            (eq, ":item_modifier", imod_hardened),
            (store_agent_hit_points, ":hp", ":agent_no", 0),
            (le, ":hp", 60),
            (val_add, ":hp", 10),
            (agent_set_hit_points, ":agent_no", ":hp", 0),
          (try_end),
        (try_end),


        (try_begin),
          (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_body),
          (try_begin),
          #  (eq, ":item_modifier", imod_well_made),
          #  (store_agent_hit_points, ":hp", ":agent_no", 0),
          #  (val_add, ":hp", 2),
          #  (agent_set_hit_points, ":agent_no", ":hp", 0),
          #(else_try),
            (eq, ":item_modifier", imod_sturdy),
            (val_add, ":speed_factor", 10), 
          (else_try),
            (eq, ":item_modifier", imod_hardened),
            (is_currently_night),
            (val_add, ":speed_factor", 20), 
            (val_add, ":weapon_speed_factor", 20),
            (val_add, ":reload_speed_factor", 20), 
            (val_add, ":damage_factor", 20),
          (try_end),
        (try_end),

        (try_begin),
          (agent_has_item_equipped,":agent_no","itm_dawnbreaker_armor"),
          (neg|is_currently_night),
          
            (val_add, ":speed_factor", 100), 
            (val_add, ":reload_speed_factor", 100), 
            (val_add, ":damage_factor", 100),
          
            (agent_set_slot, ":agent_no", slot_agent_special_damage_type, 0),
                                                                              
                                                                             
            (agent_set_slot, ":agent_no", slot_agent_special_damage_power, 0),
            (agent_set_slot, ":agent_no", slot_agent_special_damage_time, 0),
            (agent_set_slot, ":agent_no", slot_agent_debuff_affect_type, 0),
            (agent_set_slot, ":agent_no", slot_agent_debuff_affect_time, 0),
            (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_affect_time),
            (gt, ":timer", 0),
            (try_begin),
              (agent_get_slot, ":special", ":agent_no", slot_agent_special_ability_affect_type),
              (this_or_next|eq,":special", weakness),
              (this_or_next|eq,":special", wound_strike),
              (this_or_next|eq,":special", slow),
              (this_or_next|eq,":special", mummy_curse),
              (this_or_next|eq,":special", entangle),
              (eq,":special", fright_aura),
              (agent_set_slot, ":agent_no", slot_agent_special_ability_affect_time, 0),
            (try_end),
        (try_end),

        (try_begin),
          (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_foot),
          (try_begin),
            (eq, ":item_modifier", imod_sturdy),
            (val_add, ":speed_factor", 10), 
          (else_try),
            (eq, ":item_modifier", imod_hardened),
            (store_agent_hit_points, ":hp", ":agent_no", 0),
            (le, ":hp", 90),
            (val_add, ":speed_factor", 100), 
          (else_try),
            (eq, ":item_modifier", imod_superb),
            (val_add, ":speed_factor", 50), 
          (try_end),
        (try_end),
      (try_end),
      
      (try_begin),
        (agent_get_wielded_item,":wielded_item",":agent_no",0),
        
        
        (try_begin),
          (agent_has_item_equipped,":agent_no","itm_hellskull"),
          (item_get_type, ":cur_weapon_type", ":wielded_item"),
          (eq, ":cur_weapon_type", itp_type_two_handed_wpn),
          (val_add, ":damage_factor", 25), 
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":speed_factor", 25), 
        (try_end),
        (try_begin),
        #  (eq,":wielded_item","itm_serpent_sword"),
        #  (val_add, ":damage_factor", -30), 
        #  (val_add, ":accuracy_factor", -50), 
        #  (val_add, ":weapon_speed_factor", -30), 
        #(else_try),
          (eq,":wielded_item","itm_chaos_axe"),
          (val_add, ":speed_factor", 15), 
       # (else_try),
       #   (eq,":wielded_item","itm_frostfang"),
       #   (val_add, ":weapon_speed_factor", -30), 
        (else_try),
          (eq,":wielded_item","itm_swiftness_sword"),
          (val_add, ":weapon_speed_factor", 400), 
          (val_add, ":reload_speed_factor", 200), 
          (val_add, ":speed_factor", 50), 
        (else_try),
          (eq,":wielded_item","itm_aurora_blade"),
          (val_add, ":weapon_speed_factor", 200), 
          (val_add, ":weapon_speed_factor", 50), 
          (val_add, ":speed_factor", 50), 
        (else_try),
          (eq,":wielded_item","itm_gwilith"),
          (val_add, ":weapon_speed_factor", 100), 
          (val_add, ":weapon_speed_factor", 50), 
          (val_add, ":speed_factor", 150), 
        (else_try),
          (eq,":wielded_item","itm_excalibur_2"),
          (val_add, ":damage_factor", 50), 
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
        (else_try),
          (eq,":wielded_item","itm_angel_blade"),
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":accuracy_factor", 100), 
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
          (store_agent_hit_points, ":hp", ":agent_no"),
          (val_add, ":hp", 3),
          (agent_set_hit_points, ":agent_no", ":hp"),
        (else_try),
          (eq,":wielded_item","itm_excalibur_1"),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
          (store_agent_hit_points, ":hp", ":agent_no"),
          (val_add, ":hp", 50),
          (agent_set_hit_points, ":agent_no", ":hp"),
        (else_try),
          (eq,":wielded_item","itm_charonscall"),
          (val_add, ":damage_factor", 25), 
          (val_add, ":speed_factor", 25), 
        (else_try),
          (eq,":wielded_item","itm_aroundight"),
          (val_add, ":damage_factor", 50), 
          (val_add, ":speed_factor", 50), 
        (try_end),
      (try_end),
      (try_begin),
        (agent_has_item_equipped,":agent_no","itm_fast_travel_boot"),
        (val_add, ":damage_factor", 15), 
        (val_add, ":speed_factor", 150), 
        (eq, "$g_weapon_fire_particle", 0),
        (agent_get_position, pos30, ":agent_no"),
        (position_move_y, pos30, 0, 100),
        (position_move_z, pos30, 50),
        (particle_system_burst, "psys_asaleth_horn_buff", pos30, 15), 
      (else_try),
          (neg|agent_has_item_equipped,":agent_no","itm_fast_travel_boot"),
          #(key_is_down, "$key_special_3"),
          (this_or_next|game_key_is_down, gk_move_forward),
          (this_or_next|game_key_is_down, gk_move_backward),
          (this_or_next|game_key_is_down, gk_move_left),
          (game_key_is_down, gk_move_right),
          (get_player_agent_no, ":player"),
          (eq, ":player", ":agent_no"),
          (agent_get_horse, ":horse_agent", ":agent_no"),
          (lt, ":horse_agent", 0),
          (agent_slot_eq, ":agent_no", slot_agent_horse_is_charging, 1),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
          (gt, ":stamina", 3),
          (val_add, ":stamina", -5),
          (try_begin),
            (agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, "itm_voice_become_ethereal"),
            (val_add, ":stamina", 5),
          (try_end),
          (val_max, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (val_add, ":speed_factor", 150), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_y, pos30, 0, 100),
          (position_move_z, pos30, 50),
          (particle_system_burst, "psys_asaleth_horn_buff", pos30, 15), 
      (else_try),
          (neg|agent_has_item_equipped,":agent_no","itm_fast_travel_boot"),
          (get_player_agent_no, ":player"),
          (neg|eq, ":player", ":agent_no"),
          (troop_is_hero,":troop_no"),
          (agent_get_horse, ":horse_agent", ":agent_no"),
          (lt, ":horse_agent", 0),
          (agent_ai_get_look_target, ":look_target", ":agent_no"),
          (gt, ":look_target", -1),
          (agent_get_position, pos3, ":agent_no"),
          (agent_get_position, pos4, ":look_target"),
          (get_distance_between_positions,":distance",pos3,pos4),
          (is_between,":distance",250,1000),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
          (gt, ":stamina", 50),
          (val_add, ":stamina", -1),
          (try_begin),
            (agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, "itm_voice_become_ethereal"),
            (val_add, ":stamina", 5),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (val_add, ":speed_factor", 150), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_y, pos30, 0, 100),
          (position_move_z, pos30, 50),
          (particle_system_burst, "psys_asaleth_horn_buff", pos30, 15), 
      (try_end),

        (try_begin),
          (agent_has_item_equipped,":agent_no","itm_glass_foot"),
          (val_add, ":speed_factor", 5), 
        (try_end),
      (try_begin),
        (agent_has_item_equipped,":agent_no","itm_sissofbattle_armor"),
        (val_add, ":damage_factor", 25), 
        (val_add, ":reload_speed_factor", 100), 
        (val_add, ":weapon_speed_factor", 100), 
        (val_add, ":accuracy_factor", 50), 
        (val_add, ":speed_factor", 50), 
      (else_try),
        (agent_has_item_equipped,":agent_no","itm_sissofbattle_armor_fly"),
        (val_add, ":damage_factor", 25), 
        (val_add, ":reload_speed_factor", 100), 
        (val_add, ":weapon_speed_factor", 100), 
        (val_add, ":accuracy_factor", 50), 
        (val_add, ":speed_factor", 100), 
      (else_try),
        (agent_has_item_equipped,":agent_no","itm_sissofbattle_armor_red"),
        (val_add, ":damage_factor", 50), 
        (val_add, ":reload_speed_factor", 100), 
        (val_add, ":weapon_speed_factor", 100), 
        (val_add, ":accuracy_factor", 100), 
        (val_add, ":speed_factor", 75), 
      (else_try),
        (agent_has_item_equipped,":agent_no","itm_glass_female_plate"),
        (val_add, ":speed_factor", 5), 
      (else_try),
        (agent_has_item_equipped,":agent_no","itm_glass_male_plate"),
        (val_add, ":speed_factor", 5), 
      (try_end),

      (try_begin),
          (agent_has_item_equipped,":agent_no","itm_marksman_gloves"),
          (val_add, ":accuracy_factor", 200), 
          (try_begin),
            (eq, "$g_weapon_fire_particle", 0),
            (agent_get_position, pos30, ":agent_no"),
            (particle_system_burst, "psys_focus_aura3", pos30, 3),
          (try_end),
          (agent_get_wielded_item,":wielded_item",":agent_no",0),
          (gt,":wielded_item", 0),
          (neg|item_has_property, ":wielded_item", itp_is_magic_staff),
          (val_add, ":reload_speed_factor", 500), 
      (else_try),
        (agent_has_item_equipped,":agent_no","itm_glass_hand"),
        (val_add, ":speed_factor", 5), 
      (else_try),
        (agent_has_item_equipped,":agent_no","itm_armlet_mordiggian"),
        (val_add, ":speed_factor", 50), 
        (val_add, ":weapon_speed_factor", 50),
        (val_add, ":reload_speed_factor", 50), 
        (val_add, ":damage_factor", 25),
        
      (try_end),
      
      
      
      (try_begin),
          (agent_has_item_equipped,":agent_no","itm_siss_cap"),
          (val_add, ":damage_factor", -25), 
          (val_add, ":reload_speed_factor", 300), 
          (val_add, ":weapon_speed_factor", 300), 
          (val_add, ":accuracy_factor", 50), 
      (else_try),
          (agent_has_item_equipped,":agent_no","itm_frankenstein_head"),
          (try_begin),
            (is_currently_night),
            (val_add, ":speed_factor", 25), 
            (val_add, ":weapon_speed_factor", 25),
            (val_add, ":reload_speed_factor", 25), 
            (val_add, ":damage_factor", 25),
          (else_try),
            (val_add, ":damage_factor", -50),
          (try_end),
      (else_try),
          (agent_has_item_equipped,":agent_no","itm_stone_mask"),
          (try_begin),
            (is_currently_night),
            (val_add, ":speed_factor", 25), 
            (val_add, ":weapon_speed_factor", 25),
            (val_add, ":reload_speed_factor", 25), 
            (val_add, ":damage_factor", 25),
          (else_try),
            (val_add, ":speed_factor", -25), 
            (val_add, ":weapon_speed_factor", -25),
            (val_add, ":reload_speed_factor", -25), 
            (val_add, ":damage_factor", -25),
          (try_end),
      (else_try),
          (agent_has_item_equipped,":agent_no","itm_mask_of_blades"),
          (val_add, ":speed_factor", 50), 
          (val_add, ":weapon_speed_factor", 50),
          (val_add, ":reload_speed_factor", 50), 
          (val_add, ":damage_factor", 25),
          #(try_end),
      (else_try),
          (agent_has_item_equipped,":agent_no","itm_khorne_helm"),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 1000),
          (assign, ":num_enemies", reg0),
          (ge, ":num_enemies", 1),
          (store_mul, ":battlerage_bount", ":num_enemies", 10),
          (val_min, ":battlerage_bount", 501),
          (val_add, ":damage_factor", ":battlerage_bount"), 
          (val_add, ":speed_factor", ":battlerage_bount"), 
          (store_mul, ":battlerage_bount", ":num_enemies", 20),
          (val_add, ":weapon_speed_factor", ":battlerage_bount"), 
          (val_add, ":reload_speed_factor", ":battlerage_bount"), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (particle_system_burst, "psys_rage_aura3", pos30, 3),
      (else_try),
          (agent_has_item_equipped,":agent_no","itm_glass_head"),
          (val_add, ":speed_factor", 5), 
      (else_try),
          (agent_has_item_equipped,":agent_no","itm_mirkwood_helm_e"),
          (val_add, ":speed_factor", 5), 
      (try_end),
      
      (try_begin),
        (agent_get_slot, ":extra_hp", ":agent_no", slot_agent_extra_shield),
        (gt, ":extra_hp", 0),
        (agent_get_position, pos30, ":agent_no"),
        (position_move_z,pos30,120),
        (particle_system_burst, "psys_blightlord_aura", pos30, 1),
      (try_end),
        
      (try_begin),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_counter),
        (gt, ":timer", 0),
        (troop_get_slot, ":special", ":troop_no", slot_troop_special_ability),
          
        (try_begin),
          (eq,":special", holy_light),
          (agent_set_invulnerable_shield, ":agent_no", 1),
        (else_try),
          (agent_set_invulnerable_shield, ":agent_no", 0),
        (try_end),
               
        (try_begin),
          (eq,":special", dragon_blade),
          (val_add, ":damage_factor", 300), 
          (val_add, ":speed_factor", 150), 
          
          (assign, ":reload_speed_factor", 1), 
          (assign, ":accuracy_factor", 1), 
          (assign, ":ranged_damage_factor", 1), 
          
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 50),
          (particle_system_burst, "psys_asaleth_horn_buff", pos30, 5), 
        (else_try),
        
          (eq,":special", avatar),
          (val_add, ":damage_factor", 200), 
          (val_add, ":speed_factor", -50), 
          
          (agent_set_slot, ":agent_no", slot_agent_special_damage_type, 0),
                                                                            
                                                                           
          (agent_set_slot, ":agent_no", slot_agent_special_damage_power, 0),
          (agent_set_slot, ":agent_no", slot_agent_special_damage_time, 0),
          (agent_set_slot, ":agent_no", slot_agent_debuff_affect_type, 0),
          (agent_set_slot, ":agent_no", slot_agent_debuff_affect_time, 0),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_affect_type, 0),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_affect_time, 0),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (position_move_y, pos30, 100),
          (particle_system_burst, "psys_stoneskin_aura", pos30, 1),
        (else_try),
        
          (eq,":special", Khorne_blessing),
          (val_add, ":damage_factor", 150), 
          (val_add, ":weapon_speed_factor", 50), 
          (val_add, ":reload_speed_factor", 50), 
          (val_add, ":speed_factor", 50), 
          (try_begin),
            (eq, "$g_weapon_fire_particle", 0),
            (agent_get_position, pos30, ":agent_no"),
            (position_move_z, pos30, 75),
            (particle_system_burst, "psys_feron_berserker_rage", pos30, 2),
          (try_end),
        (else_try),
          (eq,":special", wrath),
          (val_add, ":weapon_speed_factor", 50), 
          (val_add, ":reload_speed_factor", 50), 
          (val_add, ":speed_factor", 50), 
          (try_begin),
            (eq, "$g_weapon_fire_particle", 0),
            (agent_get_position, pos30, ":agent_no"),
            (position_move_z, pos30, 75),
            (particle_system_burst, "psys_feron_berserker_rage", pos30, 2),
          (try_end),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
          (val_add, ":stamina", 5),
          (val_min, ":stamina", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (val_mul, ":stamina", 1),
          (val_add, ":damage_factor", ":stamina"), 
        (else_try),
          (eq,":special", insight),
          #(val_add, ":damage_factor", 50), 
          #(val_add, ":speed_factor", -25),
          (val_add, ":accuracy_factor", 150), 
          (try_begin),
            (eq, "$g_weapon_fire_particle", 0),
            (agent_get_position, pos30, ":agent_no"),
            (particle_system_burst, "psys_focus_aura3", pos30, 3),
          (try_end),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (val_add, ":stamina", 10),
          (val_min, ":stamina", 101),
          (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
        (else_try),
          (eq,":special", tzeentch_arcane),
          (agent_get_slot, ":timer_3", ":agent_no", slot_agent_special_ability_extra_cooldown),
          (neg|troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, summon_undead),
          (ge, ":timer_3", 3),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 3),
        (else_try),
          (eq,":special", awaken),
          (val_add, ":weapon_speed_factor", 50), 
          (val_add, ":reload_speed_factor", 50), 
          (val_add, ":speed_factor", 50), 
          (try_begin),
            (eq, "$g_weapon_fire_particle", 0),
            (agent_get_position, pos30, ":agent_no"),
            (particle_system_burst, "psys_haste_aura3", pos30, 3),
          (try_end),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
          (val_add, ":stamina", -5),
          
          (store_mul, ":battlerage_bount", ":stamina", 5),
          (store_mul, ":battlerage_bount", ":stamina", 3),
          (val_add, ":speed_factor", ":battlerage_bount"), 
          
          
          (agent_get_slot, ":timer_3", ":agent_no", slot_agent_special_ability_extra_cooldown),
          (try_begin),
            (ge, ":stamina", 50),
            (val_add, ":timer_3", -1),
			(val_add, ":stamina", -3),				 
          (try_end),
          (val_add, ":timer_3", -1),
          (val_clamp, ":timer_3", 0, 101),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":timer_3"),
          (val_max, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_begin),
            (eq, ":stamina", 0),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 0),
          (else_try),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 6),
          (try_end),
        (else_try),
          (eq,":special", rage_strike),
          (val_add, ":damage_factor", 50), 
          (val_add, ":speed_factor", 150), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_y, pos30, 0, 100),
          (position_move_z, pos30, 50),
          (particle_system_burst, "psys_asaleth_horn_buff", pos30, 5), 

        (else_try),
          (eq,":special", sinper_shot),
          (val_add, ":damage_factor", 200), 
          (val_add, ":speed_factor", -50),
          (val_add, ":accuracy_factor", 200), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_rage_aura3", pos30, 3), 
          (agent_set_slot,":agent_no",slot_agent_archer_state,2),
        (else_try),
          (eq,":special", windforce),
          (val_add, ":damage_factor", 100), 
          (val_add, ":ranged_damage_factor", 150), 
          (val_add, ":accuracy_factor", 200), 
          (agent_set_slot,":agent_no",slot_agent_archer_state,2),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3), 
        (else_try),
          (eq,":special", haste_reload),
          (val_add, ":weapon_speed_factor", 100), 
          (val_add, ":reload_speed_factor", 200), 
          (val_add, ":damage_factor", -25), 
          (val_add, ":accuracy_factor", -50), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_haste_aura3", pos30, 15),
          
        (else_try),
          (eq,":special", inspire),
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":accuracy_factor", 100), 
          (store_agent_hit_points, ":hp", ":agent_no"),
          (val_add, ":hp", 15),
          (agent_set_hit_points, ":agent_no", ":hp"),
          (agent_get_slot, ":timer", ":agent_no", slot_agent_stamina),
          (val_add, ":timer", 1),
          (val_min, ":timer", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer"),
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
        (else_try),
          (this_or_next|eq,":special",ground_stomp),
          (eq,":special",taunt),
          (troop_get_slot, ":troop_max_hp", ":troop_no", slot_troop_max_hp),
          (val_div,":troop_max_hp", 30),
          (val_mul,":troop_max_hp", -1),
          (call_script, "script_change_agent_shield", ":agent_no", ":troop_max_hp"),
          #(agent_set_hit_points,":agent_no",100,0),
        (else_try),
          (this_or_next|eq,":special",shadowking),
          (eq,":special",shadowstep),
          (val_add, ":damage_factor", 200), 
          (val_add, ":weapon_speed_factor", 75), 
        (else_try),
          (eq,":special", holy_light),
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":accuracy_factor", 100), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_holy_light_aura", pos40, 1),
          (agent_set_hit_points, ":agent_no", 100,0),
        (else_try),
          (eq,":special", divine_strength),
          (val_add, ":damage_factor", 25), 
          (val_add, ":accuracy_factor", 50), 
          (val_add, ":reload_speed_factor", 25), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
        (else_try),
          (eq,":special", mass_haste),
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":speed_factor", 50), 
          (val_add, ":reload_speed_factor", 25), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_asaleth_horn_buff", pos30, 15), 
        (else_try),
          (eq,":special", nurgle_blessing),
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_add, ":hp", 50),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (val_add, ":damage_factor", 50), 
          (val_add, ":speed_factor", -25),
          (val_add, ":accuracy_factor", 150), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z,pos30,100),
          (particle_system_burst, "psys_heal_effect", pos30, 10), 
        (else_try),
          (eq,":special",stoneskin),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (position_move_y, pos30, 100),
          (particle_system_burst, "psys_stoneskin_aura", pos30, 1),
        (else_try),
          (eq,":special", regeneration),
          (store_agent_hit_points, ":hp", ":agent_no", 0),
          (val_add, ":hp", 50),
          (agent_set_hit_points, ":agent_no", ":hp", 0),
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z,pos30,100),
          (particle_system_burst, "psys_heal_effect", pos30, 10), 
        (try_end),
      (try_end),
      
      (try_begin),
        (agent_get_slot, ":timer_3", ":agent_no", slot_agent_special_ability_extra_counter),
        (gt, ":timer_3", 0),
        (troop_get_slot, ":special", ":troop_no", slot_troop_special_ability_extra),
              
        (try_begin),
          (eq,":special", block),
          (agent_set_invulnerable_shield, ":agent_no", 1),
        (else_try),
          (eq,":special", undead_horse),
          (agent_set_invulnerable_shield, ":agent_no", 1),
        (else_try),
          (eq,":special", roll),
          (agent_set_invulnerable_shield, ":agent_no", 1),
        (else_try),
          (eq,":special", wushuang),
          (agent_set_invulnerable_shield, ":agent_no", 1),
        (else_try),
          (agent_set_invulnerable_shield, ":agent_no", 0),
        (try_end),
               
        (try_begin),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, berserk), 
          (val_add, ":damage_factor", 50), 
          (val_add, ":weapon_speed_factor", 50), 
          (val_add, ":reload_speed_factor", 50), 
          (val_add, ":speed_factor", 50), 
          (try_begin),
            (eq, "$g_weapon_fire_particle", 0),
            (agent_get_position, pos30, ":agent_no"),
            (position_move_z, pos30, 75),
            (particle_system_burst, "psys_feron_berserker_rage", pos30, 2),
          (try_end),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
          (val_add, ":stamina", -3),
          (val_max, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (eq, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 0),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, focus), 
          (val_add, ":damage_factor", 50), 
          (val_add, ":speed_factor", -25),
          (val_add, ":accuracy_factor", 150), 
          (try_begin),
            (eq, "$g_weapon_fire_particle", 0),
            (agent_get_position, pos30, ":agent_no"),
            (particle_system_burst, "psys_focus_aura3", pos30, 3),
          (try_end),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
          (try_begin),
            (troop_is_hero, ":troop_no"), 
            (troop_get_slot, ":troop_max_hp", ":troop_no", slot_troop_max_hp),
            (val_div,":troop_max_hp", 30),
            (val_mul,":troop_max_hp", -1),
            (call_script, "script_change_agent_shield", ":agent_no", ":troop_max_hp"),
            (val_add, ":stamina", -2),
          (try_end),
          (val_add, ":stamina", -2),
          (val_max, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (eq, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 0),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, skill_charge), 
          (val_add, ":weapon_speed_factor", 50), 
          (val_add, ":reload_speed_factor", 50), 
          (val_add, ":speed_factor", 50), 
          (try_begin),
            (eq, "$g_weapon_fire_particle", 0),
            (agent_get_position, pos30, ":agent_no"),
            (particle_system_burst, "psys_haste_aura3", pos30, 3),
          (try_end),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
          (val_add, ":stamina", -3),
          (val_max, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (eq, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 0),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, master_archer), 
          (val_add, ":weapon_speed_factor", 50), 
          (val_add, ":reload_speed_factor", 50), 
          (val_add, ":speed_factor", 50), 
          (val_add, ":damage_factor", 50), 
          (val_add, ":accuracy_factor", 150), 
          
          (try_begin),
            (eq, "$g_weapon_fire_particle", 0),
            (agent_get_position, pos30, ":agent_no"),
            (particle_system_burst, "psys_haste_aura3", pos30, 3),
          (try_end),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
          (val_add, ":stamina", -3),
          (val_max, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (eq, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 0),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, smite_evil), 
          (val_add, ":weapon_speed_factor", 75), 
          (val_add, ":reload_speed_factor", 100), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, smite_undead), 
          (val_add, ":weapon_speed_factor", 75), 
          (val_add, ":reload_speed_factor", 100), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, smite_orc), 
          (val_add, ":weapon_speed_factor", 75), 
          (val_add, ":reload_speed_factor", 100), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, smite_outsider), 
          (val_add, ":weapon_speed_factor", 75), 
          (val_add, ":reload_speed_factor", 100), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, head_hunted), 
          (val_add, ":weapon_speed_factor", 75), 
          (val_add, ":reload_speed_factor", 100), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, reaper), 
          (val_add, ":weapon_speed_factor", 75), 
          (val_add, ":reload_speed_factor", 100), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, power_strike), 
          (val_add, ":weapon_speed_factor", 75), 
          (val_add, ":reload_speed_factor", 100), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_focus_aura3", pos30, 3),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, roll), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (position_move_y, pos30, 100),
          (particle_system_burst, "psys_stoneskin_aura", pos30, 1),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, rage_charge), 
          (val_add, ":damage_factor", 50), 
          (val_add, ":speed_factor", 50), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_y, pos30, 0, 100),
          (position_move_z, pos30, 50),
          (particle_system_burst, "psys_asaleth_horn_buff", pos30, 15), 

        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, sinper_shot), 
          (val_add, ":damage_factor", 200), 
          (val_add, ":speed_factor", -50),
          (val_add, ":accuracy_factor", 200), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3), 
          (agent_set_slot,":agent_no",slot_agent_archer_state,2),
        (else_try),
          (troop_slot_eq, ":troop_no", slot_troop_special_ability_extra, haste_reload), 
          (val_add, ":weapon_speed_factor", 100), 
          (val_add, ":reload_speed_factor", 200), 
          (val_add, ":damage_factor", -25), 
          (val_add, ":accuracy_factor", -50), 
          
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_haste_aura3", pos30, 15),

        (try_end),
      (try_end),
      
      (try_begin),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_buff_affect_time),
        (gt, ":timer", 0),
        (agent_get_slot, ":special", ":agent_no", slot_agent_buff_affect_type),
        (try_begin),
          (eq,":special", "itm_magic_bironas_timewarp"),
          (val_add, ":damage_factor", 25), 
          (val_add, ":speed_factor", 50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
        (else_try),
          (eq,":special", "itm_magic_cascading_fire_cloak"),
          (val_add, ":damage_factor", 25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_rage_light_aura", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_flaming_sword_of_rhuin"),
          (val_add, ":damage_factor", 30), 
          (val_add, ":ranged_damage_factor", 25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_sword3", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_turn_vampire"),
          (val_add, ":speed_factor", 50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_runecage1", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_wyssans_wildform"),
          (val_add, ":damage_factor", 25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_pvengeful_hood", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_panns_impenetrable_belt"),
          (val_add, ":speed_factor", 50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_pvengeful_hood", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_shield_of_cold"),
          (val_add, ":speed_factor", -50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_Freezing_Trail", pos30, 10), 
        (else_try),
          (eq,":special", "itm_magic_flesh_to_stone"),
          (val_add, ":speed_factor", -25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_green_light_aura", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_regrowth"),
          (store_agent_hit_points, ":hp", ":agent_no", 0),
          (val_add, ":hp", 50),
          (agent_set_hit_points, ":agent_no", ":hp", 0),
          (agent_get_slot, ":timer", ":agent_no", slot_agent_stamina),
          (val_add, ":timer", 10),
          (val_min, ":timer", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z,pos30,100),
          (particle_system_burst, "psys_heal_effect", pos30, 10), 
        (else_try),
          (eq,":special", "itm_magic_okkams_mindrazor"),
          (val_add, ":damage_factor", 50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_sword2", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_frostblade"),
          (val_add, ":damage_factor", 50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_sword1", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_power_of_darkness"),
          (val_add, ":damage_factor", 33), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":speed_factor", 33), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_runecage1", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_hand_of_glory"),
          (val_add, ":damage_factor", 33), 
          (val_add, ":reload_speed_factor", 33), 
          (val_add, ":ranged_damage_factor", 150), 
          (val_add, ":accuracy_factor", 200), 
          (agent_set_slot,":agent_no",slot_agent_archer_state,2),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3), 
        (else_try),
          (eq,":special", "itm_magic_phas_protection"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 1),
        (else_try),
          (eq,":special", "itm_magic_light_of_battle"),
          (val_add, ":speed_factor", 25), 
          (agent_get_slot, ":courage", ":agent_no", slot_agent_courage_score),
          (val_add, ":courage", 10000),
          (agent_set_slot, ":agent_no", slot_agent_courage_score, ":courage"),
          (agent_get_slot, ":timer", ":agent_no", slot_agent_stamina),
          (val_add, ":timer", 1),
          (val_min, ":timer", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer"),
          (particle_system_burst, "psys_smite_aura", pos30, 3), 
        (else_try),
          (eq,":special", "itm_magic_glean_magic"),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (val_add, ":stamina", 30),
          (val_clamp, ":stamina", 0, 101),
          (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
        (else_try),
          (eq,":special", "itm_magic_fleshy_abundance"),
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_add, ":hp", 50),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (val_add, ":damage_factor", 50), 
          (val_add, ":speed_factor", -25),
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z,pos30,100),
          (particle_system_burst, "psys_heal_effect", pos30, 10), 
        (else_try),
          (eq,":special", divine_strength),
          (val_add, ":damage_factor", 25), 
          (val_add, ":accuracy_factor", 50), 
          (val_add, ":reload_speed_factor", 25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
        (else_try),
          (eq,":special", mass_heal),
          (val_add, ":damage_factor", 100), 
          (val_add, ":reload_speed_factor", 100), 
          (val_add, ":accuracy_factor", 200), 
          (agent_get_slot, ":timer", ":agent_no", slot_agent_stamina),
          (val_add, ":timer", 2),
          (val_min, ":timer", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
        (else_try),
          (eq,":special", haste),
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":speed_factor", 50), 
          (val_add, ":reload_speed_factor", 25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_asaleth_horn_buff", pos30, 1), 
        (else_try),
          (eq,":special", regeneration),
          (store_agent_hit_points, ":hp", ":agent_no", 0),
          (val_add, ":hp", 50),
          (agent_set_hit_points, ":agent_no", ":hp", 0),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z,pos30,100),
          (particle_system_burst, "psys_heal_effect", pos30, 10), 
        (try_end),
      (try_end),
      
      (try_begin),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_debuff_affect_time),
        (gt, ":timer", 0),
        (agent_get_slot, ":special", ":agent_no", slot_agent_debuff_affect_type),
        (try_begin),
          (eq,":special", "itm_magic_net_of_amyntok"),
          (val_add, ":accuracy_factor", -1000), 
          (val_add, ":speed_factor", -1000), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_netofamyntok", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_transmutation_of_lead"),
          (val_add, ":damage_factor", -25), 
          (val_add, ":accuracy_factor", -25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_runecage1", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_curse_of_the_midnight_wind"),
          (agent_get_slot, ":timer", ":agent_no", slot_agent_stamina),
          (val_add, ":timer", -5),
          (val_min, ":timer", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_runecage1", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_curse_of_anraheir"),
          (val_add, ":damage_factor", -25), 
          (val_add, ":accuracy_factor", -30), 
          (val_add, ":speed_factor", -25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_runecage1", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_soulblight"),
          (val_add, ":damage_factor", -25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_runecage1", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_frozen_ground"),
          (val_add, ":speed_factor", -200), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_Freezing_Trail", pos30, 10), 
        (else_try),
          (eq,":special", "itm_magic_word_of_pain"),
          (val_add, ":reload_speed_factor", -100), 
          (val_add, ":accuracy_factor", -50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_runecage1", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_curse_of_arrow_attraction"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_runecage1", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_mana_tempest"),
          (val_add, ":accuracy_factor", -1000), 
          (val_add, ":speed_factor", -33), 
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3), 
        (else_try),
          (eq,":special", "itm_magic_treason_of_tzeentch"),
          (val_add, ":damage_factor", -33), 
          (agent_get_slot, ":courage", ":agent_no", slot_agent_courage_score),
          (val_add, ":courage", -500),
          (agent_set_slot, ":agent_no", slot_agent_courage_score, ":courage"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_runecage1", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_acquiescence"),
          (val_add, ":speed_factor", -45), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_curse_effect", pos30, 10), 
        (else_try),
          (eq,":special", "itm_magic_hysterical_frenzy"),
          (val_add, ":damage_factor", 50), 
          (val_add, ":speed_factor", 50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_curse_effect", pos30, 10), 
        (else_try),
          (eq,":special", "itm_magic_phantasmogoria"),
          (val_add, ":accuracy_factor", -1000), 
          (val_add, ":speed_factor", -1000), 
          (agent_get_slot, ":courage", ":agent_no", slot_agent_courage_score),
          (val_add, ":courage", -2000),
          (agent_set_slot, ":agent_no", slot_agent_courage_score, ":courage"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_propspell_netofslaanesh", pos40, 1),
        (else_try),
          (eq,":special", "itm_magic_miasma_of_pestilence"),
          (val_add, ":damage_factor", -25), 
          (val_add, ":speed_factor", -50), 
          (agent_set_slot, ":agent_no", slot_agent_special_damage_type, poison),
                                                                           
                                                                            
          (agent_set_slot, ":agent_no", slot_agent_special_damage_time, 5),
          (agent_set_slot, ":agent_no", slot_agent_special_damage_power, 6),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_poison_blood", pos30, 50), 
        (else_try),
          (eq,":special", weakness),
          (val_add, ":damage_factor", -25), 
          (val_add, ":accuracy_factor", -50), 
          (val_add, ":reload_speed_factor", -25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_slow_auro", pos30, 3), 
        (else_try),
          (eq,":special", slow),
          (val_add, ":weapon_speed_factor", -25), 
          (val_add, ":speed_factor", -50), 
          (val_add, ":reload_speed_factor", -25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z,pos30,100),
          (particle_system_burst, "psys_game_hoof_dust_mud", pos30, 20),
        (else_try),
          (eq,":special", mummy_curse),
          (val_add, ":damage_factor", -25), 
          (val_add, ":accuracy_factor", -50), 
          (val_add, ":speed_factor", -25), 
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_add, ":hp", -1),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_curse_effect", pos30, 10), 
        (try_end),
      (try_end),
      
      (try_begin),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_affect_time),
        (gt, ":timer", 0),
        (agent_get_slot, ":special", ":agent_no", slot_agent_special_ability_affect_type),
        
        
        (try_begin),
          (eq,":special", "itm_voice_become_ethereal"),
          (agent_set_invulnerable_shield, ":agent_no", 1),
        (else_try),
          (agent_set_invulnerable_shield, ":agent_no", 0),
        (try_end),
        
        (try_begin),
          (eq,":special", "itm_voice_become_ethereal"),
          (val_add, ":speed_factor", 50), 
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (try_begin),
            (eq, ":attack_action", 2),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_affect_time, 0),
          (try_end),
        (else_try),
          (eq,":special", "itm_voice_slow_time"),
          (val_add, ":damage_factor", -1000), 
          (val_add, ":speed_factor", -1000), 
        (else_try),
          (eq,":special", divine_strength),
          (val_add, ":damage_factor", 25), 
          (val_add, ":accuracy_factor", 50), 
          (val_add, ":reload_speed_factor", 25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
        (else_try),
          (eq,":special", power_strike),
          (val_add, ":damage_factor", 15), 
          (val_add, ":accuracy_factor", 50), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":speed_factor", 25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_haste_aura3", pos30, 6), 
          
        (else_try),
          (eq,":special", mass_heal),
          (val_add, ":damage_factor", 100), 
          (val_add, ":reload_speed_factor", 100), 
          (val_add, ":accuracy_factor", 200), 
          (agent_get_slot, ":timer", ":agent_no", slot_agent_stamina),
          (val_add, ":timer", 2),
          (val_min, ":timer", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
          
        (else_try),
          (eq,":special", weakness),
          (val_add, ":damage_factor", -25), 
          (val_add, ":accuracy_factor", -50), 
          (val_add, ":reload_speed_factor", -25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_slow_auro", pos30, 3), 
        (else_try),
          (eq,":special", wound_strike),
          (val_add, ":damage_factor", -25), 
          (val_add, ":accuracy_factor", -50), 
          (val_add, ":reload_speed_factor", -25), 
          (val_add, ":speed_factor", -25), 
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_add, ":hp", -1),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_curse_effect", pos30, 10), 
        (else_try),
          (eq,":special", haste),
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":speed_factor", 50), 
          (val_add, ":reload_speed_factor", 25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_asaleth_horn_buff", pos30, 1), 
        (else_try),
          (eq,":special", slow),
          (val_add, ":weapon_speed_factor", -25), 
          (val_add, ":speed_factor", -50), 
          (val_add, ":reload_speed_factor", -25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z,pos30,100),
          (particle_system_burst, "psys_game_hoof_dust_mud", pos30, 20),
        (else_try),
          (eq,":special", master_archer),
          (val_add, ":damage_factor", 100), 
          (val_add, ":ranged_damage_factor", 150), 
          (val_add, ":accuracy_factor", 200), 
          (agent_set_slot,":agent_no",slot_agent_archer_state,2),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_smite_aura", pos30, 3), 

        (else_try),
          (eq,":special", regeneration),
          (store_agent_hit_points, ":hp", ":agent_no", 0),
          (val_add, ":hp", 50),
          (agent_set_hit_points, ":agent_no", ":hp", 0),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z,pos30,100),
          (particle_system_burst, "psys_heal_effect", pos30, 10), 
          
        (else_try),
          (eq,":special", Nurgle_blessing),
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_add, ":hp", 50),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (val_add, ":damage_factor", 50), 
          (val_add, ":speed_factor", -25),
          (val_add, ":accuracy_factor", 150), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z,pos30,100),
          (particle_system_burst, "psys_heal_effect", pos30, 10), 
        (else_try),
          (eq,":special",stoneskin),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (position_move_y, pos30, 100),
          (particle_system_burst, "psys_stoneskin_aura", pos30, 1),
        (else_try),
          (eq,":special", haste_reload),
          (val_add, ":weapon_speed_factor", 100), 
          (val_add, ":reload_speed_factor", 200), 
          (val_add, ":damage_factor", -25), 
          (val_add, ":accuracy_factor", -50), 
          #(eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_haste_aura3", pos30, 15),
        (else_try),
          (eq,":special", berserk),
          (val_add, ":damage_factor", 50), 
          (val_add, ":weapon_speed_factor", 50), 
          (val_add, ":reload_speed_factor", 50), 
          (val_add, ":speed_factor", 50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (particle_system_burst, "psys_feron_berserker_rage", pos30, 10),
        (else_try),
          (eq,":special", mummy_curse),
          (val_add, ":damage_factor", -25), 
          (val_add, ":accuracy_factor", -50), 
          (val_add, ":speed_factor", -25), 
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_add, ":hp", -1),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_curse_effect", pos30, 10), 
        (else_try),
          (eq,":special", entangle),
          (val_add, ":weapon_speed_factor", -200), 
          (val_add, ":speed_factor", -200), 
          (store_agent_hit_points, ":hp", ":agent_no", 0),
          (val_add, ":hp", -1),
          (agent_set_hit_points, ":agent_no", ":hp", 0),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_entangle", pos30, 50),
          
          #(particle_system_burst, "psys_gladeborn_arrow", pos30, 50), 
        (else_try),
          (eq,":special", grasp),
          (agent_is_human,":agent_no"),
          (neg|agent_slot_ge,":agent_no",slot_agent_extra_shield,1),
          (call_script, "script_cf_agent_set_animation",  ":agent_no", "anim_bash_knocked",0),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 200),
          (particle_system_burst, "psys_stun_effect", pos30, 1),
        (else_try),
          (eq,":special", dragon_voice),
          (agent_is_human,":agent_no"),
          (neg|agent_slot_ge,":agent_no",slot_agent_extra_shield,1),
          (call_script, "script_cf_agent_set_animation",  ":agent_no", "anim_voice_fly",0),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 200),
          (particle_system_burst, "psys_stun_effect", pos30, 1),
        (else_try),
          (eq,":special", battlecry),
          (val_add, ":damage_factor", 15), 
          (val_add, ":weapon_speed_factor", 15), 
          (val_add, ":reload_speed_factor", 15), 
          (val_add, ":speed_factor", 25), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_rage_aura3", pos30, 3), 
        (else_try),
          (eq,":special", fright_aura),
          (val_add, ":damage_factor", -15), 
          (val_add, ":accuracy_factor", -50), 
          (val_add, ":weapon_speed_factor", -50), 
          (val_add, ":reload_speed_factor", -25), 
          (val_add, ":speed_factor", -50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_fright_aura", pos30, 3), 
        (else_try),
          (eq,":special", inspire),
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":accuracy_factor", 100), 
          (store_agent_hit_points, ":hp", ":agent_no"),
          (val_add, ":hp", 10),
          (agent_set_hit_points, ":agent_no", ":hp"),
          (agent_get_slot, ":timer", ":agent_no", slot_agent_stamina),
          (val_add, ":timer", 1),
          (val_min, ":timer", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer"),
          #(val_add, ":speed_factor", 15), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
        (else_try),
          (eq,":special", holy_light),
          (val_add, ":damage_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":accuracy_factor", 100), 
          (agent_set_hit_points, ":agent_no", 100,0),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
        (else_try),
          (eq,":special", revelation),
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":accuracy_factor", 100), 
          (agent_set_hit_points, ":agent_no", 100,0),
          (agent_get_slot, ":timer", ":agent_no", slot_agent_stamina),
          (val_add, ":timer", 2),
          (val_min, ":timer", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (particle_system_burst, "psys_paladin_aura3", pos30, 3),
        (try_end),
      (try_end),
      
      (try_begin),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_special_ability_passiv_counter),
        (gt, ":timer", 0),
        (troop_get_slot, ":special", ":troop_no", slot_troop_special_ability_passive),
        
        (try_begin),
          (eq,":special", revelation),
          (agent_set_invulnerable_shield, ":agent_no", 1),
        (else_try),
          (eq,":special", bubble_dreams),
          (agent_set_invulnerable_shield, ":agent_no", 1),
        (else_try),
          (agent_set_invulnerable_shield, ":agent_no", 0),
        (try_end),
        
        (try_begin),
          (eq,":special", battlerage),
          (store_mul, ":battlerage_bount", ":timer", 1),
          (val_min, ":battlerage_bount", 501),
          (val_add, ":damage_factor", ":battlerage_bount"), 
          (val_add, ":weapon_speed_factor", ":battlerage_bount"), 
          (val_add, ":reload_speed_factor", ":battlerage_bount"), 
          (val_add, ":speed_factor", ":battlerage_bount"), 
          (agent_get_slot, ":timer2", ":agent_no", slot_agent_stamina),
          (val_add, ":timer2", 1),
          (val_min, ":timer2", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer2"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (particle_system_burst, "psys_rage_aura3", pos30, 3),
        (else_try),
          (eq,":special", frenzy),
          (store_mul, ":battlerage_bount", ":timer", 1),
          (val_min, ":battlerage_bount", 201),
          (val_add, ":weapon_speed_factor", ":battlerage_bount"), 
          (val_add, ":reload_speed_factor", ":battlerage_bount"), 
          (val_add, ":speed_factor", ":battlerage_bount"), 
          (val_div, ":battlerage_bount", 2),
          (val_add, ":damage_factor", ":battlerage_bount"), 
          (agent_get_slot, ":timer2", ":agent_no", slot_agent_stamina),
          (val_add, ":timer2", 1),
          (val_min, ":timer2", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer2"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (particle_system_burst, "psys_rage_aura3", pos30, 3),
        (else_try),
          (eq,":special", ambush),
          (gt, ":timer", 5), 
          (store_mul, ":battlerage_bount", ":timer", 15),
          (val_min, ":battlerage_bount", 501),
          (val_add, ":damage_factor", ":battlerage_bount"), 
          (gt, ":timer", 10), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (particle_system_burst, "psys_rage_aura3", pos30, 3),
        (else_try),
          (eq,":special", steady_aim),
          (gt, ":timer", 5), 
          (store_mul, ":battlerage_bount", ":timer", 30),
          (val_min, ":battlerage_bount", 501),
          (val_add, ":ranged_damage_factor", ":battlerage_bount"), 
          (gt, ":timer", 10), 
          (val_add, ":accuracy_factor", 100), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (particle_system_burst, "psys_rage_aura3", pos30, 3),

        (else_try),
          (eq,":special", counter),
          (store_mul, ":battlerage_bount", ":timer", 5),
          (val_min, ":battlerage_bount", 501),
          (val_add, ":damage_factor", ":timer"), 
          (val_add, ":weapon_speed_factor", ":battlerage_bount"), 
          (val_add, ":reload_speed_factor", ":battlerage_bount"), 
          (agent_get_slot, ":timer2", ":agent_no", slot_agent_stamina),
          (val_add, ":timer2", 2),
          (val_min, ":timer2", 101),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":timer2"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 75),
          (particle_system_burst, "psys_rage_aura3", pos30, 3),
        (else_try),
          (eq,":special", powercharge),
          (val_add, ":damage_factor", 50), 
          (val_add, ":speed_factor", 25), 
        (else_try),
          (this_or_next|eq,":special",poisoned_attacks),
          (eq,":special",ironshield),
          (agent_set_hit_points, ":agent_no", 100,0),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z,pos30,120),
          (particle_system_burst, "psys_blightlord_aura", pos30, 1),
        (else_try),
          (eq,":special", bubble_dreams),
          (val_add, ":damage_factor", 150), 
          (val_add, ":speed_factor", 50), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,400),
          (particle_system_burst, "psys_rage_light_aura", pos40, 1),
        (else_try),
          (eq,":special", revelation),
          (val_add, ":damage_factor", 15), 
          (val_add, ":speed_factor", 15), 
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":accuracy_factor", 100), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos40, ":agent_no"),
          (position_move_z,pos40,120),
          (particle_system_burst, "psys_holy_light_aura", pos40, 1),
          (agent_set_hit_points, ":agent_no", 100,0),
        (try_end),
      (try_end),
      
      
      (try_begin),
        (agent_get_slot, ":timer", ":agent_no", slot_agent_special_damage_time),
        (gt,":timer", 0),
        (agent_get_slot, ":special", ":agent_no", slot_agent_special_damage_type),
        (agent_get_slot, ":power", ":agent_no", slot_agent_special_damage_power),
        (try_begin),
          (eq,":special", burn),
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_mul,":power", -3),
          (val_add, ":hp",":power"),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (agent_get_position,pos30,":agent_no"),
          
          (val_add, ":speed_factor", 15), 
          (val_add, ":accuracy_factor", -50), 
          (try_begin),
            (le, ":hp", 1),
            (agent_deliver_damage_to_agent,":agent_no",":agent_no"),
          (try_end), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_fireplace_fire_small", pos30, 10), 
        (else_try),
          (eq,":special", holy_fire),
          (troop_get_type, ":agent_gender", ":troop_no"),
          (try_begin),
            (this_or_next|agent_has_item_equipped,":agent_no","itm_stone_mask"),
            (this_or_next|agent_has_item_equipped,":agent_no","itm_frankenstein_head"),
            (this_or_next|eq, ":agent_gender", tf_female_elf),
            (this_or_next|eq, ":agent_gender", tf_demon_human),
            (this_or_next|eq, ":agent_gender", tf_undead),
            (eq, ":agent_gender", tf_vampire),
            (store_agent_hit_points, ":hp", ":agent_no", 0),
            (val_mul,":power", -5),
            (val_add, ":hp",":power"),
            (agent_set_hit_points, ":agent_no", ":hp", 0),
          (else_try),  
            (store_agent_hit_points, ":hp", ":agent_no", 1),
            (val_mul,":power", -3),
            (val_add, ":hp",":power"),
            (agent_set_hit_points, ":agent_no", ":hp", 1),
          (try_end),    
          (agent_get_position,pos30,":agent_no"),
          
          (val_add, ":speed_factor", 15), 
          (val_add, ":accuracy_factor", -50), 
          
          (try_begin),
            (le, ":hp", 1),
            (agent_deliver_damage_to_agent,":agent_no",":agent_no"),
          (try_end),  
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_holy_fire", pos30, 10), 
        (else_try),
          (eq,":special", poison),
          (val_add, ":damage_factor", -30), 
          (val_add, ":accuracy_factor", -50), 
          (val_add, ":weapon_speed_factor", -30), 
          (val_add, ":reload_speed_factor", -30), 
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_mul,":power", -3),
          (val_add, ":hp",":power"),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (eq, "$g_weapon_fire_particle", 0),
          (position_move_z, pos30, 150), #makes the blood higher, otherwise it's on ground level
          (position_move_x, pos30, -35), #makes the blood out from the torso towards the arm stump
          (position_move_y, pos30, -10), #makes the blood come out severed stump
          (position_rotate_x, pos30, -90), #makes the blood spurt downwards
          #(particle_system_burst, "psys_game_blood_2", pos1, 100), #100 as power.
          (particle_system_burst, "psys_poison_blood", pos30, 50), 
        (else_try),
          (eq,":special", power_poison),
          (val_add, ":damage_factor", -30), 
          (val_add, ":accuracy_factor", -200), 
          (val_add, ":weapon_speed_factor", -200), 
          (val_add, ":speed_factor", -200), 
          (val_add, ":reload_speed_factor", -200), 
          
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_mul,":power", -1),
          (val_add, ":hp",":power"),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          
          (position_move_z, pos30, 150), #makes the blood higher, otherwise it's on ground level
          (position_move_x, pos30, -35), #makes the blood out from the torso towards the arm stump
          (position_move_y, pos30, -10), #makes the blood come out severed stump
          (position_rotate_x, pos30, -90), #makes the blood spurt downwards
          #(particle_system_burst, "psys_game_blood_2", pos1, 100), #100 as power.
          (particle_system_burst, "psys_poison_blood", pos30, 50), 
        (else_try),
          (eq,":special", wound),
          (val_add, ":damage_factor", -15), 
          (val_add, ":accuracy_factor", -50), 
          (val_add, ":weapon_speed_factor", -50), 
          (val_add, ":reload_speed_factor", -30), 
          (val_add, ":speed_factor", -50), 
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_mul,":power", -3),
          (val_add, ":hp",":power"),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          (position_move_z, pos30, 150), #makes the blood higher, otherwise it's on ground level
          (position_move_x, pos30, -35), #makes the blood out from the torso towards the arm stump
          (position_move_y, pos30, -10), #makes the blood come out severed stump
          (position_rotate_x, pos30, -90), #makes the blood spurt downwards
          (particle_system_burst, "psys_game_blood_2", pos30, 50), #100 as power.
          #(position_move_z, pos30, 100),
          #(particle_system_burst, "psys_bad_effect", pos30, 10),
        (else_try),
          (eq,":special", ice),
          (val_add, ":weapon_speed_factor", -50), 
          (val_add, ":reload_speed_factor", -30), 
          (val_add, ":speed_factor", -50), 
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_mul,":power", -2),
          (val_add, ":hp",":power"),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_snow_effect", pos30, 10), 
        (else_try),
          (eq,":special", power_jump),
          (agent_is_human,":agent_no"),
          (try_begin),
            (le,":timer", 1),
            (agent_set_no_dynamics, ":agent_no", 0),
            (agent_get_position, pos1, ":agent_no"),
            (position_set_z_to_ground_level, pos1),
            (agent_set_position, ":agent_no", pos1),
          (else_try),
            (agent_set_no_dynamics, ":agent_no", 1),
            (agent_get_position, pos1, ":agent_no"),
            (position_set_z_to_ground_level, pos1),
            (position_move_z,pos1,200),
            (agent_set_position, ":agent_no", pos1),
            (agent_set_animation, ":agent_no", "anim_bash_mini_stun"),
          (try_end),
        (else_try),
          (eq,":special", blinding),
          (val_add, ":weapon_speed_factor", -100), 
          (assign, ":reload_speed_factor", 10), 
          (assign, ":speed_factor", 10), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_Freezing_Trail", pos30, 10), 
        (else_try),
          (eq,":special", thunder),
          (val_add, ":weapon_speed_factor", 25), 
          (val_add, ":reload_speed_factor", 25), 
          (val_add, ":speed_factor", -75), 
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
          (val_sub, ":stamina", ":power"),
          (val_max, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (val_sub, ":stamina", ":power"),
          (val_max, ":stamina", 0),
          (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          (position_move_z, pos30, 120),
          (particle_system_burst, "psys_lightning_victim", pos30, 10),
        (else_try),
          (eq,":special", freeze),
          (val_add, ":weapon_speed_factor", -100), 
          (val_add, ":reload_speed_factor", -50), 
          (val_add, ":speed_factor", -200), 
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_mul,":power", -4),
          (val_add, ":hp",":power"),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (try_begin),
            (le, ":hp", 1),
            (agent_deliver_damage_to_agent,":agent_no",":agent_no"),
          (try_end),  
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_Freezing_Trail", pos30, 10), 
        (else_try),
          (eq,":special", curse),
          (val_add, ":damage_factor", -15), 
          (val_add, ":accuracy_factor", -25), 
          (val_add, ":weapon_speed_factor", -25), 
          (val_add, ":reload_speed_factor", -25), 
          (val_add, ":speed_factor", -25), 
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_mul,":power", -1),
          (val_add, ":hp",":power"),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_curse_effect", pos30, 10), 
        (else_try),
          (eq,":special", marked_for_death),
          (val_add, ":damage_factor", -15), 
          (val_add, ":accuracy_factor", -25), 
          (val_add, ":weapon_speed_factor", -25), 
          (val_add, ":reload_speed_factor", -25), 
          (store_agent_hit_points, ":hp", ":agent_no", 1),
          (val_mul,":power", -1),
          (val_add, ":hp",":power"),
          (agent_set_hit_points, ":agent_no", ":hp", 1),
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position, pos30, ":agent_no"),
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_curse_effect", pos30, 10), 
          
        (else_try),
          (eq,":special", severe_burn),
          (store_agent_hit_points, ":hp", ":agent_no", 0),
          (val_mul,":power", -5),
          (val_add, ":hp",":power"),
          (agent_set_hit_points, ":agent_no", ":hp", 0),
          #(val_add, ":speed_factor", -75), 
          (val_add, ":accuracy_factor", -50), 
          (try_begin),
            (le, ":hp", 1),
            (agent_deliver_damage_to_agent,":agent_no",":agent_no"),
          (try_end), 
          (eq, "$g_weapon_fire_particle", 0),
          (agent_get_position,pos30,":agent_no"),
          (position_move_z, pos30, 100),
          (particle_system_burst, "psys_fireplace_fire_big", pos30, 10),
        (try_end),
      (try_end),  
    
      (val_clamp, ":ranged_damage_factor", 0, 1001), 
      (val_clamp, ":damage_factor", 0, 1001), 
      (val_clamp, ":reload_speed_factor", 0, 1001), 
      (val_clamp, ":weapon_speed_factor", 0, 1001), 
      (val_clamp, ":accuracy_factor", 0, 1001), 
      (val_clamp, ":speed_factor", 0, 1001), 

      (agent_set_damage_modifier, ":agent_no", ":damage_factor"), 
      (agent_set_ranged_damage_modifier, ":agent_no", ":ranged_damage_factor"), 
      (agent_set_reload_speed_modifier, ":agent_no", ":reload_speed_factor"), 
      (agent_set_use_speed_modifier, ":agent_no", ":weapon_speed_factor"), 
      (agent_set_accuracy_modifier, ":agent_no", ":accuracy_factor"), 
      (agent_set_speed_modifier, ":agent_no", ":speed_factor"), 
    (try_end),
  (try_end),

  ])

special_ability_trigger_player  =(
    0, 0, 0, [
    (key_clicked, "$key_special_2"),(clear_omitted_keys),(omit_key_once, "$key_special_2"),
    (omit_key_once, gk_kick),
    (omit_key_once, gk_quests_window),
    
    ], 
    [
    (get_player_agent_no,":player"),
    (agent_is_alive,":player"),
    (agent_get_troop_id, ":player_no", ":player"),
    (troop_get_slot, ":special", ":player_no", slot_troop_special_ability),
    (neg|eq,":special",0),
    (agent_get_slot, ":cooldown", ":player", slot_agent_special_ability_cooldown),
    
        (store_current_scene,":current_scene"),
        (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_walls"),
    
    (try_begin),
      (gt,":cooldown",0),
      (assign, reg50, ":cooldown"),
      (display_message, "@your special_ability is on cooldown ({reg50} seconds)."),
    (else_try),
      (agent_get_slot, ":stamina", ":player", slot_agent_stamina),
      (eq,":cooldown",0),
      (try_begin),
        (eq,":special",shadowstep),
        (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (agent_get_horse, ":horse_agent", ":player"),
        (lt, ":horse_agent", 0),
        (call_script, "script_cf_agent_shadowstep", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 5),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",force_jump),
        (assign, ":cost_stamina", 30),
        (ge, ":stamina", ":cost_stamina"),
        
        (agent_get_horse, ":horse_agent", ":player"),
        (try_begin),
          (ge, ":horse_agent", 0),
          (agent_get_item_id, ":item_no", ":horse_agent"),
          #(neg|eq,":agent_force_jump",":player"),
          (item_has_property, ":item_no", itp_is_magic_staff),
          (agent_set_no_dynamics, ":horse_agent", 1),
          (agent_get_position, pos1, ":horse_agent"),
          (position_move_z,pos1,500),
          (agent_set_position, ":horse_agent", pos1),
          (agent_set_animation, ":horse_agent", "anim_horse_jump2", 0),
        (else_try),
          (lt, ":horse_agent", 0),
          (agent_set_no_dynamics, ":player", 1),
          (agent_get_position, pos1, ":player"),
          (position_move_z,pos1,500),
          (agent_set_position, ":player", pos1),
          (agent_set_animation, ":player", "anim_sw_force_jump2", 0),
        (try_end),        
        
        
        #(agent_get_horse, ":horse_agent", ":player"),
        #(lt, ":horse_agent", 0),
        #(agent_set_animation, ":player", "anim_sw_force_jump2", 0),
        #(call_script, "script_cf_agent_force_jump", ":player"),
        (agent_set_slot, ":player", slot_agent_is_fly, 20),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 20),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 10),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",dive),
        (assign, ":cost_stamina", 30),
        (ge, ":stamina", ":cost_stamina"),
        (agent_get_horse, ":horse_agent", ":player"),
        (ge, ":horse_agent", 0),
        (call_script, "script_cf_agent_force_jump", ":player"),
        (agent_set_slot, ":player", slot_agent_is_fly, 10),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 10),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 20),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
      (else_try),
        (eq,":special",summon_hallow),
          (try_begin),
            (eq, ":player", "trp_npc23"),
            (assign, ":cost_stamina", 0),
          (try_end),
        (assign, ":cost_stamina", 100),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_summon_hallow", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",summon_demon),
        (assign, ":cost_stamina", 75),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_summon_demon", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 45),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",summon_neutral),
        (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_summon_neutral", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 45),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
      (else_try),
        (eq,":special",flamestrike),
          (assign, ":cost_stamina", 65),
        (ge, ":stamina", ":cost_stamina"),
        #(agent_get_horse, ":horse_agent", ":player"),
        #(lt, ":horse_agent", 0),
        (call_script, "script_cf_agent_flamestrike", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",mummy_curse),
          (assign, ":cost_stamina", 60),
        (ge, ":stamina", ":cost_stamina"),
        #(agent_get_horse, ":horse_agent", ":player"),
        #(lt, ":horse_agent", 0),
        (call_script, "script_cf_agent_mummy_curse", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",shadowking),
          (assign, ":cost_stamina", 20),
        (ge, ":stamina", ":cost_stamina"),
        #(agent_get_horse, ":horse_agent", ":player"),
        #(lt, ":horse_agent", 0),
        (call_script, "script_cf_agent_shadowking", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 5),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
      (else_try),
        (eq,":special", inspire),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_inspire", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 20),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 30),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", hero_dreams),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_hero_dream", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 60),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 10),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
      (else_try),
        (eq,":special", holy_light),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_holy_light", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 30),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", fright_aura),
          (assign, ":cost_stamina", 40),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_fright_aura", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 30),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", warcry),
          (assign, ":cost_stamina", 40),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_warcry", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 15),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", battlecry),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_battlecry", ":player"),
        (store_skill_level,":leadership","skl_leadership",":player_no"),
        (val_add,":leadership",1),
        (val_mul,":leadership",5),
        (val_clamp,":leadership",15,60),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, ":leadership"),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", call_storm),
        (assign, ":cost_stamina", 75),
        (ge, ":stamina", ":cost_stamina"),
        #(call_script, "script_cf_agent_call_strom", ":player"),
        
        (try_begin),
          (this_or_next|agent_has_item_equipped, ":player", "itm_dawnbreaker_1"),
          (this_or_next|agent_has_item_equipped, ":player", "itm_dawnbreaker"),
          (this_or_next|agent_has_item_equipped, ":player", "itm_auriels_bow"),
          (this_or_next|eq, ":player_no", "trp_kingdom_1_lord"),
          (this_or_next|eq, ":player_no", "trp_knight_7_3"),
          (this_or_next|eq, ":player_no", "trp_knight_9_20"),
          (eq, ":player_no", "trp_adventurer_troop_8"),
          (call_script, "script_cf_agent_holy_word", ":player"),
        (else_try),
          (call_script, "script_cf_agent_call_strom", ":player"),
        (try_end),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, ":leadership"),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 120),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", bloodlust),
          (assign, ":cost_stamina", 60),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_bloodlust", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 40),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", khorne_blessing),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_bloodlust", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 30),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 50),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
      (else_try),
        (eq,":special", dragon_blade),
          (assign, ":cost_stamina", 40),
          (try_begin),
            (this_or_next|eq, ":player_no", "trp_knight_4_20"),
            (this_or_next|eq, ":player_no", "trp_quick_battle_troop_1"),
            (eq,":player_no", "trp_npc17"),
            (assign, ":cost_stamina", 20),
          (try_end),
        (ge, ":stamina", ":cost_stamina"),
        (agent_play_sound,":player","snd_dragon_blade_Slash"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 12),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 20),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 1),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", avatar),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 30),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", omnislash),
          (assign, ":cost_stamina", 40),
          (try_begin),
            (this_or_next|eq, ":player_no", "trp_quick_battle_troop_1"),
            (eq,":player_no", "trp_npc17"),
            (assign, ":cost_stamina", 20),
          (try_end),
        (ge, ":stamina", ":cost_stamina"),
        (agent_play_sound,":player","snd_dragon_blade_Slash"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 6),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 30),
        #(agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 1),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", dragron_flame_burst),
          (assign, ":cost_stamina", 80),
          (try_begin),
            (this_or_next|eq, ":player_no", "trp_quick_battle_troop_1"),
            (eq,":player_no", "trp_npc12"),
            (assign, ":cost_stamina", 40),
          (try_end),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 6),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 20),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", luanwu),
          (assign, ":cost_stamina", 40),
          (agent_get_wielded_item, ":w_item", ":player", 0),
          (gt,":w_item", 0),
          (try_begin),
            (eq,":w_item", "itm_kwan_dao"),
            (assign, ":cost_stamina", 0),
          (try_end),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 12),
        (try_begin),
          (eq,":w_item", "itm_kwan_dao"),
          (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 24),
        (try_end),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
      (else_try),
        (eq,":special", it_is_high_noon),
          (assign, ":cost_stamina", 20),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 0),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 20),
        (call_script, "script_cf_agent_it_is_high_noon", ":player"),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
      (else_try),
        (eq,":special", ground_stomp),
          (assign, ":cost_stamina", 15),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 5),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 20),
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        (call_script, "script_cf_agent_ground_stomp", ":player"),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),  
      (else_try),
        (eq,":special", power_blade),
          (assign, ":cost_stamina", 50),
          (try_begin),
            (this_or_next|eq, ":player_no", "trp_quick_battle_troop_3"),
            (eq,":player_no", "trp_kingdom_4_lord"),
            (assign, ":cost_stamina", 20),
          (try_end),
          (try_begin),
            (eq,":player_no", "trp_adventurer_troop_3"),
            (assign, ":cost_stamina", 5),
          (try_end),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 0),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 5),
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        (call_script, "script_cf_agent_excalibur_light", ":player", 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
      (else_try),
        (eq,":special", tzeentch_arcane),
          (assign, ":cost_stamina", 30),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_mummy_curse", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 60),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", windforce),
          (assign, ":cost_stamina", 60),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_windforce", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 60),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
      (else_try),
        (eq,":special", spell_dispel),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_spell_dispel", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 0),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", taunt),
          (assign, ":cost_stamina", 40),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_taunt", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 10),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", rage_strike),
          (assign, ":cost_stamina", 30),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_rage_charge", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 7),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", divine_strength),
          (assign, ":cost_stamina", 60),
          (try_begin),
            (eq, ":player", "trp_npc20"),
            (assign, ":cost_stamina", 0),
          (try_end),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_divine_strength", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 60),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", stoneskin),
          (assign, ":cost_stamina", 60),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_stoneskin", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 30),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", nurgle_blessing),
          (assign, ":cost_stamina", 60),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_Nurgle_blessing", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 60),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", regeneration),
          (assign, ":cost_stamina", 60),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_regeneration", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 25),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", mass_haste),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_mass_haste", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 30),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 30),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", dragons_fear),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_dragons_fear", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 20),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
          
      (else_try),
        (eq,":special", weakness),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_weakness", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 60),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", multishot),
          (assign, ":cost_stamina", 30),
          (agent_get_wielded_item, ":agent_cur_weapon", ":player", 0),
          (gt,":agent_cur_weapon", 0),
          (item_get_type, ":cur_weapon_type", ":agent_cur_weapon"),
          (this_or_next|eq,":cur_weapon_type",itp_type_bow),
          (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
          (this_or_next|eq,":cur_weapon_type",itp_type_crossbow),
          (eq,":cur_weapon_type",itp_type_musket),
          
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_multishot", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 0),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 10),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),

      (else_try),
        (eq,":special", mass_slow),
          (assign, ":cost_stamina", 60),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_mass_slow", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 30),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 30),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),  
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",awaken),
          (assign, ":cost_stamina", 0),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 6),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    

      (else_try),
        (eq,":special", wrath),
          (assign, ":cost_stamina", 0),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 8),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    

      (else_try),
        (eq,":special", insight),
          (assign, ":cost_stamina", 100),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_counter, 12),
        (agent_set_slot, ":player", slot_agent_special_ability_cooldown, 12),
        
        (agent_refill_ammo, ":player"),
        (agent_get_slot, ":cooldown", ":player", slot_agent_special_ability_extra_cooldown),
        (val_add, ":cooldown", -10),
        (val_clamp, ":cooldown", 0, 101),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, ":cooldown"),
        (agent_set_slot, ":player", slot_agent_special_ability_passiv_cooldown, 1),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (assign, reg1, ":stamina"),
        (display_message, "@You're so tired to can not use special_ability ^Stamina: {reg1}/100"),    
      (try_end),
    (try_end),
  ])
  
special_ability_trigger_1  =(
    1, 0, 0, [], 
    [
  (get_player_agent_no,":player"),
  (assign, ":skill_rate", 25),
  (store_sub, ":extra_cooldown", 5, "$g_game_difficulty"),
  (try_begin),
    (eq, "$g_game_difficulty",1),
    (assign, ":skill_rate", 25),
    (assign, ":extra_cooldown", 3),
  (else_try),  
    (eq, "$g_game_difficulty",2),
    (assign, ":skill_rate", 50),
    (assign, ":extra_cooldown", 2),
  (else_try),  
    (eq, "$g_game_difficulty",3),
    (assign, ":skill_rate", 75),
    (assign, ":extra_cooldown", 1),
  (else_try),  
    (eq, "$g_game_difficulty",4),
    (assign, ":skill_rate", 100),
    (assign, ":extra_cooldown", 1),
  (try_end),
  
  (try_for_agents, ":agent_no"),
    (agent_is_human, ":agent_no"),
    (agent_is_active, ":agent_no"),
    (agent_is_alive, ":agent_no"),
    (agent_get_troop_id, ":troop_no", ":agent_no"),
    
    (try_begin),
      (troop_get_slot, ":special", ":troop_no", slot_troop_special_ability),
      (neg|eq,":special",0),
      
      (agent_get_slot, ":cooldown", ":agent_no", slot_agent_special_ability_cooldown),
      (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
      
      (try_begin),
        (this_or_next|eq,":troop_no", "trp_vampire_2"),
        (eq,":troop_no", "trp_vampire_3"),
        (store_random_in_range, ":r", 0, 100),
        (this_or_next|troop_is_hero, ":troop_no"),
        (gt, ":skill_rate", ":r"),
        (store_current_scene,":current_scene"),
        (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_walls"),
        (agent_get_team, ":agent_team", ":agent_no"),
        (agent_get_division, ":agent_division", ":agent_no"),
        (team_get_movement_order, ":movement_order", ":agent_team", ":agent_division"),
        (neg|eq,":movement_order",mordr_hold),
        (neg|eq,":movement_order",mordr_follow),
        (neg|eq,":movement_order",mordr_stand_ground),
        (neg|eq,":movement_order",mordr_fall_back),
        (neg|eq,":movement_order",mordr_retreat),
        (agent_get_slot, ":time", ":agent_no", slot_agent_special_ability_counter),
        (try_begin),
          (gt,":time",0),
          (assign, ":cost_stamina", 0),
        (else_try),
          (assign, ":cost_stamina", 50),
        (try_end),
        (ge, ":stamina", ":cost_stamina"),
        (try_begin),
          (eq,":troop_no", "trp_vampire_2"),
          (call_script, "script_cf_agent_shadowstep", ":agent_no"),
          (val_sub, ":stamina", ":cost_stamina"),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
        (else_try),
          (eq,":troop_no", "trp_vampire_3"),
          (call_script, "script_cf_agent_shadowking", ":agent_no"),
          (val_sub, ":stamina", ":cost_stamina"),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
        (try_end),
        (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 15),
      (try_end),
      
      (try_begin),
        (eq,":cooldown",0),
        (neq,":agent_no",":player"),
        (store_current_scene,":current_scene"),
        (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_walls"),
        
        (store_random_in_range, ":r", 0, 100),
        (this_or_next|troop_is_hero, ":troop_no"),
        (gt, ":skill_rate", ":r"),
        
        (try_begin),
          (eq,":special",shadowstep),
          (assign, ":cost_stamina", 30),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (neg|is_between, ":attack_action", 1, 4),
          (try_begin),
            (eq, ":troop_no", "trp_grey_knight_terminator"),
            (assign, ":cost_stamina", 0),
          (try_end),
          (ge, ":stamina", ":cost_stamina"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (agent_get_division, ":agent_division", ":agent_no"),
          (team_get_movement_order, ":movement_order", ":agent_team", ":agent_division"),
          (neg|eq,":movement_order",mordr_hold),
          (neg|eq,":movement_order",mordr_follow),
          (neg|eq,":movement_order",mordr_stand_ground),
          (neg|eq,":movement_order",mordr_fall_back),
          (neg|eq,":movement_order",mordr_hold_fire),
          (neg|eq,":movement_order",mordr_fire_at_will),
          (neg|eq,":movement_order",mordr_retreat),
          (neg|eq,":movement_order",mordr_fire_at_my_command),
          (neg|eq,":movement_order",mordr_all_fire_now),
          (neg|eq,":movement_order",mordr_left_fire_now),
          (neg|eq,":movement_order",mordr_middle_fire_now),
          (neg|eq,":movement_order",mordr_right_fire_now),
          (agent_get_horse, ":horse_agent", ":agent_no"),
          (lt, ":horse_agent", 0),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_shadowstep", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 5),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (this_or_next|eq,":troop_no", "trp_polish_which_1"),
          (this_or_next|eq,":troop_no", "trp_polish_which_2"),
          (this_or_next|eq, ":troop_no", "trp_undead_magic_1"),
          (this_or_next|eq, ":troop_no", "trp_daemon_prince_slaanesh"),
          (this_or_next|eq, ":troop_no", "trp_daemon_prince_nurgle"),
        #  (this_or_next|eq, ":troop_no", "trp_bone_dragon"),
        #  (this_or_next|eq, ":troop_no", "trp_ghost_dragon"),
        #  (this_or_next|eq, ":troop_no", "trp_lich_dragon"),
        #  (this_or_next|eq, ":troop_no", "trp_green_dragon"),
        #  (this_or_next|eq, ":troop_no", "trp_black_dragon"),
        #  (this_or_next|eq,":troop_no", "trp_red_dragon"),
        #  (this_or_next|eq,":troop_no", "trp_gold_dragon"),
          (eq,":special",force_jump),
          (assign, ":cost_stamina", 40),
          (try_begin),
              (this_or_next|eq,":troop_no", "trp_dragonfly"),
              (this_or_next|eq,":troop_no", "trp_firefly"),
              (this_or_next|eq, ":troop_no", "trp_angle"),
              (this_or_next|eq, ":troop_no", "trp_archangle"),
              (this_or_next|eq, ":troop_no", "trp_bone_dragon"),
              (this_or_next|eq, ":troop_no", "trp_ghost_dragon"),
              (this_or_next|eq, ":troop_no", "trp_lich_dragon"),
              (this_or_next|eq, ":troop_no", "trp_green_dragon"),
              (this_or_next|eq, ":troop_no", "trp_black_dragon"),
              (this_or_next|eq,":troop_no", "trp_red_dragon"),
              (this_or_next|eq,":troop_no", "trp_gold_dragon"),
              (this_or_next|eq, ":troop_no", "trp_nord_valkyrie_2"),
              (this_or_next|eq, ":troop_no", "trp_nord_valkyrie_3"),
              (this_or_next|eq,":troop_no", "trp_demon_5"),
              (eq,":troop_no", "trp_demon_human_5_2"),
            (assign, ":cost_stamina", 20),
          (try_end),
          (agent_get_horse, ":horse_agent", ":agent_no"),
          (try_begin),
            (ge, ":horse_agent", 0),
            (agent_get_item_id, ":item_no", ":horse_agent"),
            (item_has_property, ":item_no", itp_is_magic_staff),
            (assign, ":horse_agent", -1),
            (assign, ":cost_stamina", 0),
          (try_end),        
          (lt, ":horse_agent", 0),
          (agent_get_team, ":agent_team", ":agent_no"),
          (agent_get_division, ":agent_division", ":agent_no"),
          (team_get_movement_order, ":movement_order", ":agent_team", ":agent_division"),
          (neg|eq,":movement_order",mordr_hold),
          (neg|eq,":movement_order",mordr_follow),
          (neg|eq,":movement_order",mordr_stand_ground),
          (neg|eq,":movement_order",mordr_fall_back),
          (neg|eq,":movement_order",mordr_hold_fire),
          (neg|eq,":movement_order",mordr_fire_at_will),
          (neg|eq,":movement_order",mordr_retreat),
          (neg|eq,":movement_order",mordr_fire_at_my_command),
          (neg|eq,":movement_order",mordr_all_fire_now),
          (neg|eq,":movement_order",mordr_left_fire_now),
          (neg|eq,":movement_order",mordr_middle_fire_now),
          (neg|eq,":movement_order",mordr_right_fire_now),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_force_jump", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 10),
            (agent_set_slot, ":agent_no", slot_agent_is_fly, 10),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown,30), 
            (try_begin),
              (this_or_next|eq, ":troop_no", "trp_bone_dragon"),
              (this_or_next|eq, ":troop_no", "trp_green_dragon"),
              (this_or_next|eq, ":troop_no", "trp_black_dragon"),
              (this_or_next|eq,":troop_no", "trp_red_dragon"),
              (this_or_next|eq,":troop_no", "trp_gold_dragon"),
              (this_or_next|eq,":troop_no", "trp_polish_which_2"),
              (this_or_next|eq, ":troop_no", "trp_daemon_prince_slaanesh"),
              (this_or_next|eq, ":troop_no", "trp_daemon_prince_nurgle"),
              (this_or_next|eq, ":troop_no", "trp_angle"),
              (this_or_next|eq, ":troop_no", "trp_archangle"),
              (this_or_next|eq,":troop_no", "trp_demon_human_5_2"),
              (this_or_next|eq, ":troop_no", "trp_ghost_dragon"),
              (this_or_next|eq, ":troop_no", "trp_lich_dragon"),
              (this_or_next|eq,":troop_no", "trp_dragonfly"),
              (this_or_next|eq,":troop_no", "trp_firefly"),
              (this_or_next|eq, ":troop_no", "trp_undead_magic_1"),
              (eq, ":troop_no", "trp_sissofbattle_s"),
              (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 20),
              (agent_set_slot, ":agent_no", slot_agent_is_fly, 20),
              (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown,60), 
            (try_end),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          
        (else_try),
          (eq,":special",shadowking),
          (assign, ":cost_stamina", 25),
          
          (agent_get_team, ":agent_team", ":agent_no"),
          (agent_get_division, ":agent_division", ":agent_no"),
          (team_get_movement_order, ":movement_order", ":agent_team", ":agent_division"),
          (neg|eq,":movement_order",mordr_hold),
          (neg|eq,":movement_order",mordr_follow),
          (neg|eq,":movement_order",mordr_stand_ground),
          (neg|eq,":movement_order",mordr_fall_back),
          (neg|eq,":movement_order",mordr_hold_fire),
          (neg|eq,":movement_order",mordr_fire_at_will),
          (neg|eq,":movement_order",mordr_retreat),
          (neg|eq,":movement_order",mordr_fire_at_my_command),
          (neg|eq,":movement_order",mordr_all_fire_now),
          (neg|eq,":movement_order",mordr_left_fire_now),
          (neg|eq,":movement_order",mordr_middle_fire_now),
          (neg|eq,":movement_order",mordr_right_fire_now),
          (ge, ":stamina", ":cost_stamina"),
          (call_script, "script_cf_agent_shadowking", ":agent_no"),
          (val_sub, ":stamina", ":cost_stamina"),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 5),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (eq,":special",dive),
          (assign, ":cost_stamina", 30),
          (try_begin),
            (this_or_next|eq, ":troop_no", "trp_angle"),
            (this_or_next|eq, ":troop_no", "trp_france_horse_4"),
            (eq,":troop_no", "trp_grandelf_cavalry"),
            (assign, ":cost_stamina", 0),
          (try_end),
          (agent_get_team, ":agent_team", ":agent_no"),
          (agent_get_division, ":agent_division", ":agent_no"),
          (team_get_movement_order, ":movement_order", ":agent_team", ":agent_division"),
          (neg|eq,":movement_order",mordr_hold),
          (neg|eq,":movement_order",mordr_follow),
          (neg|eq,":movement_order",mordr_stand_ground),
          (neg|eq,":movement_order",mordr_fall_back),
          (neg|eq,":movement_order",mordr_hold_fire),
          (neg|eq,":movement_order",mordr_fire_at_will),
          (neg|eq,":movement_order",mordr_retreat),
          (neg|eq,":movement_order",mordr_fire_at_my_command),
          (neg|eq,":movement_order",mordr_all_fire_now),
          (neg|eq,":movement_order",mordr_left_fire_now),
          (neg|eq,":movement_order",mordr_middle_fire_now),
          (neg|eq,":movement_order",mordr_right_fire_now),
          (agent_get_horse, ":horse_agent", ":agent_no"),
          (ge, ":horse_agent", 0),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
          (ge, ":stamina", ":cost_stamina"),
          (call_script, "script_cf_agent_force_jump", ":agent_no"),
          (val_sub, ":stamina", ":cost_stamina"),
          (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 10),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown,30), 
          (try_begin),
            (eq, ":troop_no", "trp_france_horse_4"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 10),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown,20), 
          (try_end),
        (else_try),
          (eq,":special",flamestrike),
          (assign, ":cost_stamina", 45),
          (agent_get_team, ":agent_team", ":agent_no"),
          (agent_get_division, ":agent_division", ":agent_no"),
          (team_get_movement_order, ":movement_order", ":agent_team", ":agent_division"),
          (neg|eq,":movement_order",mordr_hold),
          (neg|eq,":movement_order",mordr_follow),
          (neg|eq,":movement_order",mordr_stand_ground),
          (neg|eq,":movement_order",mordr_fall_back),
          (neg|eq,":movement_order",mordr_hold_fire),
          (neg|eq,":movement_order",mordr_fire_at_will),
          (neg|eq,":movement_order",mordr_retreat),
          (neg|eq,":movement_order",mordr_fire_at_my_command),
          (neg|eq,":movement_order",mordr_all_fire_now),
          (neg|eq,":movement_order",mordr_left_fire_now),
          (neg|eq,":movement_order",mordr_middle_fire_now),
          (neg|eq,":movement_order",mordr_right_fire_now),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (call_script, "script_cf_agent_flamestrike", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (eq,":special",mummy_curse),
          (assign, ":cost_stamina", 60),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (call_script, "script_cf_agent_mummy_curse", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (eq,":special", hero_dreams),
          (assign, ":cost_stamina", 30),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina",50),
            (gt, ":r", 7),
            (call_script, "script_cf_agent_hero_dream", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 30),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (assign, ":ran", 5),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (eq,":special", inspire),
          (assign, ":cost_stamina", 50),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina",70),
            (store_agent_hit_points,":life",":agent_no",0),
            (this_or_next|le, ":life", 50),
            (gt, ":r", 7),
            (call_script, "script_cf_agent_inspire", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 15),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (assign, ":ran", 15),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (this_or_next|eq,":troop_no", "trp_fire_dragon"),
          (eq,":special", battlecry),
          (assign, ":cost_stamina", 50),
          (try_begin),
            (eq, ":troop_no", "trp_fire_dragon"),
            (assign, ":cost_stamina", 10),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina",70),
            (gt, ":r", 7),
            (call_script, "script_cf_agent_battlecry", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 15),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (assign, ":ran", 15),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (this_or_next|eq, ":troop_no", "trp_red_dragon"),
          (this_or_next|eq, ":troop_no", "trp_ghost_dragon"),
          (eq,":special", fright_aura),
          (assign, ":cost_stamina", 50),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina",70),
            (gt, ":r", 7),
            (call_script, "script_cf_agent_fright_aura", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (assign, ":ran", 15),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (this_or_next|eq, ":troop_no", "trp_bone_dragon"),
          (this_or_next|eq, ":troop_no", "trp_ghost_dragon"),
          (eq,":special", warcry),
          (assign, ":cost_stamina", 40),
          (try_begin),
            (this_or_next|eq, ":troop_no", "trp_bone_dragon"),
            (eq,":troop_no", "trp_ghost_dragon"),
            (assign, ":cost_stamina", 20),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina",50),
            (gt, ":r", 7),
            (call_script, "script_cf_agent_warcry", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 15),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (assign, ":ran", 15),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (this_or_next|eq,":troop_no", "trp_black_dragon"),
          (this_or_next|eq, ":troop_no", "trp_lich_dragon"),
          (eq,":special", dragons_fear),
          (assign, ":cost_stamina", 40),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 7),
            (call_script, "script_cf_agent_dragons_fear", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 20),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (assign, ":ran", 15),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (eq,":special", divine_strength),
          (assign, ":cost_stamina", 60),
          (try_begin),
            (eq, ":troop_no", "trp_npc20"),
            (assign, ":cost_stamina", 0),
          (try_end),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 1000),
          (assign, ":num_enemies", reg0),
          (ge, ":num_enemies", 2),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_divine_strength", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 60),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 100),
            (try_begin),
              (eq, ":troop_no", "trp_npc20"),
              (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 15),
            (try_end),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
        (else_try),
          (this_or_next|eq, ":troop_no", "trp_gold_dragon"),
          (eq,":special", stoneskin),
          (assign, ":cost_stamina", 60),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 1000),
          (assign, ":num_enemies", reg0),
          (ge, ":num_enemies", 2),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_stoneskin", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 15),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 100),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 15),
        (else_try),
          (eq,":special", summon_hallow),
          (assign, ":cost_stamina", 100),
          (try_begin),
            (eq, ":troop_no", "trp_npc23"),
            (assign, ":cost_stamina", 0),
          (try_end),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_summon_hallow", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            
            (store_skill_level, ":power", "skl_necromancy", ":troop_no"),
            (assign,":time",30),
            (store_mul,":time_add",":power", 20),
            (val_add,":time",":time_add"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":time"),
            (try_begin),
              (eq, ":troop_no", "trp_npc23"),
              (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 60),
            (try_end),
          (try_end),
        (else_try),
          (eq,":special", summon_demon),
          (assign, ":cost_stamina", 50),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_summon_demon", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (store_skill_level, ":power", "skl_necromancy", ":troop_no"),
            (assign,":time",30),
            (store_mul,":time_add",":power", 20),
            (val_add,":time",":time_add"),
            
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":time"),
          (try_end),
        (else_try),
          (eq,":special", summon_neutral),
          (assign, ":cost_stamina", 25),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_summon_neutral", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (store_skill_level, ":power", "skl_necromancy", ":troop_no"),
            (assign,":time",20),
            (store_mul,":time_add",":power", 20),
            (val_add,":time",":time_add"),
            
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":time"),
          (try_end),
        (else_try),
          (this_or_next|eq, ":troop_no", "trp_green_dragon"),
          (eq,":special", regeneration),
          (assign, ":cost_stamina", 60),
          (try_begin),
            (eq, ":troop_no", "trp_france_knight_4"),
            (assign, ":cost_stamina", 20),
          (try_end),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 1000),
          (assign, ":num_enemies", reg0),
          (store_agent_hit_points,":life",":agent_no",0),
          (this_or_next|le, ":life", 50),
          (ge, ":num_enemies", 2),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_regeneration", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 25),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 100),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
        (else_try),
          (eq,":special", nurgle_blessing),
          (assign, ":cost_stamina", 60),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 1000),
          (assign, ":num_enemies", reg0),
          (store_agent_hit_points,":life",":agent_no",0),
          (this_or_next|le, ":life", 50),
          (ge, ":num_enemies", 2),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_Nurgle_blessing", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 60),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 60),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 60),
          

        (else_try),
          (eq,":special", mass_haste),
          (assign, ":cost_stamina", 50),
          #(call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 500),
          #(assign, ":num_enemies", reg0),
          #(ge, ":num_enemies", 2),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_mass_haste", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 30),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 60),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
        (else_try),
          (eq,":special", mass_slow),
          (assign, ":cost_stamina", 60),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_mass_slow", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 30),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 60),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
        (else_try),
          (eq,":special", spell_dispel),
          (assign, ":cost_stamina", 15),
          (try_begin),
            (eq, ":troop_no", "trp_grandelf_guard"),
            (assign, ":cost_stamina", 0),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 3),
            (call_script, "script_cf_agent_spell_dispel", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 15),
        (else_try),
          (eq,":special", weakness),
          (assign, ":cost_stamina", 50),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_weakness", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 60),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 100),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
        (else_try),
          (eq,":special", "itm_skill_call_storm"),
          (assign, ":cost_stamina", 90),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (eq, ":troop_no", "trp_knight_9_20"),
            (assign, ":cost_stamina", 40),
          (try_end),
          
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (try_begin),
              (this_or_next|agent_has_item_equipped, ":agent_no", "itm_dawnbreaker_1"),
              (this_or_next|agent_has_item_equipped, ":agent_no", "itm_dawnbreaker"),
              (this_or_next|agent_has_item_equipped, ":agent_no", "itm_auriels_bow"),
              (this_or_next|eq, ":troop_no", "trp_kingdom_1_lord"),
              (this_or_next|eq, ":troop_no", "trp_knight_7_3"),
              (this_or_next|eq, ":troop_no", "trp_knight_9_20"),
              (eq, ":troop_no", "trp_adventurer_troop_8"),
              (call_script, "script_cf_agent_holy_word", ":agent_no"),
            (else_try),
              (call_script, "script_cf_agent_call_strom", ":agent_no"),
            (try_end),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 300),
          (try_end),
          (assign, ":ran", 20),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
          
          
        (else_try),
          (eq,":special", khorne_blessing),
          (assign, ":cost_stamina", 50),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (eq, ":troop_no", "trp_adventurer_troop_12"),
            (assign, ":cost_stamina", 0),
            (assign, ":r", 10),
          (try_end),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (call_script, "script_cf_agent_bloodlust", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 30),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 100),
            (try_begin),
              (eq, ":troop_no", "trp_adventurer_troop_12"),
              (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
            (try_end),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
          
        (else_try),
          (eq,":special", dragon_blade),
          (assign, ":cost_stamina", 40),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (this_or_next|eq, ":troop_no", "trp_knight_4_20"),
            (this_or_next|eq, ":troop_no", "trp_quick_battle_troop_1"),
            (eq,":troop_no", "trp_npc17"),
            (assign, ":cost_stamina", 20),
            (assign, ":r", 20),
          (try_end),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 12),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_play_sound,":agent_no","snd_dragon_blade_Slash"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
        (else_try),
          (eq,":special", avatar),
          (assign, ":cost_stamina", 50),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 30),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_play_sound,":agent_no","snd_dragon_blade_Slash"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 60),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 10),
          
          

        (else_try),
          (eq,":special", omnislash),
          
          (agent_get_team, ":agent_team", ":agent_no"),
          (agent_get_division, ":agent_division", ":agent_no"),
          (team_get_movement_order, ":movement_order", ":agent_team", ":agent_division"),
          (neg|eq,":movement_order",mordr_hold),
          (neg|eq,":movement_order",mordr_follow),
          (neg|eq,":movement_order",mordr_stand_ground),
          (neg|eq,":movement_order",mordr_fall_back),
          (neg|eq,":movement_order",mordr_hold_fire),
          (neg|eq,":movement_order",mordr_fire_at_will),
          (neg|eq,":movement_order",mordr_retreat),
          (neg|eq,":movement_order",mordr_fire_at_my_command),
          (neg|eq,":movement_order",mordr_all_fire_now),
          (neg|eq,":movement_order",mordr_left_fire_now),
          (neg|eq,":movement_order",mordr_middle_fire_now),
          (neg|eq,":movement_order",mordr_right_fire_now),
          
          (assign, ":cost_stamina", 20),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (this_or_next|eq, ":troop_no", "trp_quick_battle_troop_1"),
            (eq,":troop_no", "trp_npc17"),
            (assign, ":cost_stamina", 20),
            (assign, ":r", 20),
          (try_end),
          (try_begin),
            (eq, ":troop_no", "trp_grey_knight_terminator"),
            (assign, ":cost_stamina", 0),
            (assign, ":r", 20),
          (try_end),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
            (ge, reg0, 1),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 6),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_play_sound,":agent_no","snd_dragon_blade_Slash"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
        (else_try),
          (eq,":special", dragron_flame_burst),
          (assign, ":cost_stamina", 80),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (this_or_next|eq, ":troop_no", "trp_quick_battle_troop_1"),
            (eq,":troop_no", "trp_npc12"),
            (assign, ":cost_stamina", 20),
            (assign, ":r", 20),
          (try_end),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
            (ge, reg0, 1),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 6),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 20),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 10),
        (else_try),
          (eq,":special", luanwu),
          (assign, ":cost_stamina", 40),
          (store_random_in_range, ":r", 0, 10),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (try_begin),
            (eq,":w_item", "itm_kwan_dao"),
            (assign, ":cost_stamina", 0),
            (assign, ":r", 20),
          (try_end),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 200),
            (ge, reg0, 1),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 12),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_play_sound,":agent_no","snd_dragon_blade_Slash"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 60),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 60),
          (try_begin),
            (eq,":w_item", "itm_kwan_dao"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 24),
          (try_end),
        (else_try),
          (eq,":special", windforce),
          (assign, ":cost_stamina", 60),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (call_script, "script_cf_agent_windforce", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 60),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 100),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
        (else_try),
          (eq,":special", tzeentch_arcane),
          (assign, ":cost_stamina", 30),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (call_script, "script_cf_agent_mummy_curse", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 60),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 100),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 10),
        (else_try),
          (eq,":special", it_is_high_noon),
          (assign, ":cost_stamina", 30),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),

            (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 2000),
            (ge, reg0, 1),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 20),
            (call_script, "script_cf_agent_it_is_high_noon", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (val_min, ":ran", 20),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
          
        (else_try),
          (eq,":special",ground_stomp),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (assign, ":cost_stamina", 10),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 600),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 20),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":num_enemies", 1),
            (call_script, "script_cf_agent_ground_stomp", ":agent_no",-1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
        (else_try),
          (eq,":special",power_blade),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 4),
          (assign, ":cost_stamina", 40),
          (try_begin),
            (this_or_next|eq, ":troop_no", "trp_quick_battle_troop_3"),
            (eq,":troop_no", "trp_kingdom_4_lord"),
            (assign, ":cost_stamina", 20),
          (try_end),
          (try_begin),
            (eq,":troop_no", "trp_adventurer_troop_3"),
            (assign, ":cost_stamina", 5),
          (try_end),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 600),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":num_enemies", 1),
            (call_script, "script_cf_agent_excalibur_light", ":agent_no", 15),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 40),
          (try_begin),
            (this_or_next|eq, ":troop_no", "trp_adventurer_troop_3"),
            (this_or_next|eq, ":troop_no", "trp_quick_battle_troop_3"),
            (eq,":troop_no", "trp_kingdom_4_lord"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 5),
          (try_end),
          (try_end),
          
        (else_try),
          (this_or_next|eq,":troop_no", "trp_lava_dragon"),
          (this_or_next|eq,":troop_no", "trp_polish_knight_4"),
          (eq,":special", bloodlust),
          (assign, ":cost_stamina", 60),
          (try_begin),
            (eq, ":troop_no", "trp_lava_dragon"),
            (assign, ":cost_stamina", 10),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_bloodlust", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 40),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 100),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 30),
        (else_try),
          (eq,":special", taunt),
          (assign, ":cost_stamina", 40),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),

            (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 500),
            (store_agent_hit_points,":life",":agent_no",0),
            (this_or_next|le, ":life", 50),
            (ge, reg0, 1),
            (call_script, "script_cf_agent_taunt", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 15),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        (else_try),
          (eq,":special", multishot),
          (agent_get_wielded_item, ":agent_cur_weapon", ":agent_no", 0),
          (gt,":agent_cur_weapon", 0),
          (item_get_type, ":cur_weapon_type", ":agent_cur_weapon"),
          (this_or_next|eq,":cur_weapon_type",itp_type_bow),
          (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
          (this_or_next|eq,":cur_weapon_type",itp_type_crossbow),
          (eq,":cur_weapon_type",itp_type_musket),
          
          (assign, ":cost_stamina", 30),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (agent_get_attack_action, ":attack_action", ":agent_no"),
            (eq, ":attack_action", 2),
            (call_script, "script_cf_agent_multishot", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (store_random_in_range, ":ran", 5, 11),
            (try_begin),
              (neg|troop_is_hero, ":troop_no"),
              (val_mul,":ran",":extra_cooldown"),
            (try_end),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
          (try_end),
        (else_try),
          (eq,":special",rage_strike),
          (assign, ":cost_stamina", 30),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (val_sub, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_rage_charge", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 7),
          (try_end),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
        
        (else_try),
          (eq,":special",awaken),
          (assign, ":cost_stamina", 0),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 200),
          (assign, ":num_enemies", reg0),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (agent_get_position, pos30, ":agent_no"),
            (position_move_y, pos30, 0, 100),
            (position_move_z, pos30, 50),
            (particle_system_burst, "psys_asaleth_horn_buff", pos30, 3), 
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 6),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 20),
        (else_try),
          (eq,":special",wrath),
          (assign, ":cost_stamina", 0),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 200),
          (assign, ":num_enemies", reg0),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 6),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 60),
        (else_try),
          (eq,":special", insight),
          (assign, ":cost_stamina", 100),
          (ge, ":stamina", ":cost_stamina"),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (eq, ":attack_action", 1),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_counter, 12),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, 12),
          (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
        (agent_refill_ammo, ":agent_no"),
        (agent_get_slot, ":cooldown", ":agent_no", slot_agent_special_ability_extra_cooldown),
        (val_add, ":cooldown", -10),
        (val_clamp, ":cooldown", 0, 101),
        (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":cooldown"),
        (agent_set_slot, ":agent_no", slot_agent_special_ability_passiv_cooldown, 1),
        (try_end),
      (try_end),
    (try_end),
     
    (try_begin),
      (troop_get_slot, ":special", ":troop_no", slot_troop_special_ability_extra),
      (neg|eq,":special",0),
      (store_random_in_range, ":r", 0, 100),
      (this_or_next|troop_is_hero, ":troop_no"),
      (gt, ":skill_rate", ":r"),
      (agent_get_slot, ":counter", ":agent_no", slot_agent_special_ability_extra_counter),
      (agent_get_slot, ":cooldown", ":agent_no", slot_agent_special_ability_extra_cooldown),
      (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
      (try_begin),
        (eq,":cooldown",0),
        (eq,":counter",0),
        (neq,":agent_no",":player"),
        (store_current_scene,":current_scene"),
        (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_walls"),
        
        (try_begin),
          (eq,":special",grasp),
          (assign, ":cost_stamina", 30),
          
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 8),
            (call_script, "script_cf_agent_grasp", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
        (else_try),
          (eq,":special",curse_of_the_leper),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (assign, ":cost_stamina", 25),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (call_script, "script_cf_agent_curse_of_the_leper", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (assign, ":ran", 15),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
        (else_try),
          #(this_or_next|eq,":troop_no","trp_npc12"),
          (eq,":special",mass_heal),
          (assign, ":cost_stamina", 15),
          (try_begin),
            (eq, ":troop_no", "trp_npc12"),
            (assign, ":cost_stamina", 0),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (call_script, "script_cf_agent_mass_heal", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 15),
        (else_try),
          #(this_or_next|eq,":troop_no","trp_npc12"),
          (eq,":special",heal),
          (assign, ":cost_stamina", 5),
          (try_begin),
            (eq, ":troop_no", "trp_npc12"),
            (assign, ":cost_stamina", 0),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (call_script, "script_cf_agent_heal", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 5),
        (else_try),
          (eq,":special",entangle),
          (assign, ":cost_stamina", 20),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (call_script, "script_cf_agent_entangle", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (assign, ":ran", 15),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
        (else_try),
          (eq,":special",haste_reload),
          (assign, ":cost_stamina", 25),
          (store_random_in_range, ":r", 0, 10),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (eq, ":attack_action", 2),
          (store_random_in_range, ":ran", 5, 16),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 20),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 60),
          (try_end),
        (else_try),
          (eq,":special",sinper_shot),
          (assign, ":cost_stamina", 25),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (eq, ":attack_action", 1),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 20),
          (try_end),
          (store_random_in_range, ":ran", 5, 11),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          
          
        (else_try),
          (eq,":special",rage_charge),
          (assign, ":cost_stamina", 25),
          (store_random_in_range, ":r", 0, 10),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 1000),
          (assign, ":num_enemies", reg0),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 300),
          (assign, ":num_enemies_2", reg0),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (this_or_next|ge, ":num_enemies", 1),
            (le, ":num_enemies_2", 0),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 9999),
          (try_end),
          (store_random_in_range, ":ran", 5, 16),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
        (else_try),
          (eq,":special",master_archer),
          (assign, ":cost_stamina", 0),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 250),
          (assign, ":num_enemies", reg0),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 50),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 50),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 5),
        (else_try),
          (eq,":special",smite_evil),
          
          (assign, ":cost_stamina", 20),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 250),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 5),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 4),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_power_strike", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 25),
          (try_end),
          
          
        (else_try),
          (eq,":special",mana_burn),
          (assign, ":cost_stamina", 50),
          (try_begin),
            (eq, ":troop_no", "trp_witch_hunter"),
            (assign, ":cost_stamina", 0),
          (try_end),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 250),
          (assign, ":num_enemies", reg0),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (try_begin),
              (this_or_next|eq, ":troop_no", "trp_grandelf_guard"),
              (eq, ":troop_no", "trp_woodelf_cavalry"),
              (call_script, "script_cf_agent_spell_dispel", ":agent_no"),
            (try_end),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 30),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 30),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 5),
          
        (else_try),
          (eq,":special",smite_undead),
          (assign, ":cost_stamina", 25),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 250),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 4),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 5),
            (call_script, "script_cf_agent_excalibur_light", ":agent_no", 3),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 40),
          (try_end),
        (else_try),
          (eq,":special",smite_orc),
          (assign, ":cost_stamina", 25),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 250),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 4),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 5),
            (call_script, "script_cf_agent_excalibur_light", ":agent_no", 3),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 40),
          (try_end),
        (else_try),
          (eq,":special",head_hunted),
          (assign, ":cost_stamina", 10),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 250),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 5),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 4),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_power_strike", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 25),
          (try_end),
        (else_try),
          (eq,":special",smite_outsider),
          (assign, ":cost_stamina", 10),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 250),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 5),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 4),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_power_strike", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 25),
          (try_end),
        (else_try),
          (eq,":special",reaper),
          (assign, ":cost_stamina", 25),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 250),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 4),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_excalibur_light", ":agent_no", 2),
            
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 5),
            
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 40),
          (try_end),
        (else_try),
          (eq,":special",power_strike),
          (assign, ":cost_stamina", 10),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 250),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 5),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 4),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (ge, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_power_strike", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 10),
          (try_end),
        (else_try),
          (eq,":special",cleave),
          (assign, ":cost_stamina", 30),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
          (assign, ":num_enemies", reg0),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 30),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 60),
          (try_end),
        (else_try),
          (eq,":special",swift_strike),
          (assign, ":cost_stamina", 25),
          #(call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 800),
          #(assign, ":num_enemies", reg0),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            #(this_or_next|gt, ":num_enemies2", 1),
            (ge, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_dragon_blade", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
        (else_try),
          (eq,":special",shadow_blade),
          (agent_get_team, ":agent_team", ":agent_no"),
          (agent_get_division, ":agent_division", ":agent_no"),
          (team_get_movement_order, ":movement_order", ":agent_team", ":agent_division"),
          (neg|eq,":movement_order",mordr_hold),
          (neg|eq,":movement_order",mordr_follow),
          (neg|eq,":movement_order",mordr_stand_ground),
          (neg|eq,":movement_order",mordr_fall_back),
          (neg|eq,":movement_order",mordr_hold_fire),
          (neg|eq,":movement_order",mordr_fire_at_will),
          (neg|eq,":movement_order",mordr_retreat),
          (neg|eq,":movement_order",mordr_fire_at_my_command),
          (neg|eq,":movement_order",mordr_all_fire_now),
          (neg|eq,":movement_order",mordr_left_fire_now),
          (neg|eq,":movement_order",mordr_middle_fire_now),
          (neg|eq,":movement_order",mordr_right_fire_now),
          (assign, ":cost_stamina", 20),
          (try_begin),
            (eq,":troop_no", "trp_npc13"),
            (assign, ":cost_stamina", 10),
          (try_end),
          #(call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 800),
          #(assign, ":num_enemies", reg0),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            #(this_or_next|gt, ":num_enemies2", 1),
            (le, ":num_enemies", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_shadow_blade", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
        (else_try),
          (eq,":special",call_lightning),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (assign, ":cost_stamina", 15),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
            (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
            (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (call_script, "script_cf_agent_call_lightning", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (try_begin),
              (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
              (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
              (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (else_try),
              (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (try_end),
          (try_end),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
        (else_try),
          (eq,":special",divine_ruling),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (assign, ":cost_stamina", 15),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
            (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
            (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (call_script, "script_cf_agent_divine_ruling", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (try_begin),
              (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
              (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
              (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (else_try),
              (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (try_end),
          (try_end),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
        (else_try),
          (eq,":special", summon_undead),
          (assign, ":cost_stamina", 25),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
            (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
            (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (try_end),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (call_script, "script_cf_agent_summon_undead", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (try_begin),
              (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
              (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
              (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (else_try),
              (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (try_end),
            (store_skill_level, ":power", "skl_necromancy", ":troop_no"),
            (assign,":time",15),
            (store_mul,":time_add",":power", 20),
            (val_add,":time",":time_add"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":time"),
          (try_end),
        (else_try),
          (eq,":special", haste),
          (assign, ":cost_stamina", 50),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
            (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
            (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 0),
            (call_script, "script_cf_agent_haste", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 60),
            (val_sub, ":stamina", ":cost_stamina"),
            (try_begin),
              (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
              (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
              (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (else_try),
              (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (try_end),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 100),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 30),
        (else_try),
          (eq,":special", slow),
          (assign, ":cost_stamina", 60),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
            (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
            (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 6),
            (call_script, "script_cf_agent_slow", ":agent_no"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 60),
            (val_sub, ":stamina", ":cost_stamina"),
            (try_begin),
              (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
              (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
              (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (else_try),
              (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (try_end),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 100),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 30),
        (else_try),
          (eq,":special", spell_dispel),
          (assign, ":cost_stamina", 15),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
            (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
            (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (try_end),
          (try_begin),
            (eq, ":troop_no", "trp_grandelf_guard"),
            (assign, ":cost_stamina", 0),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 3),
            (call_script, "script_cf_agent_spell_dispel", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (try_begin),
              (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
              (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
              (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (else_try),
              (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (try_end),
          (try_end),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
        (else_try),
          (eq,":special",flame_burst),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (assign, ":cost_stamina", 25),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
            (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
            (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (eq, ":troop_no", "trp_giant_2"),
            (assign, ":cost_stamina", 10),
            (assign, ":r", 35),
          (try_end),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 6),
            (gt, ":num_enemies", 1),
            (call_script, "script_cf_agent_flamestrike_extra", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (try_begin),
              (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
              (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
              (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (else_try),
              (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (try_end),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 20),
          (try_end),
        (else_try),
          (eq,":special",forst_ring),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (assign, ":cost_stamina", 20),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
            (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
            (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (try_end),
          (store_random_in_range, ":r", 0, 10),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 6),
            (gt, ":num_enemies", 1),
            (call_script, "script_cf_agent_forst_ring", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (try_begin),
              (troop_slot_eq, ":troop_no", slot_troop_special_ability, tzeentch_arcane), 
              (agent_slot_ge, ":agent_no", slot_agent_special_ability_counter, 1),
              (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (else_try),
              (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (try_end),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 30),
          (try_end),
        (else_try),
          (eq,":special",mana_burst),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (assign, ":cost_stamina", 20),
          (agent_get_slot, ":stamina", ":agent_no", slot_agent_mana),
          (store_random_in_range, ":r", 0, 10),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 6),
            (gt, ":num_enemies", 1),
            (call_script, "script_cf_agent_mana_burst", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_mana, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 30),
          (try_end),
        (else_try),
          (eq,":special", oneshot),
          (agent_get_wielded_item, ":agent_cur_weapon", ":agent_no", 0),
          (gt,":agent_cur_weapon", 0),
          (item_get_type, ":cur_weapon_type", ":agent_cur_weapon"),
          (this_or_next|eq,":cur_weapon_type",itp_type_bow),
          (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
          (this_or_next|eq,":cur_weapon_type",itp_type_crossbow),
          (eq,":cur_weapon_type",itp_type_musket),
          
          (assign, ":cost_stamina", 10),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (agent_get_attack_action, ":attack_action", ":agent_no"),
            (eq, ":attack_action", 2),
            (call_script, "script_cf_agent_oneshot", ":agent_no",0,1,-1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (store_random_in_range, ":ran", 1, 5),
            (try_begin),
              (neg|troop_is_hero, ":troop_no"),
              (val_mul,":ran",":extra_cooldown"),
            (try_end),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
          (try_end),
        (else_try),
          (eq,":special", autoshot),
          (agent_get_wielded_item, ":agent_cur_weapon", ":agent_no", 0),
          (gt,":agent_cur_weapon", 0),
          (item_get_type, ":cur_weapon_type", ":agent_cur_weapon"),
          (this_or_next|eq,":cur_weapon_type",itp_type_bow),
          (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
          (this_or_next|eq,":cur_weapon_type",itp_type_crossbow),
          (eq,":cur_weapon_type",itp_type_musket),
          
          (assign, ":cost_stamina", 20),
          (store_random_in_range, ":r", 0, 20),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 5),
            (agent_get_attack_action, ":attack_action", ":agent_no"),
            (eq, ":attack_action", 2),
            (call_script, "script_cf_agent_aimshot", ":agent_no",1,-1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (store_random_in_range, ":ran", 1, 5),
            (try_begin),
              (neg|troop_is_hero, ":troop_no"),
              (val_mul,":ran",":extra_cooldown"),
            (try_end),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_cooldown, ":ran"),
          (try_end),
        (else_try),
          (eq,":special",sidearm_1),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 4),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (agent_get_horse, ":check", ":agent_no"),  # not mounting
          (le, ":check", 0),
          (assign, ":cost_stamina", 15),
          (store_random_in_range, ":r", 0, 10),
          (agent_ai_get_look_target, ":agent", ":agent_no"),
          (gt,":agent",-1),
          (assign, ":ran", 5),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 6),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 3),
            (call_script, "script_cf_agent_sidearm", ":agent_no", 1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
        (else_try),
          (eq,":special",rend),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 4),
          (assign, ":cost_stamina", 20),
          (store_random_in_range, ":r", 0, 10),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 250),
          (assign, ":num_enemies", reg0),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (gt, ":num_enemies", 1),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 6),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 5),
            (call_script,"script_cf_agent_cleave",":agent_no", 1,0),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 5),
          (try_end),
          
          
        (else_try),
          (eq,":special",rush),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (agent_get_horse, ":horse_no", ":player"),
          (assign, ":cost_stamina", 10),
          (try_begin),
            (le, ":horse_no", -1),
            (assign, ":cost_stamina", 5),
          (try_end),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
          (assign, ":num_enemies", reg0),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 1000),
          (assign, ":num_enemies_2", reg0),
          (store_random_in_range, ":r", 0, 10),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (this_or_next|le, ":num_enemies_2", 1),
            (gt, ":num_enemies", 1),
            (gt, ":r", 6),
            (call_script, "script_cf_agent_rush", ":agent_no",-1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 15),
          (try_end),
          
        (else_try),
          (eq,":special",dragon_voice),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (assign, ":cost_stamina", 25),
          (try_begin),
            (this_or_next|eq, ":troop_no", "trp_npc8"),
            (this_or_next|eq, ":troop_no", "trp_quick_battle_troop_5"),
            (eq,":troop_no", "trp_npc17"),
            (assign, ":cost_stamina", 0),
          (try_end),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
          (assign, ":num_enemies", reg0),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            #(this_or_next|eq, ":troop_no", "trp_draugr_lord"),
            (this_or_next|eq, ":troop_no", "trp_dawnguard_2"),
            (this_or_next|eq, ":troop_no", "trp_polish_knight_4"),
            (troop_is_hero,":troop_no"),
            (assign, ":r", 35),
            (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 600),
            (assign, ":num_enemies", reg0),
          (try_end),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":num_enemies", 1),
            (gt, ":r", 6),
            (call_script, "script_cf_agent_dragon_voice", ":agent_no",-1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 15),
          (try_end),
        (else_try),
          (eq,":special",seismic_slam),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (is_between, ":attack_action", 1, 2),
          (assign, ":cost_stamina", 30),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 400),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":num_enemies", 1),
            (call_script, "script_cf_agent_Seismic_Slam", ":agent_no",-1),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 15),
          (try_end),
        (else_try),
          (eq,":special", charm),
          (assign, ":cost_stamina", 40),
          (store_random_in_range, ":r", 0, 10),
          (try_begin),
            (eq,":troop_no", "trp_vampire_4"),
            (assign, ":cost_stamina", 10),
            (assign, ":r", 10),
          (try_end),
          (try_begin),
            (ge, ":stamina",50),
            (gt, ":r", 7),
            (call_script, "script_cf_agent_charm", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (try_end),
          (assign, ":ran", 20),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          
        (else_try),
          (eq,":special",wushuang),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (try_begin),
            (eq,":w_item", "itm_kwan_dao"),
            (assign, ":cost_stamina", 0),
          (try_end),
          
          (assign, ":cost_stamina", 20),
          (store_random_in_range, ":r", 0, 10),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 200),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (gt, ":num_enemies", 1),
            (call_script, "script_cf_agent_wushuang", ":agent_no"),
            (agent_get_slot, ":stamina", ":agent_no", slot_agent_stamina),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 15),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 30),
          (try_end),
          (try_begin),
            (eq,":w_item", "itm_kwan_dao"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 30),
          (try_end),
        (else_try),
          (eq,":special",earth_shock),
          (agent_get_wielded_item, ":w_item", ":agent_no", 0),
          (gt,":w_item", 0),
          (assign, ":cost_stamina", 20),
          (store_random_in_range, ":r", 0, 10),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 300),
          (assign, ":num_enemies", reg0),
          (assign, ":ran", 10),
          (try_begin),
            (neg|troop_is_hero, ":troop_no"),
            (val_mul,":ran",":extra_cooldown"),
          (try_end),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, ":ran"),
          (try_begin),
            (ge, ":stamina", ":cost_stamina"),
            (gt, ":r", 4),
            (gt, ":num_enemies", 1),
            (call_script, "script_cf_agent_earth_shock", ":agent_no"),
            (val_sub, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_stamina, ":stamina"),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 30),
          (try_end),
        (else_try),
          (eq,":special",skill_charge),
          (assign, ":cost_stamina", 45),
          (assign, ":num_enemies", reg0),
            (ge, ":stamina", ":cost_stamina"),
            (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 40),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 40),
        (else_try),
          (eq,":special",berserk),
          (assign, ":cost_stamina", 45),
          (call_script, "script_agent_get_num_enemies_nearby", ":agent_no", 1000),
          (assign, ":num_enemies", reg0),
          (ge, ":stamina", ":cost_stamina"),
          (ge, ":num_enemies", 1),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 40),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 40),
        (else_try),
          (eq,":special", focus),
          (assign, ":cost_stamina", 45),
          (ge, ":stamina", ":cost_stamina"),
          (agent_get_attack_action, ":attack_action", ":agent_no"),
          (eq, ":attack_action", 1),
          (troop_get_slot, ":troop_max_hp", ":troop_no", slot_troop_max_hp),
          (val_div,":troop_max_hp", 10),
          (val_mul,":troop_max_hp", -1),
          (call_script, "script_change_agent_shield", ":agent_no", ":troop_max_hp"),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_counter, 40),
          (store_random_in_range, ":ran", 5, 16),
          (agent_set_slot, ":agent_no", slot_agent_special_ability_extra_cooldown, 40),
        (try_end),
      (try_end),
    (try_end),
         
    (try_begin),
      (troop_get_slot, ":special", ":troop_no", slot_troop_special_ability_passive),
      (neg|eq,":special",0),
      
      
      
      (try_begin),
        (neg|eq,":special",ambush),
        (neg|eq,":special",steady_aim),
        (agent_get_slot, ":time_3", ":agent_no", slot_agent_special_ability_passiv_counter),
        (gt, ":time_3", 0),
        (val_sub, ":time_3", 1),
        (agent_set_slot, ":agent_no", slot_agent_special_ability_passiv_counter, ":time_3"),
      (else_try),
        (this_or_next|eq,":special",ambush),
        (eq,":special",steady_aim),
        (agent_get_slot, ":time_3", ":agent_no", slot_agent_special_ability_passiv_counter),
        (val_add, ":time_3", 1),
        (agent_set_slot, ":agent_no", slot_agent_special_ability_passiv_counter, ":time_3"),
        (try_begin),
          (gt, ":time_3", 10), 
          (agent_set_slot,":agent_no",slot_agent_archer_state,2),
        (else_try),
          (agent_set_slot,":agent_no",slot_agent_archer_state,0),
        (try_end),    
      (else_try),
        (agent_get_slot, ":timer_4", ":agent_no", slot_agent_special_ability_passiv_cooldown),
        (gt, ":timer_4", 0),
        (val_sub, ":timer_4", 1),
        (agent_set_slot, ":agent_no", slot_agent_special_ability_passiv_cooldown, ":timer_4"),
        (try_begin),
          (eq, ":timer_4", 0), 
          (eq,":special",arrow_of_slaying),
          (agent_set_slot,":agent_no",slot_agent_archer_state,2),
        (else_try),
          (agent_set_slot,":agent_no",slot_agent_archer_state,0),
        (try_end),    
        
      (try_end),    
                  
      (agent_get_slot, ":cooldown", ":agent_no", slot_agent_special_ability_passiv_counter),
      (try_begin),
        (eq,":cooldown",0),
        (try_begin),
          (this_or_next|eq,":special",poisoned_attacks),
          (eq,":special",ironshield),
          (agent_get_slot, ":extra_hp", ":agent_no", slot_agent_extra_hp),
          
          (store_skill_level, ":skl_level", skl_ironflesh, ":troop_no"),
          (store_mul,":add_hp", ":skl_level", -150),
          (val_add,":add_hp", -100),
          (val_add,":extra_hp", ":add_hp"),
          
          (agent_set_slot, ":agent_no", slot_agent_extra_hp, ":extra_hp"),
          (le,":extra_hp", 0),
          (agent_set_no_death_knock_down_only, ":agent_no", 0),
        (try_end),
      (try_end),
    (try_end),
     
    (try_begin),
      (agent_get_slot, ":special", ":agent_no", slot_agent_special_ability_affect_type),
     
      (try_begin),
        (neg|eq,":special",0),
        (agent_get_slot, ":time_5", ":agent_no", slot_agent_special_ability_affect_time),
        (gt, ":time_5", 0),
        (val_sub, ":time_5", 1),
        (agent_set_slot, ":agent_no", slot_agent_special_ability_affect_time, ":time_5"),
        (eq, ":time_5", 0),
        (agent_set_slot, ":agent_no",  slot_agent_special_ability_affect_type, 0),
      (try_end),        

    (try_end),     
    (try_begin),
      (agent_get_slot, ":special", ":agent_no", slot_agent_buff_affect_type),
      (try_begin),
        (neg|eq,":special",0),
        (agent_get_slot, ":time_5", ":agent_no", slot_agent_buff_affect_time),
        (gt, ":time_5", 0),
        (val_sub, ":time_5", 1),
        (agent_set_slot, ":agent_no", slot_agent_buff_affect_time, ":time_5"),
        (eq, ":time_5", 0),
        (agent_set_slot, ":agent_no",  slot_agent_buff_affect_type, 0),
      (try_end),        
    (try_end),       
    (try_begin),
      (agent_get_slot, ":special", ":agent_no", slot_agent_debuff_affect_type),
      (try_begin),
        (neg|eq,":special",0),
        (agent_get_slot, ":time_5", ":agent_no", slot_agent_debuff_affect_time),
        (gt, ":time_5", 0),
        (val_sub, ":time_5", 1),
        (agent_set_slot, ":agent_no", slot_agent_debuff_affect_time, ":time_5"),
        (eq, ":time_5", 0),
        (agent_set_slot, ":agent_no",  slot_agent_debuff_affect_type, 0),
      (try_end),        
    (try_end),       
     
  (try_end),        
  ])                  

special_ability_trigger_2  =(
    0, 0, 0, [
    (key_clicked, "$key_special_4"),(clear_omitted_keys),(omit_key_once, "$key_special_4"),
    (omit_key_once, gk_kick),
    (omit_key_once, gk_quests_window),
    ], 
    [
    (get_player_agent_no,":player"),
    (agent_is_alive,":player"),
    (agent_get_troop_id, ":player_no", ":player"),
    (troop_get_slot, ":special", ":player_no", slot_troop_special_ability_extra),
    (neg|eq,":special",0),
    (agent_get_slot, ":cooldown", ":player", slot_agent_special_ability_extra_cooldown),
    (agent_get_slot, ":counter", ":player", slot_agent_special_ability_extra_counter),
        (store_current_scene,":current_scene"),
        (neg|is_between, ":current_scene", "scn_town_1_tavern", "scn_town_1_walls"),
    
    (try_begin),
      (gt,":cooldown",0),
      (assign, reg50, ":cooldown"),
      (display_message, "@your special_ability is on cooldown ({reg50} seconds)."),
    (else_try),
      (eq,":cooldown",0),
      (this_or_next|eq,":special", tzeentch_arcane),
      (troop_slot_eq, ":player_no", slot_troop_special_ability, tzeentch_arcane), 
      (this_or_next|eq,":special", tzeentch_arcane),
      (agent_slot_ge, ":player", slot_agent_special_ability_counter, 1),
      (agent_get_slot, ":stamina", ":player", slot_agent_mana),

      (try_begin),
        (eq,":special", summon_undead),
        (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_summon_undead", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
      (else_try),
        (eq,":special",call_lightning),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        #(agent_get_horse, ":horse_agent", ":player"),
        #(lt, ":horse_agent", 0),
        (call_script, "script_cf_agent_call_lightning", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
      (else_try),
        (eq,":special",divine_ruling),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        #(agent_get_horse, ":horse_agent", ":player"),
        #(lt, ":horse_agent", 0),
        (call_script, "script_cf_agent_divine_ruling", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", spell_dispel),
          (assign, ":cost_stamina", 30),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_spell_dispel", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
      (else_try),
        (eq,":special", slow),
          (assign, ":cost_stamina", 60),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_slow", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 60),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),  
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
      (else_try),
        (eq,":special", haste),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_haste", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 60),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
      (else_try),
        (eq,":special", flame_burst),
        (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_flamestrike_extra", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
      (else_try),
        (eq,":special", forst_ring),
          (assign, ":cost_stamina", 20),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_forst_ring", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
      (else_try),
        (eq,":special", mana_burst),
          (assign, ":cost_stamina", 20),
        (ge, ":stamina", ":cost_stamina"),
        (agent_get_slot, ":stamina", ":player", slot_agent_mana),
        (call_script, "script_cf_agent_mana_burst", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_mana, ":stamina"),
      (else_try),
        (assign, reg1, ":stamina"),
        (display_message, "@You're so tired to can not use special_ability ^mana: {reg1}/100"),    
      (try_end),
    (else_try),
      (eq,":cooldown",0),
      (agent_get_slot, ":stamina", ":player", slot_agent_stamina),
      (try_begin),
        (eq,":special",grasp),
        (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (agent_get_horse, ":horse_agent", ":player"),
        (lt, ":horse_agent", 0),
        (call_script, "script_cf_agent_grasp", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 10),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",curse_of_the_leper),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        #(agent_get_horse, ":horse_agent", ":player"),
        #(lt, ":horse_agent", 0),
        (call_script, "script_cf_agent_curse_of_the_leper", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", entangle),
        (assign, ":cost_stamina", 20),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_entangle", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",rage_charge),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (agent_get_horse, ":horse_agent", ":player"),
        (ge, ":horse_agent", 0),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 9999),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",skill_charge),
          (assign, ":cost_stamina", 45),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 40),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", berserk),
          (assign, ":cost_stamina", 45),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 40),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", focus),
          (assign, ":cost_stamina", 45),
        (ge, ":stamina", ":cost_stamina"),
        (troop_get_slot, ":troop_max_hp", ":player_no", slot_troop_max_hp),
        (val_div,":troop_max_hp", 10),
        (val_mul,":troop_max_hp", -1),
        (call_script, "script_change_agent_shield", ":player", ":troop_max_hp"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 40),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", haste_reload),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 20),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", sinper_shot),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 15),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
        
      (else_try),
        (eq,":special", swift_strike),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_cf_agent_dragon_blade", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 5),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
      (else_try),
        (eq,":special", shadow_blade),
          (assign, ":cost_stamina", 20),
          (try_begin),
            (eq,":player_no", "trp_npc13"),
            (assign, ":cost_stamina", 10),
          (try_end),
        (ge, ":stamina", ":cost_stamina"),
        #(agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 10),
        (call_script, "script_cf_agent_shadow_blade", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 0),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", master_archer),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 50),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 50),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", cleave),
          (assign, ":cost_stamina", 30),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 30),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 60),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", mass_heal),
        (assign, ":cost_stamina", 15),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_mass_heal", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", heal),
        (assign, ":cost_stamina", 5),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_heal", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", smite_evil),
          (assign, ":cost_stamina", 10),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_power_strike", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 10),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", mana_burn),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 30),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 30),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", smite_undead),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 5),
        (call_script, "script_cf_agent_excalibur_light", ":player", 3),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", smite_orc),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 5),
        (call_script, "script_cf_agent_excalibur_light", ":player", 3),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", head_hunted),
          (assign, ":cost_stamina", 10),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_power_strike", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 10),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", smite_outsider),
          (assign, ":cost_stamina", 10),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_power_strike", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 10),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", reaper),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 5),
        (call_script, "script_cf_agent_excalibur_light", ":player", 2),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", power_strike),
          (assign, ":cost_stamina", 10),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 5),
        (call_script, "script_cf_agent_power_strike", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 10),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", summon_undead),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_summon_undead", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",call_lightning),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        #(agent_get_horse, ":horse_agent", ":player"),
        #(lt, ":horse_agent", 0),
        (call_script, "script_cf_agent_call_lightning", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special",divine_ruling),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        #(agent_get_horse, ":horse_agent", ":player"),
        #(lt, ":horse_agent", 0),
        (call_script, "script_cf_agent_divine_ruling", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
      (else_try),
        (eq,":special", rush),
        (agent_get_horse, ":horse_no", ":player"),
          (assign, ":cost_stamina", 10),
        (try_begin),
          (le, ":horse_no", -1),
          (assign, ":cost_stamina", 5),
        (try_end),
        (ge, ":stamina", ":cost_stamina"),
        
        (call_script, "script_cf_agent_rush", ":player"),
        
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 1),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 5),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
      (else_try),
        (eq,":special", roll),
          (assign, ":cost_stamina", 5),
        (ge, ":stamina", ":cost_stamina"),
        
        (agent_get_horse, ":horse_no", ":player"),
        (le, ":horse_no", -1),
        
        (try_begin),
          (agent_get_wielded_item, ":wielded", ":player", 0),
          (ge, ":wielded", 0),
          (item_get_type, ":type", ":wielded"),
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":player", "itm_perk_musket_2"),
            (this_or_next|eq, ":type", itp_type_pistol),
            (eq, ":type", itp_type_musket),
            (agent_set_ammo,":player",":wielded",6),
          (else_try),  
            (call_script, "script_cf_agent_has_skill", ":player", "itm_perk_crossbow_2"),
            (eq, ":type", itp_type_crossbow),
            (agent_set_ammo,":player",":wielded",6),
          (try_end),
        (try_end),
        
        (try_begin),
          (game_key_is_down, gk_move_forward), 
               (try_begin),
                 (agent_slot_eq, ":player", slot_agent_horse_is_charging, 1),
                 (agent_set_animation,":player","anim_dash_forward"),
               (else_try),
                 (agent_set_animation,":player","anim_fangun_forward"),
                 (play_sound, "snd_tc_fangun"),
               (try_end),
        (else_try),
          (this_or_next|game_key_is_down, gk_move_backward), 
          (game_key_is_down, gk_jump),
               (try_begin),
                 (agent_slot_eq, ":player", slot_agent_horse_is_charging, 1),
                 (agent_set_animation,":player","anim_dash_backward"),
               (else_try),
                 (agent_set_animation,":player","anim_fangun_backward"),
                 (play_sound, "snd_tc_fangun"),
               (try_end),
        (else_try),
          (game_key_is_down, gk_move_left), 
               (try_begin),
                 (agent_slot_eq, ":player", slot_agent_horse_is_charging, 1),
                 (agent_set_animation,":player","anim_dash_left"),
               (else_try),
                 (agent_set_animation,":player","anim_fangun_left"),
                 (play_sound, "snd_tc_fangun"),
               (try_end),
        (else_try),
          (game_key_is_down, gk_move_right), 
               (try_begin),
                 (agent_slot_eq, ":player", slot_agent_horse_is_charging, 1),
                 (agent_set_animation,":player","anim_dash_right"),
               (else_try),
                 (agent_set_animation,":player","anim_fangun_right"),
                 (play_sound, "snd_tc_fangun"),
               (try_end),
        (else_try),
               (try_begin),
                 (agent_slot_eq, ":player", slot_agent_horse_is_charging, 1),
                 (agent_set_animation,":player","anim_dash_forward"),
               (else_try),
                 (agent_set_animation,":player","anim_fangun_forward"),
                 (play_sound, "snd_tc_fangun"),
               (try_end),
        (try_end),
        #(call_script, "script_cf_agent_haste", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 1),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 2),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", spell_dispel),
          (assign, ":cost_stamina", 30),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_spell_dispel", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", slow),
          (assign, ":cost_stamina", 60),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_slow", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 60),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),  
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", haste),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_haste", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 60),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", flame_burst),
        (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_flamestrike_extra", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", forst_ring),
          (assign, ":cost_stamina", 20),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_forst_ring", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", mana_burst),
          (assign, ":cost_stamina", 20),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_mana_burst", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 15),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", charm),
          (assign, ":cost_stamina", 50),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_charm", ":player"),
        #(agent_set_slot, ":player", slot_agent_special_ability_counter, 30),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 30),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", sidearm_1),
          (assign, ":cost_stamina", 15),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 3),
        (call_script, "script_cf_agent_sidearm", ":player", 1),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", oneshot),
          (assign, ":cost_stamina", 10),
        (ge, ":stamina", ":cost_stamina"),
          (agent_get_wielded_item, ":agent_cur_weapon", ":player", 0),
          (gt,":agent_cur_weapon", 0),
          (item_get_type, ":cur_weapon_type", ":agent_cur_weapon"),
          (this_or_next|eq,":cur_weapon_type",itp_type_bow),
          (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
          (this_or_next|eq,":cur_weapon_type",itp_type_crossbow),
          (eq,":cur_weapon_type",itp_type_musket),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 5),
        (call_script, "script_cf_agent_oneshot", ":player",0,1,-1),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", autoshot),
          (assign, ":cost_stamina", 20),
        (ge, ":stamina", ":cost_stamina"),
          (agent_get_wielded_item, ":agent_cur_weapon", ":player", 0),
          (gt,":agent_cur_weapon", 0),
          (item_get_type, ":cur_weapon_type", ":agent_cur_weapon"),
          (this_or_next|eq,":cur_weapon_type",itp_type_bow),
          (this_or_next|eq,":cur_weapon_type",itp_type_pistol),
          (this_or_next|eq,":cur_weapon_type",itp_type_crossbow),
          (eq,":cur_weapon_type",itp_type_musket),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 5),
        (call_script, "script_cf_agent_aimshot", ":player",1,-1),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        
        
      (else_try),
        (eq,":special", dragon_voice),
          (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_dragon_voice", ":player",-1),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 10),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", seismic_slam),
          (assign, ":cost_stamina", 30),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_Seismic_Slam", ":player",-1),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 5),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", rend),
          (assign, ":cost_stamina", 20),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 5),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 5),
        (call_script,"script_cf_agent_cleave",":player", 1,0),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", earth_shock),
          (assign, ":cost_stamina", 20),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_earth_shock", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 10),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (eq,":special", wushuang),
          (assign, ":cost_stamina", 20),
          (agent_get_wielded_item, ":w_item", ":player", 0),
          (gt,":w_item", 0),
          (try_begin),
            (eq,":w_item", "itm_kwan_dao"),
            (assign, ":cost_stamina", 0),
          (try_end),
        (ge, ":stamina", ":cost_stamina"),
        (call_script, "script_cf_agent_wushuang", ":player"),
        
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 15),
          (try_begin),
            (eq,":w_item", "itm_kwan_dao"),
            (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 30),
          (try_end),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 30),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (agent_get_slot, ":stamina", ":player", slot_agent_stamina),
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      (else_try),
        (assign, reg1, ":stamina"),
        (display_message, "@You're so tired to can not use special_ability ^Stamina: {reg1}/100"),    
      (try_end),
    (try_end),
    (try_begin),
      (gt,":counter",0),
      (agent_get_slot, ":stamina", ":player", slot_agent_stamina),
      (try_begin),
        (eq,":special", swift_strike),
        (assign, ":cost_stamina", 25),
        (ge, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_cooldown, 5),
        (call_script, "script_cf_agent_dragon_blade", ":player"),
        (agent_set_slot, ":player", slot_agent_special_ability_extra_counter, 0),
        (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
        (display_message, "@you special_ability {s2} is on"),    
        (val_sub, ":stamina", ":cost_stamina"),
        (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
      
      (try_end),
    (try_end),

  ])
    
init_troop_extra_hp = (
  ti_on_agent_spawn, 0, 0, [],
   [
    (store_trigger_param_1, ":agent_no"),
    (try_begin),
      (call_script, "script_init_extra_hp", ":agent_no"),
    (try_end),
    (get_player_agent_no, ":player_agent"),
    (agent_is_human, ":agent_no"),
    (agent_get_troop_id, ":troop_no", ":agent_no"),
    (troop_get_type, ":agent_gender", ":troop_no"),
    (try_begin),
      (agent_get_slot, ":spawned_timer", ":agent_no", slot_agent_spawned),
      (neg|eq, ":spawned_timer", 0),
      (agent_get_position,pos51,":agent_no"),
      (store_random_in_range, ":move_x", -5000, 5000),
      (position_move_x, pos51, ":move_x"),
      (store_random_in_range, ":move_y", -2000, 2000),
      (position_move_y, pos51, ":move_y"),
      (agent_set_position,":agent_no", pos51),
    (try_end),
    
    
    (try_begin),
      (store_skill_level, ":skl_level", skl_stealth, ":troop_no"),
      (store_skill_level, ":skl_level_2", skl_weapon_master, ":troop_no"),
      (store_skill_level, ":athletics_level", skl_physique, ":troop_no"),
      (store_skill_level, ":riding_level", skl_riding, ":troop_no"),
      (try_begin),
        (eq, ":agent_gender", tf_male_elf),
        (val_add, ":skl_level_2", 3),
        (val_add, ":skl_level", 3),
        (val_add, ":athletics_level", 3),
        (val_add, ":riding_level", 3),
      (else_try),
        (eq, ":agent_gender", tf_female_elf),
        (is_currently_night),
        (val_add, ":skl_level_2", 3),
        (val_add, ":skl_level", 3),
        (val_add, ":athletics_level", 3),
        (val_add, ":riding_level", 3),
      (else_try),
        (this_or_next|eq, ":agent_gender", tf_giant_dwarf),
        (eq, ":agent_gender", tf_dwarf),
        (val_add, ":skl_level_2", 5),
        (val_add, ":athletics_level", 5),
      (try_end),
      
      (try_begin),
        (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_body),
        (eq, ":item_modifier", imod_hardened),
        #(is_currently_night),
        (val_add, ":skl_level_2", 3),
        (val_add, ":skl_level", 3),
        (val_add, ":athletics_level", 3),
        (val_add, ":riding_level", 3),
      (try_end),
      (agent_set_slot, ":agent_no", slot_agent_weapon_master_level, ":skl_level_2"),
      (agent_set_slot, ":agent_no", slot_agent_stealth_level, ":skl_level"),
      (agent_set_slot, ":agent_no", slot_agent_athletics_level, ":athletics_level"),
      (agent_set_slot, ":agent_no", slot_agent_riding_level, ":riding_level"),
      
    (try_end),
        
    
    (try_begin),
      (store_skill_level, ":skill", skl_ironflesh, ":troop_no"),
      (val_mul, ":skill", 3),
      (val_min, ":skill", 100),
      (agent_set_slot, ":agent_no", slot_agent_stamina, ":skill"),
    (try_end),
        
    (try_begin),
      (call_script, "script_get_troop_max_hp", ":troop_no"),
      (assign, ":max_hp", reg0),
      

      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_one_hand_3"),
        (assign,":troop_max_hp", ":max_hp"),
        (val_div, ":troop_max_hp", 5),
        (val_mul,":troop_max_hp", -1),
        (call_script, "script_change_agent_shield", ":agent_no", ":troop_max_hp"),
      (try_end),

        (agent_get_party_id, ":agent_party", ":agent_no"),
        (try_begin),
          (gt, ":agent_party", -1),
          (party_stack_get_troop_id, ":party_leader", ":agent_party", 0),
          (troop_is_hero, ":party_leader"),
          (try_begin),
            (store_skill_level, ":tenacity_level", "skl_tenacity", ":party_leader"),
           # (party_get_skill_level, ":tenacity_level", ":agent_party", "skl_tenacity"),
            (agent_set_slot, ":agent_no", slot_agent_tenacity_level, ":tenacity_level"),
          (try_end),
          (try_begin),
            (store_skill_level, ":tenacity_level", "skl_paragon_knight", ":party_leader"),
            #(party_get_skill_level, ":tenacity_level", ":agent_party", "skl_paragon_knight"),
            (agent_set_slot, ":agent_no", slot_agent_paragon_knight_level, ":tenacity_level"),
          (try_end),
          
          
          
          (neq, ":troop_no", ":party_leader"),
          (party_get_skill_level, ":encouragement_level", ":agent_party", "skl_undead_master"),
          (try_begin),
            (this_or_next|is_between, ":troop_no", "trp_se_tribesman", "trp_mummy_2_1"),
            (this_or_next|is_between, ":troop_no", "trp_ghost", "trp_wraith"),
            (this_or_next|is_between, ":troop_no", "trp_air_elemental", "trp_human_magic_1"),
            (this_or_next|is_between, ":troop_no", "trp_golem_1", "trp_sissofbattle"),
            (this_or_next|is_between, ":troop_no", "trp_air_elemental", "trp_air_elemental"),
            (this_or_next|is_between,":troop_no","trp_demon_1","trp_demon_3"),
            (this_or_next|eq,":troop_no","trp_dryad"),
            (this_or_next|eq,":troop_no","trp_pixie"),
            (this_or_next|eq,":troop_no","trp_inferno"),
            (eq,":troop_no","trp_inferno"),
            (val_mul, ":encouragement_level", 20),
            (val_add, ":max_hp", ":encouragement_level"), 
          (try_end),
          (try_begin),
            (this_or_next|is_between, ":troop_no", "trp_troll_1", "trp_ogre_cannon"),
            (this_or_next|is_between, ":troop_no", "trp_ent_1", "trp_grandelf_cavalry"),
            (this_or_next|is_between, ":troop_no", "trp_demon_3", "trp_demon_5"),
            (this_or_next|is_between, ":troop_no", "trp_angle", "trp_titan_0"),
            (this_or_next|is_between, ":troop_no", "trp_mummy_2_1", "trp_lich_3"),
            (this_or_next|eq,":troop_no","trp_demon_8"),
            (this_or_next|eq,":troop_no","trp_huge_inferno"),
            (this_or_next|eq,":troop_no","trp_demon_human_5_2"),
            (this_or_next|eq,":troop_no","trp_gargoyle"),
            (this_or_next|eq, ":troop_no", "trp_bone_dragon"),
            (eq,":troop_no","trp_ghost_dragon"),
            (val_mul, ":encouragement_level", 50),
            (val_add, ":max_hp", ":encouragement_level"), 
          (try_end),
        (try_end),
      (agent_set_max_hit_points,":agent_no",":max_hp",1),
      (agent_set_hit_points, ":agent_no", ":max_hp",1),
    (try_end),
      (try_begin),
        (agent_has_item_equipped, ":agent_no", "itm_tzeentch_chosen_head"),
        (call_script, "script_change_agent_shield", ":agent_no", -100),
      (try_end),
      (try_begin),
        (agent_has_item_equipped, ":agent_no", "itm_tzeentch_chosen_leg"),
        (call_script, "script_change_agent_shield", ":agent_no", -50),
      (try_end),
      (try_begin),
        (agent_has_item_equipped, ":agent_no", "itm_tzeentch_chosen_hand"),
        (call_script, "script_change_agent_shield", ":agent_no", -50),
      (try_end),
      (try_begin),
        (agent_has_item_equipped, ":agent_no", "itm_tzeentch_chosen_armor"),
        (call_script, "script_change_agent_shield", ":agent_no", -100),
      (try_end),
      
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_two_hand_7"),
        (agent_set_slot, ":agent_no", slot_agent_extra_hp, 300),
      (try_end),
      
      (try_begin),
        (call_script, "script_cf_agent_has_skill", ":agent_no", "itm_perk_bow_7"),
        (agent_set_slot, ":agent_no", slot_agent_extra_hp, 200),
      (try_end),
      
    (try_begin),
        (is_between,":troop_no",tavernkeepers_begin,tavernkeepers_end),
        (agent_set_no_death_knock_down_only, ":agent_no", 1),
        (agent_set_slot, ":agent_no", slot_agent_extra_hp, 50000000),
    (try_end),
    (get_player_agent_no, ":player_agent"),
    (try_begin),
      (call_script, "script_cf_agent_has_skill", ":agent_no", powercharge),
      (troop_slot_eq, ":troop_no", slot_troop_special_ability_passive, powercharge), 
      #(agent_set_slot, ":agent_no", slot_agent_special_ability_passiv_counter, 99999),
      (eq, ":agent_no",":player_agent"),
      (str_store_string, s2, "@powercharge"),
      (display_message, "@you special_ability {s2} is on"),
    (try_end),
    #(try_begin),
    #(else_try),
    #  (this_or_next|eq, ":troop_no", "trp_cheat_man"),
    #  (eq, ":troop_no", "trp_mercenary_berserker"),
    #  (agent_set_max_hit_points,":agent_no",150,0),
    #(else_try),
    #  (this_or_next|eq, ":troop_no", "trp_mummy_1"),
    #  (this_or_next|eq, ":troop_no", "trp_mummy_2"),
    #  (eq, ":troop_no", "trp_mummy_3"),
    #  (call_script, "script_get_troop_max_hp", ":troop_no"),
    #  (assign, ":max_hp", reg0),
    #  (val_mul, ":max_hp", 2),
    #  (agent_set_slot, ":agent_no", slot_agent_extra_hp, ":max_hp"),
    #  (agent_set_no_death_knock_down_only, ":agent_no", 1),
    #(try_end),
    
    (try_begin),
      (agent_has_item_equipped, ":agent_no", "itm_felguard_body"),
      (agent_has_item_equipped, ":agent_no", "itm_felguard_calf"),
      (try_begin),
        (eq, ":agent_no",":player_agent"),
        (agent_set_no_death_knock_down_only, ":agent_no", 1),
        (agent_set_slot, ":agent_no", slot_agent_extra_hp, 500000),
        (call_script, "script_change_agent_shield", ":agent_no", -500000),
      (else_try),
        (agent_set_no_death_knock_down_only, ":agent_no", 1),
        (agent_set_slot, ":agent_no", slot_agent_extra_hp, 100000),
        (call_script, "script_change_agent_shield", ":agent_no", -100000),
      (try_end),  
    (try_end),  
    
    (try_begin),
      (eq, ":agent_no",":player_agent"),
      (player_has_item,"itm_holy_cross"),
      (call_script, "script_get_troop_max_hp", ":troop_no"),
      (assign, ":max_hp", reg0),
      (agent_set_no_death_knock_down_only, ":agent_no", 1),
      (agent_set_slot, ":agent_no", slot_agent_extra_hp, ":max_hp"),
    (try_end),  
    
    (try_begin),
      (agent_has_item_equipped, ":agent_no", "itm_angel_blade"),
      (call_script, "script_get_troop_max_hp", ":troop_no"),
      (assign, ":max_hp", reg0),
      (try_begin),
        (eq, ":agent_no",":player_agent"),
        (val_mul,":max_hp", 2),
        (val_mul,":max_hp", -1),
        #(agent_set_no_death_knock_down_only, ":agent_no", 1),
        (call_script, "script_change_agent_shield", ":agent_no", ":max_hp"),
      (else_try),
        (neq, ":agent_no",":player_agent"),
        (val_mul,":max_hp", -1),
        #(agent_set_no_death_knock_down_only, ":agent_no", 1),
        (call_script, "script_change_agent_shield", ":agent_no", ":max_hp"),
      (try_end),  
    (try_end),  
   ])
    
shoot_ai = (
  0,0,0,[],
  [

     (store_mission_timer_c_msec,":time_n"),
     (try_for_agents,":agent_no"),
       (agent_is_alive,":agent_no"),
       (agent_slot_eq,":agent_no",slot_agent_archer_state,2),
       (agent_get_wielded_item,":weapon",":agent_no",0),
       (gt,":weapon",0),
       (item_get_type,":item_type",":weapon"),
       (this_or_next|eq,":item_type",itp_type_bow),
       (this_or_next|eq,":item_type",itp_type_thrown),
       (this_or_next|eq,":item_type",itp_type_pistol),
       (this_or_next|eq,":item_type",itp_type_musket),
       (eq,":item_type",itp_type_crossbow),
       
       (try_begin),
         (assign,":continue",0),
         (agent_ai_get_look_target,":target",":agent_no"),
         (try_begin),
           (gt,":target",-1),
           (agent_is_alive,":target"),
         (else_try),
           (agent_ai_get_num_cached_enemies, ":num", ":agent_no"),
           (try_for_range,":index",0,":num"),#get target
             (store_random_in_range,":index",0,":num"),
             (agent_ai_get_cached_enemy, reg0, ":agent_no", ":index"),
             (agent_is_alive, reg0),
             (assign,":target",reg0),
             (agent_set_look_target_agent,":agent_no",":target"),
             (assign,":num",-1),#break
           (try_end),
         (try_end),
         (gt,":target",-1),
         (agent_is_alive,":target"),
         (agent_get_bone_position, pos1, ":agent_no", 9, 1),
         (agent_get_bone_position, pos2, ":target", 9, 1),
         (position_has_line_of_sight_to_position,pos1,pos2),
         (assign,":continue",1),
         (agent_get_attack_action,":attack_action",":agent_no"),
         (call_script,"script_agent_set_shoot_target",":agent_no",":target",":weapon"),
         
         (try_begin),
           (eq,":attack_action",0),#free
           (lt,reg0,2500),
           (neg|agent_slot_ge,":agent_no",slot_next_shoot_time,":time_n"),
           (agent_set_defend_action,":agent_no",-2,1),
           (agent_set_attack_action,":agent_no",3,1),
           (call_script,"script_set_agent_aiming_time",":agent_no",":weapon"),
         (else_try),
           (eq,":attack_action",1),
           (lt,reg0,2500),
           (agent_set_attack_action,":agent_no",3,1),
           (agent_set_look_target_position,":agent_no",pos1),
           (agent_get_speed,pos0,":agent_no"),
           (set_fixed_point_multiplier,1000),
           (position_normalize_origin,":speed",pos0),
           (lt,":speed",2000),#2m/s
           
           (try_begin),
             (agent_slot_eq,":agent_no",slot_agent_next_release_time,0),
             (store_add,":stand_t",":time_n",700),
             (agent_set_slot,":agent_no",slot_agent_next_release_time,":stand_t"),
           (try_end),
           
           (neg|agent_slot_ge,":agent_no",slot_next_shoot_time,":time_n"),
           (neg|agent_slot_ge,":agent_no",slot_agent_next_release_time,":time_n"),
           (agent_set_attack_action,":agent_no",3,0),
           (agent_set_slot,":agent_no",slot_agent_next_release_time,0),#reset
           (store_random_in_range,":random",5,16),
           (val_mul,":random",10),
           (val_add,":time_n",":random"),
           (agent_set_slot,":agent_no",slot_next_shoot_time,":time_n"),
         (try_end),
       (else_try),
         (neg|agent_slot_eq,":agent_no",slot_next_shoot_time,0),
         (this_or_next|all_enemies_defeated),
         (eq,":continue",0),
         (agent_set_attack_action, ":agent_no", -2, 1),#cancel shoot
         (agent_set_defend_action,":agent_no",3,1),
       (try_end),
     (else_try),
       (agent_slot_eq,":agent_no",slot_agent_archer_state,2),
       (agent_set_attack_action, ":agent_no", -2, 0),
       (agent_set_attack_action, ":agent_no", -2, 1),
       (agent_set_defend_action,":agent_no",-2,1),
       (agent_force_rethink,":agent_no"),
       (agent_clear_scripted_mode,":agent_no"),
       (agent_set_slot,":agent_no",slot_agent_archer_state,3),
     (try_end),
  ]
)
archer_ai = (
  0.5, 0, 0, [],
   [
     #(key_is_down,key_t),
     (try_for_agents,":agent_no"),
       (neg|agent_slot_eq,":agent_no",slot_agent_archer_state,1),
       (agent_is_ally,":agent_no"),
       (agent_is_alive,":agent_no"),
       (agent_is_human,":agent_no"),
       (agent_is_non_player,":agent_no"),
       (agent_slot_eq, ":agent_no", slot_agent_is_running_away, 0),
       
       (agent_get_ammo,":ammo",":agent_no",0),
       (agent_get_horse,":horse_no",":agent_no"),
       
       (gt,":ammo",0),
       (assign,":continue",0),
       (try_begin),
         (agent_slot_eq,":agent_no",slot_agent_archer_state,0),#init
         (try_for_range,":slot",0,4),
           (agent_get_item_slot,":item_id",":agent_no",":slot"),
           (gt,":item_id",0),
           (item_get_type,":item_type",":item_id"),
           (this_or_next|eq,":item_type",itp_type_bow),
           (this_or_next|eq,":item_type",itp_type_thrown),
           (this_or_next|eq,":item_type",itp_type_pistol),
           (this_or_next|eq,":item_type",itp_type_musket),
           (eq,":item_type",itp_type_crossbow),
           (assign,":continue",1),
         (try_end),
         (eq,":continue",1),
         (agent_set_slot,":agent_no",slot_agent_archer_state,2),
       (else_try),#for 
         (agent_get_wielded_item,":weapon",":agent_no",0),
         (gt,":weapon",0),
         (item_get_type,":item_type",":weapon"),
         (this_or_next|eq,":item_type",itp_type_bow),
         (this_or_next|eq,":item_type",itp_type_thrown),
         (this_or_next|eq,":item_type",itp_type_pistol),
         (this_or_next|eq,":item_type",itp_type_musket),
         (eq,":item_type",itp_type_crossbow),
         (assign,":continue",1),
         (agent_set_slot,":agent_no",slot_agent_archer_state,2),
       (try_end),
       (eq,":continue",1),
       (lt,":horse_no",0),
       (agent_ai_get_num_cached_enemies, ":num", ":agent_no"),
       (assign,":target",-1),
       (try_for_range,":index",0,":num"),#get target
         (agent_ai_get_cached_enemy, ":enemies", ":agent_no", ":index"),
         (agent_is_alive,":enemies"),
         (assign,":target",":enemies"),
         (agent_set_look_target_agent,":agent_no",":target"),
         (assign,":num",-1),#break
       (try_end),
       (gt,":target",-1),
       (agent_get_bone_position, pos1, ":agent_no", 9, 1),
       (agent_get_bone_position, pos2, ":target", 9, 1),
       
       (try_begin),
         (eq,0,0),
         (agent_get_team,":team_no",":agent_no"),
         (agent_get_division,":class_no",":agent_no"),
         (team_get_movement_order,":movement_order",":team_no",":class_no"),
         (eq,":movement_order",mordr_charge),
         (position_has_line_of_sight_to_position,pos1,pos2),
         (agent_get_look_position, pos3, ":agent_no"),
         (position_copy_rotation,pos3,pos1),
         (get_distance_between_positions,":dist",pos1,pos2),#cm
         (assign,":dist_fix",0),
         (try_begin),
           (lt,":dist",1500),#15m
           (store_sub,":dist_fix",":dist",2000),
         (else_try),
           (gt,":dist",6000),#60m
           (store_sub,":dist_fix",":dist",6000),
         (else_try),
           (store_random_in_range,":random",0,1000),
           (assign,":possible",8),
           (val_mul,":possible",1000),
           (val_div,":possible",500),
           (val_max,":possible",1),
           (store_div,":possible",1000,":possible"),
           (le,":random",":possible"),
           (assign,":dist_fix",200),
         (try_end),
         (position_move_y,pos3,":dist_fix",0),
         (agent_set_scripted_destination,":agent_no",pos3,1),
       (try_end),
       
       (try_begin),
         (eq,0,0),
         (position_has_line_of_sight_to_position,pos1,pos2),
         (agent_get_attack_action,":attack_action",":agent_no"),
         (this_or_next|eq,":attack_action",5),#reloading
         (eq,":attack_action",1),
         (agent_get_position,pos0,":agent_no"),
         (agent_set_scripted_destination,":agent_no",pos0,1),
       (else_try),
         (agent_clear_scripted_mode, ":agent_no"),
         (agent_force_rethink,":agent_no"),
       (try_end),
     (else_try),
       (try_begin),
         (agent_slot_eq,":agent_no",slot_agent_archer_state,0),
         (agent_set_slot,":agent_no",slot_agent_archer_state,1),
       (else_try),
         (agent_slot_eq,":agent_no",slot_agent_archer_state,2),
         (this_or_next|agent_slot_eq, ":agent_no", slot_agent_is_running_away, 1),
         (this_or_next|eq, ":ammo", 0),
         (this_or_next|eq,":target",-1),
         (eq,":continue",0),
         (lt,":horse_no",0),
         (agent_clear_scripted_mode,":agent_no"),
         (agent_force_rethink,":agent_no"),
         (agent_set_slot,":agent_no",slot_agent_archer_state,3),
       (try_end),
     (try_end),
   ]
)
       
    
extra_hp_when_knocked_down = (
  ti_on_agent_knocked_down, 0, 0, [], 
  [
    (store_trigger_param_1, ":agent_no"),
    (get_player_agent_no, ":player_agent"),
    
    
    (try_begin),
      (agent_get_slot, ":extra_hp", ":agent_no", slot_agent_extra_hp),
      (try_begin),
        (agent_is_human, ":agent_no"),
        (agent_get_troop_id, ":troop_no", ":agent_no"),
        (agent_has_item_equipped, ":agent_no", "itm_felguard_body"),
        (agent_has_item_equipped, ":agent_no", "itm_felguard_calf"),
        #(this_or_next|eq, ":troop_no", "trp_cheat_man"),
        #(eq,":agent_no", ":player_agent"),
        (agent_set_hit_points,":agent_no",100,0),
        (agent_set_slot, ":agent_no", slot_agent_extra_hp, 1000),
      (try_end),
      
      (try_begin),
        (eq, ":agent_no",":player_agent"),
        (player_has_item,"itm_holy_cross"),
        (agent_set_hit_points,":agent_no",100,0),
        (troop_remove_items,"trp_player","itm_holy_cross",1),
        (display_message, "@Because of the power of the cross you again stood up."),
        
        (try_begin),
          (scene_prop_get_instance, ":player_chest", "spr_inventory", 0),
          (ge, ":player_chest", 0),
          (prop_instance_get_position, pos1, ":player_chest"),
          (agent_set_position,":player_agent",pos2),
        (try_end),
        
        (player_has_item,"itm_holy_cross"),
        (call_script, "script_get_troop_max_hp", ":troop_no"),
        (assign, ":max_hp", reg0),
        (agent_set_no_death_knock_down_only, ":agent_no", 1),
        (agent_set_slot, ":agent_no", slot_agent_extra_hp, ":max_hp"),
      (try_end),
      
      
      (try_begin),
        (gt, ":extra_hp", 0),
        (agent_is_human, ":agent_no"),
        (agent_get_troop_id, ":troop_no", ":agent_no"),
        (call_script, "script_get_troop_max_hp", ":troop_no"),
        (assign, ":recovered_hp", reg0),
        (val_min, ":recovered_hp", ":extra_hp"),
        (agent_set_hit_points, ":agent_no", ":recovered_hp", 1),
        (val_sub, ":extra_hp", ":recovered_hp"),
        (agent_set_slot, ":agent_no", slot_agent_extra_hp, ":extra_hp"),
        (neg|troop_slot_eq, ":troop_no", slot_troop_special_ability_passive, undead_horse),
        (call_script,"script_kill_agent_horse", ":agent_no"), 
      (else_try),
        (gt, ":extra_hp", 0),
        (neg|agent_is_human, ":agent_no"),
        (agent_set_hit_points,":agent_no",100,0),
        (store_agent_hit_points,":max_hp",":agent_no",1),
        (val_min, ":max_hp", ":extra_hp"),
        (agent_set_hit_points, ":agent_no", ":recovered_hp", 1),
        (val_sub, ":extra_hp", ":recovered_hp"),
        (agent_set_slot, ":agent_no", slot_agent_extra_hp, ":extra_hp"),
      (try_end),  
      
      (try_begin),
        (le, ":extra_hp", 0),
        (agent_set_no_death_knock_down_only, ":agent_no", 0),
      (try_end),
    (try_end),
  ])

  
  
#healers = (10, 4, 10,[(call_script,"script_healer_run"),],    
        #[(call_script,"script_cf_healer_heal"),])

#healers_npc = (3, 4, 3,[(call_script,"script_healer_run_npc"),],    
       #[(call_script,"script_cf_healer_heal"),])
    
         
armor_modify_decrease = (
  ti_on_agent_killed_or_wounded, 0, 0, [(eq, "$g_use_special_item", 1),], 
  [(store_trigger_param_1, ":dead_agent_no"),
  (get_player_agent_no, ":player_agent"),
  (eq,":dead_agent_no", ":player_agent"),
  (call_script, "script_cf_armor_modify_decrease")])
         
custom_commander_special_strike =(
  ti_on_agent_hit, 0, 0, [],
    [
      (store_trigger_param_1, ":inflicted_agent"),
      (store_trigger_param_2, ":dealer_agent"),
      (store_trigger_param_3, ":inflicted_damage"),
      (store_trigger_param, ":hit_bone", 4),
      (store_trigger_param, ":ammo", 5),
      
      (get_player_agent_no, ":player_agent"),
      (assign, ":dealer_item_id", reg0),
      (set_fixed_point_multiplier, 1),
      (try_begin),
        (agent_is_human, ":inflicted_agent"),
        (agent_get_animation, ":anim", ":inflicted_agent", 0),
        (agent_get_troop_id, ":troop_no", ":inflicted_agent"),
        (this_or_next|eq,":troop_no", "trp_polish_which_1"),
        (this_or_next|eq,":troop_no", "trp_polish_which_2"),
        (this_or_next|eq, ":troop_no", "trp_daemon_prince_slaanesh"),
        (this_or_next|eq, ":troop_no", "trp_daemon_prince_nurgle"),
        (this_or_next|eq, ":troop_no", "trp_bone_dragon"),
        (this_or_next|eq, ":troop_no", "trp_ghost_dragon"),
        (this_or_next|eq, ":troop_no", "trp_lich_dragon"),
        (this_or_next|eq, ":troop_no", "trp_green_dragon"),
        (this_or_next|eq, ":troop_no", "trp_black_dragon"),
        (this_or_next|eq, ":troop_no", "trp_undead_magic_1"),
        (this_or_next|eq,":troop_no", "trp_red_dragon"),
        (this_or_next|eq,":troop_no", "trp_gold_dragon"),
        (troop_slot_eq, ":troop_no", slot_troop_special_ability, force_jump), 
        (this_or_next|troop_slot_eq, ":troop_no", slot_troop_special_ability, "itm_skill_dive"), 
        (this_or_next|eq, ":troop_no", "trp_undead_magic_1"),
        (this_or_next|eq, ":anim", "anim_jump"),
        (this_or_next|eq, ":anim", "anim_jump_loop"),
        (this_or_next|eq, ":anim", "anim_sw_force_jump3"),
        (this_or_next|eq, ":anim", "anim_sw_force_jump2"),
        (this_or_next|eq, ":anim", "anim_sw_force_jump2_end"),
        (this_or_next|eq, ":anim", "anim_jump_end"),
        (eq, ":anim", "anim_jump_end_hard"),
        (eq, ":dealer_agent", ":inflicted_agent"),
        (call_script, "script_cf_agent_dive2", ":inflicted_agent"),
        (set_trigger_result, 0),
      (try_end), 
      (try_begin),#新增某个武器，闪电之怒效果。穿透射击+命中单位生存5个自瞄破片
        (this_or_next|eq,":dealer_item_id","itm_gondor_javelin"),
        (eq,":ammo","itm_gondor_javelin"),
        (agent_get_bone_position, pos3, ":inflicted_agent", 8, 1),
        (agent_get_bone_position, pos1, ":dealer_agent", 8, 1),
        (call_script, "script_point_missile_position", pos1, pos3, 50),
        (position_copy_rotation, pos3, pos1),
        (add_missile, ":dealer_agent", pos3, 50, "itm_gondor_javelin", 0, "itm_gondor_javelin", 0),
        
        (assign,":max",5),
        (try_for_agents, ":possable_agent"),
          (ge,":max",1),
          (neq,":possable_agent",":inflicted_agent"),
          (agent_is_active, ":possable_agent"), 
          (agent_is_alive,":possable_agent"),
          (this_or_next|agent_is_ally,":dealer_agent"),
          (agent_is_ally,":possable_agent"),
          (this_or_next|neg|agent_is_ally,":possable_agent"),
          (neg|agent_is_ally,":dealer_agent"),
          (store_random_in_range, ":ran", 7, 10),
          (agent_get_bone_position, pos1, ":possable_agent", ":ran", 1),
          

          
          (get_distance_between_positions,":dist",pos3,pos1),
          (le,":dist",1500),
          (position_move_y, pos3, 20),

          (call_script, "script_point_missile_position", pos3, pos1, 50),
          (add_missile, ":dealer_agent", pos3, 50, "itm_glass_javelin", 0, "itm_glass_javelin", 0),
          #(val_add,":num_agents",-1),
          (val_add,":max",-1),
        (try_end), 
      (try_end),
      (try_begin),
        (neg|agent_is_human, ":inflicted_agent"),
        (agent_get_rider,":rider_agent",":dealer_agent"),
        (gt,":rider_agent",-1),
        (agent_get_troop_id, ":troop_no", ":rider_agent"),
        (assign, ":dest_damage", ":inflicted_damage"), 
        (agent_get_party_id, ":agent_party", ":rider_agent"),
        (try_begin),
          (gt, ":agent_party", -1),
          (party_stack_get_troop_id, ":party_leader", ":agent_party", 0),
          (troop_is_hero, ":party_leader"),
          (agent_get_slot, ":tenacity_level", ":inflicted_agent", slot_agent_paragon_knight_level),
          #(store_skill_level, ":tenacity_level", "skl_paragon_knight", ":party_leader"),
          (val_mul, ":tenacity_level", -8),
          (val_add, ":tenacity_level", 100),
          # damage_modifier
          (val_mul, ":dest_damage", ":tenacity_level"),
          (val_div, ":dest_damage", 100),
        (try_end),
        
        (try_begin),
          (assign, ":dest_damage_imod", 100),
          (try_begin),
            (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_foot),
            (eq, ":item_modifier", imod_thick),
            (val_add, ":dest_damage_imod", -70),
          (try_end), 
          (try_begin),
            (troop_has_item_equipped,":troop_no","itm_rider_boots"),
            (val_add, ":dest_damage_imod", -70),
          (try_end), 
          (try_begin),
            (troop_get_inventory_slot_modifier, ":item_modifier",":troop_no", ek_gloves),
            (eq, ":item_modifier", imod_superb),
            (assign, ":dest_damage", ":inflicted_damage"),
            (val_add, ":dest_damage_imod", -30),
          (try_end),   
          (val_mul, ":dest_damage", ":dest_damage_imod"),
          (val_div, ":dest_damage", 100),
        (try_end),   
        
        (try_begin),
          (this_or_next|troop_slot_eq, ":troop_no", slot_troop_special_ability, force_jump), 
          (troop_slot_eq, ":troop_no", slot_troop_special_ability, dive),
          (agent_get_animation, ":anim", ":inflicted_agent", 0),
          (this_or_next|eq, ":anim", "anim_horse_jump"),
          (this_or_next|eq, ":anim", "anim_horse_jump_end"),
          (this_or_next|eq, ":anim", "anim_horse_jump2"),
          (this_or_next|eq, ":anim", "anim_horse_jump_end2"),
          (eq, ":dealer_agent", ":inflicted_agent"),
          #(call_script, "script_cf_agent_dive2", ":rider_agent"),
          (assign, ":dest_damage", 0),
        (try_end),  
        (set_trigger_result, ":dest_damage"),
      (try_end),
      
      (try_begin),
        (agent_is_human, ":dealer_agent"),
        (agent_is_human, ":inflicted_agent"),
        (agent_get_slot, ":extra_hp", ":inflicted_agent", slot_agent_extra_shield),
        (try_begin),
          (try_begin),
            (gt, ":dealer_item_id", 0),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_two_hand_2"),
              (eq, ":item_type", itp_type_two_handed_wpn),
              (val_mul, ":inflicted_damage", 150), 
              (val_div, ":inflicted_damage", 100), 
            (else_try),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_thrown_3"),
              (eq, ":item_type", itp_type_thrown),
              (val_mul, ":inflicted_damage", 150), 
              (val_div, ":inflicted_damage", 100), 
            (else_try),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_polearm_5"),
              (eq, ":item_type", itp_type_polearm),
              (agent_get_horse, ":dealer_agent_horse_id", ":dealer_agent"),
              (gt, ":dealer_agent_horse_id", 0),  
              (val_mul, ":inflicted_damage", 200), 
              (val_div, ":inflicted_damage", 100), 
            (try_end),  
            
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_crossbow_6"),
              (eq, ":item_type", itp_type_crossbow),
              (assign, ":extra_hp", 0), 
            (else_try),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_polearm_6"),
              (eq, ":item_type", itp_type_polearm),
              (agent_get_action_dir, ":action_dir_attacker", ":dealer_agent"),
              (eq, ":action_dir_attacker", 0), #down
              (assign, ":extra_hp", 0), 
            (try_end),  
          (try_end),  
          (gt, ":extra_hp", 0),
          (call_script, "script_change_agent_shield", ":inflicted_agent", ":inflicted_damage"),
          (assign, ":inflicted_damage", 0), 
          (set_trigger_result, ":inflicted_damage"),
        (try_end),
      (try_end), 
      (gt, ":inflicted_damage", 0),
      
      (try_begin),
        (agent_is_human, ":inflicted_agent"), 
        #(agent_is_non_player, ":inflicted_agent"), 
        #(call_script, "script_overflow_damage_effect_extra_hp", ":inflicted_agent", ":inflicted_damage"),
        
        (try_begin),
          (eq, ":dealer_item_id", -1),
          (agent_is_human, ":dealer_agent"),
          (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
          (lt,":weapon",0),
          (assign, ":dest_damage", ":inflicted_damage"), 
          (agent_get_troop_id, ":dealer_troop", ":dealer_agent"),
          
          (store_skill_level, ":power_1", "skl_power_strike", ":dealer_troop"),
          (store_skill_level, ":power_2", "skl_physique", ":dealer_troop"),
          (store_skill_level, ":power_3", "skl_ironflesh", ":dealer_troop"),
          (store_skill_level, ":power_4", "skl_shield", ":dealer_troop"),
          (store_skill_level, ":power_5", "skl_power_throw", ":dealer_troop"),
          (val_add, ":power_1", ":power_2"),
          (val_add, ":power_1", ":power_3"),
          (val_add, ":power_1", ":power_4"),
          (val_mul, ":power_5", 5),
          (val_add, ":power_1", ":power_5"),
          (val_add, ":dest_damage", ":power_1"),
          (try_begin),
            (agent_has_item_equipped,":dealer_agent","itm_drakons_lesson"),
            (val_add, ":dest_damage", 50),
            (neg|agent_slot_ge,":inflicted_agent",slot_agent_extra_shield,1),
            (call_script, "script_cf_agent_set_animation",  ":inflicted_agent", "anim_bash_stun",0),  
            (agent_get_position,pos3,":inflicted_agent"),
            (position_move_z, pos3, 200),
            (particle_system_burst,"psys_stun_effect",pos3,1),
            #(call_script,"script_cf_agent_shield_bash",":dealer_agent", ":inflicted_agent"),
          (try_end),
          (set_trigger_result, ":dest_damage"),
        (try_end),
            
        (try_begin),
            (neg|agent_is_human, ":dealer_agent"),
            (agent_is_human, ":inflicted_agent"),
            (agent_get_item_id, ":horse", ":dealer_agent"),
            (ge, ":horse", 0),
            (item_get_horse_charge_damage, ":horse_charge", ":horse"),
            (agent_get_rider,":rider_agent",":dealer_agent"),
            (gt,":rider_agent",-1),
            (agent_get_troop_id, ":troop_no", ":rider_agent"),
            (set_fixed_point_multiplier, 1),
            
            (assign, ":dest_damage", ":inflicted_damage"), 
            (agent_get_speed, pos1, ":rider_agent"),
            (position_get_y, ":agent_speed", pos1),

            
            (agent_get_party_id, ":agent_party", ":rider_agent"),
            (try_begin),
              (gt, ":agent_party", -1),
              (party_stack_get_troop_id, ":party_leader", ":agent_party", 0),
              (troop_is_hero, ":party_leader"),
              (agent_get_slot, ":tenacity_level", ":inflicted_agent", slot_agent_paragon_knight_level),
              #(store_skill_level, ":tenacity_level", "skl_paragon_knight", ":party_leader"),
              (val_mul, ":tenacity_level", 20),
              (val_add, ":tenacity_level", 100),
              # damage_modifier
              (val_mul, ":dest_damage", ":tenacity_level"),
              (val_div, ":dest_damage", 100),
              (val_mul, ":horse_charge", ":tenacity_level"),
              (val_div, ":horse_charge", 100),
            (try_end),
            
            (try_begin),
              (this_or_next|eq, ":troop_no", "trp_german_knight_4"),
              (le, ":agent_speed", 50),
              (call_script, "script_horse_attack_agent", ":dealer_agent", ":inflicted_agent"),
            (try_end),
            (try_begin),
              (store_current_scene,":current_scene"),
              (neg|is_between, ":current_scene", "scn_town_1_arena", "scn_town_1_prison"),
              (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
              (agent_get_slot, ":timer", ":rider_agent", slot_agent_special_ability_passiv_counter),
              (this_or_next|eq, ":troop_no", "trp_german_knight_4"),
              (gt, ":timer", 0),
              (this_or_next|eq, ":troop_no", "trp_german_knight_4"),
              (troop_slot_eq, ":troop_no", slot_troop_special_ability_passive, powercharge), 
              (val_add, ":horse_charge", 50), 
              (val_add, ":agent_speed", 10), 
              (val_add, ":dest_damage", 25), 
            (try_end),
            (try_begin),
              (this_or_next|eq, ":troop_no", "trp_german_knight_4"),
              (ge, ":agent_speed", 50),
                
              (call_script, "script_get_total_equipment_weight_agent", ":inflicted_agent"),
              (assign, ":total_weight", reg0),
              (store_mul,":twice_weight",":total_weight", 2),
              (try_begin),
                (ge,":horse_charge",":twice_weight"),
                (neg|agent_slot_ge,":inflicted_agent",slot_agent_extra_shield,1),
                (call_script, "script_cf_agent_set_animation",  ":inflicted_agent", "anim_bash_out_2",0),
                (val_add, ":dest_damage", ":horse_charge"), 
                (val_add, ":dest_damage", ":horse_charge"), 
              (else_try),
                #(troop_slot_eq, ":troop_no", slot_troop_special_ability_passive, powercharge), 
                (ge,":horse_charge",":total_weight"),
                (val_add, ":dest_damage", ":horse_charge"), 
                (neg|agent_slot_ge,":inflicted_agent",slot_agent_extra_shield,1),
                (agent_get_position, pos30, ":inflicted_agent"),
                (position_move_z, pos30, 200),
                (particle_system_burst, "psys_stun_effect", pos30, 1),
                (call_script, "script_cf_agent_set_animation",  ":inflicted_agent", "anim_bash_knocked",0),
              (try_end),
            (try_end),
            (set_trigger_result, ":dest_damage"),
        (try_end),
      (try_end), 
      
      (try_begin),
        (neg|agent_slot_eq, ":inflicted_agent", slot_agent_special_damage_type, power_jump),
        (agent_set_no_dynamics, ":inflicted_agent", 0),
      (try_end),          
      (try_begin),
        (agent_is_human, ":dealer_agent"),
        (agent_is_human, ":inflicted_agent"),
        (agent_get_troop_id, ":inflicted_troop", ":inflicted_agent"),
        (agent_get_troop_id, ":dealer_troop", ":dealer_agent"),
        (assign,":block_attack",0),
          
        (assign, ":reduced_damage_percent", 0), 
                
        (try_begin),
          (gt, ":dealer_item_id", -1),
          (item_get_type, ":item_type", ":dealer_item_id"),
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_one_hand_1"),
            (neg|item_has_property, ":dealer_item_id", itp_two_handed),
            (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
            (eq, ":item_type", itp_type_one_handed_wpn),
            (val_add, ":inflicted_damage", 10), 
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_two_hand_1"),
            (eq, ":item_type", itp_type_two_handed_wpn),
            (val_add, ":inflicted_damage", 10), 
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_polearm_1"),
            (eq, ":item_type", itp_type_polearm),
            (val_add, ":inflicted_damage", 10), 
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_bow_1"),
            (eq, ":item_type", itp_type_bow),
            (val_add, ":inflicted_damage", 10), 
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_crossbow_1"),
            (eq, ":item_type", itp_type_crossbow),
            (val_add, ":inflicted_damage", 10), 
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_thrown_1"),
            (eq, ":item_type", itp_type_thrown),
            (val_add, ":inflicted_damage", 10), 
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_musket_1"),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (val_add, ":inflicted_damage", 10), 
          (try_end),
                    
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_two_hand_2"),
            (eq, ":item_type", itp_type_two_handed_wpn),
            (val_add, ":reduced_damage_percent", -20), 
            (agent_get_action_dir, ":action_dir_attacker", ":dealer_agent"),
            (eq, ":action_dir_attacker", 3), #up
            (store_mul, ":extra", ":inflicted_damage", 25),
            (val_div, ":extra", 100),
            (val_add, ":inflicted_damage", ":extra"), 
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_polearm_2"),
            (eq, ":item_type", itp_type_polearm),
            (val_add, ":inflicted_damage", 20), 
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_crossbow_3"),
            (eq, ":item_type", itp_type_crossbow),
            (val_add, ":reduced_damage_percent", -25), 
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_bow_2"),
            (eq, ":item_type", itp_type_bow),
            (val_add, ":reduced_damage_percent", -15), 
            (try_begin),
              (this_or_next | eq, ":hit_bone", hb_head),
              (this_or_next | eq, ":hit_bone", hb_thorax),
              (this_or_next | eq, ":hit_bone", hb_shoulder_l),
              (this_or_next | eq, ":hit_bone", hb_upperarm_l),
              (this_or_next | eq, ":hit_bone", hb_upperarm_r),
              (eq, ":hit_bone", hb_shoulder_r),

              (store_mul, ":extra", ":inflicted_damage", 100),
            (else_try),
              (store_mul, ":extra", ":inflicted_damage", 15),
            (try_end),
            (val_div, ":extra", 100),
            (val_add, ":inflicted_damage", ":extra"), 
            
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_thrown_5"),
            (eq, ":item_type", itp_type_thrown),
            (try_begin),
              (this_or_next | eq, ":hit_bone", hb_head),
              (this_or_next | eq, ":hit_bone", hb_thorax),
              (this_or_next | eq, ":hit_bone", hb_shoulder_l),
              (this_or_next | eq, ":hit_bone", hb_upperarm_l),
              (this_or_next | eq, ":hit_bone", hb_upperarm_r),
              (eq, ":hit_bone", hb_shoulder_r),
              (store_random_in_range, ":r1", 0, 100),
              (le, ":r1", 33),
              (agent_set_hit_points,":inflicted_agent",0, 1),
              (val_mul, ":inflicted_damage", 2),
            (else_try),
              (store_agent_hit_points, ":hp", ":inflicted_agent"),
              (le, ":hp", 50),
              (val_mul, ":inflicted_damage", 2), 
            (try_end),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_thrown_4"),
            (eq, ":item_type", itp_type_thrown),
            (try_begin),
              (neg|troop_is_hero, ":inflicted_troop"),
        
              (agent_is_human,":inflicted_agent"),
              (agent_get_horse,":horse",":inflicted_agent"),
              (agent_is_active,":horse"),
              (agent_is_alive,":horse"),

              (agent_start_running_away,":horse"),
              (agent_stop_running_away,":horse"),
        
              (store_random_in_range,":anim","anim_rider_fall_right","anim_strike_chest_front_stop"),
              (agent_set_animation,":inflicted_agent",":anim"),
            (else_try),
              (call_script, "script_cf_agent_set_animation",  ":inflicted_agent", "anim_bash_stun",0),  
              (agent_get_position,pos3,":inflicted_agent"),
              (position_move_z, pos3, 200),
              (particle_system_burst,"psys_stun_effect",pos3,1),
            (try_end),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_crossbow_4"),
            (eq, ":item_type", itp_type_crossbow),
            (store_mul, ":extra", ":inflicted_damage", 10),
            (val_div, ":extra", 100),
            (val_add, ":inflicted_damage", ":extra"), 
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_crossbow_5"),
            (eq, ":item_type", itp_type_crossbow),
            (store_mul, ":extra", ":inflicted_damage", 25),
            (val_div, ":extra", 100),
            (val_add, ":inflicted_damage", ":extra"), 

            (this_or_next | eq, ":hit_bone", hb_head),
            (this_or_next | eq, ":hit_bone", hb_thorax),
            (this_or_next | eq, ":hit_bone", hb_shoulder_l),
            (this_or_next | eq, ":hit_bone", hb_upperarm_l),
            (this_or_next | eq, ":hit_bone", hb_upperarm_r),
            (eq, ":hit_bone", hb_shoulder_r),

            (troop_get_slot, ":dealer_troop_max_hp", ":dealer_troop", slot_troop_max_hp),
            (troop_get_slot, ":inflicted_troop_max_hp", ":inflicted_troop", slot_troop_max_hp),
            
            (val_div, ":dealer_troop_max_hp", 3),
            
            (store_random_in_range, ":random_no", 0, ":inflicted_troop_max_hp"),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            
            (this_or_next|ge,":random_no", ":inflicted_agent_hp"),
            (ge, ":dealer_troop_max_hp", ":inflicted_troop_max_hp"),
            (agent_set_hit_points,":inflicted_agent",0,0),
            (val_add, ":inflicted_damage", 100),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_crossbow_6"),
            (eq, ":item_type", itp_type_crossbow),
            (store_mul, ":extra", ":inflicted_damage", 10),
            (val_div, ":extra", 100),
            (val_add, ":inflicted_damage", ":extra"), 
            (agent_get_position, pos1, ":inflicted_agent"),
            (agent_get_position, pos2, ":dealer_agent"),
            (position_is_behind_position, pos2, pos1),

            (troop_get_slot, ":dealer_troop_max_hp", ":dealer_troop", slot_troop_max_hp),
            (troop_get_slot, ":inflicted_troop_max_hp", ":inflicted_troop", slot_troop_max_hp),
            
            (val_div, ":dealer_troop_max_hp", 3),
            
            (store_random_in_range, ":random_no", 0, ":inflicted_troop_max_hp"),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            
            (this_or_next|ge,":random_no", ":inflicted_agent_hp"),
            (ge, ":dealer_troop_max_hp", ":inflicted_troop_max_hp"),
            (agent_set_hit_points,":inflicted_agent",0,0),
            (val_add, ":inflicted_damage", 100),
          (try_end),
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_crossbow_7"),
            (eq, ":item_type", itp_type_crossbow),
            (call_script, "script_cf_agent_set_animation",  ":inflicted_agent", "anim_bash_stun",0),  
            (agent_get_position,pos3,":inflicted_agent"),
            (position_move_z, pos3, 200),
            (particle_system_burst,"psys_stun_effect",pos3,1),
            
            (store_random_in_range, ":random_no", 0, 100),
            (le, ":random_no", 10),
            (agent_set_hit_points,":inflicted_agent",0, 1),
            (val_mul, ":inflicted_damage", 2),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_musket_4"),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (store_mul, ":extra", ":inflicted_damage", 50),
            (val_div, ":extra", 100),
            (val_add, ":inflicted_damage", ":extra"), 
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_polearm_6"),
            (eq, ":item_type", itp_type_polearm),
            (agent_get_action_dir, ":action_dir_attacker", ":dealer_agent"),
            (eq, ":action_dir_attacker", 0), #down
            (val_add, ":inflicted_damage", 100), 
          (try_end),
          
          (try_begin),
            (assign, ":pass", 0),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_polearm_2"),
              (eq, ":item_type", itp_type_polearm),
              (assign, ":pass", 1),
            (else_try),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_thrown_2"),
              (eq, ":item_type", itp_type_thrown),
              (assign, ":pass", 1),
            (else_try),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_crossbow_3"),
              (eq, ":item_type", itp_type_crossbow),
              (assign, ":pass", 1),
            (else_try),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_bow_3"),
              (eq, ":item_type", itp_type_bow),
              (assign, ":pass", 2),
            (try_end),
            (ge, ":pass", 1),
            (assign, ":extra", 0),
            (try_begin),
              (neg|agent_is_human, ":inflicted_agent"),
              (store_mul, ":extra", ":inflicted_damage", 50),
              (val_div, ":extra", 100),
            (else_try),
              (eq, ":pass", 1),
              (troop_get_type, ":agent_gender", ":inflicted_troop"),
              (this_or_next|eq, ":agent_gender", tf_beastman),
              (this_or_next|eq, ":agent_gender", tf_ogre),
              (this_or_next|eq, ":agent_gender", tf_giant_dwarf),
              (this_or_next|eq, ":agent_gender", tf_titan),
              (eq, ":agent_gender", tf_troll),
              (store_mul, ":extra", ":inflicted_damage", 50),
              (val_div, ":extra", 100),
            (try_end),
            (val_add, ":inflicted_damage", ":extra"), 
          (try_end),
          
        (try_begin),
          (agent_get_horse, ":dealer_agent_horse_id", ":dealer_agent"),
          (gt, ":dealer_agent_horse_id", 0),  
          (item_get_type, ":item_type", ":dealer_item_id"),
          (eq, ":item_type", itp_type_polearm),
          (assign, ":extra", 0),
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_polearm_3"),
            (store_mul, ":extra", ":inflicted_damage", 15),
            (val_div, ":extra", 100),
            (val_add, ":inflicted_damage", ":extra"), 
            (agent_get_animation, ":cur_animation", ":dealer_agent", 1),
            (this_or_next|eq, ":cur_animation", "anim_lancer_charge_parried"),
            (this_or_next|eq, ":cur_animation", "anim_lancer_ride_4"),
            (eq, ":cur_animation", "anim_lancer_ride_4_no_shield"),          
            (item_has_property, ":dealer_item_id", itp_couchable),
            (agent_set_hit_points,":inflicted_agent",0, 1),
            (val_mul, ":inflicted_damage", 2),
            (agent_unequip_item, ":dealer_agent", ":dealer_item_id"),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_polearm_5"),
            (store_mul, ":extra", ":inflicted_damage", 25),
            (val_div, ":extra", 100),
            (val_add, ":inflicted_damage", ":extra"), 
            (agent_get_animation, ":cur_animation", ":dealer_agent", 1),
            (this_or_next|eq, ":cur_animation", "anim_lancer_charge_parried"),
            (this_or_next|eq, ":cur_animation", "anim_lancer_ride_4"),
            (eq, ":cur_animation", "anim_lancer_ride_4_no_shield"),          
            (item_has_property, ":dealer_item_id", itp_couchable),
            (troop_get_slot, ":dealer_troop_max_hp", ":dealer_troop", slot_troop_max_hp),
            (troop_get_slot, ":inflicted_troop_max_hp", ":inflicted_troop", slot_troop_max_hp),
            
            (val_div, ":dealer_troop_max_hp", 3),
            
            (store_random_in_range, ":random_no", 0, ":inflicted_troop_max_hp"),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            
            (this_or_next|ge,":random_no", ":inflicted_agent_hp"),
            (ge, ":dealer_troop_max_hp", ":inflicted_troop_max_hp"),
            (agent_set_hit_points,":inflicted_agent",0,0),
            (val_add, ":inflicted_damage", 100),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_bow_5"),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (eq, ":item_type", itp_type_bow),
            
            (store_mul, ":extra", ":inflicted_damage", 20),
            (val_div, ":extra", 100),
            (val_add, ":inflicted_damage", ":extra"), 
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_bow_6"),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (eq, ":item_type", itp_type_bow),
            (val_add, ":inflicted_damage", 100), 

            (troop_get_slot, ":dealer_troop_max_hp", ":dealer_troop", slot_troop_max_hp),
            (troop_get_slot, ":inflicted_troop_max_hp", ":inflicted_troop", slot_troop_max_hp),
            
            (val_div, ":dealer_troop_max_hp", 3),
            
            (store_random_in_range, ":random_no", 0, ":inflicted_troop_max_hp"),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            
            (this_or_next|ge,":random_no", ":inflicted_agent_hp"),
            (ge, ":dealer_troop_max_hp", ":inflicted_troop_max_hp"),
            (agent_set_hit_points,":inflicted_agent",0,0),
            (val_add, ":inflicted_damage", 100),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_one_hand_7"),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (neg|item_has_property, ":dealer_item_id", itp_two_handed),
            (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
            (eq, ":item_type", itp_type_one_handed_wpn),
            (val_add, ":reduced_damage_percent", -1000), 
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_musket_7"),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (val_add, ":reduced_damage_percent", -1000), 
            (store_random_in_range, ":random_no", 0, 100),
            (le, ":random_no", 10),
            (agent_set_hit_points,":inflicted_agent",0, 1),
            (val_mul, ":inflicted_damage", 2),
          (try_end),
          
        (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_one_hand_2"),
            (agent_get_wielded_item,":shield",":inflicted_agent",1), 
            (gt, ":shield", 0),
            (item_get_type, ":weapontype", ":shield"),
            (eq, ":weapontype", itp_type_shield),
            (val_add, ":reduced_damage_percent", 10), 
          (try_end),
          
          (try_begin),
            (agent_get_wielded_item, ":wielded", ":inflicted_agent", 0),
            (gt, ":wielded", 0),
            (item_get_type, ":type", ":wielded"),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_musket_2"),
              (this_or_next|eq, ":type", itp_type_pistol),
              (eq, ":type", itp_type_musket),
              (val_add, ":reduced_damage_percent", 15), 
            (else_try),  
              (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_crossbow_2"),
              (eq, ":type", itp_type_crossbow),
              (val_add, ":reduced_damage_percent", 15), 
            (else_try),
              (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_polearm_2"),
              (eq, ":type", itp_type_polearm),
              (val_add, ":reduced_damage_percent", 15), 
            (try_end),
          (try_end),
          
        (try_end),
        
        (assign, ":dest_damage", ":inflicted_damage"),
        
        (try_begin),
          (try_begin),
            (troop_is_hero,":inflicted_troop"),
           # (neg|eq,":dealer_item_id","itm_undead_scythe"),
           # (neg|eq,":dealer_item_id","itm_rhongomiant"),
            (troop_get_inventory_slot_modifier, ":item_modifier",":inflicted_troop", ek_gloves),
            (try_begin),
              (eq, ":item_modifier", imod_sturdy),
              (val_add, ":reduced_damage_percent", 10), 
            (else_try),
              (eq, ":item_modifier", imod_reinforced),
              (val_add, ":reduced_damage_percent", 20), 
            (else_try),
              (eq, ":item_modifier", imod_lordly),
              (val_add, ":reduced_damage_percent", 15), 
            (try_end),
            
            (troop_get_inventory_slot_modifier, ":item_modifier",":inflicted_troop", ek_head),
            (try_begin),
              (eq, ":item_modifier", imod_sturdy),
              (val_add, ":reduced_damage_percent", 10), 
            (else_try),
              (eq, ":item_modifier", imod_reinforced),
              (val_add, ":reduced_damage_percent", 20), 
            (else_try),
              (eq, ":item_modifier", imod_lordly),
              (val_add, ":reduced_damage_percent", 15), 
            (try_end),

            (troop_get_inventory_slot_modifier, ":item_modifier",":inflicted_troop", ek_body),
            (try_begin),
              (eq, ":item_modifier", imod_sturdy),
              (val_add, ":reduced_damage_percent", 15), 
            (else_try),
              (eq, ":item_modifier", imod_reinforced),
              (val_add, ":reduced_damage_percent", 20), 
            (else_try),
              (eq, ":item_modifier", imod_thick),
              (val_add, ":reduced_damage_percent", 15), 
            (else_try),
              (eq, ":item_modifier", imod_lordly),
              (val_add, ":reduced_damage_percent", 15), 
            (try_end),

            (troop_get_inventory_slot_modifier, ":item_modifier",":inflicted_troop", ek_foot),
            (try_begin),
              (eq, ":item_modifier", imod_sturdy),
              (val_add, ":reduced_damage_percent", 10), 
            (else_try),
              (eq, ":item_modifier", imod_reinforced),
              (val_add, ":reduced_damage_percent", 20), 
            (else_try),
              (eq, ":item_modifier", imod_lordly),
              (val_add, ":reduced_damage_percent", 15), 
            (try_end),
            
            (try_begin),
              (agent_has_item_equipped,":inflicted_agent","itm_black_hole_plate"),
              (val_add, ":reduced_damage_percent", 40), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_glass_female_plate"),
              (val_add, ":reduced_damage_percent", 10), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_glass_male_plate"),
              (val_add, ":reduced_damage_percent", 10), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_ebony_male_plate"),
              (val_add, ":reduced_damage_percent", 15),
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_maximilian_plate"),
              (val_add, ":reduced_damage_percent", 15), 
            (try_end),
              

            (try_begin),
              (agent_has_item_equipped,":inflicted_agent","itm_glass_foot"),
              (val_add, ":reduced_damage_percent", 10), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_maximilian_greaves"),
              (val_add, ":reduced_damage_percent", 15), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_ebony_male_foot"),
              (val_add, ":reduced_damage_percent", 15), 
            (try_end),
            
            (try_begin),
              (agent_has_item_equipped,":inflicted_agent","itm_glass_head"),
              (val_add, ":reduced_damage_percent", 10), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_mirkwood_helm_e"),
              (val_add, ":reduced_damage_percent", 10), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_ebony_male_head"),
              (val_add, ":reduced_damage_percent", 15), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_maximilian_sallet"),
              (val_add, ":reduced_damage_percent", 15), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_maximilian_sallet_2"),
              (val_add, ":reduced_damage_percent", 15), 
            (try_end),
            
            (try_begin),
              (agent_has_item_equipped,":inflicted_agent","itm_glass_hand"),
              (val_add, ":reduced_damage_percent", 10), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_ebony_male_hand"),
              (val_add, ":reduced_damage_percent", 15), 
            (else_try),
              (agent_has_item_equipped,":inflicted_agent","itm_maximilian_gauntlets"),
              (val_add, ":reduced_damage_percent", 15), 
            (try_end),
          (try_end),
          
          (try_begin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_buff_affect_type, "itm_magic_harmonic_convergence"), 
            (val_add, ":reduced_damage_percent", 25), 
          (else_try),
            (agent_slot_ge, ":inflicted_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_buff_affect_type, "itm_magic_cascading_fire_cloak"), 
            (val_add, ":reduced_damage_percent", 25), 
          (else_try), 
            (agent_slot_ge, ":inflicted_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_buff_affect_type, "itm_magic_panns_impenetrable_belt"), 
            (val_add, ":reduced_damage_percent", 30), 
          (else_try), 
            (agent_slot_ge, ":inflicted_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_buff_affect_type, "itm_magic_shield_of_cold"), 
            (val_add, ":reduced_damage_percent", 60), 
          (else_try), 
            (agent_slot_ge, ":inflicted_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_buff_affect_type, "itm_magic_flesh_to_stone"), 
            (val_add, ":reduced_damage_percent", 60), 
          (else_try), 
            (agent_slot_ge, ":inflicted_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_buff_affect_type, "itm_magic_blades_of_putrefaction"), 
            (val_add, ":reduced_damage_percent", 50), 
          (else_try), 
            (agent_slot_ge, ":inflicted_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_buff_affect_type, "itm_magic_phas_protection"), 
            (val_add, ":reduced_damage_percent", 30), 
          (try_end),
          
                    
          
          (try_begin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_curse_of_arrow_attraction"), 
            (gt, ":dealer_item_id", -1),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_thrown),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (val_add, ":reduced_damage_percent", -50), 
          (try_end),
          
          (try_begin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_special_ability_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_affect_type, "itm_bash_Yrden"), 
            (gt, ":dealer_item_id", -1),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_thrown),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (val_add, ":reduced_damage_percent", 1000), 
          (try_end),
          
          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":dealer_agent", slot_agent_debuff_affect_type, "itm_magic_transmutation_of_lead"), 
            (val_add, ":reduced_damage_percent", 30), 
          (try_end),
          
          (try_begin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_curse_of_anraheir"), 
            (val_add, ":reduced_damage_percent", -30), 
          (else_try),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_curse_of_the_midnight_wind"), 
            (val_add, ":reduced_damage_percent", -30), 
          (else_try),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_soulblight"), 
            (val_add, ":reduced_damage_percent", -20), 
          (else_try),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_frozen_ground"), 
            (val_add, ":reduced_damage_percent", -50), 
          (try_end),
          
          
          
          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":dealer_agent", slot_agent_buff_affect_type, "itm_magic_okkams_mindrazor"), 
            (val_add, ":reduced_damage_percent", -100), 
          (else_try),
            (agent_slot_ge, ":dealer_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":dealer_agent", slot_agent_buff_affect_type, "itm_magic_frostblade"), 
            (val_add, ":reduced_damage_percent", -33), 
          (else_try),
            (agent_slot_ge, ":dealer_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":dealer_agent", slot_agent_buff_affect_type, "itm_magic_hysterical_frenzy"), 
            (val_add, ":reduced_damage_percent", -33), 
          (try_end),
          
          
          (try_begin),
            ## ca_agility reduce damage by 1% per point
            (store_attribute_level, ":agility", ":inflicted_troop", ca_agility),
            (val_min, ":agility", 51),
            (store_mul, ":reduced_damage_2", ":agility", 1),
            (val_mul, ":reduced_damage_2", ":dest_damage"),
            (val_div, ":reduced_damage_2", 100),
            (val_sub, ":dest_damage", ":reduced_damage_2"),
            
            (try_begin),
              (agent_has_item_equipped,":inflicted_agent","itm_enchanter_robe"),
              (val_mul, ":dest_damage", 75),
              (val_div, ":dest_damage", 100),
            (try_end),


            ## skl_tenacity, reduce damage by 5% per level
            (agent_get_party_id, ":agent_party", ":inflicted_agent"),
            (try_begin),
              (gt, ":agent_party", -1),
              (party_stack_get_troop_id, ":party_leader", ":agent_party", 0),
              (troop_is_hero, ":party_leader"),
              (agent_get_slot, ":tenacity_level", ":inflicted_agent", slot_agent_tenacity_level),
              #(store_skill_level, ":tenacity_level", "skl_tenacity", ":party_leader"),
              (val_mul, ":tenacity_level", 3),
              (try_begin),
                (agent_get_horse,":horse",":inflicted_agent"),
                (gt,":horse",0),
                (agent_get_slot, ":paragon_knight_level", ":inflicted_agent", slot_agent_paragon_knight_level),
                #(store_skill_level, ":paragon_knight_level", "skl_paragon_knight", ":party_leader"),
                (val_mul, ":paragon_knight_level", 4),
                (val_add, ":tenacity_level", ":paragon_knight_level"),
              (try_end),
              
              (val_add, ":reduced_damage_percent", ":tenacity_level"),
            (try_end),
          (try_end),
          
          (try_begin),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_damage_type, marked_for_death),
            (agent_get_slot, ":timer", ":inflicted_agent", slot_agent_special_damage_time),
            (gt,":timer", 0),
            (agent_get_slot, ":power", ":inflicted_agent", slot_agent_special_damage_power),
            (val_mul,":power", -10),
            (val_add, ":reduced_damage_percent", ":power"),
          (try_end),
          
          (assign, ":reduced_damage_percent_2", 0), 
          (try_begin),
            (gt, ":reduced_damage_percent", 0), 
            (val_min, ":reduced_damage_percent", 90), 
            (assign, ":reduced_damage_percent_2", ":reduced_damage_percent"), 
            # damage_modifier
            (val_mul, ":reduced_damage_percent", -1),
            (val_add, ":reduced_damage_percent", 100),
            (val_mul, ":dest_damage", ":reduced_damage_percent"),
            (val_div, ":dest_damage", 100),
            (assign, ":inflicted_damage", ":dest_damage"), 
            #(val_mul, ":reduced_damage_percent", ":dest_damage"),
            #(val_div, ":reduced_damage_percent", 100),
            #(val_sub, ":dest_damage", ":reduced_damage_percent"),
            #(val_max, ":dest_damage", 0),
            (assign, reg1, ":reduced_damage_percent_2"),
            (try_begin),
              (eq, "$g_report_shot_distance", 1),
              (eq, ":inflicted_agent",":player_agent"),
              (display_message, "@your armor Deflect enemy attack, decreased {reg1}% damage"),
            (else_try),
              (eq, "$g_report_shot_distance", 1),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@your attack Deflect by enemy armor , decreased {reg1}% damage"),
            (try_end),
          (try_end),
          
          (try_begin),
            (ge, ":reduced_damage_percent_2", 60), 
            (eq,":block_attack",0),
            (assign,":block_attack",1),
          (try_end),
          
        (try_end),
        
        
        (gt, ":dealer_item_id", -1),
        
        
        (try_begin),
        
          (ge, ":dealer_agent", 0),
          (eq, ":player_agent", ":dealer_agent"),
          (neg|eq, ":player_agent", ":inflicted_agent"),
        
          (agent_get_team, ":agent_team", ":inflicted_agent"),
          (agent_get_team, ":team_no", ":player_agent"),
          (teams_are_enemies, ":agent_team", ":team_no"),
          (agent_get_slot, "$g_show_hp_agent", ":player_agent", slot_agent_player_target),

           
          #(assign, ":player_target", ":inflicted_agent"),
          (assign, ":agent_curhp", -1),
          (store_agent_hit_points, ":agent_curhp", ":inflicted_agent"),
          (gt, ":agent_curhp", -1),
          (store_mission_timer_a_msec, "$g_enemy_hpbar_checktime"),
          (neg|eq, "$g_show_hp_agent", ":inflicted_agent"),
          (assign, "$g_show_hp_agent", ":inflicted_agent"),
          (agent_set_slot, ":player_agent", slot_agent_player_target, "$g_show_hp_agent"),  
          (assign, "$g_enemy_hpbar_showtime", 0),
          (store_mul, "$g_show_hp_agent_curhp", ":agent_curhp", -1),
        (try_end),
        
        

        
       
        (try_begin),
          (agent_get_horse, ":dealer_agent_horse_id", ":dealer_agent"),
          (gt, ":dealer_agent_horse_id", 0),  
          (gt, ":inflicted_damage", 10), 
          (assign,":block_attack",-1),
        
          (item_get_type, ":item_type", ":dealer_item_id"),

          (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
          (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
          (eq, ":item_type", itp_type_polearm),
          (call_script, "script_horse_attack_agent", ":dealer_agent_horse_id", ":inflicted_agent"),
          (eq, ":item_type", itp_type_polearm),
          (try_begin),
            (agent_get_animation, ":cur_animation", ":dealer_agent", 1),
            (this_or_next|eq, ":cur_animation", "anim_lancer_charge_parried"),
            (this_or_next|eq, ":cur_animation", "anim_lancer_ride_4"),
            (eq, ":cur_animation", "anim_lancer_ride_4_no_shield"),          
            (item_has_property, ":dealer_item_id", itp_couchable),
            (assign, ":crush_through", 2),
            #(gt, ":inflicted_damage", 30),  
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, wound),
                                                                                      
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 10),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 10),
            (agent_get_horse, ":horse_agent", ":inflicted_agent"),
            (try_begin),
              (gt, ":horse_agent", -1),
              (call_script, "script_cf_knocked_off_horses", ":inflicted_agent", ":inflicted_damage", ":dealer_item_id"),
            (else_try), # dismounted, athletics skill reduce 5% damage per level 
              (call_script, "script_cf_agent_set_animation",  ":inflicted_agent", "anim_bash_out_2",0),
            (try_end),
          (try_end),
        (try_end),
        
        (try_begin),
          (assign, ":dest_damage", ":inflicted_damage"),
          
          
          #(assign, ":reduced_damage_percent", 0), 
          (assign, ":reduced_damage", 0), 
          (try_begin),
            (neg|agent_slot_eq, ":inflicted_agent", slot_agent_special_damage_type, marked_for_death),
            (neg|eq, ":dealer_troop", "trp_ghost_dragon"),
            (neg|eq, ":dealer_troop", "trp_demon_4_3"),
            (neg|eq,":dealer_item_id","itm_gungnir"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (neg|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
            (neg|eq,":dealer_item_id","itm_serpent_dagger"),
            (neg|eq,":dealer_item_id","itm_undead_scythe"),
            (neg|eq,":dealer_item_id","itm_rhongomiant"),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (agent_is_human, ":inflicted_agent"),
            (agent_get_slot, ":skl_level", ":inflicted_agent", slot_agent_weapon_master_level),
            (agent_get_horse, ":horse_agent", ":inflicted_agent"),
            (try_begin), # mounted, riding skill reduce 5% damage per level 
              (gt, ":horse_agent", 0),
              (agent_get_slot, ":dest_skill_level", ":inflicted_agent", slot_agent_riding_level),
            (else_try), # dismounted, athletics skill reduce 5% damage per level 
              (agent_get_slot, ":dest_skill_level", ":inflicted_agent", slot_agent_athletics_level),
            (try_end),
            (store_mul, ":block_attack_rate", ":dest_skill_level",7),
            
            (val_clamp, ":block_attack_rate", 5, 91),
            (try_begin), 
              (agent_has_item_equipped,":inflicted_agent","itm_black_hole_plate"),
              (assign, ":block_attack_rate", 200),
            (try_end),
            
          (try_begin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_curse_of_the_midnight_wind"), 
            (val_add, ":block_attack_rate", -24), 
          (else_try), 
            (agent_slot_ge, ":inflicted_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_buff_affect_type, "itm_magic_wyssans_wildform"), 
            (val_add, ":block_attack_rate", 24), 
          (else_try),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_frozen_ground"), 
            (val_add, ":block_attack_rate", -50), 
          (else_try),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_acquiescence"), 
            (val_add, ":block_attack_rate", -25), 
          (else_try),
            (agent_slot_ge, ":inflicted_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_buff_affect_type, "itm_magic_hysterical_frenzy"), 
            (val_add, ":block_attack_rate", -100), 
          (else_try),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_word_of_pain"), 
            (val_add, ":block_attack_rate", -100), 
          (try_end),
            
          (try_begin),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_thrown),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (agent_slot_ge, ":inflicted_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_buff_affect_type, "itm_magic_phas_protection"), 
            (val_add, ":block_attack_rate", 50), 
          (try_end),

          (try_begin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_curse_of_arrow_attraction"), 
            (gt, ":dealer_item_id", -1),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_thrown),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (val_add, ":block_attack_rate", -50), 
          (try_end),
            
          (try_begin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_special_ability_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_affect_type, "itm_bash_Yrden"), 
            (gt, ":dealer_item_id", -1),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_thrown),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (val_add, ":block_attack_rate", 1000), 
          (try_end),
            
          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":dealer_agent", slot_agent_buff_affect_type, "itm_magic_okkams_mindrazor"), 
            (val_add, ":block_attack_rate", -100), 
          (try_end),
          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":dealer_agent", slot_agent_buff_affect_type, "itm_magic_flaming_sword_of_rhuin"), 
            (val_add, ":block_attack_rate", -30), 
          (try_end),
          
          
            
            
            
          (try_begin),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_damage_type, marked_for_death),
            (agent_get_slot, ":timer", ":inflicted_agent", slot_agent_special_damage_time),
            (gt,":timer", 0),
            (val_sub, ":block_attack_rate", ":timer"), 
          (try_end),
            
            
            (agent_get_position, pos1, ":inflicted_agent"),
            (agent_get_position, pos2, ":dealer_agent"),
            (neg|position_is_behind_position, pos2, pos1),
            (store_random_in_range, ":random_no", 0, 100),
            (try_begin),
              (le, ":random_no", ":block_attack_rate"),
              (assign,":block_attack",1),
              (store_mul, ":block_attack_dam", ":skl_level",6),
              (val_clamp, ":block_attack_dam", 5, 101),
              (val_add, ":reduced_damage", ":block_attack_dam"),
            (try_end),
          (try_end),

          (try_begin),
            (store_current_scene,":current_scene"),
            (neg|is_between, ":current_scene", "scn_town_1_arena", "scn_town_1_prison"),
            (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
            (neg|agent_slot_eq, ":inflicted_agent", slot_agent_special_damage_type, marked_for_death),
            (neg|eq, ":dealer_troop", "trp_ghost_dragon"),
            (neg|eq, ":dealer_troop", "trp_demon_4_3"),
            (neg|eq,":dealer_item_id","itm_gungnir"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (neg|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
            (neg|eq,":dealer_item_id","itm_serpent_dagger"),
            (neg|eq,":dealer_item_id","itm_undead_scythe"),
            (neg|eq,":dealer_item_id","itm_rhongomiant"),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (agent_get_wielded_item,":shield",":inflicted_agent",0),
            (this_or_next|eq, ":shield", "itm_gwilith_2"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_gwilith_2"),
            (agent_has_item_equipped,":inflicted_agent","itm_vanguard_shield"),
            #(agent_get_wielded_item,":shield",":inflicted_agent",1),
            #(eq, ":shield", "itm_vanguard_shield"),
            (assign, ":block_attack_rate", 50),
            (agent_get_position, pos1, ":inflicted_agent"),
            (agent_get_position, pos2, ":dealer_agent"),
            (get_distance_between_positions, ":cur_distance", pos1, pos2),
            (try_begin),
              (le, ":cur_distance", 300), 
              (assign, ":block_attack_dam", 35),
            (else_try),
              (assign, ":block_attack_dam", 70),
            (try_end),
            (store_random_in_range, ":random_no", 0, 100),
            (try_begin),
              (le, ":random_no", ":block_attack_rate"),
              (assign,":block_attack",1),
              (val_add, ":reduced_damage", ":block_attack_dam"),
            (try_end),
          (try_end),
          
          (try_begin),
            (store_current_scene,":current_scene"),
            (neg|is_between, ":current_scene", "scn_town_1_arena", "scn_town_1_prison"),
            (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
            (neg|agent_slot_eq, ":inflicted_agent", slot_agent_special_damage_type, marked_for_death),
            (neg|eq, ":dealer_troop", "trp_ghost_dragon"),
            (neg|eq, ":dealer_troop", "trp_demon_4_3"),
            (neg|eq,":dealer_item_id","itm_gungnir"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (neg|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
            (neg|eq,":dealer_item_id","itm_serpent_dagger"),
            (neg|eq,":dealer_item_id","itm_undead_scythe"),
            (neg|eq,":dealer_item_id","itm_rhongomiant"),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (agent_has_item_equipped,":inflicted_agent","itm_crimson_guard_plate"),
            (assign, ":block_attack_rate", 50),

            (assign, ":block_attack_dam", 70),
            (store_random_in_range, ":random_no", 0, 100),
            (try_begin),
              (le, ":random_no", ":block_attack_rate"),
              (assign,":block_attack",1),
              (val_add, ":reduced_damage", ":block_attack_dam"),
            (try_end),
          (try_end),
          
        
          (try_begin),
            (gt, ":reduced_damage", 0), 
            (val_sub, ":dest_damage", ":reduced_damage"),
            (val_max, ":dest_damage", 0),
            (val_min, ":reduced_damage", ":inflicted_damage"),
            (assign, reg1, ":reduced_damage"),
            (try_begin),
              (eq, "$g_report_shot_distance", 1),
              (eq, ":inflicted_agent",":player_agent"),
              (display_message, "@your Deflect enemy attack, decreased {reg1} damage"),
            (else_try),
              (eq, "$g_report_shot_distance", 1),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@your attack Deflect by enemy, decreased {reg1} damage"),
            (try_end),
          (try_end),
          
          
          (try_begin),
            (le, ":dest_damage", 10),
            (eq,":block_attack",0),
            (assign,":block_attack",1),
          (try_end),
          
          (val_max, ":dest_damage", 0),
          (set_trigger_result, ":dest_damage"),
        (try_end),
          
        (try_begin),
          (store_current_scene,":current_scene"),
          (neg|is_between, ":current_scene", "scn_town_1_arena", "scn_town_1_prison"),
          (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),

          (assign, ":crush_through", 0),
          (try_begin),
            (gt,":dealer_item_id",-1),
            (item_has_property, ":dealer_item_id", itp_crush_through),
            (agent_get_action_dir, ":action_dir", ":dealer_agent"),
            (store_random_in_range, ":r1", 0, 4),
            (try_begin),
              (this_or_next|eq, ":action_dir", 1),
              (eq, ":action_dir", 2),
              (store_random_in_range, ":r1", 0, 6),
            (try_end),
            (gt, ":r1", 3),
            (assign, ":crush_through", 1),
          (try_end),
          
          (try_begin),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability, insight), 
            (agent_slot_ge,":dealer_agent",slot_agent_special_ability_counter,1),
            (assign, ":crush_through", 2),
          (else_try),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_counter, 1),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability, avatar), 
            (assign, ":crush_through", 2),
          (try_end),
          
          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":dealer_agent", slot_agent_buff_affect_type, "itm_magic_turn_vampire"), 
            (store_agent_hit_points, ":current_health", ":dealer_agent", 0),
            (val_add, ":current_health", 5),
            (agent_set_hit_points, ":dealer_agent", ":current_health", 0),
          (try_end),
          
          (try_begin),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_damage_type, marked_for_death),
            (agent_get_slot, ":timer", ":inflicted_agent", slot_agent_special_damage_time),
            (gt,":timer", 0),
            (assign, ":crush_through", 2),
          (try_end),
          
          
          (try_begin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_debuff_affect_time, 1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_debuff_affect_type, "itm_magic_curse_of_arrow_attraction"), 
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_thrown),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (assign, ":crush_through", 1),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_one_hand_7"),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (neg|item_has_property, ":dealer_item_id", itp_two_handed),
            (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
            (eq, ":item_type", itp_type_one_handed_wpn),
            (assign, ":crush_through", 1),
          (try_end),
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_musket_7"),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (assign, ":crush_through", 1),
          (try_end),

          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", "itm_perk_polearm_6"),
            (eq, ":item_type", itp_type_polearm),
            (agent_get_action_dir, ":action_dir_attacker", ":dealer_agent"),
            (eq, ":action_dir_attacker", 0), #down
            (assign, ":crush_through", 1),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_one_hand_5"),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (neg|item_has_property, ":dealer_item_id", itp_two_handed),
            (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
            (eq, ":item_type", itp_type_one_handed_wpn),
            
            (agent_get_animation, ":cur_animation", ":inflicted_agent", 1),
            (this_or_next|eq, ":cur_animation", "anim_bash_out"),
            (this_or_next|eq, ":cur_animation", "anim_bash_knocked"),
            (this_or_next|eq, ":cur_animation", "anim_bash_stun"),
            (this_or_next|eq, ":cur_animation", "anim_bash_mini_stun"),
            (this_or_next|eq, ":cur_animation", "anim_bash_unsuccessful"),
            (eq, ":cur_animation", "anim_bash_crouch"),    
                  
            (troop_get_slot, ":dealer_troop_max_hp", ":dealer_troop", slot_troop_max_hp),
            (troop_get_slot, ":inflicted_troop_max_hp", ":inflicted_troop", slot_troop_max_hp),
            
            (val_div, ":dealer_troop_max_hp", 3),
            
            (store_random_in_range, ":random_no", 0, ":inflicted_troop_max_hp"),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            
            (this_or_next|ge,":random_no", ":inflicted_agent_hp"),
            (ge, ":dealer_troop_max_hp", ":inflicted_troop_max_hp"),
            (agent_set_hit_points,":inflicted_agent",0,0),
            (val_add, ":inflicted_damage", 100),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_two_hand_5"),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (eq, ":item_type", itp_type_two_handed_wpn),
            
            (this_or_next | eq, ":hit_bone", hb_head),
            (this_or_next | eq, ":hit_bone", hb_thorax),
            (this_or_next | eq, ":hit_bone", hb_shoulder_l),
            (this_or_next | eq, ":hit_bone", hb_upperarm_l),
            (this_or_next | eq, ":hit_bone", hb_upperarm_r),
            (eq, ":hit_bone", hb_shoulder_r),
                  
            (troop_get_slot, ":dealer_troop_max_hp", ":dealer_troop", slot_troop_max_hp),
            (troop_get_slot, ":inflicted_troop_max_hp", ":inflicted_troop", slot_troop_max_hp),
            
            (val_div, ":dealer_troop_max_hp", 3),
            
            (store_random_in_range, ":random_no", 0, ":inflicted_troop_max_hp"),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            
            (this_or_next|ge,":random_no", ":inflicted_agent_hp"),
            (ge, ":dealer_troop_max_hp", ":inflicted_troop_max_hp"),
            (agent_set_hit_points,":inflicted_agent",0,0),
            (val_add, ":inflicted_damage", 100),
          (try_end),
       
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_two_hand_6"),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (eq, ":item_type", itp_type_two_handed_wpn),
            (agent_set_wielded_item, ":inflicted_agent", -1),
          (try_end),
         
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_bow_5"),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (eq, ":item_type", itp_type_bow),
            (agent_set_wielded_item, ":inflicted_agent", -1),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", cull_the_weak),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 0),
            (le,":inflicted_agent_hp",50),
            (assign, ":crush_through", 1),
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", arrow_of_slaying),
            #(troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, arrow_of_slaying),
            (item_get_type, ":cur_weapon_type", ":dealer_item_id"),
            (eq,":cur_weapon_type",itp_type_bow),
            (assign, ":crush_through", 1),
          (else_try),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, diffusal_blade),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, thunder),
                                                                                     
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 15),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 6),
          (else_try),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, poisoned_attacks),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, power_poison),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 6),
          (else_try),
            (agent_slot_ge, ":dealer_agent", slot_agent_buff_affect_time, 1),
            (agent_slot_eq, ":dealer_agent", slot_agent_buff_affect_type, "itm_magic_blades_of_putrefaction"), 
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, power_poison),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 6),
          (try_end),
          
          (try_begin),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, sinper_shot), 
            (agent_slot_ge,":dealer_agent",slot_agent_special_ability_extra_counter,1),
            (assign, ":crush_through", 1),
          (try_end),
          
          
          
          (try_begin),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, master_archer), 
            (agent_slot_ge,":dealer_agent",slot_agent_special_ability_extra_counter,2),
            (agent_set_wielded_item, ":inflicted_agent", -1),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 4),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, entangle),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 5),
          (try_end),
          
          
          (try_begin),
            (neg|eq,":crush_through",0),
            (neg|eq,":dealer_item_id","itm_gungnir"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (neg|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
            (neg|eq,":dealer_item_id","itm_serpent_dagger"),
            (neg|eq,":dealer_item_id","itm_undead_scythe"),
            (neg|eq,":dealer_item_id","itm_rhongomiant"),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_enchanter_robe"),
            (this_or_next|troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_extra, master_archer), 
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_extra, focus), 
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_enchanter_robe"),
            (agent_slot_ge,":inflicted_agent",slot_agent_special_ability_extra_counter,2),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 4),
            (assign, ":inflicted_damage", 0),  
            (set_trigger_result, 0),
            (assign,":block_attack",1),
            (try_begin),
              (eq, ":inflicted_agent",":player_agent"),
              (display_message, "@you block enemy attack"),
            (else_try),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@you attack block by enemy"),
            (try_end),
          (try_end),
                    
          (try_begin),
            (agent_has_item_equipped,":inflicted_agent","itm_rat_king_skin"),
            (store_random_in_range, ":random_no_2", 0, 100),
            (ge, ":random_no_2", 80),
            (store_random_in_range, ":r", 0, 8),
            (try_begin),
              (eq, ":r", 7),
              (assign,":spawn_troop_id","trp_rat_bomber"),
            (else_try),
              (eq, ":r", 6),
              (assign,":spawn_troop_id","trp_rat_5_2"),
            (else_try),
              (eq, ":r", 5),
              (assign,":spawn_troop_id","trp_rat_5_1"),
            (else_try),
              (eq, ":r", 4),
              (assign,":spawn_troop_id","trp_rat_4"),
            (else_try),
              (eq, ":r", 3),
              (assign,":spawn_troop_id","trp_rat_3"),
            (else_try),
              (eq, ":r", 2),
              (assign,":spawn_troop_id","trp_rat_2"),
            (else_try),
              (assign,":spawn_troop_id","trp_rat_1"),
            (try_end),
            
            (agent_get_position,pos51,":inflicted_agent"),
            (position_move_z,pos51,300),
            (position_move_y,pos51,300),
            (call_script,"script_cf_agent_spawn_agent_to_pos51", ":inflicted_agent", ":spawn_troop_id", 1),
          (else_try),
            (agent_has_item_equipped,":inflicted_agent","itm_shivas_guard"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            #(store_random_in_range, ":random_no", 0, 100),
            (store_random_in_range, ":random_no_2", 0, 100),
            #(store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 0),
            #(this_or_next|ge,":random_no", ":inflicted_agent_hp"),
            (le, ":random_no_2", 10),

            #(lt, ":inflicted_agent_hp", ":inflicted_damage"),

            (call_script, "script_cf_agent_forst_ring", ":inflicted_agent"),
          (else_try),
            (agent_has_item_equipped,":inflicted_agent","itm_caesar_mask"),
            (neg|eq,":crush_through",0),
            (neg|eq,":dealer_item_id","itm_gungnir"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (neg|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
            (neg|eq,":dealer_item_id","itm_serpent_dagger"),
            (neg|eq,":dealer_item_id","itm_undead_scythe"),
            (neg|eq,":dealer_item_id","itm_rhongomiant"),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            #(store_random_in_range, ":random_no", 0, 100),
            (try_begin),
              (store_random_in_range, ":random_no_2", 0, 100),
              #(store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 0),
              #(this_or_next|ge,":random_no", ":inflicted_agent_hp"),
              (le, ":random_no_2", 10),
              (assign, ":inflicted_damage", 0),  
              (set_trigger_result, 0),
              (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
              (agent_set_hit_points,":inflicted_agent",100,0),
              (call_script, "script_cf_agent_earth_shock", ":inflicted_agent"),
            (try_end),
            (try_begin),
              (store_random_in_range, ":random_no_2", 0, 100),
              (le, ":random_no_2", 30),
              (agent_get_position,pos51,":inflicted_agent"),
              (position_move_z,pos51,300),
              (position_move_y,pos51,300),
              (call_script,"script_cf_agent_spawn_agent_to_pos51", ":inflicted_agent", "trp_lich_3", 1),
            (try_end),
          (else_try),
            (neg|eq,":crush_through",0),
            (neg|eq,":dealer_item_id","itm_gungnir"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (neg|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
            (neg|eq,":dealer_item_id","itm_serpent_dagger"),
            (neg|eq,":dealer_item_id","itm_undead_scythe"),
            (neg|eq,":dealer_item_id","itm_rhongomiant"),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (this_or_next|eq,":inflicted_troop", "trp_vampire_2"),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, shadowstep), 
            (agent_slot_eq,":inflicted_agent",slot_agent_special_ability_cooldown,0),
            #(store_random_in_range, ":r", 0, 10),
            #(le, ":r", 2),
            (neg|eq, ":inflicted_agent", ":player_agent"),
            (assign,":player_horse", -1),
            (try_begin),
              (eq, ":inflicted_agent", ":player_agent"),
              (agent_get_horse, ":player_horse", ":player_agent"),
            (try_end),
            (lt, ":player_horse", 0),
            (call_script, "script_cf_agent_shadowstep", ":inflicted_agent"),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_counter, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_cooldown, 30),
          (else_try),
            (neg|eq,":crush_through",0),
            (neg|eq,":dealer_item_id","itm_gungnir"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (neg|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
            (neg|eq,":dealer_item_id","itm_serpent_dagger"),
            (neg|eq,":dealer_item_id","itm_undead_scythe"),
            (neg|eq,":dealer_item_id","itm_rhongomiant"),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (this_or_next|eq,":inflicted_troop", "trp_vampire_3"),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, shadowking), 
            (agent_slot_eq,":inflicted_agent",slot_agent_special_ability_cooldown,0),
            #(store_random_in_range, ":r", 0, 10),
            #(le, ":r", 2),
            (neg|eq, ":inflicted_agent", ":player_agent"),
            (assign,":player_horse", -1),
            (try_begin),
              (eq, ":inflicted_agent", ":player_agent"),
              (agent_get_horse, ":player_horse", ":player_agent"),
            (try_end),
            (lt, ":player_horse", 0),
            (call_script, "script_cf_agent_shadowking", ":inflicted_agent"),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_counter, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_cooldown, 30),
          (else_try),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, flamestrike), 
            (agent_slot_eq,":inflicted_agent",slot_agent_special_ability_cooldown,0),
            #(store_random_in_range, ":r", 0, 10),
            #(le, ":r", 2),
            (call_script, "script_cf_agent_flamestrike", ":inflicted_agent"),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_cooldown, 20),
          (else_try),
            (neg|eq,":crush_through",0),
            (neg|eq,":dealer_item_id","itm_gungnir"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (neg|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
            (neg|eq,":dealer_item_id","itm_serpent_dagger"),
            (neg|eq,":dealer_item_id","itm_undead_scythe"),
            (neg|eq,":dealer_item_id","itm_rhongomiant"),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (this_or_next|troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, nurgle_blessing), 
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, focus), 
            (agent_slot_ge,":inflicted_agent",slot_agent_special_ability_counter,2),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 4),
            (assign, ":inflicted_damage", 0),  
            (set_trigger_result, 0),
            (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
            (try_begin),
              (eq, ":inflicted_agent",":player_agent"),
              (display_message, "@you block enemy attack"),
            (else_try),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@you attack block by enemy"),
            (try_end),
          (else_try),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, holy_light), 
            (try_begin),
              (agent_slot_eq,":inflicted_agent",slot_agent_special_ability_cooldown,0),
              (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
              (this_or_next|lt, ":inflicted_agent_hp", 15),
              (lt, ":inflicted_agent_hp", ":inflicted_damage"),
              (assign, ":inflicted_damage", 0),  
              (set_trigger_result, 0),
              (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
              (call_script, "script_cf_agent_holy_light", ":inflicted_agent"),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_counter, 30),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_cooldown, 120),
            (else_try),
              (agent_slot_ge,":inflicted_agent",slot_agent_special_ability_counter,1),
              (assign, ":inflicted_damage", 0),  
              (set_trigger_result, 0),
              (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
            (try_end),
          (try_end),
          
          
          
          (try_begin),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, battlerage),
            (agent_get_slot, ":counter", ":inflicted_agent", slot_agent_special_ability_passiv_counter),
            (val_add,":counter", 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_counter, ":counter"),
            (eq, ":inflicted_agent",":player_agent"),
            (str_store_string, s2, "@battlerage"),
            (display_message, "@you special_ability {s2} is on"),
          (else_try),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, frenzy),
            (agent_get_slot, ":counter", ":dealer_agent", slot_agent_special_ability_passiv_counter),
            (val_add,":counter", 5),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_passiv_counter, ":counter"),
            (eq, ":dealer_agent",":player_agent"),
            (call_script, "script_get_special_ability_text_to_s2", frenzy, 2),
            (display_message, "@you special_ability {s2} is on"),
          (else_try),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, ambush),
            (agent_get_slot, ":counter", ":dealer_agent", slot_agent_special_ability_passiv_counter),
            (gt,":counter", 5),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_passiv_counter, 0),
            (eq, ":dealer_agent",":player_agent"),
            (call_script, "script_get_special_ability_text_to_s2", ambush, 2),
            (display_message, "@you special_ability {s2} is on"),
          (else_try),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, steady_aim),
            (agent_get_slot, ":counter", ":dealer_agent", slot_agent_special_ability_passiv_counter),
            (gt,":counter", 5),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_passiv_counter, 0),
            (eq, ":dealer_agent",":player_agent"),
            (call_script, "script_get_special_ability_text_to_s2", steady_aim, 2),
            (display_message, "@you special_ability {s2} is on"),
          (try_end),
          
          (try_begin),
            (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_one_hand_4"),
            (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_mana),
            (gt,":stamina",60),
            (val_add, ":stamina", -10),
            (agent_set_slot, ":inflicted_agent", slot_agent_mana, ":stamina"),
            (agent_get_wielded_item,":shield",":inflicted_agent",1),
            (gt,":shield",1),
            (agent_get_horse,":horse",":inflicted_agent"),
            (neg|gt,":horse",0),
            (call_script,"script_cf_agent_shield_bash",":inflicted_agent",-1),
          (try_end),
          
          (try_begin),
            (neg|eq,":crush_through",0),
            (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_thrown_7"),

            (agent_get_wielded_item,":shield",":inflicted_agent",1), 
            (gt, ":shield", 0),
            (item_get_type, ":weapontype", ":shield"),
            (eq, ":weapontype", itp_type_shield),

            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (this_or_next|eq, ":item_type", itp_type_musket),
            (eq, ":item_type", itp_type_thrown),

            (store_random_in_range, ":r1", 0, 100),
            (le, ":r1", 75),
            (assign, ":inflicted_damage", 0),  
            (set_trigger_result, 0),
            (assign,":block_attack",1),
            (try_begin),
              (eq, ":inflicted_agent",":player_agent"),
              (display_message, "@you block enemy attack"),
            (else_try),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@you attack block by enemy"),
            (try_end),
          (try_end),
          
          (try_begin),
            (this_or_next|eq, ":inflicted_troop", "trp_adventurer_troop_11"),
            (this_or_next|eq, ":inflicted_troop", "trp_nord_valkyrie_3"),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, revelation), 
            (try_begin),
              (agent_slot_eq,":inflicted_agent",slot_agent_special_ability_passiv_cooldown,0),
              (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
              (store_random_in_range, ":r1", 0, 100),
              (this_or_next|ge, ":r1",95),
              (this_or_next|lt, ":inflicted_agent_hp", 20),
              (lt, ":inflicted_agent_hp", ":inflicted_damage"),
              (assign, ":inflicted_damage", 0),  
              (set_trigger_result, 0),
              (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
              (call_script, "script_cf_agent_revelation", ":inflicted_agent"),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_counter, 30),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 90),
            (else_try),
              (agent_slot_ge,":inflicted_agent",slot_agent_special_ability_passiv_counter,1),
              (assign, ":inflicted_damage", 0),  
              (set_trigger_result, 0),
              (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
            (try_end),
            
            
          (else_try),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, bubble_dreams), 
            (try_begin),
              (agent_slot_eq,":inflicted_agent",slot_agent_special_ability_passiv_cooldown,0),
              (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
              (store_random_in_range, ":r1", 0, 100),
              (this_or_next|ge, ":r1",75),
              (lt, ":inflicted_agent_hp", ":inflicted_damage"),
              (assign, ":inflicted_damage", 0),  
              (set_trigger_result, 0),
              (assign,":block_attack",1),
              
              (val_sub, ":inflicted_agent_hp", 5),
              (val_max, ":inflicted_agent_hp", 1),
              (agent_set_hit_points, ":inflicted_agent", ":inflicted_agent_hp", 1),
              
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_counter, 5),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 8),
            (else_try),
              (agent_slot_ge,":inflicted_agent",slot_agent_special_ability_passiv_counter,1),
              (assign, ":inflicted_damage", 0),  
              (set_trigger_result, 0),
              (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
            (try_end),
          (else_try),
            (this_or_next|troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, poisoned_attacks),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, ironshield), 
            (try_begin),
              (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_passiv_counter, 0),
              (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 0),
              (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
              (lt, ":inflicted_agent_hp", ":inflicted_damage"),
          
              (store_skill_level, ":skl_level", skl_ironflesh, ":inflicted_troop"),
              (store_random_in_range, ":c", ":skl_level", 16),
              (this_or_next|troop_is_hero, ":inflicted_troop"),
              (ge, ":c", 5),
          
              (agent_set_no_death_knock_down_only, ":inflicted_agent", 1),
              (agent_get_slot, ":extra_hp", ":inflicted_agent", slot_agent_extra_hp),
              (store_skill_level, ":skl_level", skl_ironflesh, ":inflicted_troop"),
              (store_mul,":add_hp", ":skl_level", 150),
              (val_add,":add_hp", 100),
              (val_add,":extra_hp", ":add_hp"),
              (agent_set_slot, ":inflicted_agent", slot_agent_extra_hp, ":extra_hp"),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_counter, 15),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 60),
              (eq, ":inflicted_agent",":player_agent"),
              (str_store_string, s2, "@ironshield"),
              (display_message, "@you special_ability {s2} is on"),
            (else_try),
              (agent_slot_ge,":inflicted_agent",slot_agent_special_ability_passiv_counter,1),
              (assign,":block_attack",1),
            (try_end),
          (else_try),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, counter),
            (agent_get_slot, ":counter", ":inflicted_agent", slot_agent_special_ability_passiv_counter),
            (val_add,":counter", 10),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_counter, ":counter"),
            (eq, ":inflicted_agent",":player_agent"),
            (str_store_string, s2, "@counter"),
            (display_message, "@you special_ability {s2} is on"),
            (store_random_in_range, ":r1", 0, 1000),
            (this_or_next|gt, ":counter",100),
            (ge,":counter", ":r1"),
            (val_add,":counter", -100),
            (val_max, ":counter", 0),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_counter, ":counter"),
            (set_trigger_result, 0),
            (call_script, "script_cf_agent_excalibur_light", ":inflicted_agent", 3),
            (assign, ":inflicted_damage", 0),  
            (assign,":block_attack",1),
            (copy_position, pos30, pos0), 
            (particle_system_burst, "psys_block_effect", pos30, 1),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 5),
            (try_begin),
                (eq, ":inflicted_agent",":player_agent"),
                (display_message, "@you block enemy attack"),
            (else_try),
                (eq, ":dealer_agent",":player_agent"),
                (display_message, "@you attack block by enemy"),
            (try_end),
            
          (else_try),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, sidearm_2),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 0),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (store_random_in_range, ":r1", 0, 5),
            (le, ":r1", 2),
            (try_begin),
              (neg|agent_slot_ge,":inflicted_agent",slot_agent_extra_shield,1),
              (call_script, "script_cf_agent_set_animation",  ":dealer_agent", "anim_bash_knocked",0),
              (agent_get_position, pos30, ":dealer_agent"),
              (position_move_z, pos30, 200),
              (particle_system_burst, "psys_stun_effect", pos30, 1),
            (try_end),
              
              
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 2),
            (call_script, "script_cf_agent_sidearm", ":inflicted_agent", 2),
              (try_begin),
                (assign,":basic_time",10),
                (assign,":cost_stamina",15),
                (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
                (gt, ":stamina", ":cost_stamina"),
                (val_div, ":stamina", 20),
                (val_sub, ":basic_time", ":stamina"),
                
                (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, ":basic_time"),
                (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
                (val_sub, ":stamina", ":cost_stamina"),
                (agent_set_slot, ":inflicted_agent", slot_agent_stamina, ":stamina"),
              (try_end),    
            
            
            (eq, ":inflicted_agent",":player_agent"),
            (str_store_string, s2, "@sidearm_2"),
            (display_message, "@you special_ability {s2} is on"),
          (else_try),
            (neg|eq, ":crush_through", 2),
            (neg|eq, ":crush_through", 0),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, retribution),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 0),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            (store_random_in_range, ":r1", 0, 4),
            (this_or_next|lt, ":inflicted_agent_hp", ":inflicted_damage"),
            (eq, ":r1", 1),
            (try_begin),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 2),
              (store_random_in_range, ":r2", 0, 4),
              (this_or_next|lt, ":inflicted_agent_hp", ":inflicted_damage"),
              (eq, ":r2", 1),
              (assign, ":inflicted_damage", 0),  
              (set_trigger_result, 0),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 5),
            (try_end),
            (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
            
            (assign, ":retri_damage", ":inflicted_damage"),
            (gt, ":retri_damage", 1),
            (store_agent_hit_points, ":dealer_agent_hp", ":dealer_agent", 1),
            (val_sub, ":dealer_agent_hp", ":retri_damage"),
            (val_max, ":dealer_agent_hp", 1),
            (agent_set_hit_points, ":dealer_agent", ":dealer_agent_hp", 1),
            (agent_get_position, pos51, ":dealer_agent"),
            (particle_system_burst,"psys_block_effect",pos51,1),
            (position_move_z, pos51, 120),
            (particle_system_burst,"psys_lightning_victim",pos51,10),
            
            # messages for player
            (assign, reg9, ":retri_damage"),
            (try_begin),
              (eq, ":inflicted_agent", ":player_agent"),
              (str_store_string, s2, "@retribution"),
              (display_message, "@you special_ability {s2} is on"),
              (display_message, "@delivered {reg9} damage!", 0xFF0000),
            (else_try),
              (eq, ":dealer_agent", ":player_agent"),
              (str_store_string, s2, "@retribution"),
              (display_message, "@{s2}! your damage back "),
              (display_message, "@received {reg9} damage!", 0xFF0000),
            (try_end),
          (else_try),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, deflect),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 0),
            (assign,":deflect",0),
            
            (try_begin),
              (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_passiv_counter, 0),
              (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 0),
              #(store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
              #(store_random_in_range, ":r1", 0, 4),
              #(this_or_next|lt, ":inflicted_agent_hp", ":inflicted_damage"),
              #(eq, ":r1", 1),
          
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_counter, 2),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 5),
              (try_begin),
                (assign,":basic_time",5),
                (assign,":cost_stamina",5),
                (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
                (gt, ":stamina", ":cost_stamina"),
                (val_div, ":stamina", 20),
                (val_sub, ":basic_time", ":stamina"),
                
                (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, ":basic_time"),
                (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
                (val_sub, ":stamina", ":cost_stamina"),
                (agent_set_slot, ":inflicted_agent", slot_agent_stamina, ":stamina"),
              (try_end),    
              (assign,":deflect",1),
              (eq, ":inflicted_agent",":player_agent"),
              (str_store_string, s2, "@deflect"),
              (display_message, "@you special_ability {s2} is on"),
            (else_try),
              (agent_slot_ge,":inflicted_agent",slot_agent_special_ability_passiv_counter,1),
              (assign,":deflect",1),
            (try_end),
            (eq,":deflect",1),
            (try_begin),
              (item_get_type, ":item_type", ":dealer_item_id"),
              (this_or_next|eq, ":item_type", itp_type_bow),
              (this_or_next|eq, ":item_type", itp_type_crossbow),
              (this_or_next|eq, ":item_type", itp_type_pistol),
              (this_or_next|eq, ":item_type", itp_type_musket),
              (eq, ":item_type", itp_type_thrown),
              
              (assign, ":retri_damage", ":inflicted_damage"),
              (gt, ":retri_damage", 1),
              (store_agent_hit_points, ":dealer_agent_hp", ":dealer_agent", 1),
              (val_sub, ":dealer_agent_hp", ":retri_damage"),
              (val_max, ":dealer_agent_hp", 1),
              (agent_set_hit_points, ":dealer_agent", ":dealer_agent_hp", 1),
              # messages for player
              (assign, reg9, ":retri_damage"),
              (try_begin),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@delivered {reg9} damage!", 0xFF0000),
              (else_try),
                (eq, ":dealer_agent", ":player_agent"),
                (str_store_string, s2, "@retribution"),
                (display_message, "@{s2}! your damage back "),
                (display_message, "@received {reg9} damage!", 0xFF0000),
              (try_end),
            (try_end),
            
            (set_trigger_result, 0),
            (assign, ":inflicted_damage", 0),  
            (assign,":block_attack",1),
            (copy_position, pos30, pos0), 
            (particle_system_burst, "psys_block_effect", pos30, 1),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 5),
            (try_begin),
              (eq, ":inflicted_agent",":player_agent"),
              (display_message, "@you block enemy attack"),
            (else_try),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@you attack block by enemy"),
            (try_end),
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":inflicted_agent", fire_shield),
            #(troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, fire_shield),
            (agent_get_wielded_item, ":shield", ":inflicted_agent", 1),
            (this_or_next|gt,":shield",1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 0),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            (store_random_in_range, ":r1", 0, 4),
            (this_or_next|lt, ":inflicted_agent_hp", ":inflicted_damage"),
            (eq, ":r1", 1),
            (try_begin),
              (gt,":shield",1),
              (store_random_in_range, ":r2", 0, 4),
              (this_or_next|lt, ":inflicted_agent_hp", ":inflicted_damage"),
              (eq, ":r2", 1),
              (assign, ":inflicted_damage", 0),  
              (set_trigger_result, 0),
            (else_try),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 2),
              (store_random_in_range, ":r2", 0, 4),
              (this_or_next|lt, ":inflicted_agent_hp", ":inflicted_damage"),
              (eq, ":r2", 1),
              (assign, ":inflicted_damage", 0),  
              (set_trigger_result, 0),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 5),
            (try_end),
            (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
            
            (assign, ":retri_damage", ":inflicted_damage"),
            (gt, ":retri_damage", 1),
            (store_agent_hit_points, ":dealer_agent_hp", ":dealer_agent", 1),
            (val_sub, ":dealer_agent_hp", ":retri_damage"),
            (val_max, ":dealer_agent_hp", 1),
            (agent_set_hit_points, ":dealer_agent", ":dealer_agent_hp", 1),
            (agent_get_position, pos51, ":dealer_agent"),
            (particle_system_burst,"psys_block_effect",pos51,1),
            (position_move_z, pos51, 120),
            (particle_system_burst,"psys_Burning_Trail",pos51,10),
            
            # messages for player
            (assign, reg9, ":retri_damage"),
            (try_begin),
              (eq, ":inflicted_agent", ":player_agent"),
              (str_store_string, s2, "@fire_shield"),
              (display_message, "@you special_ability {s2} is on"),
              (display_message, "@delivered {reg9} damage!", 0xFF0000),
            (else_try),
              (eq, ":dealer_agent", ":player_agent"),
              (str_store_string, s2, "@fire_shield"),
              (display_message, "@{s2}! your damage back "),
              (display_message, "@received {reg9} damage!", 0xFF0000),
            (try_end),
          (else_try),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|eq,":crush_through",0),
            (neg|eq,":dealer_item_id","itm_gungnir"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (neg|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
            (neg|eq,":dealer_item_id","itm_serpent_dagger"),
            (neg|eq,":dealer_item_id","itm_undead_scythe"),
            (neg|eq,":dealer_item_id","itm_rhongomiant"),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (agent_get_wielded_item, ":weapon", ":inflicted_agent", 0),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":inflicted_agent", block),
              (assign,":result", reg1),
            (try_end),
            (this_or_next|eq, ":result", 1),
            (this_or_next|eq, ":weapon", "itm_avalon_halberd"),
            (this_or_next|eq,":inflicted_troop", "trp_england_swordsman_3"),
            (this_or_next|eq,":inflicted_troop", "trp_england_swordsman_3"),
            (this_or_next|eq,":inflicted_troop", "trp_adventurer_troop_12"),
            (this_or_next|eq,":inflicted_troop", "trp_adventurer_troop_10"),
            (this_or_next|eq,":inflicted_troop", "trp_death"),
            (eq,":agent_gender", tf_beastman),

            #(troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, block),
            (agent_get_wielded_item, ":shield", ":inflicted_agent", 1),
            (this_or_next|gt,":shield",1),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 0),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 4),
            (set_trigger_result, 0),
            (assign, ":inflicted_damage", 0),  
            (assign,":block_attack",1),
            (copy_position, pos30, pos0), 
            (particle_system_burst, "psys_block_effect", pos30, 1),
            (try_begin),
              (neg|gt,":shield",1),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 3),
            (try_end),
            
            (try_begin),
              (eq, ":inflicted_agent",":player_agent"),
              (str_store_string, s2, "@block"),
              (display_message, "@you special_ability {s2} is on"),
              (display_message, "@you block enemy attack"),
            (else_try),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@you attack block by enemy"),
            (try_end),
          (else_try),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, counterstrike),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 0),
            (store_random_in_range, ":r1", 0, 100),
            (le, ":r1", 20),
            (set_trigger_result, 0),
            (assign, ":inflicted_damage", 0),  
            (assign,":block_attack",1),
            (copy_position, pos30, pos0), 
            (particle_system_burst, "psys_block_effect", pos30, 1),
            #(agent_set_slot, ":inflicted_agent", slot_agent_flamberge_attack_chance, 1),
            (call_script,"script_cf_agent_cleave",":inflicted_agent", 2,0),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, 5),
              (try_begin),
                (assign,":basic_time",5),
                (assign,":cost_stamina",10),
                (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
                (gt, ":stamina", ":cost_stamina"),
                (val_div, ":stamina", 20),
                (val_sub, ":basic_time", ":stamina"),
                
                (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, ":basic_time"),
                (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
                (val_sub, ":stamina", ":cost_stamina"),
                (agent_set_slot, ":inflicted_agent", slot_agent_stamina, ":stamina"),
              (try_end),    
            (try_begin),
              (eq, ":inflicted_agent",":player_agent"),
              (str_store_string, s2, "@counter_strike"),
              (display_message, "@you special_ability {s2} is on"),
              (display_message, "@you block enemy attack"),
            (else_try),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@you attack block by enemy"),
            (try_end),
          (else_try),
            (eq,":crush_through",0),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (assign,":result", 0),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_two_hand_4"),
              (agent_get_wielded_item,":item",":inflicted_agent",0),
              (gt, ":item",0),
              (item_get_type, ":type", ":item"),
              (eq, ":type", itp_type_two_handed_wpn),
              (assign,":result", 1),
            (try_end),
            (eq, ":result", 1),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_thrown),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (store_random_in_range, ":c", 0, 10),
            (ge, ":c", 5),
            
            (agent_get_bone_position, pos51, ":dealer_agent", 9, 1),
            (agent_get_bone_position, pos42, ":inflicted_agent", 9, 1),
            (store_random_in_range, ":ran",329, 343),
            (agent_set_animation, ":inflicted_agent", ":ran"),
            (call_script, "script_point_missile_position", pos42, pos51, 80),
            (add_missile, ":inflicted_agent", pos42, 80,":dealer_item_id", 0, ":ammo", 0),
            (set_trigger_result, 0),
              (assign, ":inflicted_damage", 0),  
            (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
            (try_begin),
              (eq, ":inflicted_agent",":player_agent"),
              (display_message, "@you block enemy attack"),
            (else_try),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@you attack block by enemy"),
            (try_end),

          (else_try),
          (neg|eq,":crush_through",0),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (assign,":result", 0),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":inflicted_agent", "itm_perk_one_hand_2"),
              (agent_get_wielded_item,":shield",":inflicted_agent",1), 
              (gt, ":shield", 0),
              (item_get_type, ":weapontype", ":shield"),
              (eq, ":weapontype", itp_type_shield),
              (assign,":result", 1),
            (try_end),
            (eq, ":result", 1),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_thrown),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (store_random_in_range, ":c", 0, 10),
            (ge, ":c", 7),
            (set_trigger_result, 0),
              (assign, ":inflicted_damage", 0),  
            (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
            (try_begin),
              (eq, ":inflicted_agent",":player_agent"),
              (display_message, "@you block enemy attack"),
            (else_try),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@you attack block by enemy"),
            (try_end),
          (else_try),
            (neg|eq,":crush_through",0),
            (neg|eq,":dealer_item_id","itm_dragon_bone_bow"),
            (neg|eq,":dealer_item_id","itm_throwing_gungnir"),
            (assign,":result", 0),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":inflicted_agent", skeletal),
              (assign,":result", reg1),
            (try_end),
            (this_or_next|eq, ":result", 1),
            (this_or_next|eq, ":inflicted_troop", "trp_france_horse_2"),
            (this_or_next|eq, ":inflicted_troop", "trp_teutonic_dis_knight"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_shadow_robes"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_molag_bal_boots"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_guard_kneecops"),
            (eq, ":result", 1),
            
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_bow),
            (this_or_next|eq, ":item_type", itp_type_crossbow),
            (this_or_next|eq, ":item_type", itp_type_thrown),
            (this_or_next|eq, ":item_type", itp_type_pistol),
            (eq, ":item_type", itp_type_musket),
            (store_random_in_range, ":c", 0, 10),
            (ge, ":c", 6),
            (set_trigger_result, 0),
              (assign, ":inflicted_damage", 0),  
            (assign,":block_attack",1),
              (copy_position, pos30, pos0), 
              (particle_system_burst, "psys_block_effect", pos30, 1),
            (try_begin),
              (eq, ":inflicted_agent",":player_agent"),
              (str_store_string, s2, "@skeletal"),
              (display_message, "@you special_ability {s2} is on"),
              (display_message, "@you block enemy attack"),
            (else_try),
              (eq, ":dealer_agent",":player_agent"),
              (display_message, "@you attack block by enemy"),
            (try_end),
          (try_end),
          
          (try_begin),
            (this_or_next|troop_slot_eq, ":inflicted_agent", slot_troop_special_ability_extra, roll), 
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_extra, wushuang),
            (agent_slot_ge, ":inflicted_agent", slot_agent_special_ability_extra_counter, 1),
              (assign, ":inflicted_damage", 1),  
            (set_trigger_result, 1),
            (assign,":block_attack",1),
            (copy_position, pos30, pos0), 
            (particle_system_burst, "psys_block_effect", pos30, 1),
          (try_end),
          
          
          (try_begin),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, stoneskin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_special_ability_counter, 1),
              (assign, ":inflicted_damage", 1),  
            (set_trigger_result, 1),
            (assign,":block_attack",1),
            (copy_position, pos30, pos0), 
            (particle_system_burst, "psys_block_effect", pos30, 1),
          (try_end),
          
          (try_begin),
            (agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_affect_type, stoneskin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_special_ability_affect_time, 1),
              (assign, ":inflicted_damage", 1),  
            (set_trigger_result, 1),
            (assign,":block_attack",1),
            (copy_position, pos30, pos0), 
            (particle_system_burst, "psys_block_effect", pos30, 1),
          (try_end),
        (try_end),

        (try_begin), 
          (store_current_scene,":current_scene"),
          (neg|is_between, ":current_scene", "scn_town_1_arena", "scn_town_1_prison"),
          (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
          #(neg|is_between,":inflicted_troop","trp_france_prison_guard","trp_balkan_billman_4"),
          #(neg|eq,":inflicted_troop", "trp_huge_inferno"),
          (this_or_next|eq,":dealer_item_id","itm_gungnir"),
          (this_or_next|eq,":dealer_item_id","itm_throwing_gungnir"),
          (this_or_next|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
          (this_or_next|eq,":dealer_item_id","itm_serpent_dagger"),
          (this_or_next|eq,":dealer_item_id","itm_undead_scythe"),
          (this_or_next|eq,":dealer_item_id","itm_rhongomiant"),
          (this_or_next|eq,":dealer_item_id","itm_dragon_bone_bow"),
          (eq,":block_attack",0),
          (assign, ":dest_damage", 0),
          (try_begin),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|eq, ":agent_gender", tf_undead),
            (neg|eq, ":agent_gender", tf_dwarf),
            (neg|eq, ":agent_gender", tf_male),
            (neg|eq, ":agent_gender", tf_female),
            (store_agent_hit_points, ":hp_2", ":inflicted_agent", 0),
            (lt, ":hp_2", 33),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 3),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, wound),
                                                                                     
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 2),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 15),
          (try_end),
          
          (try_begin),
            (this_or_next|agent_slot_eq, ":inflicted_agent", slot_agent_special_damage_type, freeze),
            (this_or_next|troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_extra, berserk), 
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, berserk), 
            
            (agent_get_slot, ":cooldown", ":inflicted_agent", slot_agent_special_ability_counter),
            (agent_get_slot, ":cooldown_2", ":inflicted_agent", slot_agent_special_ability_extra_counter),
            (this_or_next|agent_slot_eq, ":inflicted_agent", slot_agent_special_damage_type, freeze),
            (this_or_next|gt, ":cooldown_2",2),
            (gt, ":cooldown",0),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
            (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
            (eq, ":item_type", itp_type_polearm),
            
            (assign, ":dest_damage", ":inflicted_damage"),
            (val_div, ":dest_damage", 2),
            (val_max, ":dest_damage", 1),
          (try_end),

          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 10),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, rage_charge), 
            (ge,":inflicted_damage", 10),
            (neg|agent_slot_ge,":inflicted_agent",slot_agent_extra_shield,1),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (call_script, "script_cf_agent_set_animation",  ":inflicted_agent", "anim_bash_out_2",0),
            (agent_get_position, pos30, ":inflicted_agent"),
            (position_move_z, pos30, 200),
            (particle_system_burst, "psys_stun_effect", pos30, 1),
          (try_end),
                    
          (try_begin),
            (assign,":result", 0),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", deadly_strike),
              (assign,":result", reg1),
            (try_end),
            (this_or_next|eq, ":result", 1),
            (this_or_next|eq, ":dealer_troop", "trp_npc12"),
            (this_or_next|eq, ":dealer_troop", "trp_witch_hunter"),

            (this_or_next|eq,":dealer_item_id","itm_rhongomiant"),
            (this_or_next|eq,":dealer_item_id","itm_natalya_slayer"),
            (this_or_next|eq,":dealer_item_id","itm_crossbow_cannon"),
            (this_or_next|troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, mark_of_khorne),

            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, deadly_strike), 
            (ge,":inflicted_damage", 10),
            (store_random_in_range, ":r1", 0, 3),
            (try_begin),
              (item_get_type, ":item_type", ":dealer_item_id"),
              (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
              (this_or_next|eq, ":item_type", itp_type_polearm),
              (eq, ":item_type", itp_type_thrown),
              (store_random_in_range, ":r1", 0, 5),
            (try_end),
            (le, ":r1", 0),
            (try_begin),
              (eq, ":dealer_agent", ":player_agent"),
              (display_message, "@Delivered deadly hit!"),
            (else_try),
              (eq, ":inflicted_agent", ":player_agent"),
              (display_message, "@Received deadly hit!", 0xFF0000),
            (try_end),
            (store_mul,":dest_damage", ":inflicted_damage", 2),
            #(assign, ":dest_damage", ":inflicted_damage"),
            
          (else_try),
            (eq,":dealer_item_id","itm_aroundight"),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            
            (this_or_next|eq, ":inflicted_troop", "trp_fire_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_lava_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_bone_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_ghost_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_lich_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_red_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_black_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_green_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_gold_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_werewolf_1_a"),
            (this_or_next|eq, ":agent_gender", tf_orc),
            (this_or_next|eq, ":agent_gender", tf_beastman),
            (this_or_next|eq, ":agent_gender", tf_goblin),
            (this_or_next|eq, ":agent_gender", tf_ogre),
            (eq, ":agent_gender", tf_troll),
            (try_begin),
              (eq, ":dealer_agent", ":player_agent"),
              (display_message, "@Delivered deadly hit!"),
            (else_try),
              (eq, ":inflicted_agent", ":player_agent"),
              (display_message, "@Received deadly hit!", 0xFF0000),
            (try_end),
            (store_mul,":dest_damage", ":inflicted_damage", 2),
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", arrow_of_slaying),
            (agent_slot_eq, ":dealer_agent", slot_agent_special_ability_passiv_cooldown, 0),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_passiv_cooldown, 1),
            (item_get_type, ":cur_weapon_type", ":dealer_item_id"),
            (eq,":cur_weapon_type",itp_type_bow),
            (try_begin),
              (eq, ":dealer_agent", ":player_agent"),
              (display_message, "@Delivered deadly hit!"),
            (else_try),
              (eq, ":inflicted_agent", ":player_agent"),
              (display_message, "@Received deadly hit!", 0xFF0000),
            (try_end),
            (store_mul,":dest_damage", ":inflicted_damage", 2),
            
          (else_try),
            (assign,":result", 0),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", wound_strike),
              (assign,":result", reg1),
            (try_end),
            (this_or_next|eq, ":result", 1),
            (this_or_next|eq, ":dealer_troop", "trp_werewolf_berserker"),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, wound_strike),
            (store_random_in_range, ":r1", 0, 10),
            (try_begin),
              (item_get_type, ":item_type", ":dealer_item_id"),
              (this_or_next|eq, ":item_type", itp_type_crossbow),
              (this_or_next|eq, ":item_type", itp_type_polearm),
              (eq, ":item_type", itp_type_thrown),
              (val_add, ":r1", -4),
            (try_end),
            (le, ":r1", 3),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, wound),
                                                                                     
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 2),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 15),
          (else_try),
            (assign,":result", 0),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", mummy),
              (assign,":result", reg1),
            (try_end),
            (this_or_next|eq, ":result", 1),
            (this_or_next|troop_slot_eq, ":dealer_troop", slot_troop_special_ability, mummy_curse),
            (this_or_next|eq, ":dealer_troop", "trp_demon_8"),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, mummy),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, mummy_curse),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 30),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_sloth_crossbow"),
            (this_or_next|eq, ":dealer_troop", "trp_skeleton_lord"),
            (this_or_next|eq, ":dealer_troop", "trp_undead_magic_1"),
            (this_or_next|eq, ":dealer_troop", "trp_medusa_2"),
            (this_or_next|eq, ":dealer_troop", "trp_ent_1"),
            (eq, ":dealer_troop", "trp_ent_2"),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, entangle),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 5),
          (else_try),
            (assign,":result", 0),
            (try_begin),
              (call_script, "script_cf_agent_has_skill", ":dealer_agent", fear_attack),
              (assign,":result", reg1),
            (try_end),
            (this_or_next|eq, ":result", 1),
            (this_or_next|agent_has_item_equipped,":dealer_agent","itm_giant_gauntlets"),
            (this_or_next|eq,":dealer_troop", "trp_huge_inferno"),
            (this_or_next|eq,":dealer_troop", "trp_inferno"),
            (this_or_next|eq,":dealer_troop", "trp_england_knight_3"),
            (this_or_next|eq,":dealer_troop", "trp_undead_horse_1"),
            (this_or_next|eq,":dealer_troop", "trp_undead_horse_2"),
            (this_or_next|eq,":dealer_troop", "trp_undead_horse_3"),
            (this_or_next|eq, ":dealer_troop", "trp_german_twohander_3"),
            (this_or_next|eq, ":dealer_troop", "trp_minotaur_3"),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, fear_attack),
            (ge,":inflicted_damage", 10),
            (store_random_in_range, ":r1", 0, 10),
            (try_begin),
              (call_script,"script_get_weapon_type",":dealer_item_id"),
              (assign,":weapon_type",reg0),
              (eq,":weapon_type",slot_agent_two_handed_wp),
              (val_add, ":r1", -3),
            (try_end),
            (le, ":r1", 3),
            
            #(agent_start_running_away, ":inflicted_agent"),
            #(agent_set_slot, ":inflicted_agent",  slot_agent_is_running_away, 1),
            (try_begin),
              (neg|agent_slot_ge,":inflicted_agent",slot_agent_extra_shield,1),
              (call_script, "script_cf_agent_set_animation",  ":inflicted_agent", "anim_bash_out_2",0),
              (agent_get_position, pos30, ":inflicted_agent"),
              (position_move_z, pos30, 200),
              (particle_system_burst, "psys_stun_effect", pos30, 1),
            (try_end),
            (val_add, ":dest_damage", 50),
            (call_script,"script_cf_agent_decapitated_effect",":dealer_agent", ":inflicted_agent"),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, warcry),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 5),
          (else_try),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, power_strike),
            (ge,":inflicted_damage", 10),
          (else_try),
            (this_or_next|eq,":dealer_troop", "trp_black_dragon"),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, flameswave),
            (agent_slot_eq, ":dealer_agent", slot_agent_special_ability_passiv_cooldown, 0),
            #(ge,":inflicted_damage", 10),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 3),
            (call_script, "script_cf_agent_flamestrike_passive", ":dealer_agent"),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_passiv_cooldown, 10),
            (try_begin),
              (this_or_next|eq,":dealer_troop","trp_giant_1_2"),
              (eq, ":dealer_troop", "trp_giant_2"),
              (agent_set_slot, ":dealer_agent", slot_agent_special_ability_passiv_cooldown, 5),
            (try_end),
            
          (else_try),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, sidearm_2),
            (agent_slot_eq, ":dealer_agent", slot_agent_special_ability_passiv_cooldown, 0),
            (item_get_type, ":item_type", ":dealer_item_id"),
            #(this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
            #(this_or_next|eq, ":item_type", itp_type_polearm),
            #(eq, ":item_type", itp_type_two_handed_wpn),
            (store_random_in_range, ":r1", 0, 5),
            (le, ":r1", 2),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_passiv_cooldown, 2),
            (call_script, "script_cf_agent_sidearm", ":dealer_agent", 2),
              (try_begin),
                (assign,":basic_time",10),
                (assign,":cost_stamina",15),
                (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
                (gt, ":stamina", ":cost_stamina"),
                (val_div, ":stamina", 20),
                (val_sub, ":basic_time", ":stamina"),
                
                (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_passiv_cooldown, ":basic_time"),
                (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
                (val_sub, ":stamina", ":cost_stamina"),
                (agent_set_slot, ":inflicted_agent", slot_agent_stamina, ":stamina"),
              (try_end),    
            
            (eq, ":dealer_agent",":player_agent"),
            (str_store_string, s2, "@sidearm_2"),
            (display_message, "@you special_ability {s2} is on"),
          (else_try),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, lightning_attack),
            (agent_slot_eq, ":dealer_agent", slot_agent_special_ability_passiv_cooldown, 0),
            #(ge,":inflicted_damage", 10),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 5),
            (call_script, "script_cf_agent_call_lightning_passive", ":dealer_agent"),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_passiv_cooldown, 20),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_charonscall"),
            (this_or_next|eq,":dealer_item_id","itm_aroundight"),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, bane_orc),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|eq, ":inflicted_troop", "trp_ent_1"),
            (neg|eq, ":inflicted_troop", "trp_ent_2"),
            (this_or_next|eq, ":inflicted_troop", "trp_fire_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_lava_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_bone_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_ghost_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_lich_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_red_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_black_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_green_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_gold_dragon"),
            #(this_or_next|eq, ":inflicted_troop", "trp_werewolf_2_a"),
            (this_or_next|eq, ":inflicted_troop", "trp_werewolf_1_a"),
            (this_or_next|eq, ":agent_gender", tf_orc),
            (this_or_next|eq, ":agent_gender", tf_beastman),
            (this_or_next|eq, ":agent_gender", tf_goblin),
            (this_or_next|eq, ":agent_gender", tf_ogre),
            (eq, ":agent_gender", tf_troll),
            (val_add, ":dest_damage", ":inflicted_damage"),
            (val_add, ":dest_damage", 100),
            (val_max, ":dest_damage", 1),
          (else_try),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_stone_mask"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_frankenstein_head"),
            (this_or_next|eq, ":dealer_troop", "trp_grandelf_guard"),
            (this_or_next|eq, ":dealer_troop", "trp_teutonic_dis_knight"),
            (this_or_next|eq,":dealer_item_id","itm_bastard_sword_d_fire"),
            (this_or_next|troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, Confession),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, bane_undead),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (this_or_next|eq, ":inflicted_troop", "trp_bone_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_ghost_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_lich_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_death"),
            (this_or_next|eq, ":inflicted_troop", "trp_wraith"),
            (this_or_next|eq, ":agent_gender", tf_undead),
            (eq, ":agent_gender", tf_vampire),
            (val_add, ":dest_damage", ":inflicted_damage"),
            (val_add, ":dest_damage", 100),
            (val_max, ":dest_damage", 1),
          (else_try),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, smite_human),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|eq, ":inflicted_troop", "trp_death"),
            (neg|eq, ":inflicted_troop", "trp_wraith"),
            (neg|eq, ":inflicted_troop", "trp_fire_dragon"),
            (neg|eq, ":inflicted_troop", "trp_lava_dragon"),
            (neg|eq, ":inflicted_troop", "trp_bone_dragon"),
            (neg|eq, ":inflicted_troop", "trp_ghost_dragon"),
            (neg|eq, ":inflicted_troop", "trp_lich_dragon"),
            (neg|eq, ":inflicted_troop", "trp_red_dragon"),
            (neg|eq, ":inflicted_troop", "trp_black_dragon"),
            (neg|eq, ":inflicted_troop", "trp_green_dragon"),
            (neg|eq, ":inflicted_troop", "trp_gold_dragon"),
            (neg|agent_has_item_equipped,":inflicted_agent","itm_stone_mask"),
            (neg|agent_has_item_equipped,":inflicted_agent","itm_frankenstein_head"),
            (this_or_next|eq, ":inflicted_troop", "trp_ent_1"),
            (this_or_next|eq, ":inflicted_troop", "trp_ent_2"),
            (this_or_next|eq, ":inflicted_troop", "trp_titan_0"),
            (this_or_next|eq, ":inflicted_troop", "trp_titan_1"),
            (this_or_next|eq, ":inflicted_troop", "trp_titan_2"),
            (this_or_next|eq, ":agent_gender", tf_titan),
            (this_or_next|eq, ":agent_gender", tf_male),
            (this_or_next|eq, ":agent_gender", tf_female),
            (this_or_next|eq, ":agent_gender", tf_male_elf),
            (this_or_next|eq, ":agent_gender", tf_female_elf),
            (this_or_next|eq, ":agent_gender", tf_dwarf),
            (this_or_next|eq, ":agent_gender", tf_demon_human),
            (eq, ":agent_gender", tf_vampire),
            (val_add, ":dest_damage", ":inflicted_damage"),
            (val_max, ":dest_damage", 1),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_great_lance2"),
            (this_or_next|eq,":dealer_item_id","itm_morrigan"),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, smite_life),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|agent_has_item_equipped,":inflicted_agent","itm_stone_mask"),
            (neg|agent_has_item_equipped,":inflicted_agent","itm_frankenstein_head"),
            (neg|eq, ":agent_gender", tf_undead),
            (neg|eq, ":agent_gender", tf_vampire),
            (neg|eq, ":inflicted_troop", "trp_death"),
            (neg|eq, ":inflicted_troop", "trp_wraith"),
            (val_add, ":dest_damage", ":inflicted_damage"),
            (val_div, ":dest_damage", 2),
            (val_add, ":dest_damage", 50),
            (val_max, ":dest_damage", 1),
          (else_try),
            (this_or_next|eq, ":dealer_troop", "trp_france_horse_2"),
            (this_or_next|eq, ":dealer_troop", "trp_archangle"),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, smite_evil),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|eq, ":inflicted_troop", "trp_green_dragon"),
            (neg|eq, ":inflicted_troop", "trp_gold_dragon"),
            #(neg|eq, ":inflicted_troop", "trp_werewolf_2_a"),
            (neg|eq, ":inflicted_troop", "trp_titan_0"),
            (neg|eq, ":inflicted_troop", "trp_titan_1"),
            (neg|eq, ":inflicted_troop", "trp_titan_2"),
            (neg|eq, ":inflicted_troop", "trp_ent_1"),
            (neg|eq, ":inflicted_troop", "trp_ent_2"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_stone_mask"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_frankenstein_head"),
            (this_or_next|eq, ":agent_gender", tf_orc),
            (this_or_next|eq, ":agent_gender", tf_titan),
            (this_or_next|eq, ":agent_gender", tf_female_elf),
            (this_or_next|eq, ":agent_gender", tf_demon_human),
            (this_or_next|eq, ":agent_gender", tf_troll),
            (this_or_next|eq, ":agent_gender", tf_goblin),
            (this_or_next|eq, ":agent_gender", tf_ogre),
            (this_or_next|eq, ":agent_gender", tf_undead),
            (eq, ":agent_gender", tf_vampire),
            (val_add, ":dest_damage", ":inflicted_damage"),
            (val_max, ":dest_damage", 1),
          (else_try),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, smite_outsider),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|eq, ":agent_gender", tf_male),
            (neg|eq, ":agent_gender", tf_female),
            (val_add, ":dest_damage", ":inflicted_damage"),
            (val_max, ":dest_damage", 1),
          (try_end),
          
          (try_begin),
            (this_or_next|eq, ":dealer_troop", "trp_npc16"),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (this_or_next|eq, ":dealer_troop", "trp_npc16"),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, mana_burn), 
            (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_mana),
            (val_add, ":dest_damage", ":stamina"),
            (agent_set_slot, ":inflicted_agent", slot_agent_mana, 0),
          
            (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
            (val_add, ":dest_damage", ":stamina"),
            (agent_set_slot, ":inflicted_agent", slot_agent_stamina, 0),
            (agent_get_position, pos30, ":inflicted_agent"),
            (position_move_z, pos30, 130),
            (particle_system_burst, "psys_inquisitor_aura", pos30, 3),
            (play_sound_at_position, "snd_slayer", pos30),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, mana_burn),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 10),
          (try_end),
          
          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_affect_time, 1),
            (agent_slot_eq, ":dealer_agent", slot_agent_special_ability_affect_type, holy_light), 
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 4),
            (val_add, ":dest_damage", 50),
          (try_end),
          
          
          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, smite_orc), 
          #  (troop_get_type, ":agent_gender", ":inflicted_troop"),
          #  (neg|eq, ":inflicted_troop", "trp_ent_1"),
          #  (neg|eq, ":inflicted_troop", "trp_ent_2"),
          #  (this_or_next|eq, ":inflicted_troop", "trp_fire_dragon"),
          #  (this_or_next|eq, ":inflicted_troop", "trp_lava_dragon"),
          #  (this_or_next|eq, ":inflicted_troop", "trp_bone_dragon"),
          #  (this_or_next|eq, ":inflicted_troop", "trp_ghost_dragon"),
          #  (this_or_next|eq, ":inflicted_troop", "trp_lich_dragon"),
          #  (this_or_next|eq, ":inflicted_troop", "trp_red_dragon"),
          #  (this_or_next|eq, ":inflicted_troop", "trp_black_dragon"),
          #  (this_or_next|eq, ":inflicted_troop", "trp_green_dragon"),
          #  (this_or_next|eq, ":inflicted_troop", "trp_gold_dragon"),
          #  (this_or_next|eq, ":inflicted_troop", "trp_werewolf_1_a"),
          #  (this_or_next|eq, ":agent_gender", tf_orc),
          #  (this_or_next|eq, ":agent_gender", tf_beastman),
          #  (this_or_next|eq, ":agent_gender", tf_goblin),
          #  (this_or_next|eq, ":agent_gender", tf_ogre),
          #  (eq, ":agent_gender", tf_troll),
            (val_add, ":dest_damage", 100),
            (agent_get_position, pos30, ":inflicted_agent"),
            (position_move_z, pos30, 130),
            (particle_system_burst, "psys_inquisitor_aura", pos30, 3),
            (play_sound_at_position, "snd_slayer", pos30),
          #  (agent_get_slot,":ticker_time",":dealer_agent",slot_agent_special_ability_extra_counter),
          #  (val_add, ":ticker_time", -10),
          #  (agent_set_slot, ":dealer_agent", slot_agent_special_ability_extra_counter, ":ticker_time"),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_destroyer"),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, head_hunted), 
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|eq, ":inflicted_troop", "trp_death"),
            (neg|eq, ":inflicted_troop", "trp_wraith"),
            (neg|eq, ":inflicted_troop", "trp_fire_dragon"),
            (neg|eq, ":inflicted_troop", "trp_lava_dragon"),
            (neg|eq, ":inflicted_troop", "trp_bone_dragon"),
            (neg|eq, ":inflicted_troop", "trp_ghost_dragon"),
            (neg|eq, ":inflicted_troop", "trp_lich_dragon"),
            (neg|eq, ":inflicted_troop", "trp_red_dragon"),
            (neg|eq, ":inflicted_troop", "trp_black_dragon"),
            (neg|eq, ":inflicted_troop", "trp_green_dragon"),
            (neg|eq, ":inflicted_troop", "trp_gold_dragon"),
            (neg|agent_has_item_equipped,":inflicted_agent","itm_stone_mask"),
            (neg|agent_has_item_equipped,":inflicted_agent","itm_frankenstein_head"),
            (this_or_next|eq, ":inflicted_troop", "trp_ent_1"),
            (this_or_next|eq, ":inflicted_troop", "trp_ent_2"),
            (this_or_next|eq, ":inflicted_troop", "trp_titan_0"),
            (this_or_next|eq, ":inflicted_troop", "trp_titan_1"),
            (this_or_next|eq, ":inflicted_troop", "trp_titan_2"),
            (this_or_next|eq, ":agent_gender", tf_titan),
            (this_or_next|eq, ":agent_gender", tf_male),
            (this_or_next|eq, ":agent_gender", tf_female),
            (this_or_next|eq, ":agent_gender", tf_male_elf),
            (this_or_next|eq, ":agent_gender", tf_female_elf),
            (this_or_next|eq, ":agent_gender", tf_dwarf),
            (this_or_next|eq, ":agent_gender", tf_demon_human),
            (eq, ":agent_gender", tf_vampire),
            (val_add, ":dest_damage", 100),
            (agent_get_position, pos30, ":inflicted_agent"),
            (position_move_z, pos30, 130),
            (particle_system_burst, "psys_inquisitor_aura", pos30, 3),
            (play_sound_at_position, "snd_slayer", pos30),
            (agent_get_slot,":ticker_time",":dealer_agent",slot_agent_special_ability_extra_counter),
            (val_add, ":ticker_time", -10),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_extra_counter, ":ticker_time"),
          (else_try),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, reaper), 
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|agent_has_item_equipped,":inflicted_agent","itm_stone_mask"),
            (neg|agent_has_item_equipped,":inflicted_agent","itm_frankenstein_head"),
            (neg|eq, ":agent_gender", tf_undead),
            (neg|eq, ":agent_gender", tf_vampire),
            (neg|eq, ":inflicted_troop", "trp_death"),
            (neg|eq, ":inflicted_troop", "trp_wraith"),
            (val_add, ":dest_damage", 100),

            (agent_get_position, pos30, ":inflicted_agent"),
            (position_move_z, pos30, 130),
            (particle_system_burst, "psys_inquisitor_aura", pos30, 3),
            (play_sound_at_position, "snd_slayer", pos30),
            (agent_get_slot,":ticker_time",":dealer_agent",slot_agent_special_ability_extra_counter),
            (val_add, ":ticker_time", -10),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_extra_counter, ":ticker_time"),
          (else_try),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, smite_undead), 
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (this_or_next|eq, ":inflicted_troop", "trp_bone_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_ghost_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_lich_dragon"),
            (this_or_next|eq, ":inflicted_troop", "trp_death"),
            (this_or_next|eq, ":inflicted_troop", "trp_wraith"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_stone_mask"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_frankenstein_head"),
            (this_or_next|eq, ":agent_gender", tf_undead),
            (eq, ":agent_gender", tf_vampire),
            (val_add, ":dest_damage", 100),

            (agent_get_position, pos30, ":inflicted_agent"),
            (position_move_z, pos30, 130),
            (particle_system_burst, "psys_inquisitor_aura", pos30, 3),
            (play_sound_at_position, "snd_slayer", pos30),
            (agent_get_slot,":ticker_time",":dealer_agent",slot_agent_special_ability_extra_counter),
            (val_add, ":ticker_time", -10),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_extra_counter, ":ticker_time"),
          (else_try),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, smite_evil), 
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|eq, ":inflicted_troop", "trp_green_dragon"),
            (neg|eq, ":inflicted_troop", "trp_gold_dragon"),
            #(neg|eq, ":inflicted_troop", "trp_werewolf_2_a"),
            (neg|eq, ":inflicted_troop", "trp_titan_0"),
            (neg|eq, ":inflicted_troop", "trp_titan_1"),
            (neg|eq, ":inflicted_troop", "trp_titan_2"),
            (neg|eq, ":inflicted_troop", "trp_ent_1"),
            (neg|eq, ":inflicted_troop", "trp_ent_2"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_stone_mask"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_frankenstein_head"),
            (this_or_next|eq, ":agent_gender", tf_orc),
            (this_or_next|eq, ":agent_gender", tf_titan),
            (this_or_next|eq, ":agent_gender", tf_female_elf),
            (this_or_next|eq, ":agent_gender", tf_demon_human),
            (this_or_next|eq, ":agent_gender", tf_troll),
            (this_or_next|eq, ":agent_gender", tf_goblin),
            (this_or_next|eq, ":agent_gender", tf_ogre),
            (this_or_next|eq, ":agent_gender", tf_undead),
            (eq, ":agent_gender", tf_vampire),
            (val_add, ":dest_damage", 100),

            (agent_get_position, pos30, ":inflicted_agent"),
            (position_move_z, pos30, 130),
            (particle_system_burst, "psys_inquisitor_aura", pos30, 3),
            (play_sound_at_position, "snd_slayer", pos30),
            (agent_get_slot,":ticker_time",":dealer_agent",slot_agent_special_ability_extra_counter),
            (val_add, ":ticker_time", -10),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_extra_counter, ":ticker_time"),
          (else_try),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, smite_outsider), 
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|eq, ":agent_gender", tf_male),
            (neg|eq, ":agent_gender", tf_female),
            (val_add, ":dest_damage", 100),

            (agent_get_position, pos30, ":inflicted_agent"),
            (position_move_z, pos30, 130),
            (particle_system_burst, "psys_inquisitor_aura", pos30, 3),
            (play_sound_at_position, "snd_slayer", pos30),
            (agent_get_slot,":ticker_time",":dealer_agent",slot_agent_special_ability_extra_counter),
            (val_add, ":ticker_time", -10),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_extra_counter, ":ticker_time"),
          (else_try),
            (this_or_next|eq,":dealer_troop","trp_england_billmen_3"),
            (eq, ":dealer_troop", "trp_nord_axeman_1"),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 4),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (this_or_next|eq, ":agent_gender", tf_orc),
            (this_or_next|eq, ":agent_gender", tf_titan),
            (this_or_next|eq, ":agent_gender", tf_troll),
            (this_or_next|eq, ":agent_gender", tf_goblin),
            (this_or_next|eq, ":agent_gender", tf_ogre),
            (eq, ":agent_gender", tf_titan),
            (val_add, ":dest_damage", 100),
            (play_sound_at_position, "snd_slayer", pos30),
          (else_try),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, power_strike), 
            (try_begin),
              (neg|agent_slot_ge,":inflicted_agent",slot_agent_extra_shield,1),
              (call_script, "script_cf_agent_set_animation",  ":inflicted_agent", "anim_bash_out_2",0),
              (agent_get_position, pos30, ":inflicted_agent"),
              (position_move_z, pos30, 200),
              (particle_system_burst, "psys_stun_effect", pos30, 1),
            (try_end),
            (val_add, ":dest_damage", 50),
            (call_script,"script_cf_agent_decapitated_effect",":dealer_agent", ":inflicted_agent"),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, warcry),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 5),
          (else_try),
            (this_or_next|troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, confession),
            (this_or_next|eq,":dealer_item_id","itm_grey_knight_sword"),
            (this_or_next|eq,":dealer_item_id","itm_grey_knight_staff"),
            (this_or_next|eq,":dealer_item_id","itm_grey_knight_poleaxe"),
            
            (this_or_next|eq,":dealer_item_id","itm_natalya_slayer"),
            (this_or_next|eq,":dealer_item_id","itm_angelic_alliance"),
            (this_or_next|eq,":dealer_item_id","itm_angel_blade"),
            (this_or_next|eq, ":dealer_troop", "trp_nord_axeman_2"),
            (this_or_next|eq, ":dealer_troop", "trp_teutonic_horse_3"),
            (this_or_next|eq, ":dealer_troop", "trp_witch_hunter"),
            (eq, ":dealer_troop", "trp_grey_knight_terminator"),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 4),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_stone_mask"),
            (this_or_next|agent_has_item_equipped,":inflicted_agent","itm_frankenstein_head"),
            (this_or_next|eq, ":agent_gender", tf_orc),
            (this_or_next|eq, ":agent_gender", tf_titan),
            (this_or_next|eq, ":agent_gender", tf_female_elf),
            (this_or_next|eq, ":agent_gender", tf_demon_human),
            (this_or_next|eq, ":agent_gender", tf_troll),
            (this_or_next|eq, ":agent_gender", tf_goblin),
            (this_or_next|eq, ":agent_gender", tf_ogre),
            (this_or_next|eq, ":agent_gender", tf_undead),
            (eq, ":agent_gender", tf_vampire),
            (val_add, ":dest_damage", 100),
            (play_sound_at_position, "snd_slayer", pos30),
          (else_try),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 10),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, sinper_shot), 
            (ge,":inflicted_damage", 10),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (neg|eq, ":item_type", itp_type_one_handed_wpn),
            (neg|eq, ":item_type", itp_type_two_handed_wpn),
            (neg|eq, ":item_type", itp_type_polearm),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 1),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (agent_get_position, pos30, ":inflicted_agent"),
            (position_move_z, pos30, 130),
            (particle_system_burst, "psys_inquisitor_aura", pos30, 3),
            (play_sound_at_position, "snd_slayer", pos30),
            #(agent_set_hit_points, ":inflicted_agent", 0, 1),
            (val_add, ":dest_damage", 150),
          #(else_try),
          #  (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 10),
          #  (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, haste_reload), 
          #  (ge,":inflicted_damage", 10),
          #  (agent_set_slot, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_van_helsing_crossbow"),
            (eq,":dealer_item_id","itm_van_helsing_crossbow_auto"),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 4),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (this_or_next|eq, ":agent_gender", tf_titan),
            (this_or_next|eq, ":agent_gender", tf_demon_human),
            (this_or_next|eq, ":agent_gender", tf_troll),
            (eq, ":agent_gender", tf_vampire),
            (val_add, ":dest_damage", 100),
          (try_end),
          
          (try_begin),
            (this_or_next|eq, ":dealer_troop", "trp_german_twohander_2"),
            (this_or_next|eq, ":dealer_troop", "trp_german_twohander_3"),
            (this_or_next|troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, mark_of_khorne),
            (this_or_next|agent_has_item_equipped,":dealer_agent","itm_death_finger"),
            (this_or_next|agent_has_item_equipped,":dealer_agent","itm_death_grip"),
            (eq, ":dealer_troop", "trp_demon_5"),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 4),
            (troop_get_type, ":agent_gender", ":inflicted_troop"),
            (neg|agent_has_item_equipped,":inflicted_agent","itm_stone_mask"),
            (neg|agent_has_item_equipped,":inflicted_agent","itm_frankenstein_head"),
            (neg|eq, ":agent_gender", tf_undead),
            (neg|eq, ":agent_gender", tf_vampire),
            (neg|eq, ":inflicted_troop", "trp_death"),
            (neg|eq, ":inflicted_troop", "trp_wraith"),
            (val_add, ":dest_damage", 50),
          (try_end),

          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_counter, 10),
            (troop_slot_eq, ":dealer_troop", slot_agent_special_ability_affect_type, master_archer), 
            (ge,":inflicted_damage", 10),
            (agent_set_slot, ":dealer_agent", slot_agent_special_ability_counter, 1),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (neg|eq, ":item_type", itp_type_one_handed_wpn),
            (neg|eq, ":item_type", itp_type_two_handed_wpn),
            (neg|eq, ":item_type", itp_type_polearm),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 1),
            (agent_get_position, pos30, ":inflicted_agent"),
            (position_move_z, pos30, 130),
            (particle_system_burst, "psys_inquisitor_aura", pos30, 3),
            (play_sound_at_position, "snd_slayer", pos30),
            #(agent_set_hit_points, ":inflicted_agent", 0, 1),
            (val_add, ":dest_damage", 150),
          (try_end),
          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_troop_special_ability, 1),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability, master_archer), 
            (ge,":inflicted_damage", 10),
            (item_get_type, ":item_type", ":dealer_item_id"),

            (try_begin),
              (agent_get_horse, ":horse_agent", ":inflicted_agent"),
              (gt, ":horse_agent", -1),
              (call_script, "script_cf_knocked_off_horses", ":inflicted_agent", ":inflicted_damage", ":dealer_item_id"),
            (try_end),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 1),
            (agent_get_position, pos51, ":inflicted_agent"),
            (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":inflicted_damage", 5, 3),
            (position_move_z, pos51, 130),
            (particle_system_burst, "psys_inquisitor_aura", pos51, 3),
            (play_sound_at_position, "snd_slayer", pos51),
            #(agent_set_hit_points, ":inflicted_agent", 0, 1),
            (val_add, ":dest_damage", 100),
          (try_end),
          
          (try_begin),
            (this_or_next|agent_slot_eq, ":inflicted_agent", slot_agent_special_ability_affect_type, stoneskin),
            (this_or_next|troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, block),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, block), 
            (assign, ":dest_damage", 0),
          (try_end),
          (try_begin),
            (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, stoneskin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_special_ability_counter, 1),
            (assign, ":dest_damage", 0),
          (try_end),
          
          
          (try_begin),
            (gt, ":dest_damage", 1),
            (store_sub, ":diff_damage", 5, "$g_game_difficulty"),
            (store_div, ":difficulty_factor", 100,":diff_damage"),
            (val_mul, ":dest_damage", ":difficulty_factor"),  
            (val_div, ":dest_damage", 100),
            
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            (call_script, "script_overflow_damage_effect_extra_hp", ":inflicted_agent", ":dest_damage"),
            (val_sub, ":inflicted_agent_hp", ":dest_damage"),
            (val_max, ":inflicted_agent_hp", 0),
            (agent_set_hit_points, ":inflicted_agent", ":inflicted_agent_hp", 1),
            # messages for player
            (assign, reg11, ":dest_damage"),
            (try_begin),
              (eq, "$g_report_shot_distance", 1),
              (eq, ":dealer_agent", ":player_agent"),
              (display_message, "@delivered {reg11} extra damage!", 0xFF0000),
            (else_try),
              (eq, "$g_report_shot_distance", 1),
              (eq, ":inflicted_agent", ":player_agent"),
              (display_message, "@received {reg11} extra damage!", 0xFF0000),
            (try_end),
          (try_end),
        (try_end),

        (try_begin), 
           (agent_is_human, ":inflicted_agent"),
           (neg|eq, ":inflicted_agent", ":player_agent"),
           (neg|agent_slot_eq, ":inflicted_agent", slot_agent_is_running_away, 0), 
           (agent_set_hit_points, ":inflicted_agent", 0, 1),
        (try_end),
      
       (try_begin),
        (agent_is_human, ":dealer_agent"),
        (agent_is_human, ":inflicted_agent"),
        (gt, ":dealer_item_id", -1),
        (agent_get_troop_id, ":inflicted_troop", ":inflicted_agent"),
        (agent_get_troop_id, ":dealer_troop", ":dealer_agent"),
        
        (try_begin),
          (troop_get_inventory_slot_modifier, ":item_modifier",":dealer_troop", ek_gloves),
          (this_or_next|eq,":dealer_troop","trp_grandelf_guard"),
          (this_or_next|eq,":dealer_troop","trp_npc9"),
          (this_or_next|eq,":dealer_item_id","itm_double_sided_sabre_2_onehand"),
          (this_or_next|eq,":dealer_item_id","itm_double_sided_sabre_2"),
          (this_or_next|troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, diffusal_blade),
          (eq, ":item_modifier", imod_well_made),
          (agent_get_slot, ":special", ":inflicted_agent", slot_agent_special_ability_affect_type),
          (assign, ":continue", 0),
          (try_begin),
            (this_or_next|eq,":special", divine_strength),
            (this_or_next|eq,":special", power_strike),
            (this_or_next|eq,":special", haste),
            (this_or_next|eq,":special", stoneskin),
            (this_or_next|eq,":special", regeneration),
            (this_or_next|eq,":special", haste_reload),
            (this_or_next|eq,":special", berserk),
            (this_or_next|eq,":special", battlecry),
            (this_or_next|eq,":special", inspire),
            (agent_slot_ge, ":inflicted_agent", slot_agent_spawned, 1), 
            (assign, ":continue", 1),
          (try_end),
          (eq, ":continue", 1),
          (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, 0),
          (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 0),
          (agent_set_slot, ":inflicted_agent", slot_agent_buff_affect_type, 0),
          (agent_set_slot, ":inflicted_agent", slot_agent_buff_affect_time, 0),
          (try_begin),
            (agent_slot_ge, ":inflicted_agent", slot_agent_spawned, 1), 
            (agent_set_hit_points,":inflicted_agent",0, 1),

          (try_end),      
        (try_end),
        
        (try_begin), #special_weapon_strike
          (store_current_scene,":current_scene"),
          (neg|is_between, ":current_scene", "scn_town_1_arena", "scn_town_1_prison"),
          (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
          (try_begin),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (gt,":weapon",0),
            (this_or_next|eq,":weapon","itm_calibur"),
            (this_or_next|eq,":weapon","itm_great_lance2"),
            (this_or_next|eq,":weapon","itm_morrigan"),
            (this_or_next|eq,":weapon","itm_throwing_pike"),
            (eq, ":weapon", "itm_throwing_pike_melee"),
            (store_random_in_range, ":r1", 0, 100),
            (try_begin),
              (neg|troop_is_hero, ":dealer_troop"),
              (store_random_in_range, ":r1", 0, 500),
            (try_end),
            
            (le, ":r1", 33),
            (agent_set_hit_points,":inflicted_agent",0, 1),
            (val_mul, ":inflicted_damage", 2),
          (try_end),
          (try_begin),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (eq, ":weapon", "itm_kwan_dao"),
            (agent_get_horse,":horse",":dealer_agent"),
            (gt,":horse",0),
            (store_random_in_range, ":r1", 0, 100),
            (le, ":r1", 33),
            (agent_set_hit_points,":inflicted_agent",0, 1),
            (val_mul, ":inflicted_damage", 2),
          (else_try),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (eq, ":weapon", "itm_kwan_dao"),
            (agent_get_horse,":horse",":dealer_agent"),
            (neg|gt,":horse",0),
            (agent_get_horse,":horse",":inflicted_agent"),
            (gt,":horse",0),
            (store_random_in_range, ":r1", 0, 100),
            (le, ":r1", 50),
            (agent_set_hit_points,":inflicted_agent",0, 1),
            (val_mul, ":inflicted_damage", 2),
          (try_end),
          (try_begin),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (eq, ":weapon", "itm_golem_crusher"),
            (this_or_next|is_between, ":inflicted_troop", "trp_air_elemental", "trp_human_magic_1"),
            (this_or_next|is_between, ":inflicted_troop", "trp_golem_1", "trp_sissofbattle"),
            (this_or_next|is_between, ":inflicted_troop", "trp_titan_0", "trp_undead_magic_1"),
            (this_or_next|eq, ":inflicted_troop", "trp_inferno"),
            (this_or_next|eq, ":inflicted_troop", "trp_huge_inferno"),
            (this_or_next|eq, ":inflicted_troop", "trp_ent_1"),
            (eq, ":inflicted_troop", "trp_ent_2"),
            (agent_set_hit_points,":inflicted_agent",0, 1),
            (val_mul, ":inflicted_damage", 2),
          (try_end),
          
          
          
          
          (try_begin),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (eq, ":weapon", "itm_blinding_sand"),
            (agent_set_wielded_item, ":inflicted_agent", -1),
          (try_end),
          
          
          (try_begin),
             (item_get_type,":weapon_type",":dealer_item_id"),
             (this_or_next|eq,":weapon_type",itp_type_polearm),
             (this_or_next|eq,":weapon_type",itp_type_two_handed_wpn),
             (this_or_next|eq,":weapon_type",itp_type_thrown),
             (this_or_next|eq,":dealer_item_id","itm_hurricane_bow"),
             (this_or_next|eq,":dealer_item_id","itm_crossbow_cannon"),
             (eq,":dealer_item_id","itm_jingubang"),
             (agent_get_horse, ":horse_agent", ":inflicted_agent"),
             (gt, ":horse_agent", -1),
             (call_script, "script_cf_knocked_off_horses", ":inflicted_agent", ":inflicted_damage", ":dealer_item_id"),
          (try_end),
                    
          (try_begin),
            (this_or_next|eq,":dealer_item_id","itm_van_helsing_crossbow"),
            (this_or_next|eq,":dealer_item_id","itm_van_helsing_crossbow_auto"),
            (this_or_next|eq,":dealer_item_id","itm_crossbow_cannon"),
            (this_or_next|eq,":dealer_item_id","itm_auriels_bow"),
            (this_or_next|eq,":dealer_item_id","itm_hurricane_bow"),
            (eq, ":dealer_item_id", "itm_colt1855"),
            (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
            (ge,":inflicted_damage",":hp"), 
            (agent_set_hit_points,":inflicted_agent",0, 1),
            (val_mul, ":inflicted_damage", 2),
          (try_end),
                    
          (try_begin),
            (eq,":dealer_item_id","itm_aurora_blade"),
            (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
            (ge,":inflicted_damage",":hp"), 
            (agent_get_position,pos51,":inflicted_agent"),
            (store_mul,":twice_damage", ":inflicted_damage", 2),
            (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":twice_damage", 6, 5),
          (try_end),
          
          (try_begin),
            (eq,":dealer_item_id","itm_jingubang"),
            (store_random_in_range, ":r1", 0, 100),
            (le, ":r1", 50),
            (call_script, "script_cf_agent_earth_shock", ":dealer_agent"),
          (try_end),

          (try_begin),
            (agent_has_item_equipped,":dealer_agent","itm_death_finger"),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, curse),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 3),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, mummy_curse),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 15),
          (try_end),
          
          (try_begin),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (this_or_next|eq,":weapon","itm_enchanter_staff"),
            (eq, ":weapon", "itm_enchanter_staff_1"),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, power_jump),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 5),
          (try_end),
          
          (try_begin),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (eq, ":weapon", "itm_black_king_bar"),
            (agent_get_position,pos51,":inflicted_agent"),
            (store_random_in_range, ":r1", 0, 100),
            (le, ":r1", 33),
            (store_mul,":twice_damage", ":inflicted_damage", 2),
            (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":twice_damage", 6, 17),
          (try_end),
          (try_begin),
            (eq,0, 1),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (eq, ":weapon", "itm_frostfang"),
            #(eq,"$g_use_special_item", 1),
            (agent_get_position,pos51,":inflicted_agent"),
            (store_mul,":twice_damage", ":inflicted_damage", 2),
            (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":twice_damage", 4, 8),
          (try_end),
          
          (try_begin),
            (agent_get_wielded_item,":shield",":inflicted_agent",1),
            (eq, ":shield", "itm_mandolin"),
            (neg|troop_is_hero,":inflicted_troop"),
            (store_random_in_range, ":r1", 0, 10),
            (le, ":r1", 1),
            (agent_set_slot, ":dealer_agent", slot_agent_has_been_special_ability, charm),
            (agent_get_position, pos2, ":dealer_agent"),
            (position_move_z, pos2, 400),
            (particle_system_burst,"psys_charm_rose",pos2,35),
            (agent_get_team, ":agent_charm_team", ":inflicted_agent"),
            (agent_get_team, ":victim_team", ":dealer_agent"),
            (agent_set_team, ":dealer_agent", ":agent_charm_team"),
            (agent_set_slot, ":dealer_agent", slot_agent_old_team_set, ":victim_team"),
            (agent_set_slot, ":dealer_agent", slot_agent_charm_time, 20),
            (agent_force_rethink, ":dealer_agent"),
              (assign, ":inflicted_damage", 0),  
            (set_trigger_result, 0),
          (try_end),
          
          (try_begin),
              (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            
              (eq,":dealer_item_id","itm_sloth_crossbow"),
              (agent_get_position,pos51,":inflicted_agent"),
              (call_script, "script_magic_deliver_area_damage", ":dealer_agent", 50, 6, 17),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, power_poison),
                                                                                       
                                                                                        
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 15),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 10),
              
              
          (try_end),
          
          (try_begin),
            (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
            (ge,":inflicted_damage",":hp"), 
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            
              (this_or_next|eq,":weapon","itm_zamorak"),
              (this_or_next|eq,":dealer_item_id","itm_zamorak"),
              (eq,":dealer_item_id","itm_burning_axe"),
              (store_random_in_range, ":r", 0, 1),
              (eq, ":r", 0),
              (agent_get_position,pos51,":inflicted_agent"),
         
              (store_agent_hit_points, ":hp_old", ":inflicted_agent", 1),
              (agent_set_hit_points, ":inflicted_agent", 100, 0),
              (store_agent_hit_points, ":dead_troop_hp", ":inflicted_agent", 0),
              (agent_set_hit_points, ":inflicted_agent", ":hp_old", 1),
              
              (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":dead_troop_hp", 3, 10),
          (try_end),
          
          (try_begin),
            (eq,":dealer_item_id","itm_dawnbreaker"),
            (store_random_in_range, ":r1", 0, 15),
            (try_begin),
              (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
              (ge,":inflicted_damage",":hp"), 
              (store_random_in_range, ":r1", 0, 8),
            (try_end),
            (eq, ":r1", 1),
            (call_script, "script_cf_agent_dawnbreaker", ":dealer_agent", ":inflicted_agent"),
          (try_end),
          
          (try_begin),
            (this_or_next|eq,":dealer_item_id","itm_frostfang"),
            (eq,":dealer_item_id","itm_frostmourne"),
              (agent_get_slot, ":agent_mana", ":dealer_agent", slot_agent_mana),
              (assign, ":dest_damage", 0),
              (copy_position, pos30, pos0), 
              (assign, ":cost_agent_mana", 33),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              
              (agent_get_position,pos51,":inflicted_agent"),
              (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":inflicted_damage", 4, 8),
              (assign, ":dest_damage", ":inflicted_damage"),
              (val_div, ":dest_damage", 2),
              (val_max, ":dest_damage", 1),
              (val_add, ":inflicted_damage", ":dest_damage"),
              (troop_get_slot, ":inflicted_troop_max_hp", ":inflicted_troop", slot_troop_max_hp),
            
              (store_random_in_range, ":random_no", 0, ":inflicted_troop_max_hp"),
              (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            
              (this_or_next|ge,":random_no", ":inflicted_agent_hp"),
              (ge, ":dest_damage", ":inflicted_troop_max_hp"),
              (agent_set_hit_points,":inflicted_agent",0,0),
              (val_add, ":inflicted_damage", 100),
              
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, freeze),
                                                                                       
                                                                                       
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 15),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 5),
              #(particle_system_burst, "psys_plus_ice_1", pos30, 5),
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 7", 0xFF00),
              (try_end),
          (try_end),
          
          
          
          (try_begin),

            (eq,":dealer_item_id","itm_aroundight"),
              (agent_get_slot, ":agent_mana", ":dealer_agent", slot_agent_mana),
              (assign, ":dest_damage", 0),
              (copy_position, pos30, pos0), 
              (assign, ":cost_agent_mana", 33),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),

              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, wound),
                                                                                       
                                                                                      
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 2),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 3),
              
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 8", 0xFF00),
              (try_end),
              (store_mul,":dest_damage", ":inflicted_damage", 2),
              (store_random_in_range, ":random_no", 0, 100),
              (try_begin),
                (ge, 20, ":random_no"),
                (val_mul,":dest_damage", 5),
              (try_end),
              (val_add, ":inflicted_damage", ":dest_damage"),
          (try_end),
          
          (try_begin),
            (this_or_next|eq,":dealer_item_id","itm_burning_axe"),
            (eq,":dealer_item_id","itm_flame_blade"),
              (agent_get_slot, ":agent_mana", ":dealer_agent", slot_agent_mana),
              (assign, ":dest_damage", 0),
              (copy_position, pos30, pos0), 
              (assign, ":cost_agent_mana", 33),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
              (assign, ":dest_damage", ":inflicted_damage"),
              (try_begin),
                (ge,":inflicted_damage",":hp"), 
                (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
                (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
                (eq, ":item_type", itp_type_polearm),
                (call_script, "script_cf_agent_flamestrike_weak", ":dealer_agent"),
              (else_try),
                (assign, ":dest_damage", ":inflicted_damage"),
                (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, burn),
                                                                                        
                                                                                         
                (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
                (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 6),
              (try_end),
              (particle_system_burst, "psys_ligntaura_glow_red", pos30, 2),
              
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 3", 0xFF00),
              (try_end),
          (try_end),
          
          (try_begin),
            (eq,":dealer_item_id","itm_black_hole_sword"),
              (agent_get_slot, ":agent_mana", ":dealer_agent", slot_agent_mana),
              (assign, ":dest_damage", 0),
              (copy_position, pos30, pos0), 
              (assign, ":cost_agent_mana", 33),
              
              (agent_set_wielded_item, ":inflicted_agent", -1),
              
              (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_mana),
              (val_add, ":dest_damage", ":stamina"),
              (agent_set_slot, ":inflicted_agent", slot_agent_mana, 0),
              (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
              (val_add, ":dest_damage", ":stamina"),
              (agent_set_slot, ":inflicted_agent", slot_agent_stamina, 0),
              
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, thunder),
                                                                                       
                                                                                        
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 10),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 20),
              
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
              (assign, ":dest_damage", ":inflicted_damage"),

              (copy_position,pos6,pos30),
              (position_move_z,pos6,300),
              (particle_system_burst, "psys_black_hold", pos6, 5),
              
              (try_for_agents,":possable_agent"),
                (agent_is_alive,":possable_agent"),
                (this_or_next|agent_is_ally,":dealer_agent"),
                (agent_is_ally,":possable_agent"),
                (this_or_next|neg|agent_is_ally,":possable_agent"),
                (neg|agent_is_ally,":dealer_agent"),

                (agent_get_position,pos3,":possable_agent"),
                (get_distance_between_positions,":dist",pos30,pos3),
                (le,":dist",300),
                (assign,":agent",":possable_agent"),
                
                (agent_get_horse, ":target_horse", ":agent"),
                (try_begin),
                  (gt, ":target_horse", 0),
                  (neg|agent_is_human,":target_horse"),
                  (agent_set_position, ":target_horse", pos30),
                  (agent_set_animation, ":target_horse", "anim_horse_rear"),
                  (call_script, "script_cf_knocked_off_horses", ":agent", 1000, "itm_ebony_poleaxe"),
                (else_try),
                  (agent_set_position, ":agent", pos30),
                (try_end),
                
                (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":agent", ":dest_damage", thunder, 10, 10),
              (try_end),
              
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 4", 0xFF00),
              (try_end),
          (try_end),
          
          (try_begin),
            (eq,":dealer_item_id","itm_golem_crusher"),
            (store_random_in_range, ":r1", 0, 15),
            (try_begin),
              (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
              (ge,":inflicted_damage",":hp"), 
              (store_random_in_range, ":r1", 0, 8),
            (try_end),
            (eq, ":r1", 1),
            (call_script, "script_cf_agent_earth_shock", ":dealer_agent"),
          (try_end),
            
          (store_div,":twice_damage", ":inflicted_damage", 3),
          
          (try_begin),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (eq, ":weapon", "itm_avalon_halberd"),
            (agent_set_wielded_item, ":inflicted_agent", -1),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, wound),
                                                                                     
                                                                                    
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 2),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, warcry),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 5),
          (try_end),
          
          (try_begin),
            (eq,":dealer_item_id","itm_serpent_sword"),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", power_poison, 6, 15),
            
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, power_poison),
                                                                                     
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 15),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 6),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_nord_bow_3"),
            (eq,":dealer_item_id","itm_grief_1"),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", ice, 3, 6),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, ice),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 3),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 3),
          (else_try),
            (eq,":dealer_item_id","itm_grief_2"),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", freeze, 3, 6),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, freeze),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 3),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 3),
          (else_try),
            (eq,":dealer_item_id","itm_swiftness_sword"),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", thunder, 6, 15),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, thunder),
                                                                                     
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 15),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 6),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_zamorak"),
            (eq,":dealer_item_id","itm_burning_axe"),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", burn, 6, 15),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, burn),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 6),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_dawnbreaker_1"),
            (eq,":dealer_item_id","itm_dawnbreaker"),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", holy_fire, 1, 15),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, holy_fire),
                                                                                     
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 15),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 1),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_auriels_bow"),
            (eq,":dealer_item_id","itm_skycutter"),
            (store_div,":twice_damage", ":inflicted_damage", 1),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", holy_fire, 5, 3),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, holy_fire),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 3),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 5),
          (else_try),
            (eq,":dealer_item_id","itm_natalya_slayer"),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", ice, 3, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, ice),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 3),
          (else_try),
            (eq,":dealer_item_id","itm_soul_stealer"),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", curse, 5, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, curse),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 5),
          (else_try),
            (eq,":dealer_item_id","itm_black_knight_sword"),
            (store_div,":twice_damage", ":inflicted_damage", 1),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", curse, 60, 10),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, curse),
                                                                                     
                                                                                      
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 10),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 60),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_rhongomiant"),
            (this_or_next|eq,":dealer_item_id","itm_karztev_bow"),
            (eq,":dealer_item_id","itm_ebony_blade"),
            (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":inflicted_agent", ":twice_damage", curse, 5, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, curse),
                                                                                    
                                                                                     
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 5),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, weakness),
            (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 15),
          (else_try),
            (this_or_next|eq,":dealer_item_id","itm_trgba"),
            (eq,":dealer_item_id","itm_slaughter_axe"),
            
            (troop_get_slot, ":dealer_troop_max_hp", ":dealer_troop", slot_troop_max_hp),
            (troop_get_slot, ":inflicted_troop_max_hp", ":inflicted_troop", slot_troop_max_hp),
            
            (val_div, ":dealer_troop_max_hp", 3),
            
            (store_random_in_range, ":random_no", 0, ":inflicted_troop_max_hp"),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            
            (this_or_next|ge,":random_no", ":inflicted_agent_hp"),
            (ge, ":dealer_troop_max_hp", ":inflicted_troop_max_hp"),
            (agent_set_hit_points,":inflicted_agent",0,0),
            (agent_deliver_damage_to_agent, ":dealer_agent", ":inflicted_agent", 100),
            
          (else_try),
            (eq,":dealer_item_id","itm_charm_bow"),
            (neg|troop_is_hero,":inflicted_troop"),
            (store_random_in_range, ":r1", 0, 2),
            (eq, ":r1", 1),
            (agent_set_slot, ":dealer_agent", slot_agent_has_been_special_ability, charm),
            (agent_get_position, pos2, ":dealer_agent"),
            (position_move_z, pos2, 400),
            (particle_system_burst,"psys_charm_rose",pos2,35),
            (agent_get_team, ":agent_charm_team", ":dealer_agent"),
            (agent_get_team, ":victim_team", ":inflicted_agent"),
            (agent_set_team, ":inflicted_agent", ":agent_charm_team"),
            (agent_set_slot, ":inflicted_agent", slot_agent_old_team_set, ":victim_team"),
            (agent_set_slot, ":inflicted_agent", slot_agent_charm_time, 15),
            (agent_force_rethink, ":inflicted_agent"),
              (assign, ":inflicted_damage", 0),  
            #(agent_add_relation_with_agent, ":inflicted_agent", ":dealer_agent", 1),
            (set_trigger_result, 0),
          (else_try),
            (eq, 1, 0),
            (agent_get_wielded_item,":shield",":dealer_agent",1),
            (eq, ":shield", "itm_tynan_dagger"),
            (agent_get_horse,":horse",":dealer_agent"),
            (neg|gt,":horse",0),
            (call_script,"script_cf_agent_shield_bash",":dealer_agent",-1),
            (store_random_in_range, ":r1", 0, 10),
            (eq, ":r1", 1),
            (agent_start_running_away, ":inflicted_agent"),
            (agent_set_slot, ":inflicted_agent",  slot_agent_is_running_away, 1),
          (else_try),
            (agent_get_wielded_item,":shield",":inflicted_agent",1),
            (eq, ":shield", "itm_tynan_dagger"),
            (agent_get_horse,":horse",":inflicted_agent"),
            (neg|gt,":horse",0),
            (call_script,"script_cf_agent_shield_bash",":inflicted_agent",-1),
            (store_random_in_range, ":r1", 0, 10),
            (eq, ":r1", 1),
            (agent_start_running_away, ":dealer_agent"),
            (agent_set_slot, ":dealer_agent",  slot_agent_is_running_away, 1),
          (try_end),
          (try_begin),
            (this_or_next|eq,":dealer_item_id","itm_flame_blade"),
            (this_or_next|eq,":dealer_item_id","itm_serpent_sword"),
            (eq,":dealer_item_id","itm_angel_blade"),
            (store_random_in_range, ":r1", 0, 15),
            (try_begin),
              (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
              (ge,":inflicted_damage",":hp"), 
              (store_random_in_range, ":r1", 0, 8),
            (try_end),
            (eq, ":r1", 1),
            (call_script, "script_cf_agent_flamestrike_weak", ":dealer_agent"),
          (try_end),
          
          (try_begin),
            (eq,":dealer_item_id","itm_excalibur_2"),
            (store_random_in_range, ":r1", 0, 15),
            (store_random_in_range, ":r2", 5, 16),
            (try_begin),
              (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
              (ge,":inflicted_damage",":hp"), 
              (store_random_in_range, ":r1", 0, 4),
              (store_random_in_range, ":r2", 3, 8),
            (try_end),
            (eq, ":r1", 1),
            #(call_script, "script_cf_agent_flamestrike_weak", ":dealer_agent"),
            (call_script, "script_cf_agent_excalibur_light", ":dealer_agent", ":r2"),
          (try_end),

          (try_begin),
            (eq,":dealer_item_id","itm_hurricane_bow"),
            #(eq,"$g_use_special_item", 1),
            (agent_get_position,pos51,":inflicted_agent"),
            (store_mul,":twice_damage", ":inflicted_damage", 2),
            (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":twice_damage", 5, 3),
          (try_end),
          
          (try_begin),
            (eq,":dealer_item_id","itm_auriels_bow"),
            (agent_get_position,pos51,":inflicted_agent"),
            (store_mul,":twice_damage", ":inflicted_damage", 4),
            (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":twice_damage", 5, 14),
          (try_end),
                    
          (try_begin),
            (this_or_next|eq,":dealer_item_id","itm_excalibur_1"),
            (eq,":dealer_item_id","itm_excalibur_2"),
            #(eq,"$g_use_special_item", 1),
            (agent_get_wielded_item,":cur_weapon",":inflicted_agent",0),
            (agent_get_wielded_item,":cur_sheld",":inflicted_agent",1),
            (agent_get_horse,":cur_horse",":inflicted_agent"),
            (try_begin),
              (gt,":cur_weapon",0),
              (agent_unequip_item, ":inflicted_agent", ":cur_weapon"),
            (try_end), 
            (try_begin),
              (eq,":dealer_item_id","itm_excalibur_2"),
              (gt,":cur_sheld",0),
              (agent_unequip_item, ":inflicted_agent", ":cur_sheld"),
            (try_end), 
            (try_begin),
              (eq,":dealer_item_id","itm_excalibur_2"),
              (gt,":cur_horse",0),
              (agent_get_item_id,":cur_sheld", ":cur_horse"),
              (agent_unequip_item, ":inflicted_agent", ":cur_sheld"),
            (try_end), 
          (try_end),
          
          (try_begin),
            (agent_has_item_equipped,":dealer_agent","itm_satanic_hand"),
            (store_div,":r",":inflicted_damage",4),
            (store_agent_hit_points,":hp",":dealer_agent",1),
            (val_add,":hp",":r"),
            (agent_set_hit_points,":dealer_agent",":hp",1),
          (try_end),
          
          (try_begin),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (this_or_next|eq,":weapon","itm_karztev_bow"),
            (this_or_next|eq,":weapon","itm_ebony_blade"),
            (eq,":weapon","itm_soul_stealer"),
            (store_div,":r",":inflicted_damage",2),
            (store_agent_hit_points,":hp",":dealer_agent",1),
            (val_add,":hp",":r"),
            (agent_set_hit_points,":dealer_agent",":hp",1),
          (else_try),
            (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
            (this_or_next|eq,":weapon","itm_zamorak"),
            (this_or_next|eq,":weapon","itm_bastard_sword_c"),
            (eq,":weapon","itm_calibur"),
            (store_div,":r",":inflicted_damage",5),
            (store_agent_hit_points,":hp",":dealer_agent",1),
            (val_add,":hp",":r"),
            (agent_set_hit_points,":dealer_agent",":hp",1),
          (try_end),
        (try_end),
        
        (try_begin),#special_weapon_imod_strike
          (troop_is_hero,":dealer_troop"),
          (agent_get_wielded_item, ":weapon", ":dealer_agent", 0),
          
          (try_for_range, ":i_slot", 0, 4),
              (troop_get_inventory_slot, ":item",":dealer_troop", ":i_slot"),
              (eq, ":item", ":weapon"),
              (troop_get_inventory_slot_modifier, ":item_modifier",":dealer_troop", ":i_slot"),
          (try_end),
          (agent_get_slot, ":agent_mana", ":dealer_agent", slot_agent_mana),
          (assign, ":dest_damage", 0),
          (copy_position, pos30, pos0), 
            
          (try_begin),
            (try_begin),
              (this_or_next|eq, ":item_modifier", imod_tempered),
              (eq, ":item_modifier", imod_masterwork),
              (assign, ":dest_damage", ":inflicted_damage"),
              (val_div, ":dest_damage", 4),
              (val_max, ":dest_damage", 1),
            (else_try),
              (eq, ":item_modifier", imod_powerful),
              (assign, ":dest_damage", 5),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, poison),
                                                                                      
                                                                                       
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 1),
            (else_try),
              (eq, ":item_modifier", imod_balanced),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, thunder),
                                                                                      
                                                                                       
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 2),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 1),
            (else_try),
              (eq, ":item_modifier", imod_strong),
              (assign, ":dest_damage", 5),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_type, slow),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_ability_affect_time, 5),
              
            (else_try),
              (this_or_next|eq, ":dealer_item_id", "itm_nord_bow_3"),
              (this_or_next|eq, ":dealer_item_id", "itm_stalhrim_sword"),
              (this_or_next|eq, ":dealer_item_id", "itm_stalhrim_greatsword"),
              (this_or_next|eq, ":dealer_item_id", "itm_stahlrim_axe"),
              (this_or_next|eq, ":dealer_item_id", "itm_stahlrim_battleaxe"),
              (this_or_next|eq, ":dealer_item_id", "itm_stalhrim_sword_short"),
              (this_or_next|eq, ":dealer_item_id", "itm_golem_crusher"),
              (eq, ":item_modifier", imod_sharp),
              (assign, ":dest_damage", 5),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, ice),
                                                                                      
                                                                                       
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 3),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 3),
            (else_try),
              (eq, ":item_modifier", imod_deadly),
              (assign, ":dest_damage", ":inflicted_damage"),
              (val_div, ":dest_damage", 4),
              (val_max, ":dest_damage", 1),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, wound),
                                                                                       
                                                                                      
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 2),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 3),
            (try_end),
          (try_end),
          
          (assign, ":c", 0),
          (try_begin),
            (agent_slot_eq, ":dealer_agent", slot_agent_player_braced, 1),
            (assign, ":c", 1),
          (else_try),
            (neg|eq, ":player_agent", ":dealer_agent"),
            (assign, ":c", 1),
          (else_try),
            (this_or_next|key_is_down, "$key_special_5"),
            (key_clicked, "$key_special_5"),
            (assign, ":c", 1),
          (try_end),

          (try_begin),
           # (this_or_next|neg|eq, ":player_agent", ":dealer_agent"),
           # (agent_slot_eq, ":dealer_agent", slot_agent_player_braced, 1),
            (eq, ":c", 1),
            (try_begin),
              (eq, ":item_modifier", imod_masterwork),
              (assign, ":cost_agent_mana", 75),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              (item_get_type, ":item_type", ":dealer_item_id"),
              (try_begin),
                (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
                (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
                (eq, ":item_type", itp_type_polearm),
                (call_script, "script_cf_agent_excalibur_light", ":dealer_agent", 7),
                #(call_script, "script_cf_agent_dragon_voice_weak", ":dealer_agent"),
              (else_try),
                (agent_get_position,pos51,":inflicted_agent"),
                (store_mul,":twice_damage", ":inflicted_damage", 3),
                (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":twice_damage", 7, 3),
                (try_begin),
                  (agent_get_horse, ":horse_agent", ":inflicted_agent"),
                  (gt, ":horse_agent", -1),
                  (call_script, "script_cf_knocked_off_horses", ":inflicted_agent", 1000, "itm_ebony_poleaxe"),
                (try_end),
              (try_end),
              (assign, ":dest_damage", ":inflicted_damage"),
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 6", 0xFF00),
              (try_end),
            (else_try),
              #(this_or_next|eq, ":dealer_item_id", "itm_nord_bow_3"),
              #(this_or_next|eq, ":dealer_item_id", "itm_stalhrim_sword"),
              #(this_or_next|eq, ":dealer_item_id", "itm_stalhrim_greatsword"),
              #(this_or_next|eq, ":dealer_item_id", "itm_stahlrim_axe"),
              #(this_or_next|eq, ":dealer_item_id", "itm_stahlrim_battleaxe"),
              #(this_or_next|eq, ":dealer_item_id", "itm_stalhrim_sword_short"),
              #(this_or_next|eq, ":dealer_item_id", "itm_golem_crusher"),
              (eq, ":item_modifier", imod_sharp),
              (assign, ":cost_agent_mana", 33),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              
              (agent_get_position,pos51,":inflicted_agent"),
              (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":inflicted_damage", 4, 8),
              (assign, ":dest_damage", ":inflicted_damage"),
              (val_div, ":dest_damage", 2),
              (val_max, ":dest_damage", 1),
              
              (troop_get_slot, ":inflicted_troop_max_hp", ":inflicted_troop", slot_troop_max_hp),
            
              (store_random_in_range, ":random_no", 0, ":inflicted_troop_max_hp"),
              (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            
              (this_or_next|ge,":random_no", ":inflicted_agent_hp"),
              (ge, ":dest_damage", ":inflicted_troop_max_hp"),
              (agent_set_hit_points,":inflicted_agent",0,0),
              (val_add, ":inflicted_damage", 100),
              
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, freeze),
                                                                                       
                                                                                       
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 15),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 5),
              #(particle_system_burst, "psys_plus_ice_1", pos30, 5),
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 7", 0xFF00),
              (try_end),
            (else_try),
              (eq, ":item_modifier", imod_fine),
              (assign, ":cost_agent_mana", 5),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              (assign, ":dest_damage", 50),
            (else_try),
              (eq, ":item_modifier", imod_powerful),
              (assign, ":cost_agent_mana", 15),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              (assign, ":dest_damage", 20),
              (particle_system_burst, "psys_element_burst_poisoning", pos30, 40),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, power_poison),
                                                                                       
                                                                                       
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 15),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 6),
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 1", 0xFF00),
              (try_end),
            (else_try),
              (eq, ":item_modifier", imod_balanced),
              (assign, ":cost_agent_mana", 15),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              (agent_set_wielded_item, ":inflicted_agent", -1),
              
              (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_mana),
              (val_add, ":dest_damage", ":stamina"),
              (agent_set_slot, ":inflicted_agent", slot_agent_mana, 0),
              (agent_get_slot, ":stamina", ":inflicted_agent", slot_agent_stamina),
              (val_add, ":dest_damage", ":stamina"),
              (agent_set_slot, ":inflicted_agent", slot_agent_stamina, 0),
              
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, thunder),
                                                                                       
                                                                                        
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 10),
              (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 20),
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 2", 0xFF00),
              (try_end),
            (else_try),
              (eq, ":item_modifier", imod_tempered),
              (assign, ":cost_agent_mana", 33),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
              (assign, ":dest_damage", ":inflicted_damage"),
              (try_begin),
                (ge,":inflicted_damage",":hp"), 
                (try_begin),
                  (this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
                  (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
                  (eq, ":item_type", itp_type_polearm),
                  (call_script, "script_cf_agent_flamestrike_weak", ":dealer_agent"),
                (else_try),
                  (agent_get_position,pos51,":inflicted_agent"),
                  (troop_get_slot, ":dead_troop_hp", ":inflicted_troop", slot_troop_max_hp),
                  (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":dead_troop_hp", 3, 10),
                (try_end),
              (else_try),
                (assign, ":dest_damage", ":inflicted_damage"),
                (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_type, burn),
                                                                                        
                                                                                         
                (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_time, 5),
                (agent_set_slot, ":inflicted_agent", slot_agent_special_damage_power, 6),
              (try_end),
              (particle_system_burst, "psys_ligntaura_glow_red", pos30, 2),
              
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 3", 0xFF00),
              (try_end),
            (else_try),
              (eq, ":item_modifier", imod_deadly),
              (assign, ":cost_agent_mana", 33),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 8", 0xFF00),
              (try_end),
              (store_mul,":dest_damage", ":inflicted_damage", 2),
              (store_random_in_range, ":random_no", 0, 100),
              (try_begin),
                (ge, 20, ":random_no"),
                (val_mul,":dest_damage", 5),
              (try_end),
            (else_try),
              (eq, ":item_modifier", imod_strong),
              (assign, ":cost_agent_mana", 40),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              
              (assign, ":dest_damage", ":inflicted_damage"),

              (copy_position,pos6,pos30),
              (position_move_z,pos6,300),
              (particle_system_burst, "psys_black_hold", pos6, 5),
              
              (try_for_agents,":possable_agent"),
                (agent_is_alive,":possable_agent"),
                (this_or_next|agent_is_ally,":dealer_agent"),
                (agent_is_ally,":possable_agent"),
                (this_or_next|neg|agent_is_ally,":possable_agent"),
                (neg|agent_is_ally,":dealer_agent"),

                (agent_get_position,pos3,":possable_agent"),
                (get_distance_between_positions,":dist",pos30,pos3),
                (le,":dist",300),
                (assign,":agent",":possable_agent"),
                
                (agent_get_horse, ":target_horse", ":agent"),
                (try_begin),
                  (gt, ":target_horse", 0),
                  (neg|agent_is_human,":target_horse"),
                  (agent_set_position, ":target_horse", pos30),
                  (agent_set_animation, ":target_horse", "anim_horse_rear"),
                  (call_script, "script_cf_knocked_off_horses", ":agent", 1000, "itm_ebony_poleaxe"),
                (else_try),
                  (agent_set_position, ":agent", pos30),
                (try_end),
                
                (call_script, "script_magic_deliver_damage_to_agent", ":dealer_agent", ":agent", ":dest_damage", thunder, 10, 10),
              (try_end),
              
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 4", 0xFF00),
              (try_end),
            (else_try),
              (eq, ":item_modifier", imod_heavy),
              (assign, ":cost_agent_mana", 50),
              (ge, ":agent_mana", ":cost_agent_mana"),
              (val_sub, ":agent_mana", ":cost_agent_mana"),
              (agent_set_slot, ":dealer_agent", slot_agent_mana, ":agent_mana"),
              
              (call_script, "script_cf_agent_set_animation",  ":inflicted_agent", "anim_bash_out_2",0),
              #(agent_get_position, pos30, ":inflicted_agent"),
              (particle_system_burst, "psys_element_burst_sky", pos30, 2),
              (position_move_z, pos30, 200),
              (particle_system_burst, "psys_stun_effect", pos30, 1),
              (agent_get_position,pos51,":inflicted_agent"),
              (call_script, "script_magic_deliver_area_damage", ":dealer_agent", ":inflicted_damage", 5, 3),
              (assign, ":dest_damage", ":inflicted_damage"),
              (try_begin),
                (agent_get_horse, ":horse_agent", ":inflicted_agent"),
                (gt, ":horse_agent", -1),
                (call_script, "script_cf_knocked_off_horses", ":inflicted_agent", ":inflicted_damage", ":dealer_item_id"),
              (try_end),
              (try_begin),
                (this_or_next|eq, ":dealer_agent", ":player_agent"),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@eledm 5", 0xFF00),
              (try_end),
            (try_end),
          (try_end),
          
          (try_begin),
              (gt, ":dest_damage", 1),
              (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
              (call_script, "script_overflow_damage_effect_extra_hp", ":inflicted_agent", ":dest_damage"),
              (val_sub, ":inflicted_agent_hp", ":dest_damage"),
              (val_max, ":inflicted_agent_hp", 0),
              (agent_set_hit_points, ":inflicted_agent", ":inflicted_agent_hp", 1),
              # messages for player
              (assign, reg11, ":dest_damage"),
              (try_begin),
                (eq, "$g_report_shot_distance", 1),
                (eq, ":dealer_agent", ":player_agent"),
                (display_message, "@delivered {reg11} extra damage!", 0xFF0000),
              (else_try),
                (eq, "$g_report_shot_distance", 1),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@received {reg11} extra damage!", 0xFF0000),
              (try_end),
          (try_end),
        (try_end),
       (try_end),
        
        (try_begin), ## knock_back between humans
          (agent_is_human, ":inflicted_agent"),
          (assign, ":stealth_female_elf", 0),
          (try_begin),
            (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
            (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, power_strike), 
            (assign,":block_attack",0),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 0),
            (le,":inflicted_agent_hp",50),
            (assign, ":stealth_female_elf", 1),
          (else_try),
            #(troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, cull_the_weak),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", cull_the_weak),
            (assign,":block_attack",0),
            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 0),
            (le,":inflicted_agent_hp",50),
            (assign, ":stealth_female_elf", 1),
          (else_try),
            (call_script, "script_cf_agent_has_skill", ":dealer_agent", arrow_of_slaying),
            (item_get_type, ":cur_weapon_type", ":dealer_item_id"),
            (eq,":cur_weapon_type",itp_type_bow),
            (assign, ":stealth_female_elf", 1),
          (try_end),
          (this_or_next|ge, ":stealth_female_elf", 1),
          (eq,":block_attack",0),
          
          (agent_get_position, pos1, ":inflicted_agent"),
          (agent_get_position, pos2, ":dealer_agent"),
          (try_begin),
            (item_get_type, ":item_type", ":dealer_item_id"),
            (assign, ":dest_damage_rate", 0),
            (agent_get_slot, ":stealth_level", ":dealer_agent", slot_agent_stealth_level),
            (store_mul, ":stealth_attack_rate", ":stealth_level",5),
            (try_begin),
              (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
              (this_or_next|eq, ":item_type", itp_type_polearm),
              (this_or_next|eq, ":item_type", itp_type_bow),
              (eq, ":item_type", itp_type_thrown),
              (store_mul, ":stealth_attack_rate", ":stealth_level",10),
            (try_end),
            (try_begin),
              (eq,":dealer_item_id","itm_undead_scythe"),
              (assign, ":stealth_attack_rate", 200),
            (try_end),
            (try_begin),
              (this_or_next|eq, ":dealer_troop", "trp_ghost_dragon"),
              (this_or_next|eq, ":dealer_troop", "trp_demon_4_2"),
              (eq, ":dealer_troop", "trp_demon_4_3"),
              (assign, ":stealth_female_elf", 1),
            (else_try),
              (is_currently_night),
              (troop_get_type, ":agent_gender", ":dealer_troop"),
              (eq, ":agent_gender", tf_female_elf),
              (assign, ":stealth_female_elf", 1),
            (else_try),
              (neg|is_currently_night),
              (troop_get_type, ":agent_gender", ":inflicted_troop"),
              (eq, ":agent_gender", tf_male_elf),
              (assign, ":stealth_female_elf", -1),
            (try_end),
            (store_random_in_range, ":random_no", 0, 100),
            (try_begin),
              (neg|eq, ":stealth_female_elf", -1),
              (this_or_next|ge, ":stealth_female_elf", 1),
              (this_or_next|eq, ":item_type", itp_type_crossbow),
              (this_or_next|ge, ":stealth_attack_rate", ":random_no"),
              (position_is_behind_position, pos2, pos1),
              (try_begin),
                (this_or_next|eq, ":item_type", itp_type_two_handed_wpn),
                (eq, ":item_type", itp_type_polearm),
                (assign, ":dest_damage_rate", 75),
              (else_try),
                (this_or_next|eq, ":item_type", itp_type_bow),
                (eq, ":item_type", itp_type_thrown),
                (ge, ":stealth_level", 1),
                (assign, ":dest_damage_rate", 50),
              (else_try),
                (this_or_next|eq, ":item_type", itp_type_pistol),
                (eq, ":item_type", itp_type_one_handed_wpn),
                (assign, ":dest_damage_rate", 25),
                (store_mul, ":stealth_attack_damage_rate", ":stealth_level",10),
                (val_add, ":dest_damage_rate", ":stealth_attack_damage_rate"),
              (else_try),
                #(this_or_next|eq, ":item_type", itp_type_bow),
                (this_or_next|eq, ":item_type", itp_type_crossbow),
                (eq, ":item_type", itp_type_musket),
                (ge, ":stealth_level", 1),
                (assign, ":dest_damage_rate", 50),
                (store_mul, ":stealth_attack_damage_rate", ":stealth_level",10),
                (val_add, ":dest_damage_rate", ":stealth_attack_damage_rate"),
              (try_end),
            (try_end),
            (gt, ":dest_damage_rate", 0),
            (store_mul, ":dest_damage", ":inflicted_damage", ":dest_damage_rate"),
            (val_div, ":dest_damage", 100),
            
            (val_max, ":dest_damage",  1),
            (try_begin),
              (ge, ":stealth_level", 1),
              (store_mul, ":stealth_attack_rate", ":stealth_level",5),
              (val_max, ":dest_damage",  ":stealth_attack_rate"),
            (try_end),

            (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
            
            (try_begin),
              (agent_get_troop_id, ":inflicted_troop", ":inflicted_agent"),
              (this_or_next|troop_slot_eq, ":inflicted_troop", slot_troop_spell_1, block),
              (this_or_next|troop_slot_eq, ":inflicted_troop", slot_troop_spell_2, block),
              (this_or_next|troop_slot_eq, ":inflicted_troop", slot_troop_spell_3, block),
              (this_or_next|troop_slot_eq, ":inflicted_troop", slot_troop_spell_4, block),
              (this_or_next|troop_slot_eq, ":inflicted_troop", slot_troop_special_ability_passive, block),
              (troop_slot_eq, ":inflicted_troop", slot_troop_special_ability, block), 
              (assign, ":dest_damage", 0),
            (try_end),
            (call_script, "script_overflow_damage_effect_extra_hp", ":inflicted_agent", ":dest_damage"),
            (val_sub, ":inflicted_agent_hp", ":dest_damage"),
            (val_max, ":inflicted_agent_hp", 0),
            (agent_set_hit_points, ":inflicted_agent", ":inflicted_agent_hp", 1),
            # messages for player
            (assign, reg10, ":dest_damage"),
            (try_begin),
              (position_is_behind_position, pos2, pos1),
              (try_begin),
                (eq, "$g_report_shot_distance", 1),
                (eq, ":dealer_agent", ":player_agent"),
                (display_message, "@Delivered {reg10} extra damage from behind!", 0xFF0000),
              (else_try),
                (eq, "$g_report_shot_distance", 1),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@Received {reg10} extra damage from behind!", 0xFF0000),
              (try_end),
            (else_try),
              (try_begin),
                (eq, "$g_report_shot_distance", 1),
                (eq, ":dealer_agent", ":player_agent"),
                (display_message, "@delivered {reg10} extra damage!", 0xFF0000),
              (else_try),
                (eq, "$g_report_shot_distance", 1),
                (eq, ":inflicted_agent", ":player_agent"),
                (display_message, "@received {reg10} extra damage!", 0xFF0000),
              (try_end),
            (try_end),
          (try_end),
        (else_try),## inflicted_agent is horse, dealer_troop is on foot and uses polearm or thrust
          (assign, ":pass", 0),
          (troop_get_type, ":agent_gender", ":inflicted_troop"),
          (try_begin),
            (neg|agent_is_human, ":inflicted_agent"),
            (assign, ":pass", 1),
          (else_try),
            (this_or_next|eq, ":agent_gender", tf_beastman),
            (this_or_next|eq, ":agent_gender", tf_ogre),
            (eq, ":agent_gender", tf_giant_dwarf),
            (assign, ":pass", 2),
          (else_try),
            (this_or_next|eq, ":agent_gender", tf_titan),
            (eq, ":agent_gender", tf_troll),
            (assign, ":pass", 3),
          (else_try),
            (agent_get_horse, ":dealer_agent_horse_id", ":inflicted_agent"),
            (neg|eq, ":dealer_agent_horse_id", -1),
            (assign, ":pass", 2),
          (try_end),
          (ge, ":pass", 1),
          #(neg|agent_is_human, ":inflicted_agent"),
          (agent_get_horse, ":dealer_agent_horse_id", ":dealer_agent"),
          #(eq, ":dealer_agent_horse_id", -1),
          (agent_get_action_dir, ":action_dir", ":dealer_agent"),
          (item_get_type, ":item_type", ":dealer_item_id"),
          
          (assign, ":extra_damage_rate", 0),
          (assign, ":extra_damage_2", 0),
          (try_begin),
            (ge, ":pass", 2),
            (eq, ":item_type", itp_type_polearm),
            (try_begin),
              (item_has_property, ":dealer_item_id", itp_is_pike),
              (this_or_next|eq, ":agent_gender", tf_titan),
              (eq, ":agent_gender", tf_troll),
              (assign, ":extra_damage_rate", 200),
            (try_end),
            
            (try_begin),
              (neg|eq, ":dealer_agent_horse_id", -1),
              (eq, ":action_dir", 0),
              (item_has_property, ":dealer_item_id", itp_couchable),
              (val_add, ":extra_damage_2", 100), 
            (try_end),
            
            (try_begin),
              (item_has_property, ":dealer_item_id", itp_is_glaive),
              (assign, ":extra_damage_rate", 100),
              (val_add, ":extra_damage_2", 50), 
            (try_end),
            
            (try_begin),
              (neg|item_has_property, ":dealer_item_id", itp_is_pike),
              (neg|item_has_property, ":dealer_item_id", itp_couchable),
              (neg|item_has_property, ":dealer_item_id", itp_is_glaive),
              (try_begin),
                (eq, ":action_dir", 0),
                (assign, ":extra_damage_rate", 100),
              (else_try),
                (assign, ":extra_damage_rate", 50),
              (try_end),
            (try_end),
          (else_try),
            (eq, ":dealer_agent_horse_id", -1),
            (agent_is_human, ":inflicted_agent"),
            (eq, ":pass", 1),
            
            (try_begin),
              (agent_slot_ge, ":dealer_agent", slot_agent_special_ability_extra_counter, 1),
              (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_extra, smite_orc), 
              (assign, ":extra_damage_rate", 120),
            (else_try),
              (this_or_next|eq,":dealer_troop","trp_england_billmen_3"),
              (this_or_next|eq, ":dealer_troop", "trp_nord_axeman_1"),
              (this_or_next|eq, ":dealer_troop", "trp_nord_axeman_2"),
              (troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, bane_orc),
              (assign, ":extra_damage_rate", 80),
            (else_try),
              (eq, ":item_type", itp_type_polearm),
              (try_begin),
                (item_has_property, ":dealer_item_id", itp_is_pike),
                (assign, ":extra_damage_rate", 300),
              (else_try),
                (eq, ":action_dir", 0),
                (assign, ":extra_damage_rate", 120),
              (else_try),
                (assign, ":extra_damage_rate", 80),
              (try_end),
            (else_try),
              #(this_or_next|eq, ":item_type", itp_type_crossbow),
              (eq, ":item_type", itp_type_musket),
              (assign, ":extra_damage_rate", 100),
            #(else_try),
              #(this_or_next|eq, ":item_type", itp_type_one_handed_wpn),
              #(eq, ":item_type", itp_type_two_handed_wpn),
              #(eq, ":action_dir", 0),
              #(assign, ":extra_damage_rate", 50),
            (else_try),
              #(this_or_next|eq, ":item_type", itp_type_pistol),
              #(this_or_next|eq, ":item_type", itp_type_bow),
              (eq, ":item_type", itp_type_thrown),
              (assign, ":extra_damage_rate", 25),
            (try_end),
          (else_try),
            (eq, ":pass", 1),
            (try_begin),
              (eq, ":item_type", itp_type_polearm),
              (eq, ":action_dir", 0),
              (assign, ":extra_damage_rate", 60),
            (else_try),
              (eq, ":item_type", itp_type_crossbow),
              (assign, ":extra_damage_rate", 50),
            (else_try),
              (this_or_next|eq, ":item_type", itp_type_musket),
              (eq, ":item_type", itp_type_thrown),
              (assign, ":extra_damage_rate", 50),
            (try_end),
          (try_end),
          
          
          
          (gt, ":extra_damage_rate", 0),
          (store_mul, ":extra_damage", ":inflicted_damage", ":extra_damage_rate"),
          (val_div, ":extra_damage", 100),
          (val_add, ":extra_damage", ":extra_damage_2"),
          (try_begin),
            (store_sub, ":diff_damage", 5, "$g_game_difficulty"),
            (store_div, ":difficulty_factor", 100,":diff_damage"),
            (val_mul, ":extra_damage", ":difficulty_factor"),  
            (val_div, ":extra_damage", 100),
          (try_end),
          
          (store_agent_hit_points, ":inflicted_agent_hp", ":inflicted_agent", 1),
          (call_script, "script_overflow_damage_effect_extra_hp", ":inflicted_agent", ":extra_damage"),

          (val_sub, ":inflicted_agent_hp", ":extra_damage"),
          (val_max, ":inflicted_agent_hp", 0),
          (agent_set_hit_points, ":inflicted_agent", ":inflicted_agent_hp", 1),
          # messages for player
          (assign, reg10, ":extra_damage"),
          (try_begin),
            (eq, "$g_report_shot_distance", 1),
            (eq, ":dealer_agent", ":player_agent"),
            (try_begin),
              (agent_get_rider, ":rider_agent", ":inflicted_agent"),
              (gt, ":rider_agent", -1),
              (display_message, "@Delivered {reg10} damage to horse."),
            (else_try),
              (display_message, "@Delivered {reg10} damage."),
            (try_end),
          (try_end),
          (try_begin),
            (eq, "$g_report_shot_distance", 1),
            (agent_get_horse, ":player_horse_id", ":player_agent"),
            (eq, ":player_horse_id", ":inflicted_agent"),
            (display_message, "@Horse received {reg10} damage."),
          (try_end),
        (try_end),
        
        (try_begin), #-- Decapitations --#
          (party_get_slot, ":use", "p_main_party", slot_party_horse_use_charge),
          (this_or_next|troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, mark_of_khorne),
          (eq,":use",0),
          (this_or_next|troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, mark_of_khorne),
          (ge, ":inflicted_damage", 20), 
          (eq,":block_attack",0),
          (store_current_scene,":current_scene"),
          (neg|is_between, ":current_scene", "scn_town_1_arena", "scn_town_1_prison"),
          (neg|is_between, ":current_scene", "scn_multi_scene_1", "scn_multiplayer_maps_end"),
          (agent_is_non_player, ":inflicted_agent"),
          (agent_is_human, ":inflicted_agent"),
          (neq, ":inflicted_agent", -1),
          (agent_get_troop_id, ":victim_troop", ":inflicted_agent"),
          (ge, ":victim_troop", 0),
          (neg|troop_is_hero, ":victim_troop"),
          (troop_get_type,":victim_gender",":victim_troop"),
          
          (agent_get_item_slot, ":item", ":inflicted_agent", 4), #head slot
          (neg|eq, ":item", "itm_demon_head"),
          
          (store_agent_hit_points, ":hp", ":inflicted_agent", 1),
          (assign, ":run", 0), 
          (try_begin), 
             (eq, ":victim_gender", tf_undead),
             (ge, ":inflicted_damage", 20), 
             (store_random_in_range, ":diceroll", 0, 100), 
             (try_begin), 
               (this_or_next|is_between, ":dealer_item_id", "itm_bishop_staff", "itm_chaos_axe"),
               (this_or_next|is_between, ":dealer_item_id", "itm_wooden_staff_1", "itm_nec_robe"),
               (this_or_next|is_between, ":dealer_item_id", "itm_staff", "itm_scythe"),
               (this_or_next|is_between, ":dealer_item_id", "itm_wooden_stick", "itm_sickle"),
               (is_between, ":dealer_item_id", "itm_mace_1", "itm_sarranid_axe_a"),
               (store_random_in_range, ":diceroll", 0, 75), 
             (try_end),
             (le, ":diceroll", 33), 
             (assign, ":run", 1),
          (else_try),
             (ge, ":inflicted_damage", 30), 
             (val_add, ":hp", 10), 
             (ge, ":inflicted_damage", ":hp"),
             (assign, ":run", 1),
          (try_end),
          (eq, ":run", 1), ### One of the checks were true, continue to run script
          
          # Hitboxes near neck
          (this_or_next|troop_slot_eq, ":dealer_troop", slot_troop_special_ability_passive, mark_of_khorne),
          (this_or_next | eq, ":hit_bone", hb_head),
          (this_or_next | eq, ":hit_bone", hb_thorax),
          (this_or_next | eq, ":hit_bone", hb_shoulder_l),
          (this_or_next | eq, ":hit_bone", hb_upperarm_l),
          (this_or_next | eq, ":hit_bone", hb_upperarm_r),
          (eq, ":hit_bone", hb_shoulder_r),
          
          (copy_position, pos5, pos0), ### Transfer the position of the hit to make sure it dosn't change while the script is running
          
          (call_script, "script_goredec_special_effects", ":inflicted_agent", ":inflicted_damage", ":dealer_item_id", ":dealer_agent"),
        (try_end),#-- Decapitations END --#
      (try_end),
    ])

custom_commander_weapon_strike =(
  ti_on_agent_hit, 0, 0, [],
    [
      (store_trigger_param_1, ":inflicted_agent"),
      (store_trigger_param_2, ":dealer_agent"),
      (store_trigger_param_3, ":inflicted_damage"),
      
      (get_player_agent_no, ":player_agent"),
      (assign, ":dealer_item_id", reg0),
    ])

ironflesh = (1, 0, 0, [], 
[
    (try_for_agents, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (try_begin),
        (agent_get_slot, ":special", ":agent_no", slot_agent_special_damage_type),
        (gt,":special", 0),
        (agent_get_slot, ":time", ":agent_no", slot_agent_special_damage_time),
        (gt, ":time", 0),
        (assign, ":pass", 0),
        (try_begin),
          (agent_is_human, ":agent_no"),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (troop_get_type, ":agent_gender", ":troop_no"),
          
          (try_begin),
            (store_skill_level,":magic_defence","skl_magic_defence",":troop_no"),
            (eq,":magic_defence",10),
            (assign, ":pass", 1),
          (try_end),
          
          (try_begin),
            (this_or_next|agent_has_item_equipped,":agent_no","itm_stone_mask"),
            (agent_has_item_equipped,":agent_no","itm_frankenstein_head"),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, thunder),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, freeze),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, ice),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, curse),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, poison),
            (assign, ":pass", 1),
          (else_try),
            (this_or_next|eq, ":agent_gender", tf_orc),
            (eq, ":agent_gender", tf_ogre),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, poison),
            (assign, ":pass", 1),
          (else_try),
            (eq, ":agent_gender", tf_troll),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, freeze),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, poison),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, ice),
            (assign, ":pass", 1),
          (else_try),
            (eq, ":agent_gender", tf_demon_human),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, severe_burn),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, curse),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, burn),
            (assign, ":pass", 1),
          (else_try),
            (eq, ":agent_gender", tf_female_elf),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, curse),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, poison),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, ice),
            (assign, ":pass", 1),
          (else_try),
            (eq, ":agent_gender", tf_undead),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, curse),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, poison),
            (assign, ":pass", 1),
          (else_try),
            (eq, ":agent_gender", tf_vampire),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, curse),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, poison),
            (assign, ":pass", 1),
          (else_try),
            (eq, ":agent_gender", tf_beastman),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, curse),
            (assign, ":pass", 1),
          (else_try),
            (this_or_next|agent_has_item_equipped,":agent_no","itm_zamorak"),
            (this_or_next|agent_has_item_equipped,":agent_no","itm_burning_axe"),
            (eq, ":agent_gender", tf_giant_dwarf),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, freeze),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, severe_burn),
            #(this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, ice),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, poison),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, burn),
            (assign, ":pass", 1),
          (else_try),
            (eq, ":agent_gender", tf_dwarf),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, ice),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, poison),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, burn),
            (assign, ":pass", 1),
          (else_try),
            (eq, ":agent_gender", tf_titan),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, ice),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, freeze),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, poison),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, thunder),
            (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, severe_burn),
            (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, burn),
            (assign, ":pass", 1),
          (else_try),
            (assign, ":pass", 0),
          (try_end),
        (try_end),
        
        (try_begin),
          (eq, ":pass", 1),
          (assign, ":time", 1),
        (try_end),
                
        (val_sub, ":time", 1),
        (try_begin),
          (neg|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, power_jump),
                    
          (agent_set_no_dynamics, ":agent_no", 0),
                           
        (try_end), 
        (agent_set_slot, ":agent_no", slot_agent_special_damage_time, ":time"),
        (eq, ":time", 0),
        
 
        
        (agent_set_slot, ":agent_no",  slot_agent_special_damage_type, 0),
                                                                          
                  
        (agent_set_slot, ":agent_no", slot_agent_special_damage_power, 0),
      (try_end),  

    (try_end),

    (try_for_agents, ":agent_no"),
      (eq, "$g_use_critical_hit", 0),
      (agent_is_alive, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_get_slot, ":backup_hp", ":agent_no", slot_agent_backup_hp),
      (gt, ":backup_hp", 0),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      (store_skill_level,":ironflesh",skl_ironflesh,":troop_no"),
      (assign, ":ironflesh_2",":ironflesh"),
      (assign,":dist",3500),
      (store_mul,":sub_dist",":ironflesh_2",-200),
      (val_add, ":dist", ":sub_dist"),
      #(val_clamp, ":dist", 0, 3001),
      (call_script, "script_cf_agent_check_no_enemies_nearby", ":agent_no", ":dist"),
      #(eq,reg0, 0),
      (try_begin),
        (troop_get_type, ":agent_gender", ":troop_no"),
        (try_begin),
          (agent_has_item_equipped,":agent_no","itm_stone_mask"),
          (val_mul, ":ironflesh", 4), 
        (else_try),
          (eq, ":agent_gender", tf_male_elf),
          (val_mul, ":ironflesh", 1), 
          (val_div, ":ironflesh", 2), 
        (else_try),
          (this_or_next|eq, ":agent_gender", tf_orc),
          (eq, ":agent_gender", tf_ogre),
          (val_mul, ":ironflesh", 3), 
          (val_div, ":ironflesh", 1), 
        (else_try),
          #(this_or_next|eq, ":troop_no", "trp_red_dragon"),
          #(this_or_next|eq, ":troop_no", "trp_black_dragon"),
          #(this_or_next|eq, ":troop_no", "trp_green_dragon"),
          #(this_or_next|eq, ":troop_no", "trp_gold_dragon"),
          (eq, ":agent_gender", tf_troll),
          (val_mul, ":ironflesh", 6), 
          (val_div, ":ironflesh", 1), 
        (else_try),
          (eq, ":agent_gender", tf_goblin),     
          (val_mul, ":ironflesh", 1), 
          (val_div, ":ironflesh", 2), 
        (else_try),
          (eq, ":agent_gender", tf_undead),
          (val_mul, ":ironflesh", 0), 
        (else_try),
          (this_or_next|agent_has_item_equipped,":agent_no","itm_stone_mask"),
          (this_or_next|eq, ":agent_gender", tf_demon_human),
          (eq, ":agent_gender", tf_vampire),
          (val_mul, ":ironflesh", 4), 
        (else_try),
          (this_or_next|eq, ":agent_gender", tf_female_elf),
          (eq, ":agent_gender", tf_beastman),
          (val_mul, ":ironflesh", 3), 
          (val_div, ":ironflesh", 1), 
        (else_try),
          (this_or_next|eq, ":agent_gender", tf_titan),
          (eq, ":agent_gender", tf_giant_dwarf),
          (val_mul, ":ironflesh", 4), 
          (val_div, ":ironflesh", 1), 
        (else_try),
          (eq, ":agent_gender", tf_dwarf),
          (val_mul, ":ironflesh", 4), 
          (val_div, ":ironflesh", 2), 
        (try_end),

        #(assign,":c",0),
        (try_begin),
          (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, burn),
          (neg|eq, ":agent_gender", tf_titan),
          (neg|eq, ":agent_gender", tf_giant_dwarf),
          (neg|eq, ":agent_gender", tf_dwarf),
          (neg|eq, ":agent_gender", tf_demon_human),
          (neg|agent_has_item_equipped,":agent_no","itm_zamorak"),
          (neg|eq, ":troop_no", "trp_red_dragon"),
          (neg|eq, ":troop_no", "trp_black_dragon"),
          (val_mul, ":ironflesh", 0), 
          #(assign,":c",1),
        (else_try),
          (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, marked_for_death),
          (val_mul, ":ironflesh", 0), 
          #(assign,":c",1),
        (else_try),
          (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, curse),
          (neg|eq, ":agent_gender", tf_undead),
          (neg|eq, ":agent_gender", tf_vampire),
          (neg|eq, ":agent_gender", tf_demon_human),
          (neg|eq, ":agent_gender", tf_female_elf),
          (neg|agent_has_item_equipped,":agent_no","itm_zamorak"),
          (neg|agent_has_item_equipped,":agent_no","itm_stone_mask"),
          (neg|agent_has_item_equipped,":agent_no","itm_frankenstein_head"),
          (neg|eq, ":troop_no", "trp_red_dragon"),
          (neg|eq, ":troop_no", "trp_black_dragon"),
          (neg|eq, ":troop_no", "trp_green_dragon"),
          (neg|eq, ":troop_no", "trp_gold_dragon"),
          (val_mul, ":ironflesh", 0), 
          #(assign,":c",1),
        (else_try),
          (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, poison),
          (neg|eq, ":agent_gender", tf_orc),
          (neg|eq, ":agent_gender", tf_ogre),
          (neg|eq, ":agent_gender", tf_vampire),
          (neg|eq, ":agent_gender", tf_undead),
          (neg|eq, ":agent_gender", tf_giant_dwarf),
          (neg|eq, ":agent_gender", tf_dwarf),
          (neg|eq, ":agent_gender", tf_demon_human),
          (neg|eq, ":agent_gender", tf_female_elf),
          (neg|agent_has_item_equipped,":agent_no","itm_zamorak"),
          (neg|agent_has_item_equipped,":agent_no","itm_stone_mask"),
          (neg|agent_has_item_equipped,":agent_no","itm_frankenstein_head"),
          (neg|eq, ":troop_no", "trp_red_dragon"),
          (neg|eq, ":troop_no", "trp_black_dragon"),
          (neg|eq, ":troop_no", "trp_green_dragon"),
          (neg|eq, ":troop_no", "trp_gold_dragon"),
          (val_mul, ":ironflesh", 0), 
          #(assign,":c",1),
        (else_try),
          (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, freeze),
          (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, ice),
          (neg|eq, ":agent_gender", tf_troll),
          (neg|eq, ":agent_gender", tf_giant_dwarf),
          (neg|eq, ":agent_gender", tf_dwarf),
          (neg|agent_has_item_equipped,":agent_no","itm_zamorak"),
          (neg|agent_has_item_equipped,":agent_no","itm_stone_mask"),
          (neg|agent_has_item_equipped,":agent_no","itm_frankenstein_head"),
          (neg|eq, ":troop_no", "trp_red_dragon"),
          (neg|eq, ":troop_no", "trp_black_dragon"),
          (neg|eq, ":troop_no", "trp_gold_dragon"),
          (val_mul, ":ironflesh", 0), 
          #(assign,":c",1),
        (else_try),
          (agent_slot_eq, ":agent_no", slot_agent_special_ability_affect_type, mummy_curse),
          (neg|eq, ":agent_gender", tf_beastman),
          (neg|eq, ":agent_gender", tf_undead),
          (neg|eq, ":agent_gender", tf_vampire),
          (neg|eq, ":agent_gender", tf_demon_human),
          (neg|eq, ":agent_gender", tf_female_elf),
          (neg|agent_has_item_equipped,":agent_no","itm_zamorak"),
          (neg|agent_has_item_equipped,":agent_no","itm_stone_mask"),
          (neg|agent_has_item_equipped,":agent_no","itm_frankenstein_head"),
          (neg|eq, ":troop_no", "trp_red_dragon"),
          (neg|eq, ":troop_no", "trp_black_dragon"),
          (neg|eq, ":troop_no", "trp_green_dragon"),
          (neg|eq, ":troop_no", "trp_gold_dragon"),
          (val_mul, ":ironflesh", 0), 
          #(assign,":c",1),
        (else_try),
          (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, wound),
          (neg|eq, ":agent_gender", tf_undead),
          (neg|eq, ":agent_gender", tf_female_elf),
          (neg|eq, ":agent_gender", tf_male_elf),
          (neg|eq, ":agent_gender", tf_dwarf),
          (neg|eq, ":agent_gender", tf_male),
          (neg|eq, ":agent_gender", tf_female),
          (neg|eq, ":agent_gender", tf_vampire),
          (neg|agent_has_item_equipped,":agent_no","itm_stone_mask"),
          (neg|agent_has_item_equipped,":agent_no","itm_frankenstein_head"),
          (val_mul, ":ironflesh", 0), 
          #(assign,":c",1),
        (else_try),
          (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, wound_strike),
          (neg|eq, ":agent_gender", tf_undead),
          (neg|eq, ":agent_gender", tf_vampire),
          (neg|agent_has_item_equipped,":agent_no","itm_stone_mask"),
          (neg|agent_has_item_equipped,":agent_no","itm_frankenstein_head"),
          (val_mul, ":ironflesh", 0), 
        (else_try),
          (this_or_next|agent_slot_eq, ":agent_no", slot_agent_special_damage_type, holy_fire),
          (agent_slot_eq, ":agent_no", slot_agent_special_damage_type, severe_burn),
          (neg|agent_has_item_equipped,":agent_no","itm_zamorak"),
          (neg|eq, ":troop_no", "trp_gold_dragon"),
          
          (val_mul, ":ironflesh", 0), 
          #(assign,":c",1),
        (try_end),
      (try_end),
      
      #(eq,":c",0),
      (gt, ":ironflesh", 0), 
      (store_div,":add_hp",":ironflesh",2),
      (val_clamp, ":add_hp", 1, 26),

      (store_agent_hit_points, ":hp_2", ":agent_no", 0),
      (lt, ":hp_2", 100),
      (store_agent_hit_points, ":agent_hp", ":agent_no", 1),
      
      (agent_get_slot, ":backup_hp", ":agent_no", slot_agent_backup_hp),
      (val_min, ":add_hp", ":backup_hp"),
      (val_add, ":agent_hp", ":add_hp"),
      (agent_set_hit_points, ":agent_no", ":agent_hp", 1),
      (val_sub, ":backup_hp", ":add_hp"),
      (agent_set_slot, ":agent_no", slot_agent_backup_hp, ":backup_hp"),
    (try_end),
    

    (try_for_agents, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_get_troop_id, ":troop_no", ":agent_no"),
      (try_begin),
        (troop_has_item_equipped,":troop_no","itm_frankenstein_head"),
        (store_agent_hit_points, ":hp", ":agent_no", 1),
        (val_add,":hp",50),
        (agent_set_hit_points, ":agent_no", ":hp", 1),
      (try_end),
      (try_begin),
        (this_or_next|troop_has_item_equipped,":troop_no","itm_dragon_heart_plate_new"),
        (troop_has_item_equipped,":troop_no","itm_dragon_heart_plate"),
        (store_agent_hit_points, ":hp", ":agent_no", 0),
        (val_add,":hp",5),
        (agent_set_hit_points, ":agent_no", ":hp", 0),
      (try_end),
      (try_begin),
        (troop_has_item_equipped,":troop_no","itm_armlet_mordiggian"),
        (store_agent_hit_points, ":hp", ":agent_no", 0),
        (val_add,":hp",-1),
        (agent_set_hit_points, ":agent_no", ":hp", 0),
      (try_end),
      (try_begin),
        (troop_has_item_equipped,":troop_no","itm_crimson_guard_plate"),
        (store_agent_hit_points, ":hp", ":agent_no", 1),
        (val_add,":hp",10),
        (agent_set_hit_points, ":agent_no", ":hp", 1),
      (try_end),
      
      (try_begin),
        (troop_has_item_equipped,":troop_no","itm_bastard_sword_d_fire"),
        (store_agent_hit_points, ":hp", ":agent_no", 1),
        (val_add,":hp",5),
        (agent_set_hit_points, ":agent_no", ":hp", 1),
      (try_end),
      (try_begin),
        (troop_has_item_equipped,":troop_no","itm_vanguard_shield"),
        (store_agent_hit_points, ":hp", ":agent_no", 1),
        (val_add,":hp",8),
        (agent_set_hit_points, ":agent_no", ":hp", 1),
      (try_end),
    (try_end),
    
    ])



horse_rear_t = (0, 0, 0, [],
       [
        (get_player_agent_no,":player"),
        (agent_is_alive,":player"),
        (agent_get_horse,":horse",":player"),
        (try_begin),
          (gt,":horse",0),
          (key_clicked, "$key_special_1"),
          (agent_set_animation,":horse","anim_horse_rear"),
        (else_try),
          (assign,":special",force_jump),
          (call_script, "script_cf_troop_can_use_special_ability", ":special", "$g_player_troop"),
          (key_clicked, "$key_special_1"),
          (game_key_is_down, gk_jump), 
          (agent_get_slot, ":stamina", ":player", slot_agent_stamina),
          (assign, ":cost_stamina", 30),
          (ge, ":stamina", ":cost_stamina"),
          
          (agent_get_horse, ":horse_agent", ":player"),
          (try_begin),
            (ge, ":horse_agent", 0),
            (agent_get_item_id, ":item_no", ":horse_agent"),
            #(neg|eq,":agent_force_jump",":player"),
            (item_has_property, ":item_no", itp_is_magic_staff),
            (agent_set_no_dynamics, ":horse_agent", 1),
            (agent_get_position, pos1, ":horse_agent"),
            (position_move_z,pos1,500),
            (agent_set_position, ":horse_agent", pos1),
            (agent_set_animation, ":horse_agent", "anim_horse_jump2", 0),
          (else_try),
            (lt, ":horse_agent", 0),
            (agent_set_no_dynamics, ":player", 1),
            (agent_get_position, pos1, ":player"),
            (position_move_z,pos1,500),
            (agent_set_position, ":player", pos1),
            (agent_set_animation, ":player", "anim_sw_force_jump2", 0),
          (try_end),        
          (agent_set_slot, ":player", slot_agent_is_fly, 20),


          (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
          (display_message, "@you special_ability {s2} is on"),    
          (val_sub, ":stamina", ":cost_stamina"),
          (agent_set_slot, ":player", slot_agent_stamina, ":stamina"),
        (try_end),
        ])

        
horse_archer_skirmish = (
   1, 0, 0, [(eq, "$g_battle_won", 0)],
   [
      (eq, 1, 2),
      (set_fixed_point_multiplier, 1),
      (try_for_agents, ":agent"),
        (agent_is_non_player, ":agent"),
        (agent_is_human, ":agent"),
        (agent_is_alive, ":agent"),
        (agent_get_division, ":class", ":agent"),
        (eq, ":class", grc_horse_archers),
        (agent_slot_eq, ":agent", slot_agent_is_running_away, 0), #Isn't routing.
        #(agent_is_defender, ":agent"),

        (agent_get_team, ":team", ":agent"),
        (neg|eq, "$fplayer_team_no", ":team"),
        
        (agent_get_ammo, ":ammo_left", ":agent"),
        (agent_get_horse, ":horse", ":agent"),
        (agent_get_slot, ":spawned_timer", ":agent", slot_agent_spawned),

        (try_begin),
          (gt, ":spawned_timer", 0),
          (agent_set_division, ":agent", grc_spearmen),
        (else_try),
          (gt, ":horse", 0),
          (le, ":ammo_left", 0),
          (agent_set_division, ":agent", grc_cavalry),
        (else_try),
          (le, ":horse", 0),
          (ge, ":ammo_left", 0),
          (agent_set_division, ":agent", grc_archers),
        (else_try),
          (le, ":horse", 0),
          (le, ":ammo_left", 0),
          (agent_set_division, ":agent", grc_infantry),
        (try_end),
        (agent_get_division, ":class", ":agent"),
        (eq, ":class", grc_horse_archers),
                
        (agent_get_position, pos1, ":agent"),
        (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team", pos1), # Find distance of nearest 3 enemies

        (call_script, "script_raf_agent_skirmish", ":agent", reg0, reg1),
      (try_end),
   ])

agent_give_modifier = (
	ti_on_agent_spawn, 0, 0, [(neg|is_vanilla_warband),],
	[
		(store_trigger_param_1, ":agent"),
		(agent_is_human, ":agent"),
		(agent_is_active, ":agent"),
		(agent_get_troop_id, ":troop", ":agent"),
		(neg|troop_is_hero, ":troop"),
		(store_character_level, ":level", ":troop"),
		(agent_get_party_id, ":party", ":agent"),
		(try_begin),
			(gt, ":party", -1),
			(party_get_skill_level, ":leader_level", ":party", skl_tactics),
			(val_mul, ":leader_level", 3),
			(val_add, ":level", ":leader_level"),
		(try_end),
		(try_for_range, ":ek_slot", ek_item_0, ek_horse),
			(agent_get_item_slot, ":item", ":agent", ":ek_slot"),
			(gt, ":item", 0),
			(store_random_in_range, ":rand", 0, 100),
			(ge, ":level", ":rand"),
			(call_script, "script_cf_get_item_new_mod", ":item", imod_plain),
			(is_between, reg0, imod_fine, imod_large_bag + 1),
			(try_begin),
				(call_script, "script_cf_item_has_modifier", ":item", reg0),
				(agent_set_item_slot_modifier, ":agent", ":ek_slot", reg0),
			(else_try),
				(call_script, "script_get_next_better_modifier_of_item", ":item", reg0),
				(is_between, reg0, imod_fine, imod_large_bag + 1),
				(agent_set_item_slot_modifier, ":agent", ":ek_slot", reg0),
			(try_end),
		(try_end),
	]
)
         
custom_commander_commom_triggers = [
    
    #(1, 0, ti_once, [(neq, "$g_battle_result", 0)],[(eq, "$freelancer_state", 1),(call_script, "script_freelancer_keep_field_loot"),]),
	(ti_tab_pressed, 0, 0, [(neq, "$g_battle_result", 0),(neg|is_vanilla_warband),], [(call_script, "script_freelancer_keep_field_loot"),]),
    custom_commander_camera,
    custom_commander_agent_refill_ammo,
    custom_commander_cheat_refill_ammo,
    custom_commander_change_weather,
    #custom_commander_toggle_charging,
    custom_commander_horse_speed,
    set_player_target,
    shield_bash_player,
    shield_bash_agent,
    shield_bash_time,

    init_troop_extra_hp,
    shoot_ai,
    extra_hp_when_knocked_down,
    automatic_fire_test_2,
    #init_forcefield_on_back,
    #clear_forcefield_on_back,
    magic_trigger_1,
    #vortices_magic_trigger,
    magic_trigger_player,
    
    horse_rear_t,
    special_ability_trigger_player,
    special_ability_trigger_1,
    special_ability_trigger_2,
    init_troop_extra_power,
    delay_action_trigger,
	agent_give_modifier,
  ]
battle_triggers = [
    custom_commander_fill_agent_empty_wpn_slot,
    custom_commander_agent_weapons_fix,
    ironflesh,
    horses_spook,
    horses_spook2,
    horses_spook3,
    #custom_commander_weapon_strike,
    custom_commander_special_strike,
    armor_modify_decrease,
    ##gold_trigger,
    #freelance_contribution_trigger,
    kill_troop_trigger,
    #init_troop_extra_power,
  ]
  
  
arena_battle_triggers = [
  ## CC
  custom_commander_camera,
  custom_commander_agent_refill_ammo,
  custom_commander_cheat_refill_ammo,
  custom_commander_change_weather,
  custom_commander_horse_speed,
  set_player_target,
  #custom_commander_weapon_strike,
  custom_commander_special_strike,
    #special_ability_trigger_player,
    #special_ability_trigger_1,
    #special_ability_trigger_2,

  #custom_commander_fill_agent_empty_wpn_slot,
    custom_commander_agent_weapons_fix,
    kill_troop_trigger,
    delay_action_trigger,
    automatic_fire_test_2,

    horse_rear_t,
    shield_bash_time,
    shield_bash_agent,
    shield_bash_player,
    init_troop_extra_power,

    ironflesh,
    horses_spook,
    horses_spook2,
    horses_spook3,
  ## CC
  ]

add_quick_battle_troop = (ti_after_mission_start, 0, 0, [],
       [
       
       (store_current_scene, ":cur_scene"),
       (modify_visitors_at_site, ":cur_scene"),                      
       
      (try_begin),
        (eq, "$g_quick_battle_game_type", 1),
        (assign, ":cur_entry_point", 0),
        (assign, ":party_no", "p_temp_party"),
        
        (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
        (val_clamp, ":num_stacks", 0, 16),
        (try_for_range, ":slot_no", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":troop_no", ":party_no", ":slot_no"),
          (gt, ":troop_no", 0),
          (party_stack_get_size, ":stack_size", ":party_no", ":slot_no"),
          #(val_clamp, ":stack_size", 0, 101),
          (add_visitors_to_current_scene, ":cur_entry_point",  ":troop_no", ":stack_size", 0),
          #(set_visitors, ":cur_entry_point", ":troop_no", ":stack_size"),
          #(val_add, ":cur_entry_point", 1),
        (try_end),
        
        (assign, ":cur_entry_point", 32),
        (assign, ":party_no", "p_temp_party_2"),
        
        (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
        (val_clamp, ":num_stacks", 0, 16),
        (try_for_range, ":slot_no", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":troop_no", ":party_no", ":slot_no"),
          (gt, ":troop_no", 0),
          (party_stack_get_size, ":stack_size", ":party_no", ":slot_no"),
          #(val_clamp, ":stack_size", 0, 101),
          (add_visitors_to_current_scene, ":cur_entry_point",  ":troop_no", ":stack_size", 1),
          #(set_visitors, ":cur_entry_point", ":troop_no", ":stack_size"),
          (val_add, ":cur_entry_point", 1),
        (try_end),
      (else_try),
       
        (assign, ":cur_entry_point", 0),
        (assign, ":party_no", "p_temp_party"),
        
        (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
        (val_clamp, ":num_stacks", 0, 16),
        (try_for_range, ":slot_no", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":troop_no", ":party_no", ":slot_no"),
          (gt, ":troop_no", 0),
          (party_stack_get_size, ":stack_size", ":party_no", ":slot_no"),
          #(val_clamp, ":stack_size", 0, 101),
          (add_visitors_to_current_scene, ":cur_entry_point",  ":troop_no", ":stack_size", 0),
          #(set_visitors, ":cur_entry_point", ":troop_no", ":stack_size"),
          #(val_add, ":cur_entry_point", 1),
        (try_end),
        
        (assign, ":cur_entry_point", 16),
        (assign, ":party_no", "p_temp_party_2"),
        
        (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
        (val_clamp, ":num_stacks", 0, 16),
        (try_for_range, ":slot_no", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":troop_no", ":party_no", ":slot_no"),
          (gt, ":troop_no", 0),
          (party_stack_get_size, ":stack_size", ":party_no", ":slot_no"),
          #(val_clamp, ":stack_size", 0, 101),
          (add_visitors_to_current_scene, ":cur_entry_point",  ":troop_no", ":stack_size", 1),
          #(set_visitors, ":cur_entry_point", ":troop_no", ":stack_size"),
          (val_add, ":cur_entry_point", 1),
        (try_end),
      (try_end),
      
       (try_for_range, ":stack_troop", 0, "trp_quartermaster"),
         (troop_set_slot, ":stack_troop", slot_troop_num_killed, 0),
         (troop_set_slot, ":stack_troop", slot_troop_num_wounded, 0),
         (troop_set_slot, ":stack_troop", slot_troop_num_routed, 0),
         (troop_set_slot, ":stack_troop", slot_troop_kill_count, 0),
         (troop_set_slot, ":stack_troop", slot_troop_wound_count, 0),
         (troop_set_slot, ":stack_troop", slot_troop_size, 0),
       (try_end),  
      ])
    
quick_battle_triggers = [
    custom_commander_camera,
    custom_commander_agent_refill_ammo,
    add_quick_battle_troop,
    custom_commander_horse_speed,  #17
    set_player_target,
    shield_bash_player,
    shield_bash_agent,
    shield_bash_time,
    automatic_fire_test_2,
    magic_trigger_1,
    init_forcefield_on_back,
    #clear_forcefield_on_back,
    #vortices_magic_trigger,
    magic_trigger_player,
    horse_rear_t,
    custom_commander_cheat_refill_ammo,
    custom_commander_fill_agent_empty_wpn_slot,
    custom_commander_agent_weapons_fix,
    ironflesh,   #27
    horses_spook, 
    horses_spook2,
    horses_spook3,
    #custom_commander_weapon_strike,
    custom_commander_special_strike,
    init_troop_extra_power,
    special_ability_trigger_player,
    special_ability_trigger_1,  #31
    special_ability_trigger_2,  #32 
    kill_troop_trigger,         #33
    delay_action_trigger,
    init_troop_extra_hp,
    shoot_ai,
    extra_hp_when_knocked_down,
	agent_give_modifier,
  ]
  
## CC


common_courage_triggers = [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),

         (assign, ":initial_courage_score", 3000),
         (assign, ":cur_morale", 50),
         (agent_get_troop_id, ":troop_id", ":agent_no"),
         (store_character_level, ":troop_level", ":troop_id"),
         (val_mul, ":troop_level", 200), #average : 20 * 200 = 4000
         (val_add, ":initial_courage_score", ":troop_level"), #average : 20 * 35 = 700
         
         (store_random_in_range, ":randomized_addition_courage", 0, 3000), #average : 1500
         (val_add, ":initial_courage_score", ":randomized_addition_courage"), 
         (try_begin),
           (agent_get_party_id, ":agent_party", ":agent_no"),         
           ## CC
           (ge, ":agent_party", 0),
           ## CC
           (party_get_morale, ":cur_morale", ":agent_party"),
         (try_end),
         (store_sub, ":morale_effect_on_courage", ":cur_morale", 60),#this can effect morale with -1800..1200
         (val_mul, ":morale_effect_on_courage", 30), #this can effect morale with -2100..900
         (val_add, ":initial_courage_score", ":morale_effect_on_courage"), 
         #average = 3000 + 4000 + 1500 = 8500; min : 6700, max : 9700
         #average = 5000 + 700 + 1500 = 7200; min : 5700, max : 8700
         #morale effect = min : -2100(party morale is 0), average : 0(party morale is 70), max : 900(party morale is 100)
         #min starting : 3600, max starting  : 9600, average starting : 7200
         (agent_set_slot, ":agent_no", slot_agent_courage_score, ":initial_courage_score"), 
      ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        (store_trigger_param_3, ":is_wounded"),


        ## skill overhaul
        (try_begin),
          (ge, ":dead_agent_no", 0),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
          (try_begin),
            (troop_is_hero, ":dead_agent_troop_id"),
            (assign, ":is_wounded", 1),
          (else_try),
            (neg|troop_is_hero, ":dead_agent_troop_id"),
            (agent_is_human, ":killer_agent_no"),
            (try_begin),
              (agent_slot_eq, ":dead_agent_no", slot_agent_vc_wounded, -1),	#drowning
              (assign, ":is_wounded", 0),
            (try_end),
            (neg|agent_slot_eq, ":dead_agent_no", slot_agent_vc_wounded, -1),	#drowning
            (eq, ":is_wounded", 0), 
            (try_begin),
              (store_skill_level, ":ironflesh_level", "skl_ironflesh", ":dead_agent_troop_id"),
              (val_min, ":ironflesh_level", 10),
              (val_mul, ":ironflesh_level", 3),
              (store_random_in_range, ":rand", 0, 100),
              (lt, ":rand", ":ironflesh_level"),
              (assign, ":is_wounded", 1),
            (else_try),
              (eq, 1, 0),
              (agent_get_party_id, ":agent_party_id", ":dead_agent_no"),
              (assign, ":continue", 0),
              (try_begin),
                (eq, ":agent_party_id", "p_main_party"), # belongs to player's party
                (assign, ":continue", 1),
              (else_try),
                (is_between, ":agent_party_id", centers_begin, centers_end),
                (party_slot_eq, ":agent_party_id", slot_town_lord, "trp_player"), # belongs to player's center
                (assign, ":continue", 1),
              (try_end),
              (eq, ":continue", 2),
              (party_get_skill_level, ":surgery_level", "p_main_party", "skl_surgery"),
              (val_min, ":surgery_level", 14),
              (val_mul, ":surgery_level", 4),
              (store_random_in_range, ":rand_2", 0, 100),
              (lt, ":rand_2", ":surgery_level"),
              (assign, ":is_wounded", 1),
            (try_end),
          (try_end),
        (try_end),
        
        # 4.APPLY CHANGES
        
        (try_begin),
          (eq, ":is_wounded", 1),
          (set_trigger_result, 2),	# = force wound
        (end_try),
        
        ## CC

        (try_begin),
          (ge, ":dead_agent_no", 0),
          (neg|agent_is_ally, ":dead_agent_no"),
          (agent_is_human, ":dead_agent_no"),
          (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),

          (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
          (eq, ":is_wounded", 1),
          (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
        (try_end),

        (call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
        #(set_trigger_result, ":result"), # skill overhaul
      ]),

      #(3, 0, 0, [
      #    (call_script, "script_apply_effect_of_other_people_on_courage_scores"),
      #], []), #calculating and applying effect of people on others courage scores

#routing soldiers recover morale by 30 every 3 seconds.
(
  3, 0, 0, [],
  [
   (try_for_agents, ":agent"),
      (agent_is_alive, ":agent"),
      (agent_is_human, ":agent"),
      (agent_get_slot, ":routing", ":agent", slot_agent_is_running_away),
      (eq, ":routing", 1),
      (agent_get_slot, ":courage", ":agent", slot_agent_courage_score),
      (val_add, ":courage", 100),
      (agent_set_slot, ":agent", slot_agent_courage_score, ":courage"),
   (try_end),
  ],
),  

      #====== 108 heroes begin ======
      #change
      (3, 0, 0, [
      (get_player_agent_no, ":player_agent"),
      (assign,":rout_num",0),
      (try_for_agents, ":agent"),
          (agent_is_human, ":agent"),
          (agent_is_alive, ":agent"),
          (neg|agent_is_routed,":agent"),
          (neq, ":agent", ":player_agent"),      
          (agent_slot_eq, ":agent", slot_agent_is_running_away,1),
          (item_set_slot,":rout_num",slot_item_temp_slot,":agent"),
          (val_add,":rout_num",1),
      (try_end),
      (gt,":rout_num",0),
      (call_script, "script_apply_effect_of_other_people_on_courage_scores_new",":rout_num"),#108 heroes changed
              ], []), #calculating and applying effect of people on others courage scores
      #====== 108 heroes end ======

      (3, 0, 0, [
          (try_for_agents, ":agent_no"),
            (agent_is_human, ":agent_no"),
            (agent_is_alive, ":agent_no"),          
            (store_mission_timer_a,":mission_time"),
            (ge,":mission_time",3),          
            (call_script, "script_decide_run_away_or_not", ":agent_no", ":mission_time"),
          (try_end),          
      ], []), #controlling courage score and if needed deciding to run away for each agent
]


## Prebattle Orders & Deployment Begin

common_pbod_triggers = [ #collapse caba_order_triggers into this?
 #init_player_global_variables
 #(ti_after_mission_start, 0, 0, [], [  
 (0, 0, ti_once, [(get_player_agent_no, "$fplayer_agent_no"),(ge, "$fplayer_agent_no", 0)], [
    #(get_player_agent_no, "$fplayer_agent_no"),
    (agent_get_team, "$fplayer_team_no", "$fplayer_agent_no"),        
    (agent_get_horse, ":horse", "$fplayer_agent_no"),
    (agent_set_slot, "$fplayer_agent_no", slot_agent_horse, ":horse"),   
  ]),
  
  #Fix for setting divisions, duplicated in formations code, so disabled in mst_lead_charge
  (ti_on_agent_spawn, 0, 0, [(neq, "$g_next_menu", "mnu_simple_encounter"),(neq, "$g_next_menu", "mnu_join_battle")], [(store_trigger_param_1, ":agent"),(call_script, "script_prebattle_agent_fix_division", ":agent")]),
  (0.5, 0, 0, [(neq, "$g_next_menu", "mnu_simple_encounter"), #not mst_lead_charge
               (neq, "$g_next_menu", "mnu_join_battle"),
               (store_mission_timer_a, reg0),(gt, reg0, 4)], 
   #Prior conditions: (this_or_next|party_slot_eq, "p_main_party", slot_party_prebattle_customized_divisions, 1),(this_or_next|neg|party_slot_eq, "p_main_party", slot_party_pref_div_no_ammo, 9),(neg|party_slot_eq, "p_main_party", slot_party_pref_div_dehorse, 9)
   [
    (try_for_agents, ":agent"),
        (agent_is_alive, ":agent"),
        (agent_slot_ge, ":agent", slot_agent_new_division, 0),
        (neg|agent_slot_ge, ":agent", slot_agent_spawned, 1), 
        (agent_get_division, ":division", ":agent"),
        (neg|agent_slot_eq, ":agent", slot_agent_new_division, ":division"),
        (agent_get_slot, ":new_div", ":agent", slot_agent_new_division),
        (agent_set_division, ":agent", ":new_div"),
    (try_end),    
   ]),   
 ] 
prebattle_deployment_triggers  = [
 (ti_before_mission_start, 0, ti_once, [(party_slot_eq, "p_main_party", slot_party_prebattle_customized_deployment, 1)], [
    #Find the number of soldiers in each troop-stack that are ready to upgrade by upgrading the party and finding
    #the changes in troops after the upgrade, then storing the number upgraded in a troop slot.
    (call_script, "script_party_copy", "p_temp_party", "p_main_party"),
    (party_upgrade_with_xp, "p_main_party", 1, 1),

    (party_get_num_companion_stacks, ":previous_num_of_stacks", "p_temp_party"),
    (try_for_range, ":i", 0, ":previous_num_of_stacks"), 
        (party_stack_get_troop_id, ":troop_id", "p_temp_party", ":i"),
        (neg|troop_is_hero, ":troop_id"),
        (troop_set_slot, ":troop_id", slot_troop_prebattle_preupgrade_check, 0),
        (troop_set_slot, ":troop_id",  slot_troop_prebattle_num_upgrade, 0),
    (try_end),
    
    (try_for_range, ":i", 0, ":previous_num_of_stacks"), 
        (party_stack_get_troop_id, ":troop_id", "p_temp_party", ":i"),
        (neg|troop_is_hero, ":troop_id"),
        (troop_slot_eq, ":troop_id", slot_troop_prebattle_preupgrade_check, 0),
        
        (try_for_range, ":down_upgrade_array", slot_party_prebattle_customized_deployment, slot_party_prebattle_customized_deployment + 7),
            (party_set_slot, "p_main_party_backup", ":down_upgrade_array", 0), #Create an Array of 6 variables to hold current troop's down/upgrade path
        (try_end),
        (assign, ":troop", ":troop_id"),
        (assign, ":end", 7),
         (try_for_range, ":unused", 0, ":end"),        
            (assign, ":stacks", ":previous_num_of_stacks"),
            (try_for_range, ":n", 0, ":stacks"), #Find another troop that upgrades to the current troop in the party
                (party_stack_get_troop_id, ":troop_to_upgrade", "p_temp_party", ":n"),
                (neg|troop_is_hero, ":troop_to_upgrade"),
                (neq, ":troop_to_upgrade", ":troop"),
                (troop_get_upgrade_troop, ":upgrade_troop", ":troop_to_upgrade", 0),
                (eq, ":upgrade_troop", ":troop"),
                (assign, ":stacks", 0),
            (try_end),
            (try_begin),
                (neq, ":upgrade_troop", ":troop"), #nothing in the party upgrades to this troop
                (assign, ":end", 0), #Break 'Find Downgrades' Loop
                (troop_slot_eq, ":troop", slot_troop_prebattle_preupgrade_check, 0),
                (party_count_members_of_type, ":pre_upgrade", "p_temp_party", ":troop"),
                (party_count_members_of_type, ":post_upgrade", "p_main_party", ":troop"),
                (store_sub, ":difference", ":pre_upgrade", ":post_upgrade"),
                (val_max, ":difference", 0), #don't let it be negative
                (troop_set_slot, ":troop", slot_troop_prebattle_num_upgrade, ":difference"),
                (troop_set_slot, ":troop", slot_troop_prebattle_preupgrade_check, 1),
            (else_try),
            #something upgrades to this troop in the party; record that upgrade_troop, then loop again to check if anything upgrades to THAT troop
                (assign, ":array_begin", slot_party_prebattle_customized_deployment),
                (try_for_range_backwards, ":downgrade_array", ":array_begin", slot_party_prebattle_customized_deployment + 7),
                    (party_slot_eq, "p_main_party_backup", ":downgrade_array", 0),
                    (party_set_slot, "p_main_party_backup", ":downgrade_array", ":troop_to_upgrade"),
                    (assign, ":array_begin", slot_party_prebattle_customized_deployment + 7),
                (try_end),
                (assign, ":troop", ":troop_to_upgrade"),
            (try_end), #Does anything upgrade to this troop? If-Then-Else
        (try_end), #Downgrade Do...Loop
        
        (troop_slot_eq, ":troop_id", slot_troop_prebattle_preupgrade_check, 0), 
        #If this troop was finished above (nothing upgrades to it, so it isn't mid/end of a continuous tree) no need to continue
        
        (assign, ":troop", ":troop_id"),
        (assign, ":end", 7),
         (try_for_range, ":unused", 0, ":end"),    
            (troop_get_upgrade_troop, ":upgrade_troop", ":troop", 0),
            (party_count_members_of_type, ":num_upgrade", "p_main_party", ":upgrade_troop"),
            (try_begin),
                (gt, ":num_upgrade", 0),
                (assign, ":array_end", slot_party_prebattle_customized_deployment + 7),
                (try_for_range, ":upgrade_array", slot_party_prebattle_customized_deployment, ":array_end"),
                    (party_slot_eq, "p_main_party_backup", ":upgrade_array", 0),
                    (party_set_slot, "p_main_party_backup", ":upgrade_array", ":upgrade_troop"),
                    (assign, ":array_end", slot_party_prebattle_customized_deployment),
                (try_end),
                (assign, ":troop", ":upgrade_troop"),
            (else_try),
                (assign, ":end", 0),
            (try_end),
        (try_end), #Upgrade Do...Loop

        #Use Upgrade and 'Downgrade' paths to calculate upgrade numbers for a continuous troop tree.
        (assign, ":end", slot_party_prebattle_customized_deployment + 7),
        (try_for_range, ":down_upgrade_array", slot_party_prebattle_customized_deployment, ":end"), 
            (party_get_slot, ":troop", "p_main_party_backup", ":down_upgrade_array"),
            (gt, ":troop", 0),
            (troop_slot_eq, ":troop", slot_troop_prebattle_preupgrade_check, 1), #Find "Beginning" of Upgrade Path    
            
            (assign, ":begin_upgrade_tree", ":down_upgrade_array"),
            (assign, ":previous_num_upgraded", 0),
            (try_for_range_backwards, ":upgrade_array", slot_party_prebattle_customized_deployment, ":begin_upgrade_tree"),
                (party_get_slot, ":top_troop", "p_main_party_backup", ":upgrade_array"),
                (gt, ":top_troop", 0),
                (party_count_members_of_type, ":pre_upgrade", "p_temp_party", ":top_troop"),
                (party_count_members_of_type, ":post_upgrade", "p_main_party", ":top_troop"),
                (store_sub, ":difference", ":post_upgrade", ":pre_upgrade"),
                (val_add, ":difference", ":previous_num_upgraded"),
                (val_max, ":difference", 0), #don't let it be negative
                (assign, ":previous_num_upgraded", ":difference"),
                
                (store_sub, ":prior_troop_slot", ":upgrade_array", 1),
                (try_begin),
                    (ge, ":prior_troop_slot", slot_party_prebattle_customized_deployment),
                    (party_get_slot, ":prior_troop", "p_main_party_backup", ":prior_troop_slot"),
                (else_try),
                    (eq, ":prior_troop_slot", slot_party_prebattle_customized_deployment - 1),
                    (assign, ":prior_troop", ":troop_id"),
                (try_end),
                (gt, ":prior_troop", 0),
                (troop_slot_eq, ":prior_troop", slot_troop_prebattle_preupgrade_check, 0),
                (troop_set_slot, ":prior_troop", slot_troop_prebattle_num_upgrade, ":difference"),
                (troop_set_slot, ":top_troop", slot_troop_prebattle_preupgrade_check, 1),
            (try_end), #Upgrade Backwards Loop
            
            (troop_set_slot, ":troop_id", slot_troop_prebattle_preupgrade_check, 1),
            
            (assign, ":previous_num_upgraded", 0),
            (try_for_range, ":downgrade_array", ":begin_upgrade_tree", ":end"),
                (party_get_slot, ":bottom_troop", "p_main_party_backup", ":downgrade_array"),
                (gt, ":bottom_troop", 0),
                
                (try_begin),
                    (troop_slot_eq, ":bottom_troop", slot_troop_prebattle_preupgrade_check, 1),
                    (troop_get_slot, ":previous_num_upgraded", ":bottom_troop", slot_troop_prebattle_num_upgrade),
                (else_try),
                    (troop_slot_eq, ":bottom_troop", slot_troop_prebattle_preupgrade_check, 0),                
                    (party_count_members_of_type, ":pre_upgrade", "p_temp_party", ":bottom_troop"),
                    (party_count_members_of_type, ":post_upgrade", "p_main_party", ":bottom_troop"),
                    (store_sub, ":difference", ":post_upgrade", ":pre_upgrade"),
                    (val_add, ":difference", ":previous_num_upgraded"),
                    (val_max, ":difference", 0), #don't let it be negative
                    (assign, ":previous_num_upgraded", ":difference"),
                    (troop_set_slot, ":bottom_troop", slot_troop_prebattle_num_upgrade, ":difference"),
                    (troop_set_slot, ":bottom_troop", slot_troop_prebattle_preupgrade_check, 1),
                (try_end),
            (try_end), #Downgrade Loop
            (assign, ":end", slot_party_prebattle_customized_deployment), #Break Loop
        (try_end), #Locate "Beginning"/End of Upgrade Path 'Loop'
    (try_end), #Party Stack Loop
                
    (call_script, "script_party_copy", "p_main_party", "p_temp_party"), #Return party to pre-upgrade state
    
    (troop_set_slot, "trp_player", slot_troop_prebattle_first_round, 1),
    
    #REMOVE 'EXTRA' SOLDIERS FROM THE PARTY, TO ENSURE CORRECT SPAWN
    (party_get_num_companion_stacks, ":num_of_stacks", "p_main_party"),
    (val_add, ":num_of_stacks", 1),
    (try_for_range_backwards, ":i", 0, ":num_of_stacks"),
        (party_stack_get_troop_id, ":troop_id", "p_main_party", ":i"),
        #(neq, ":troop_id", "trp_player"),
        (troop_get_slot, ":num_of_agents", ":troop_id", slot_troop_prebattle_first_round),
        (party_stack_get_size, ":stack_size", "p_main_party", ":i"),
        (store_sub, ":difference", ":stack_size", ":num_of_agents"),
        (gt, ":difference", 0),
        (party_remove_members_wounded_first, "p_main_party", ":troop_id", ":difference"),
    (try_end),
    ]),
    
 (ti_after_mission_start, 0, ti_once, [(party_slot_eq, "p_main_party", slot_party_prebattle_customized_deployment, 1)], [
    #Add people back to the party 
    (party_get_num_companion_stacks, ":target_num_of_stacks", "p_temp_party"),
    (try_for_range, ":i", 0, ":target_num_of_stacks"),
        (party_stack_get_troop_id, ":target_stack_troop", "p_temp_party", ":i"),
        (neq, ":target_stack_troop", "trp_player"),
        (party_stack_get_size, ":target_stack_size", "p_temp_party", ":i"),
        
        (party_get_num_companion_stacks, ":num_of_stacks", "p_main_party"),
        (assign, ":cur_stack_size", 0),
        (assign, ":cur_num_wounded", 0),
        (try_for_range, ":n", 0, ":num_of_stacks"),
            (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":n"),
            (eq, ":stack_troop", ":target_stack_troop"),
            (party_stack_get_size, ":cur_stack_size", "p_main_party", ":n"),
            (party_stack_get_num_wounded, ":cur_num_wounded", "p_main_party", ":n"),
            (assign, ":num_of_stacks", 0),
        (try_end),
        
        (store_sub, ":difference", ":target_stack_size", ":cur_stack_size"),

        (try_begin),
            (gt, ":difference", 0),
            (party_add_members, "p_main_party", ":target_stack_troop", ":difference"),
            (party_stack_get_num_wounded, ":target_num_wounded", "p_temp_party", ":i"),
            (val_sub, ":target_num_wounded", ":cur_num_wounded"),
            (gt, ":target_num_wounded", 0),
            (party_wound_members, "p_main_party", ":stack_troop", ":target_num_wounded"),
        (try_end),
        
        #Re-apply XP so troops that were ready to upgrade are still ready to upgrade
        (neg|troop_is_hero, ":target_stack_troop"),
        (troop_get_slot, ":num_to_upgrade", ":target_stack_troop", slot_troop_prebattle_num_upgrade),
        (gt, ":num_to_upgrade", 0),
        (call_script, "script_game_get_upgrade_xp", ":target_stack_troop"),
        (store_mul, ":xp_to_add", ":num_to_upgrade", reg0),
        (party_get_num_companion_stacks, ":num_of_stacks", "p_main_party"),
        (try_for_range, ":n", 0, ":num_of_stacks"),
            (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":n"),
            (eq, ":stack_troop", ":target_stack_troop"),
            (party_add_xp_to_stack, "p_main_party", ":n", ":xp_to_add"),
            (assign, ":num_of_stacks", 0),
        (try_end),
    (try_end), #Backup party stack loop
    (party_set_slot, "p_main_party", slot_party_prebattle_customized_deployment, 0),
    ]),
 #Split Troop Divisions Triggers
 (ti_after_mission_start, 0, 0, [(party_slot_eq, "p_main_party", slot_party_prebattle_customized_divisions, 1)], [
    (call_script, "script_prebattle_split_troop_divisions"),
    (party_set_slot, "p_main_party_backup", slot_party_reinforcement_stage, 0),
   ]),
 (1, 0, 0, [(party_slot_eq, "p_main_party", slot_party_prebattle_customized_divisions, 1)], [
    (try_begin),
        (this_or_next|eq, "$fplayer_team_no", 0),
        (eq, "$fplayer_team_no", 2),
        (assign, ":reinforcement_stage", "$defender_reinforcement_stage"),
    (else_try),
        (assign, ":reinforcement_stage", "$attacker_reinforcement_stage"),
    (try_end),
    (neg|party_slot_eq, "p_main_party_backup", slot_party_reinforcement_stage, ":reinforcement_stage"),
    
    (call_script, "script_prebattle_split_troop_divisions"),
    
    (party_set_slot, "p_main_party_backup", slot_party_reinforcement_stage, ":reinforcement_stage"),
   ]),
 ]

prebattle_orders_triggers = [
 (0, 0.6, 2, [(party_slot_ge, "p_main_party", slot_party_prebattle_num_orders, 1)], [ #was ti_once, adjusted to conditions failure to work around engine problems
        (party_get_slot, ":num_of_orders", "p_main_party", slot_party_prebattle_num_orders),
        (party_set_slot, "p_main_party", slot_party_prebattle_num_orders, 0), #fix test
        (set_show_messages, 0),     
        (assign, ":delay_count", 0),        
        (try_for_range, ":i", 0, ":num_of_orders"),    
            (store_add, ":ith_order_slot", ":i", slot_party_prebattle_order_array_begin),
            (party_get_slot, ":order_index", "p_main_party", ":ith_order_slot"),
            (ge, ":order_index", 10), 
            
            #Take 3 digit order index and get component parts: group, type, order
            (store_div, ":ith_order_group", ":order_index", 100),
            (store_mul, ":ith_order_type", ":ith_order_group", 100),
            (val_sub, ":order_index", ":ith_order_type"),
            (store_div, ":ith_order_type", ":order_index", 10),
            (store_mul, ":ith_order", ":ith_order_type", 10),
            (store_sub, ":ith_order", ":order_index", ":ith_order"),

            #Turn type and order into Native order
            (assign, ":delay_order", 0),
            (try_begin),
                (eq, ":ith_order_type", 1), #Start Position: hold, follow, charge; mordr_ 0-2; 3=11 stand ground
                (eq, ":ith_order", 3), 
                (assign, ":ith_order", 11), #Stand Ground
            (else_try),
                (eq, ":ith_order_type", 2), #Other movement orders: mordr_ 3-8, 
                (is_between, ":ith_order", 5, 9), #5 - 8; Forward/Back 10 Paces, Stand Closer/Spread Out
                (assign, ":delay_order", 1), #To fix bugs with these orders, and to accomodate formations
                (val_add, ":delay_count", 1), #they are delayed 1-2 seconds
            (else_try), 
                (eq, ":ith_order_type", 3), #Native Weapon Use orders: mordr_ 9,10,12,13
                (try_begin),
                    (eq, ":ith_order", 0),
                    (assign, ":ith_order", 10), #Use Any Weapon
                (else_try),
                    (eq, ":ith_order", 2),
                    (assign, ":ith_order", 12), #Hold Fire
                (else_try),
                    (eq, ":ith_order", 3),
                    (assign, ":ith_order", 13), #Fire at Will
                (try_end),
            (else_try),
                (eq, ":ith_order_type", 4), #Formations
                (set_show_messages, 0),
                (call_script, "script_player_attempt_formation", ":ith_order_group", ":ith_order", 0),
            (else_try),
                (is_between, ":ith_order_type", 5, 7), #5 or 6; Caba Weapon and Shield orders
                (val_add, ":delay_count", 1), #To fix bugs with these orders, they are delayed 1-2 seconds
            (else_try),
                (eq, ":ith_order_type", 7), #Caba Skirmish
                (eq, ":ith_order", 1), #Begin Skirmish, any other value would be an error
                (team_set_order_listener, "$fplayer_team_no", ":ith_order_group"),
                (call_script, "script_order_skirmish_begin_end", begin, "$fplayer_team_no"),
                (team_set_order_listener, "$fplayer_team_no", -1),
            (try_end),
            (try_begin),
                (is_between, ":ith_order_type", 1, 4),
                (neq, ":delay_order", 1),
                (team_give_order, "$fplayer_team_no", ":ith_order_group", ":ith_order"),
            (try_end),            
        (try_end), #End Order Slot Loop    
        (team_set_order_listener, "$fplayer_team_no", grc_everyone), #Reset    
        (set_show_messages, 1),
        (display_message, "@Everyone, you know what to do. To your positions!", 0xFFDDDD66),
        (try_begin),
            (eq, ":num_of_orders", 1),
            (party_get_slot, ":first_order", "p_main_party_backup", slot_party_prebattle_order_array_begin),
            (party_set_slot, "p_main_party", slot_party_prebattle_order_array_begin, ":first_order"),
            (party_set_slot, "p_main_party_backup", slot_party_prebattle_order_array_begin, 0),
        (try_end),    
        # (try_begin),
            # (eq, ":delay_count", 0),
            # (party_set_slot, "p_main_party", slot_party_prebattle_num_orders, 0),
        # (try_end),
    ]),
    
 (0, 1, 2, [(party_slot_ge, "p_main_party_backup", slot_party_prebattle_num_orders, 1)], [ #was ti_once, adjusted to conditions failure to work around engine problems
        #To fix bugs with Move Forward/Back 10 Paces and Caba Weapon orders
        #these orders are applied separately, after other orders
        (party_get_slot, ":num_of_orders", "p_main_party_backup", slot_party_prebattle_num_orders), #change to _backup, fix test
        (party_set_slot, "p_main_party_backup", slot_party_prebattle_num_orders, 0), #change to _backup, fix test
        (set_show_messages, 0),     
        (try_for_range, ":i", 0, ":num_of_orders"),    
            (store_add, ":ith_order_slot", ":i", slot_party_prebattle_order_array_begin),
            (party_get_slot, ":order_index", "p_main_party", ":ith_order_slot"),
            (ge, ":order_index", 10), 

            #Take 3 digit order index and get component parts: group, type, order
            (store_div, ":ith_order_group", ":order_index", 100),
            (store_mul, ":ith_order_type", ":ith_order_group", 100),
            (val_sub, ":order_index", ":ith_order_type"),
            (store_div, ":ith_order_type", ":order_index", 10),
            (this_or_next|is_between, ":ith_order_type", 5, 7), # 5 or 6; Caba Weapon and Shield orders
            (eq, ":ith_order_type", 2), #Movement Orders
            (store_mul, ":ith_order", ":ith_order_type", 10),
            (store_sub, ":ith_order", ":order_index", ":ith_order"),
            
            (try_begin),
                (eq, ":ith_order_type", 2),            
                (is_between, ":ith_order", 5, 9), #5 - 8; Forward/Back 10 Paces, Stand Closer/Spread Out    
                (store_add, ":ith_repeat_slot", ":ith_order_slot", 70), #30 for partial version
                (party_get_slot, ":num_repeats", "p_main_party", ":ith_repeat_slot"),
                (val_max, ":num_repeats", 1),
                (try_for_range, ":unused", 0, ":num_repeats"),
                    (try_begin),
                        (store_add, ":slot", slot_team_d0_formation, ":ith_order_group"),
                        (neg|team_slot_eq, "$fplayer_team_no", ":slot", formation_none),
                        (team_set_order_listener, "$fplayer_team_no", ":ith_order_group"),
                        (call_script, "script_player_order_formations", ":ith_order"),
                        (team_set_order_listener, "$fplayer_team_no", -1), #Reset
                    (else_try),
                        (team_give_order, "$fplayer_team_no", ":ith_order_group", ":ith_order"),
                    (try_end),
                (try_end),
            # (else_try),
                # (eq, ":ith_order_type", 4), #Formations
                # (set_show_messages, 0),
                # (call_script, "script_player_attempt_formation", ":ith_order_group", ":ith_order"),
            (else_try),
                (is_between, ":ith_order_type", 5, 7), #5 or 6; Caba Weapon and Shield orders
                (team_set_order_listener, "$fplayer_team_no", ":ith_order_group"),
                (call_script, "script_order_weapon_type_switch", ":ith_order", "$fplayer_team_no"),
                (team_set_order_listener, "$fplayer_team_no", -1), #Reset
            (try_end),    
        (try_end),        
        (team_set_order_listener, "$fplayer_team_no", grc_everyone), #Reset            
        (set_show_messages, 1),
    ]),
 ]

caba_order_triggers = [

    (ti_before_mission_start, 0, 0, [], [
        (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (party_set_slot, "p_main_party_backup", slot_party_gk_order, 0),
        (party_set_slot, 2, slot_party_gk_order_hold_over_there, 0),
        
        (try_for_range, ":team", 0, 4),
            (try_for_range, ":i", slot_team_d0_order_weapon, slot_team_d0_order_shield + 9),
                (team_set_slot, ":team", ":i", clear),
            (try_end),
        (try_end),    
    ]),
        
    (0, 0, 0, [(neg|main_hero_fallen),
        (this_or_next|game_key_clicked, gk_group0_hear),
        (this_or_next|game_key_clicked, gk_group1_hear),
        (this_or_next|game_key_clicked, gk_group2_hear),
        (this_or_next|game_key_clicked, gk_group3_hear),
        (this_or_next|game_key_clicked, gk_group4_hear),
        (this_or_next|game_key_clicked, gk_group5_hear),
        (this_or_next|game_key_clicked, gk_group6_hear),
        (this_or_next|game_key_clicked, gk_group7_hear),
        (this_or_next|game_key_clicked, gk_group8_hear),
        (this_or_next|game_key_clicked, gk_everyone_hear),
        (this_or_next|game_key_clicked, gk_reverse_order_group), 
        (game_key_clicked, gk_everyone_around_hear)], [
        (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (start_presentation, "prsnt_caba_order_display"),
    ]),
    
    #(ti_escape_pressed, 0, 0, [],          [(party_set_slot, "p_main_party", slot_party_gk_order, 0),(is_presentation_active, "prsnt_caba_order_display"),(presentation_set_duration, 0)]),
    (0, 0, 0, [(key_is_down, key_escape)], [(party_set_slot, "p_main_party", slot_party_gk_order, 0),(is_presentation_active, "prsnt_caba_order_display"),(presentation_set_duration, 0)]),
    
    (0, 0, 0, [(game_key_clicked, gk_order_1),(neg|main_hero_fallen)], [
        (store_mission_timer_c_msec, "$when_f1_first_detected"), #CABA?
        (try_begin),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_1),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_2),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_3),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_4),
            (party_set_slot, "p_main_party", slot_party_gk_order, gk_order_1),
            (party_set_slot, 2, slot_party_gk_order_hold_over_there, 0), #also "holdit"
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_1),    #HOLD        
            (party_set_slot, 2, slot_party_gk_order_hold_over_there, 1), #as "holdit"
            #(call_script, "script_player_order_formations", mordr_hold),
            #(party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_2),    #ADVANCE
            (call_script, "script_player_order_formations", mordr_advance),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_3),    #FIRE AT WILL
            (call_script, "script_order_volley_begin_end", end, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (try_end),
    ]),
    
    (0, 0, 0, [(game_key_clicked, gk_order_2),(neg|main_hero_fallen)], [
        (try_begin),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_1),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_2),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_3),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_4),
            (party_set_slot, "p_main_party", slot_party_gk_order, gk_order_2),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_1),    #FOLLOW
            (call_script, "script_player_order_formations", mordr_follow),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_2),    #FALL BACK
            (call_script, "script_player_order_formations", mordr_fall_back),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_3),    #HOLD FIRE
            (call_script, "script_order_volley_begin_end", end, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_4),
            (call_script, "script_order_set_display_text", ranged),
            (call_script, "script_order_weapon_type_switch", ranged, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (try_end),
    ]),
    
    (0, 0, 0, [(game_key_clicked, gk_order_3),(neg|main_hero_fallen)], [
        (try_begin),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_1),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_2),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_3),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_4),
            (party_set_slot, "p_main_party", slot_party_gk_order, gk_order_3),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_1),    #CHARGE
            (call_script, "script_player_order_formations", mordr_charge),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_4),    #BLUNT WEAPONS
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (try_end),
    ]),
    
    (0, 0, 0, [(game_key_clicked, gk_order_4),(neg|main_hero_fallen)], [
        (try_begin),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_1),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_2),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_3),
            (neg|party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_4),
            (party_set_slot, "p_main_party", slot_party_gk_order, gk_order_4),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_1),    #STAND GROUND
            (call_script, "script_player_order_formations", mordr_stand_ground),            
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_4),    #ANY WEAPON
            (call_script, "script_order_set_display_text", clear),
            (call_script, "script_order_set_team_slot", clear, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (try_end),
    ]),
    
    (0, 0, 0, [(game_key_clicked, gk_order_5),(neg|main_hero_fallen)], [
        (try_begin),
            (party_slot_eq, "p_main_party", slot_party_gk_order, 0),
            (this_or_next|eq, "$g_next_menu", "mnu_simple_encounter"), #mst_lead_charge
            (eq, "$g_next_menu", "mnu_join_battle"),
            (party_set_slot, "p_main_party", slot_party_gk_order, gk_order_5),
      (start_presentation, "prsnt_caba_order_display"),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_4),    #MOUNT
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_5),    #FORMATION - RANKS    
            (call_script, "script_division_reset_places"), ## CABA - check this new script
            (agent_get_position, pos49, "$fplayer_agent_no"),
            (try_for_range, ":division", 0, 9),
                (class_is_listening_order, "$fplayer_team_no", ":division"),
                (store_add, ":slot", slot_team_d0_target_team, ":division"),
                (team_set_slot, "$fplayer_team_no", ":slot", -1),
                (store_add, ":slot", slot_team_d0_size, ":division"),
                (team_slot_ge, "$fplayer_team_no", ":slot", 1),
                (store_add, ":slot", slot_team_d0_fclock, ":division"),
                (team_set_slot, "$fplayer_team_no", ":slot", 1),
                
                #Fake out at position
                (call_script, "script_battlegroup_get_position", Temp_Pos, "$fplayer_team_no", ":division"),
                (agent_set_position, "$fplayer_agent_no", Temp_Pos),
                (call_script, "script_player_attempt_formation", ":division", formation_ranks, 1),                
            (try_end),
            (agent_set_position, "$fplayer_agent_no", pos49),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_8),    #End Special Order
            (call_script, "script_order_end_active_order", "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),  
        (try_end),
    ]),
    
    (0, 0, 0, [(game_key_clicked, gk_order_6),(neg|main_hero_fallen)], [
        (try_begin),
            (party_slot_eq, "p_main_party", slot_party_gk_order, 0),
            (party_set_slot, "p_main_party", slot_party_gk_order, gk_order_6),
            (start_presentation, "prsnt_caba_order_display"),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_1),    #RETREAT
            (call_script, "script_player_order_formations", mordr_retreat),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_2),    #STAND CLOSER
            (call_script, "script_player_order_formations", mordr_stand_closer),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_4),    #DISMOUNT
            (call_script, "script_player_order_formations", mordr_dismount),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_5), #FORMATION - SHIELDWALL
            (call_script, "script_division_reset_places"),
            (agent_get_position, pos49, "$fplayer_agent_no"),
            (try_for_range, ":division", 0, 9),
                (class_is_listening_order, "$fplayer_team_no", ":division"),
                (store_add, ":slot", slot_team_d0_target_team, ":division"),
                (team_set_slot, "$fplayer_team_no", ":slot", -1),
                (store_add, ":slot", slot_team_d0_size, ":division"),
                (team_slot_ge, "$fplayer_team_no", ":slot", 1),
                (store_add, ":slot", slot_team_d0_fclock, ":division"),
                (team_set_slot, "$fplayer_team_no", ":slot", 1),
                
                #Fake out at position
                (call_script, "script_battlegroup_get_position", Temp_Pos, "$fplayer_team_no", ":division"),
                (agent_set_position, "$fplayer_agent_no", Temp_Pos),
                (call_script, "script_player_attempt_formation", ":division", formation_shield, 1),                
            (try_end),
            (agent_set_position, "$fplayer_agent_no", pos49),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_6),    #One-Hander
            (call_script, "script_order_set_display_text", onehand),
            (call_script, "script_order_weapon_type_switch", onehand, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),        
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_7),    #Shield
            (call_script, "script_order_set_display_text", shield),
            (call_script, "script_order_weapon_type_switch", shield, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_8),    #Begin Skirmish
            (call_script, "script_order_set_display_text", begin + 8),
            (call_script, "script_order_skirmish_begin_end", begin, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),    
        (try_end),
    ]),
    
    (0, 0, 0, [(game_key_clicked, gk_order_7),(neg|main_hero_fallen)], [
        (try_begin),
            (party_slot_eq, "p_main_party", slot_party_gk_order, 0),
            (party_set_slot, "p_main_party", slot_party_gk_order, gk_order_7),
            (start_presentation, "prsnt_caba_order_display"),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_2),    #SPREAD OUT
            (call_script, "script_player_order_formations", mordr_spread_out),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_5), #FORMATION - WEDGE
            (call_script, "script_division_reset_places"),
            (agent_get_position, pos49, "$fplayer_agent_no"),
            (try_for_range, ":division", 0, 9),
                (class_is_listening_order, "$fplayer_team_no", ":division"),
                (store_add, ":slot", slot_team_d0_target_team, ":division"),
                (team_set_slot, "$fplayer_team_no", ":slot", -1),
                (store_add, ":slot", slot_team_d0_size, ":division"),
                (team_slot_ge, "$fplayer_team_no", ":slot", 1),
                (store_add, ":slot", slot_team_d0_fclock, ":division"),
                (team_set_slot, "$fplayer_team_no", ":slot", 1),
                
                #Fake out at position
                (call_script, "script_battlegroup_get_position", Temp_Pos, "$fplayer_team_no", ":division"),
                (agent_set_position, "$fplayer_agent_no", Temp_Pos),
                (call_script, "script_player_attempt_formation", ":division", formation_wedge, 1),                
            (try_end),
            (agent_set_position, "$fplayer_agent_no", pos49),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_6),    #Two-Handers
            (call_script, "script_order_set_display_text", twohands),
            (call_script, "script_order_weapon_type_switch", twohands, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_7),    #No Shield
            (call_script, "script_order_set_display_text", noshield),
            (call_script, "script_order_weapon_type_switch", noshield, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_8),    #Volley
            (call_script, "script_order_set_display_text", begin + 10),
            (call_script, "script_order_volley_begin_end", begin, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),    
        (try_end),
    ]),

        
    (0, 0, 0, [(game_key_clicked, gk_order_8),(neg|main_hero_fallen)], [ #F8
        (try_begin),
            (party_slot_eq, "p_main_party", slot_party_gk_order, 0), 
            (party_set_slot, "p_main_party", slot_party_gk_order, gk_order_8),
            (start_presentation, "prsnt_caba_order_display"),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_5), #FORMATION - SQUARE
            (call_script, "script_division_reset_places"),
            (agent_get_position, pos49, "$fplayer_agent_no"),
            (try_for_range, ":division", 0, 9),
                (class_is_listening_order, "$fplayer_team_no", ":division"),
                (store_add, ":slot", slot_team_d0_target_team, ":division"),
                (team_set_slot, "$fplayer_team_no", ":slot", -1),
                (store_add, ":slot", slot_team_d0_size, ":division"),
                (team_slot_ge, "$fplayer_team_no", ":slot", 1),
                (store_add, ":slot", slot_team_d0_fclock, ":division"),
                (team_set_slot, "$fplayer_team_no", ":slot", 1),
                
                #Fake out at position
                (call_script, "script_battlegroup_get_position", Temp_Pos, "$fplayer_team_no", ":division"),
                (agent_set_position, "$fplayer_agent_no", Temp_Pos),
                (call_script, "script_player_attempt_formation", ":division", formation_square, 1),                
            (try_end),
            (agent_set_position, "$fplayer_agent_no", pos49),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_6),    #Polearms
            (call_script, "script_order_set_display_text", polearm),
            (call_script, "script_order_weapon_type_switch", polearm, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_7),    #Free Shield
            (call_script, "script_order_set_display_text", free),
            (call_script, "script_order_set_team_slot", free, "$fplayer_team_no"),
            #(call_script, "script_order_weapon_type_switch", free, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_8),    #Brace Spear
            (call_script, "script_order_set_display_text", begin + 12),
            (call_script, "script_order_sp_brace_begin_end", begin, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),  
        (try_end),
    ]),
    
    (0, 0, 0, [(key_clicked, "$key_order_9"),(neg|main_hero_fallen)], [ #F9
        (try_begin),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_5), #FORMATION - CANCEL
            (call_script, "script_player_order_formations", mordr_hold),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_gk_order, gk_order_6),
            (call_script, "script_order_set_display_text", ranged),
            (call_script, "script_order_weapon_type_switch", ranged, "$fplayer_team_no"),
            (party_set_slot, "p_main_party", slot_party_gk_order, 0),
        (try_end),
        
    ]),
]
 
field_ai_triggers = [

  #(ti_on_agent_spawn, 0, 0, [], [(store_trigger_param_1, ":agent"),(call_script, "script_weapon_use_classify_agent", ":agent")]), # On spawn, mark lancers, spears, horse archers using a slot. Force lancers to equip lances, horse archers to equip bows 
  
  (2, 0, 0, [
    #(this_or_next|party_slot_eq, "p_main_party", slot_party_pref_wu_lance, 1),
    #(this_or_next|party_slot_eq, "p_main_party", slot_party_pref_wu_harcher, 1),
    (party_slot_eq, "p_main_party", slot_party_pref_wu_spear, 1),(store_mission_timer_a, reg0),(gt, reg0, 4)],
   # Check to make sure there are no lance users on foot, if so force them to
   # switch to their sword. This should also affect troops that were NEVER mounted,
   # but are still equipped with lances, such as Taiga Bandits.
   # Check horse archers ammo, and if none left, switch to sword.
   # For mounted lancers and foot spears, affect their Decision on weapon use,
   # based on if closest 3 enemies are within 5 meters and if currently attacking/defending.
   [         
    (try_for_agents, ":agent"), # Run through all active NPCs on the battle field.
     # Hasn't been defeated.
        (agent_is_alive, ":agent"),
        (agent_is_non_player, ":agent"),
        (assign, ":caba_weapon_order", clear), # For Caba'drin Orders
        (assign, ":shield_order", clear), # For Caba'drin Orders
        (assign, ":weapon_order", 0),
        (assign, ":fire_order", 0),
        (try_begin),
            (agent_get_team, ":team", ":agent"),
            (eq, ":team", "$fplayer_team_no"),
            (agent_get_division, ":class", ":agent"),
            (team_get_weapon_usage_order, ":weapon_order", ":team", ":class"),
            (team_get_hold_fire_order, ":fire_order", ":team", ":class"),

            (store_add, ":slot", slot_team_d0_order_weapon, ":class"),
            (team_get_slot, ":caba_weapon_order", ":team", ":slot"),
            (store_add, ":slot", slot_team_d0_order_shield, ":class"),
            (team_get_slot, ":shield_order", ":team", ":slot"),
        (try_end),
        (neq, ":weapon_order", wordr_use_blunt_weapons), #Not ordered to use blunts
        (eq, ":caba_weapon_order", clear), # For Caba'drin orders; no active weapon order
        (try_begin),
            (party_slot_eq, "p_main_party", slot_party_pref_wu_lance, 2),
            (agent_get_slot, ":lance", ":agent", slot_agent_lance),
            (gt, ":lance", 0),  # Lancer?
     # Get wielded item.
            (agent_get_wielded_item, ":wielded", ":agent", 0),
      # They riding a horse?
            (agent_get_horse, ":horse", ":agent"),
            (try_begin),
                (le, ":horse", 0), # Isn't riding a horse.
                #(agent_set_slot, ":agent", slot_agent_lance, 0), # No longer a lancer
                (eq, ":wielded", ":lance"), # Still using lance?
                (try_begin),
                    (eq, ":shield_order", 1),
                    (assign, ":inc_two_handers", 0),
                (else_try),
                    (assign, ":inc_two_handers", 1),
                (try_end),
                (call_script, "script_weapon_use_backup_weapon", ":agent", ":inc_two_handers"), # Then equip a close weapon
            (else_try),
     # Still mounted
                (agent_get_position, pos1, ":agent"),    
                (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team", pos1),
                (assign, ":avg_dist", reg0), # Find distance of nearest 3 enemies
                #SHOULD CLOSEST MATTER???
                (try_begin),
                    (lt, ":avg_dist", 500), # Are the enemies within 5 meters?
                    (agent_get_combat_state, ":combat", ":agent"),
                    (gt, ":combat", 3), # Agent currently in combat? ...avoids switching before contact
                    (eq, ":wielded", ":lance"), # Still using lance?
                    (try_begin),
                        (eq, ":shield_order", 1),
                        (assign, ":inc_two_handers", 0),
                    (else_try),
                        (assign, ":inc_two_handers", 1),
                    (try_end),
                    (call_script, "script_weapon_use_backup_weapon", ":agent", ":inc_two_handers"), # Then equip a close weapon
                (else_try),
                    (neq, ":wielded", ":lance"), # Enemies farther than 5 meters and/or not fighting, and not using lance?
                    (agent_set_wielded_item, ":agent", ":lance"), # Then equip it!
                (try_end),
            (try_end),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_pref_wu_harcher, 2),
            (agent_get_slot, ":bow", ":agent", slot_agent_horsebow),
            (gt, ":bow", 0),  # Horse archer?
            (neq, ":fire_order", aordr_hold_your_fire), #Not ordered to hold fire
     # Get wielded item.
            (agent_get_wielded_item, ":wielded", ":agent", 0),
      # They have ammo left?
            (agent_get_ammo, ":ammo", ":agent"),
            (try_begin),
                (le, ":ammo", 0), # No ammo left
                #(agent_set_slot, ":agent", slot_agent_horsebow, 0), # No longer a horse archer
                (eq, ":wielded", ":bow"), # Still using bow?
                (try_begin),
                    (eq, ":shield_order", 1),
                    (assign, ":inc_two_handers", 0),
                (else_try),
                    (assign, ":inc_two_handers", 1),
                (try_end),
                (call_script, "script_weapon_use_backup_weapon", ":agent", ":inc_two_handers"), # Then equip a close weapon
            (else_try),
                (gt, ":ammo", 0),
                (agent_get_horse, ":horse", ":agent"),
                (le, ":horse", 0), #No Horse, no command, let AI choose (I think)
            (else_try),
                (gt, ":ammo", 0),
                (neq, ":wielded", ":bow"), # Still have ammo, still mounted and not using bow?
                (agent_set_wielded_item, ":agent", ":bow"), # Then equip it!
            (try_end),
        (else_try),
            (party_slot_eq, "p_main_party", slot_party_pref_wu_spear, 1),
            (agent_get_slot, ":spear", ":agent", slot_agent_spear_wp),   
            (gt, ":spear", 0), # Spear-Unit?   

            (store_add, ":slot", slot_team_d0_formation, ":class"),
            (team_slot_eq, ":team", ":slot", formation_none),            
            (neq, ":shield_order", 1),
            
            (agent_get_position, pos1, ":agent"), # Find distance of nearest 3 enemies
            (call_script, "script_get_closest3_distance_of_enemies_at_pos1", ":team", pos1),
            (assign, ":avg_dist", reg0),
            (assign, ":closest_dist", reg1),
            (agent_get_wielded_item, ":wielded", ":agent", 0), # Get wielded
            (try_begin), #Weapon Use
                (this_or_next|lt, ":closest_dist", 300), # Closest enemy within 3 meters?
                (lt, ":avg_dist", 700), # Are the 3 enemies within an average of 7 meters?
                (agent_get_combat_state, ":combat", ":agent"),
                (gt, ":combat", 3), # Agent currently in combat? ...avoids switching before contact
                (eq, ":wielded", ":spear"), # Still using spear?
                (call_script, "script_weapon_use_backup_weapon", ":agent", 1), # Then equip a close weapon
            (else_try),
                (neq, ":wielded", ":spear"), # Enemies farther than 7 meters and/or not fighting, and not using spear?
                (agent_set_wielded_item, ":agent", ":spear"), # Then equip it!                
            (try_end),
        (try_end),
    (try_end),
    ]),
    

  (ti_on_agent_dismount, 0, 0, [(party_get_slot, reg3, "p_main_party", slot_party_pref_div_dehorse),(is_between, reg3, 0, 9)], #De-Horse Trigger #Valid division 0-8
   [
    (store_trigger_param_2, ":horse"),
    (neg|agent_is_alive, ":horse"),
    
    (store_trigger_param_1, ":rider"), 
    (agent_is_alive, ":rider"),
    (agent_is_non_player, ":rider"),
    
    (neg|agent_slot_ge, ":rider", slot_agent_spawned, 1), 
    
    (agent_get_team, ":team", ":rider"),
    
    (try_begin),
        (eq, ":team", "$fplayer_team_no"),
        (agent_set_division, ":rider", reg3),
        (agent_set_slot, ":rider", slot_agent_new_division, reg3),
    (else_try),
        (agent_set_division, ":rider", grc_infantry),
        (agent_set_slot, ":rider", slot_agent_new_division, grc_infantry),
    (try_end),
   ]),

  (ti_on_item_unwielded, 0, 0, [(party_get_slot, reg3, "p_main_party", slot_party_pref_div_no_ammo),(is_between, reg3, 0, 9)], #Out of Ammo Trigger #Valid division 0-8
   [
    (store_trigger_param_2, ":weapon"),
    (ge, ":weapon", 0),
    (item_get_type, ":type", ":weapon"),
    (this_or_next|eq, ":type", itp_type_pistol),
    (this_or_next|eq, ":type", itp_type_musket),
    (this_or_next|eq, ":type", itp_type_bow),
    (eq, ":type", itp_type_crossbow),
    
    (store_trigger_param_1, ":agent"),
    (agent_is_alive, ":agent"),
    (agent_is_non_player, ":agent"),
    
    (neg|agent_slot_ge, ":agent", slot_agent_spawned, 1), 
    
    (call_script, "script_get_agent_refill_ammo_times", ":agent"),
    (assign, ":refill_ammo_times", reg0),
    (agent_get_slot,":times",":agent",slot_agent_refill_ammo_times),
    (gt, ":times", ":refill_ammo_times"),    
    
    (agent_get_ammo, ":ammo", ":agent", 0),
    (le, ":ammo", 0),    
    (agent_get_horse, ":horse", ":agent"),
    (eq, ":horse", -1),
    
    (agent_get_team, ":team", ":agent"),
    (assign, ":continue", 1),
    (try_begin),
        (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town), #Sieges
        (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),        
        (this_or_next|eq, ":team", "$defender_team"),
        (eq, ":team", "$defender_team_2"),
        (assign, ":continue", 0), #To not reassign units that will get their ammo refilled.
    (try_end),
    (eq, ":continue", 1),    
    
    (try_begin),
        (eq, ":team", "$fplayer_team_no"),
        (agent_set_division, ":agent", reg3),
        (agent_set_slot, ":agent", slot_agent_new_division, reg3),
    (else_try),
        (agent_set_division, ":agent", grc_infantry),
        (agent_set_slot, ":agent", slot_agent_new_division, grc_infantry),
    (try_end),  
   ]),
   
  (2, 0, ti_once, [(store_mission_timer_a, reg0),(gt, reg0, 2)], [ #Force Cav to Stay Mounted
    (set_show_messages, 0),   
    (try_for_range, ":team", 0, 4),
        #(neq, ":team", "$fplayer_team_no"),        
        (try_for_range, ":division", 0, 9),
            (store_add, ":slot", slot_team_d0_type, ":division"),
            (this_or_next|team_slot_eq, ":team", ":slot", sdt_cavalry),
            (team_slot_eq, ":team", ":slot", sdt_harcher),
            (team_give_order, ":team", ":division", mordr_mount),
        (try_end),        
    (try_end),
    (set_show_messages, 1),
   ]),
  
  (1, 0, 0, [(party_slot_eq, "p_main_party", slot_party_pref_spear_brace, 1),(store_mission_timer_a, reg0),(gt, reg0, 2)], [ ###GENERAL AI TRIGGER for SPECIAL ORDERS  ##Deal with Formations    
        (set_fixed_point_multiplier, 100),
        (try_for_range, ":division", 0, 9), #Player auto-remove brace
            (store_add, ":slot", slot_team_d0_order_sp_brace, ":division"),
            (neg|team_slot_eq, "$fplayer_team_no", ":slot", 0), #brace active
            (call_script, "script_formation_current_position", pos2, "$fplayer_team_no", ":division"),
            (call_script, "script_get_nearest_enemy_battlegroup_current_position", pos1, "$fplayer_team_no", pos2),
            (this_or_next|lt, reg0, 325), #distance
            (position_is_behind_position,pos1,pos2),
            (team_set_order_listener, "$fplayer_team_no", ":division"),
            (call_script, "script_order_sp_brace_begin_end", end, "$fplayer_team_no"),
            (team_set_order_listener, "$fplayer_team_no", -1),
        (try_end),
        (try_for_range, ":team", 0, 4), #For AI
            (neq, ":team", "$fplayer_team_no"),
            (team_slot_ge, ":team", slot_team_size, 1),
            (assign, ":mordr", -1),
            (team_get_slot, ":faction", ":team", slot_team_faction),
            (this_or_next|eq, ":faction", "fac_swiss"),    
            (this_or_next|eq, ":faction", "fac_scotland"),    
            (this_or_next|eq, ":faction", "fac_hospitalier_knights"),    
            (this_or_next|eq, ":faction", "fac_deserters"),
            (is_between, ":faction", kingdoms_begin, kingdoms_end),
            (try_begin), #Spear Bracing Decision-making
                (this_or_next|eq, ":faction", "fac_player_supporters_faction"), #Player's lords can brace
                (this_or_next|eq, ":faction", "fac_kingdom_1"), 
                (this_or_next|eq, ":faction", "fac_kingdom_2"), 
                (this_or_next|eq, ":faction", "fac_kingdom_4"), 
                (this_or_next|eq, ":faction", "fac_kingdom_7"), 
                (this_or_next|eq, ":faction", "fac_kingdom_8"), 
                (this_or_next|eq, ":faction", "fac_kingdom_9"), 
                (this_or_next|eq, ":faction", "fac_kingdom_10"), 
                (this_or_next|eq, ":faction", "fac_kingdom_11"), 
                (this_or_next|eq, ":faction", "fac_kingdom_13"), 
                (this_or_next|eq, ":faction", "fac_kingdom_14"), 
                (this_or_next|eq, ":faction", "fac_hospitalier_knights"), 
                (this_or_next|eq, ":faction", "fac_scotland"), 
                (this_or_next|eq, ":faction", "fac_swiss"), 
                (eq, ":faction", "fac_kingdom_5"), #Rhodoks    
                (try_begin),
                    (team_slot_eq, ":team", slot_team_d0_order_sp_brace, 0), #Spearbrace order not active
                    (store_add, ":slot", slot_team_d0_size, grc_infantry), 
                    (team_slot_ge, ":team", slot_team_d0_size, 10),
                    (store_add, ":slot", slot_team_d0_weapon_length, grc_infantry),
                    (team_slot_ge, ":team", ":slot", 80), #have long weapons/polearms (until bumped to a separate division)
                    (store_add, ":slot", slot_team_d0_formation, grc_infantry),
                    (team_get_movement_order, ":mordr", ":team", grc_infantry),
                    (this_or_next|neg|team_slot_eq, ":team", ":slot", formation_none),
                    (neq, ":mordr", mordr_charge), #Not Charging    
                    (assign, ":num_cav", 0),
                    (try_for_range, ":enemy_team", 0, 4),
                        (teams_are_enemies, ":enemy_team", ":team"),
                        (team_slot_ge, ":enemy_team", slot_team_size, 1),
                        (team_get_slot, reg0, ":enemy_team", slot_team_num_cavalry), 
                        (val_add, ":num_cav", reg0),
                    (try_end),        
                    (ge, ":num_cav", 5), #sufficent enemy cav to care
                    (assign, ":distance", 99999),
                    (call_script, "script_formation_current_position", pos2, ":team", grc_infantry),
                    (call_script, "script_team_get_position_of_enemies", pos1, ":team", grc_cavalry),
                    (get_distance_between_positions, ":distance", pos1, pos2),
                    (is_between, ":distance", 1500, 5000), #cav distance
                    (call_script, "script_get_nearest_enemy_battlegroup_current_position", pos1, ":team", pos2),
                    (gt, reg0, 600), #nearest distance
                    (neg|position_is_behind_position,pos1,pos2),
                    (team_set_order_listener, ":team", grc_infantry),
                    (call_script, "script_order_sp_brace_begin_end", begin, ":team"),
                    (team_set_order_listener, ":team", -1),
                (else_try), #Should only capture an eligible team that is now charging, so bracing should turn off
                    (neg|team_slot_eq, ":team", slot_team_d0_order_sp_brace, 0), #Order Active
                    (assign, ":end", 0),
                    (try_begin),
                        (assign, ":num_cav", 0),
                        (try_for_range, ":enemy_team", 0, 4),
                            (teams_are_enemies, ":enemy_team", ":team"),
                            (team_slot_ge, ":enemy_team", slot_team_size, 1),
                            (team_get_slot, reg0, ":enemy_team", slot_team_num_cavalry), 
                            (val_add, ":num_cav", reg0),
                        (try_end),        
                        (team_get_movement_order, ":mordr", ":team", grc_infantry),
                        (this_or_next|eq, ":mordr", mordr_charge),
                        (lt, ":num_cav", 5),
                        (assign, ":end", 1),
                    (else_try),
                        (store_add, ":slot", slot_team_d0_size, grc_infantry), 
                        (neg|team_slot_ge, ":team", slot_team_d0_size, 10),
                        (assign, ":end", 1),
                    (else_try),
                        (store_add, ":slot", slot_team_d0_weapon_length, grc_infantry),
                        (neg|team_slot_ge, ":team", ":slot", 80), #have long weapons/polearms (until bumped to a separate division)
                        (assign, ":end", 1),
                    (else_try),
                        (assign, ":distance", 0),
                        (call_script, "script_formation_current_position", pos2, ":team", grc_infantry),
                        (call_script, "script_team_get_position_of_enemies", pos1, ":team", grc_cavalry),
                        (get_distance_between_positions, ":distance", pos1, pos2),
                        (gt, ":distance", 6500),
                        (assign, ":end", 1),
                    (else_try), #after contact, end brace
                        (call_script, "script_get_nearest_enemy_battlegroup_current_position", pos1, ":team", pos2),
                        (this_or_next|lt, reg0, 350), #distance
                        (position_is_behind_position,pos1,pos2),
                        (assign, ":end", 1),
                    (try_end),
                    (eq, ":end", 1),
                    (team_set_order_listener, ":team", grc_infantry),
                    (call_script, "script_order_sp_brace_begin_end", end, ":team"),
                    (team_set_order_listener, ":team", -1),
                (try_end),
            (try_end), #End Spear Bracing
            (try_begin), #Volley/Skirmish Decision Making
                (neq, ":faction", "fac_kingdom_1"), #Swadia
                (neq, ":faction", "fac_kingdom_2"), 
                (neq, ":faction", "fac_kingdom_4"), 
                (neq, ":faction", "fac_kingdom_7"), 
                (neq, ":faction", "fac_kingdom_8"), 
                (neq, ":faction", "fac_kingdom_14"), 
                (neq, ":faction", "fac_kingdom_9"), 
                (neq, ":faction", "fac_kingdom_11"), 
                (neq, ":faction", "fac_kingdom_10"), 
                (neq, ":faction", "fac_kingdom_13"), 
                (neq, ":faction", "fac_kingdom_5"), #Rhodoks...Exclude Cross-bow users
                (try_begin),
                    (store_add, ":slot", slot_team_d0_order_skirmish, grc_archers),
                    (neg|team_slot_eq, ":team", ":slot", 1), #not skirmishing
                    (team_get_slot, ":num_archers", ":team", slot_team_num_archers),
                    (team_get_slot, ":size", ":team", slot_team_size),
                    (store_mul, reg0, ":num_archers", 100),
                    (val_div, reg0, ":size"),
                    (is_between, reg0, 25, 76), #25-75% archers
                    (assign, ":num_enemies", 0),
                    (try_for_range, ":enemy_team", 0, 4),
                        (teams_are_enemies, ":enemy_team", ":team"),
                        (team_get_slot, reg0, ":enemy_team", slot_team_size), 
                        (val_add, ":num_enemies", reg0),
                    (try_end),        
                    (lt, ":num_archers", ":num_enemies"),
                    (team_set_order_listener, ":team", grc_archers),
                    (call_script, "script_order_skirmish_begin_end", begin, ":team"),
                    (team_set_order_listener, ":team", -1),
                (else_try),
                    (store_add, ":slot", slot_team_d0_order_skirmish, grc_archers),
                    (team_slot_eq, ":team", ":slot", 1), #skirmishing
                    (team_get_slot, ":num_archers", ":team", slot_team_num_archers),
                    (assign, ":num_enemies", 0),
                    (try_for_range, ":enemy_team", 0, 4),
                        (teams_are_enemies, ":enemy_team", ":team"),
                        (team_get_slot, reg0, ":enemy_team", slot_team_size), 
                        (val_add, ":num_enemies", reg0),
                    (try_end),    
                    (gt, ":num_archers", ":num_enemies"),
                    (team_set_order_listener, ":team", grc_archers),
                    (call_script, "script_order_skirmish_begin_end", end, ":team"),
                    (team_set_order_listener, ":team", -1),
                (try_end),
            (else_try),
                (this_or_next|eq, ":faction", "fac_kingdom_1"), 
                (this_or_next|eq, ":faction", "fac_kingdom_2"), 
                (this_or_next|eq, ":faction", "fac_kingdom_14"), 
                (this_or_next|eq, ":faction", "fac_kingdom_4"), 
                (this_or_next|eq, ":faction", "fac_kingdom_7"), 
                (this_or_next|eq, ":faction", "fac_kingdom_8"), 
                (this_or_next|eq, ":faction", "fac_kingdom_9"), 
                (this_or_next|eq, ":faction", "fac_kingdom_11"), 
                (eq, ":faction", "fac_kingdom_5"), #Rhodoks... Cross-bow users
                (assign, ":distance", 99999),
                (try_begin),
                    (store_add, ":slot", slot_team_d0_order_volley, grc_archers),
                    (neg|team_slot_ge, ":team", ":slot", 1), #Not Volleying
                    (team_get_slot, reg1, ":team", slot_team_num_archers),
                    (team_get_slot, ":size", ":team", slot_team_size),
                    (val_mul, reg1, 100),
                    (val_div, reg1, ":size"),
                    (gt, reg1, 25), #>25% archers
                    (team_get_movement_order, ":mordr", ":team", grc_archers),
                    (neq, ":mordr", mordr_charge),    
                    (call_script, "script_battlegroup_get_position", pos2, ":team", grc_archers),
                    (call_script, "script_get_nearest_enemy_battlegroup_location", Temp_Pos, ":team", pos2),                    
                    (is_between, reg0, 1000, 7000),
                    (team_set_order_listener, ":team", grc_archers),
                    (call_script, "script_order_volley_begin_end", begin, ":team"),
                    (team_set_order_listener, ":team", -1),
                (else_try),
                    (store_add, ":slot", slot_team_d0_order_volley, grc_archers),
                    (team_slot_ge, ":team", ":slot", 1),
                    (assign, ":end", 0),
                    (try_begin),
                        (team_get_movement_order, ":mordr", ":team", grc_archers),
                        (eq, ":mordr", mordr_charge),    
                        (assign, ":end", 1),
                    (else_try),
                        (call_script, "script_battlegroup_get_position", pos2, ":team", grc_archers),
                        (call_script, "script_get_nearest_enemy_battlegroup_location", Temp_Pos, ":team", pos2),
                        (neg|is_between, reg0, 1000, 8000),
                        (assign, ":end", 1),
                    (try_end),                    
                    (eq, ":end", 1),
                    (team_set_order_listener, ":team", grc_archers),
                    (call_script, "script_order_volley_begin_end", end, ":team"),
                    (team_set_order_listener, ":team", -1),
                (try_end),
            (try_end), #End Skirmish/Volley
        (try_end), #Team Loop
    ]),
      
  (0.5, 0, 0, [(call_script, "script_cf_order_active_check", slot_team_d0_order_skirmish)], [(call_script, "script_order_skirmish_skirmish")]), 
 
  (1, 0, 0, [(call_script, "script_cf_order_active_check", slot_team_d0_order_volley)], [
        (try_begin), #Disable Volley @ end of battle 
            (neq, "$g_battle_result", 0),
            (try_for_range, ":team", 0, 4),
                (try_for_range, ":slot", slot_team_d0_order_volley, slot_team_d0_order_volley + 9),
                    (team_set_slot, ":team", ":slot", 0),
                (try_end),
            (try_end),
        (try_end),
        
        (try_for_range, ":team", 0, 4),
            (try_for_range, ":division", 0, 9),
                (store_add, ":slot", slot_team_d0_order_volley, ":division"),
                (team_slot_ge, ":team", ":slot", 1),
                (team_get_slot, ":volley_counter", ":team", ":slot"),
                (val_add, ":volley_counter", 1),
                (team_set_slot, ":team", ":slot", ":volley_counter"),
            (try_end),
        (try_end),
        
        (try_for_agents, ":agent"),
            (agent_is_alive, ":agent"),
            (agent_is_non_player, ":agent"),
            (agent_slot_ge, ":agent", slot_agent_volley_fire, 1),
            (agent_get_ammo, ":ammo", ":agent", 1),
            (gt, ":ammo", 0),
            
            (agent_get_team, ":team", ":agent"),
            (agent_get_division, ":division", ":agent"),
            (store_add, ":slot", slot_team_d0_order_volley, ":division"),
            (team_get_slot, ":volley_counter", ":team", ":slot"),
            
            (agent_get_slot, ":volley_wpn_type", ":agent", slot_agent_volley_fire),
            (try_begin),
                (eq, ":volley_wpn_type", itp_type_bow),
                (assign, ":delay", 2),
            (else_try),
                (this_or_next|eq, ":volley_wpn_type", itp_type_pistol),
                (eq, ":volley_wpn_type", itp_type_crossbow),
                (assign, ":delay", 5),
            (else_try),
                (eq, ":volley_wpn_type", itp_type_musket),
                (assign, ":delay", 10),
            (try_end),
            (agent_get_combat_state, ":cs", ":agent"),
            #(assign, reg0, ":cs"),
            #(display_message, "str_reg0"),
            #(lt, ":cs", 4),
            #(neq, ":cs", 2),
            (this_or_next|eq, ":cs", 1),
            (eq, ":cs", 3),
                        
            (store_mod, reg0, ":volley_counter", ":delay"),        
            (try_begin),
                (eq, reg0, 0),
                (agent_set_attack_action, ":agent", 0, 0), #Fire
            (else_try),
                (agent_set_attack_action, ":agent", 0, 1), #Ready and Aim
            (try_end),
        (try_end),
     ]),
 
  (0, 0, 0, [(key_clicked, "$key_special_1")], [   #call_horse_trigger
      (agent_get_slot, ":horse", "$fplayer_agent_no", slot_agent_horse),
      (gt, ":horse", 0),
      (agent_is_active, ":horse"),      
      #(agent_play_sound, "$fplayer_agent_no", "snd_whistle"),
      (agent_play_sound, "$fplayer_agent_no", "snd_man_breath_hard"),
      (display_message,"@You whistle for your horse."),
      (agent_is_alive,":horse"),
      (agent_get_position, pos1, "$fplayer_agent_no"),
      (agent_set_scripted_destination, ":horse", pos1, 0),
     ]),
     
  ##Spearwall Kit - Edited from the Mercenary by Caba'drin
  (0.1, 0, 0, [(call_script, "script_cf_order_active_check", slot_team_d0_order_sp_brace)], [ #spearwall_trigger_1
        (try_for_agents,":agent"),
           (agent_is_alive,":agent"),
           (agent_is_human,":agent"),
           (agent_slot_eq, ":agent", slot_agent_is_running_away, 0),
           (agent_slot_ge, ":agent", slot_agent_spear_wp, 1),
           (agent_get_wielded_item, ":weapon", ":agent", 0),
           (agent_slot_eq, ":agent", slot_agent_spear_wp, ":weapon"),
           (agent_get_team,":team1",":agent"),
           (agent_get_division,":class",":agent"), #CABA Changed agent_get_class to agent_get_division
           (team_get_movement_order,":order",":team1",":class"),
           (assign,":continue",0),
           (try_begin),
              (neq, ":agent", "$fplayer_agent_no"),
              (store_add, ":slot", slot_team_d0_order_sp_brace, ":class"),
              (team_slot_eq, ":team1", ":slot", 1),
              (this_or_next|eq,":order",mordr_hold),
              (eq,":order",mordr_stand_ground),
              (assign, ":continue", 1),
           (else_try), #CABA
              (eq, 1,0), #CABA
              (eq, ":agent", "$fplayer_agent_no"), #CABA
              (agent_slot_eq, "$fplayer_agent_no", slot_agent_player_braced, 1), #CABA
              (assign, ":continue", 1), #CABA
           (try_end),
           (eq, ":continue", 1),
           (agent_get_speed, pos0, ":agent"), #New
           (position_get_y, ":speed", pos0),
           (position_get_x, ":speed_x", pos0),
           (val_max, ":speed", ":speed_x"),
           (eq, ":speed", 0),
           (try_begin),
               (agent_get_animation, ":anim", ":agent"),                
               (assign, ":anim_bracing", "anim_spearwall_hold"),
               (neq, ":anim", ":anim_bracing"),
               (agent_set_animation, ":agent", ":anim_bracing"),
               (agent_get_position, pos1, ":agent"), ##lessens some spinning
               (agent_set_scripted_destination, ":agent", pos1), ##lessens some spinning
               (agent_get_look_position, pos1, ":agent"),
               (position_get_x, ":x", pos1),
               (position_get_y, ":y", pos1),
               (agent_set_slot, ":agent", slot_agent_target_x_pos, ":x"),
               (agent_set_slot, ":agent", slot_agent_target_y_pos, ":y"),
               (agent_set_slot, ":agent", slot_agent_spearwall, 0), #Begin count with animation resetting
           (try_end),
           #(eq, ":continue", 1),
           (agent_get_slot,":speartimer",":agent",slot_agent_spearwall),
           (try_begin),
                (lt,":speartimer",20),
                (val_add,":speartimer",1),
                (agent_set_slot,":agent",slot_agent_spearwall,":speartimer"),
           (try_end),
           (agent_set_is_alarmed, ":agent", 0), ##lessens some spinning
           (agent_get_slot, ":x", ":agent", slot_agent_target_x_pos),
           (agent_get_slot, ":y", ":agent", slot_agent_target_y_pos),
           (init_position, pos2),
           (position_set_x, pos2, ":x"),
           (position_set_y, pos2, ":y"),
           (agent_set_look_target_position, ":agent", pos2),
           (ge,":speartimer",20),
           (item_get_weapon_length, ":spear_dist", ":weapon"),
           (assign, ":dist_to_beat", ":spear_dist"), #CABA to make sure this calls on the closest...could add something for 1 victim/pike?
           (assign,":victim",-1),
           (assign, ":vic_rider", -1),
           (agent_get_position,pos1,":agent"),
           (try_for_agents,":possible_victim"),
              (agent_is_alive,":possible_victim"),
              (neg|agent_is_human,":possible_victim"),
              (agent_get_rider,":rider",":possible_victim"),
              (ge,":rider",0),
              (agent_get_team,":team2",":rider"),
              (teams_are_enemies,":team1",":team2"),
              (agent_get_position,pos2,":possible_victim"),
              (get_distance_between_positions,":dist",pos1,pos2),
              (lt,":dist",":dist_to_beat"), #CABA
              (neg|position_is_behind_position,pos2,pos1),
              (get_angle_between_positions, ":angle", pos1, pos2), #CABA
              (val_abs, ":angle"), #CABA
              (convert_from_fixed_point, ":angle"), #CABA
              (is_between, ":angle", 165, 181),  #30 degrees... have to be facing one another
              (agent_get_speed, pos0, ":possible_victim"), #CABA
              (position_get_y, ":speed", pos0), #CABA
              (position_get_x, ":speed_x", pos0), #CABA - just be be sure
              (val_max, ":speed", ":speed_x"), #CABA - just to be sure
              (ge, ":speed", 300), #CABA at least half speed; full speed horse 800-1100, was 400
              (assign, ":dist_to_beat", ":dist"), #CABA ...now it will progressively find the closest target
              (assign,":victim",":possible_victim"), #CABA
              (assign,":vic_rider", ":rider"),
           (try_end),
           (gt,":victim",-1),
           (agent_set_animation, ":agent", "anim_spearwall_hold_recoil"),
           (agent_set_slot, ":agent", slot_agent_spearwall, 0),
           (agent_play_sound,":victim","snd_metal_hit_high_armor_high_damage"),
           (store_agent_hit_points,":hp",":victim",0), #This stores as a %
           (store_agent_hit_points,":oldhp",":victim",1), #This stores as absoulte #
           (val_div,":speed",6), # Orig 2; Remember to change this if the timing on speed checks changes
           (val_sub,":speed",10), #CABA - w/speed div by 8-10, a speed over 900 will be an instant-kill. Might want to change divisor to 10?
       (val_sub,":hp",":speed"),
           (val_max,":hp",0),
           (agent_set_hit_points,":victim",":hp",0), #NEW HP% = Previous HP% - (Speed/8)
           (agent_deliver_damage_to_agent,":victim",":victim"), ##CHANGE TO THE AGENT DEALING DAMAGE? Probably not to avoid double pike-buff
           (store_agent_hit_points,":hp",":victim",1), #Post-Damage HP 
       (try_begin), #Pike bonus block
           (gt, ":hp", 0), #IF THE HORSE IS STILL ALIVE, base 50% chance of rearing
           (store_random_in_range, ":random_no", 0, 100),
           (try_begin), #Pike bonus block
               (item_has_property, ":weapon", itp_is_pike),
               #(item_slot_eq, ":weapon", slot_item_pike, 1),
           (val_sub, ":random_no", 10), #"Pike" with 60% chance
           (gt, ":spear_dist", 200),
           (val_sub, ":random_no", 10), #Longest Pikes with 70% chance
           (try_end),
           (lt, ":random_no", 50),
           (neg|agent_is_human,":victim"),
           (agent_set_animation, ":victim", "anim_horse_rear"),
           (else_try), #Horse Killed, so damage rider on fall
           (le, ":hp", 0),
           (store_random_in_range, ":random_no", 40, 75), #Rider should loose 1/4 - 3/5 of HP
           (store_agent_hit_points, ":rider_hp", ":vic_rider", 0),
           (val_min, ":random_no", ":rider_hp"),
           (agent_set_hit_points, ":vic_rider", ":random_no", 0),
           (try_end),
       (try_begin),
               (agent_get_horse,":playerhorse","$fplayer_agent_no"),
               (eq,":victim",":playerhorse"),
               (val_sub,":oldhp",":hp"),
               (assign,reg1,":oldhp"),
               (display_message,"@Your horse received {reg1} damage from a braced spear!",0xff4040),
           (else_try), #CABA
              (eq, 1,0), #CABA
              (eq, ":agent", "$fplayer_agent_no"), #CABA
              (val_sub,":oldhp",":hp"), #CABA
              (assign,reg1,":oldhp"), #CABA
              (str_store_item_name, s1, ":weapon"), #CABA
              (display_message,"@Braced {s1} dealt {reg1} damage!"), #CABA
              (agent_set_slot, "$fplayer_agent_no", slot_agent_player_braced, 0),
           (try_end),
        (try_end),
    ]),

  ##pikewall Kit - 
  (0.1, 0, 0, [(call_script, "script_cf_order_active_check", slot_team_d0_order_sp_brace)], [ #spearwall_trigger_1
        (try_for_agents,":agent"),
           (agent_is_alive,":agent"),
           (agent_is_human,":agent"),
           (agent_slot_eq, ":agent", slot_agent_is_running_away, 0),
           (agent_slot_ge, ":agent", slot_agent_pike_wp, 1),
       (agent_get_wielded_item, ":weapon", ":agent", 0),
           (agent_slot_eq, ":agent", slot_agent_pike_wp, ":weapon"),
           (agent_get_team,":team1",":agent"),
           (agent_get_division,":class",":agent"), #CABA Changed agent_get_class to agent_get_division
       (team_get_movement_order,":order",":team1",":class"),
           (assign,":continue",0),
           (try_begin),
          (neq, ":agent", "$fplayer_agent_no"),
              (store_add, ":slot", slot_team_d0_order_sp_brace, ":class"),
              (team_slot_eq, ":team1", ":slot", 1),
          (this_or_next|eq,":order",mordr_hold),
              (eq,":order",mordr_stand_ground),
              (assign, ":continue", 1),
           (else_try), #CABA
              (eq, 1,0), #CABA
              (eq, ":agent", "$fplayer_agent_no"), #CABA
              (agent_slot_eq, "$fplayer_agent_no", slot_agent_player_braced, 1), #CABA
              (assign, ":continue", 1), #CABA
           (try_end),
           (eq, ":continue", 1),
          (agent_get_speed, pos0, ":agent"), #New
          (position_get_y, ":speed", pos0),
          (position_get_x, ":speed_x", pos0),
          (val_max, ":speed", ":speed_x"),
          (eq, ":speed", 0),
          (try_begin),
           (agent_get_animation, ":anim", ":agent"),                
           (assign, ":anim_bracing", "anim_pikewall_hold"),
           (neq, ":anim", ":anim_bracing"),
           (agent_set_animation, ":agent", ":anim_bracing"),
           (agent_get_position, pos1, ":agent"), ##lessens some spinning
           (agent_set_scripted_destination, ":agent", pos1), ##lessens some spinning
           (agent_get_look_position, pos1, ":agent"),
           (position_get_x, ":x", pos1),
           (position_get_y, ":y", pos1),
           (agent_set_slot, ":agent", slot_agent_target_x_pos, ":x"),
           (agent_set_slot, ":agent", slot_agent_target_y_pos, ":y"),
           (agent_set_slot, ":agent", slot_agent_spearwall, 0), #Begin count with animation resetting
          (try_end),
           #(eq, ":continue", 1),
           (agent_get_slot,":speartimer",":agent",slot_agent_spearwall),
           (try_begin),
                (lt,":speartimer",20),
                (val_add,":speartimer",1),
                (agent_set_slot,":agent",slot_agent_spearwall,":speartimer"),
           (try_end),
       (agent_set_is_alarmed, ":agent", 0), ##lessens some spinning
       (agent_get_slot, ":x", ":agent", slot_agent_target_x_pos),
       (agent_get_slot, ":y", ":agent", slot_agent_target_y_pos),
       (init_position, pos2),
       (position_set_x, pos2, ":x"),
       (position_set_y, pos2, ":y"),
       (agent_set_look_target_position, ":agent", pos2),
           (ge,":speartimer",20),
           (item_get_weapon_length, ":spear_dist", ":weapon"),
           (assign, ":dist_to_beat", ":spear_dist"), #CABA to make sure this calls on the closest...could add something for 1 victim/pike?
           (assign,":victim",-1),
       (assign, ":vic_rider", -1),
           (agent_get_position,pos1,":agent"),
           (try_for_agents,":possible_victim"),
              (agent_is_alive,":possible_victim"),
              (neg|agent_is_human,":possible_victim"),
              (agent_get_rider,":rider",":possible_victim"),
              (ge,":rider",0),
              (agent_get_team,":team2",":rider"),
              (teams_are_enemies,":team1",":team2"),
              (agent_get_position,pos2,":possible_victim"),
              (get_distance_between_positions,":dist",pos1,pos2),
              (lt,":dist",":dist_to_beat"), #CABA
              (neg|position_is_behind_position,pos2,pos1),
              (get_angle_between_positions, ":angle", pos1, pos2), #CABA
              (val_abs, ":angle"), #CABA
              (convert_from_fixed_point, ":angle"), #CABA
              (is_between, ":angle", 165, 181),  #30 degrees... have to be facing one another
              (agent_get_speed, pos0, ":possible_victim"), #CABA
              (position_get_y, ":speed", pos0), #CABA
              (position_get_x, ":speed_x", pos0), #CABA - just be be sure
              (val_max, ":speed", ":speed_x"), #CABA - just to be sure
              (ge, ":speed", 300), #CABA at least half speed; full speed horse 800-1100, was 400
              (assign, ":dist_to_beat", ":dist"), #CABA ...now it will progressively find the closest target
              (assign,":victim",":possible_victim"), #CABA
          (assign,":vic_rider", ":rider"),
           (try_end),
           (gt,":victim",-1),
           (agent_set_animation, ":agent", "anim_spearwall_hold_recoil"),
       (agent_set_slot, ":agent", slot_agent_spearwall, 0),
           (agent_play_sound,":victim","snd_metal_hit_high_armor_high_damage"),
           (store_agent_hit_points,":hp",":victim",0), #This stores as a %
           (store_agent_hit_points,":oldhp",":victim",1), #This stores as absoulte #
           (store_agent_hit_points,":rider_hp",":vic_rider",0),
           (store_agent_hit_points,":old_hp_rider",":vic_rider",1), 
           
           (val_div,":speed",6), # Orig 2; Remember to change this if the timing on speed checks changes
           (val_add,":speed",10), #CABA - w/speed div by 8-10, a speed over 900 will be an instant-kill. Might want to change divisor to 10?
       (val_sub,":hp",":speed"),
           (val_max,":hp",0),
       (val_sub,":rider_hp",":speed"),
           (val_max,":rider_hp",0),
           (agent_set_hit_points,":victim",":hp",0), #NEW HP% = Previous HP% - (Speed/8)
           (agent_deliver_damage_to_agent,":victim",":victim"), ##CHANGE TO THE AGENT DEALING DAMAGE? Probably not to avoid double pike-buff
           (store_agent_hit_points,":hp",":victim",1), #Post-Damage HP 
       
           (agent_set_hit_points,":vic_rider",":rider_hp",0), 
           (agent_deliver_damage_to_agent,":vic_rider",":vic_rider"), 
           (store_agent_hit_points,":rider_hp",":vic_rider",1),
              
       (try_begin), #Pike bonus block
           (gt, ":hp", 0), #IF THE HORSE IS STILL ALIVE, base 50% chance of rearing
           (neg|agent_is_human,":victim"),
           (agent_set_animation, ":victim", "anim_horse_rear"),
       (try_end),
           (try_begin),
              (agent_get_horse,":playerhorse","$fplayer_agent_no"),
              (eq,":victim",":playerhorse"),
              (val_sub,":oldhp",":hp"),
              (assign,reg1,":oldhp"),
              (val_sub,":old_hp_rider",":rider_hp"), #CABA
              (assign,reg2,":old_hp_rider"), #CABA
              (display_message,"@Your horse received {reg1} damage from a braced pike!",0xff4040),
              (display_message,"@Your received {reg2} damage from a braced pike!",0xff4040),
           (else_try), #CABA
              (eq, 1,0), #CABA
              (eq, ":agent", "$fplayer_agent_no"), #CABA
              (val_sub,":oldhp",":hp"), #CABA
              (assign,reg1,":oldhp"), #CABA
              (val_sub,":old_hp_rider",":rider_hp"), #CABA
              (assign,reg2,":old_hp_rider"), #CABA
              (str_store_item_name, s1, ":weapon"), #CABA
              (display_message,"@Braced {s1} dealt {reg1} damage and {reg2} damage to rider!"), #CABA
              (agent_set_slot, "$fplayer_agent_no", slot_agent_player_braced, 0),
           (try_end),
        (try_end),
    ]),

  (0, 0, 2, [(eq, 1,0),(key_clicked, "$key_special_0"),(agent_is_alive,"$fplayer_agent_no"),(neg|agent_slot_eq, "$fplayer_agent_no", slot_agent_player_braced, 1)], #spearwall_trigger_2
       [
          (agent_get_horse, ":horse", "$fplayer_agent_no"),
        (neg|ge, ":horse", 0),
        (agent_get_wielded_item, ":weapon", "$fplayer_agent_no", 0), #CABA
        (assign, ":valid_weapon", 0), #CABA
        (try_begin), #CABA-whole block
            (agent_slot_ge, "$fplayer_agent_no", slot_agent_spear_wp, 1),
            (agent_slot_eq, "$fplayer_agent_no", slot_agent_spear_wp, ":weapon"),
            (assign, ":valid_weapon", 1),
        (else_try),
            (ge, ":weapon", 0),
            (item_get_type, ":wpn_type", ":weapon"),
            (eq, ":wpn_type", itp_type_polearm),
            (agent_set_slot, "$fplayer_agent_no", slot_agent_spear_wp, ":weapon"),
            (assign, ":valid_weapon", 1),
        (try_end),
        (eq, ":valid_weapon", 1),       
        (str_store_item_name, s1, ":weapon"), #CABA
        (display_message,"@Bracing {s1} for charge.",0x6495ed),
        #(agent_set_animation, "$fplayer_agent_no", "anim_spearwall_hold"),
        (agent_set_slot, "$fplayer_agent_no", slot_agent_player_braced, 1), #CABA
    ]),
       
  (0, 0, 0, [
              (eq, 1,0), #CABA
        (this_or_next|game_key_clicked, gk_attack),
        (this_or_next|game_key_clicked, gk_defend), #spearwall_trigger_3
        (this_or_next|game_key_clicked, gk_move_forward),
        (this_or_next|game_key_clicked, gk_move_backward),
        (this_or_next|game_key_clicked, gk_move_left),
        (this_or_next|game_key_clicked, gk_move_right),
        (this_or_next|game_key_clicked, gk_equip_primary_weapon),
        (this_or_next|game_key_clicked, gk_equip_secondary_weapon),
        (this_or_next|game_key_clicked, gk_action),
        (game_key_clicked, gk_sheath_weapon),
            (agent_is_alive,"$fplayer_agent_no"),
            (neg|agent_slot_eq, "$fplayer_agent_no", slot_agent_player_braced, 0),
        ],
       [
        (display_message,"@Releasing from brace.",0x6495ed),
        #(agent_set_animation, "$fplayer_agent_no", "anim_release_thrust_staff"),
        (agent_set_animation, "$fplayer_agent_no", "anim_spearwall_hold_recoil"),
        (agent_set_slot, "$fplayer_agent_no", slot_agent_player_braced, 0), #CABA
    ]), 
  ##Spearwall Kit - Edited from the Mercenary by Caba'drin
 ] 

bodyguard_triggers = [
 (ti_after_mission_start, 0, 0, [(party_slot_eq, "p_main_party", slot_party_pref_bodyguard, 1),(neq, "$g_mt_mode", tcm_disguised)], #condition for not sneaking in; to exclude prison-breaks, etc change to (eq, "$g_mt_mode", tcm_default")
   [
    #Get number of bodyguards
    (store_skill_level, ":leadership", "skl_leadership", "trp_player"),
    (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
    (val_div, ":leadership", 3),
    (val_div, ":renown", 400),
    (store_add, ":max_guards", ":renown", ":leadership"),
    (val_min, ":max_guards", 4),
   
    (ge, ":max_guards", 1),
    
    #Prepare Scene/Mission Template
    (assign, ":entry_point", 0),
    (assign, ":mission_tpl", 0),
    (try_begin),        
        (party_slot_eq, "$current_town", slot_party_type, spt_village),
        (assign, ":entry_point", 11), #Village Elder's Entry
        (assign, ":mission_tpl", "mt_village_center"),
    (else_try),
        (this_or_next|eq, "$talk_context", tc_prison_break),
        (this_or_next|eq, "$talk_context", tc_escape),
        (eq, "$talk_context", tc_town_talk),
        (assign, ":entry_point", 24), #Prison Guard's Entry
        (try_begin),
            (party_slot_eq, "$current_town", slot_party_type, spt_castle),
            (assign, ":mission_tpl", "mt_castle_visit"),
        (else_try),
            (assign, ":mission_tpl", "mt_town_center"),
        (try_end),
    (else_try),
        (eq, "$talk_context", tc_tavern_talk),
        (assign, ":entry_point", 17), #First NPC Tavern Entry
    (try_end),
    (try_begin),
        (neq, "$talk_context", tc_tavern_talk),
        (agent_slot_ge, "$fplayer_agent_no", slot_agent_horse, 1), #If the player spawns with a horse, the bodyguard will too.
        (mission_tpl_entry_set_override_flags, ":mission_tpl", ":entry_point", 0),
    (try_end),    
    (store_current_scene, ":cur_scene"),
    (modify_visitors_at_site, ":cur_scene"),  
   
    #Find and Spawn Bodyguards
    (assign, ":bodyguard_count", 0),   
    (party_get_num_companion_stacks, ":num_of_stacks", "p_main_party"),
    (try_for_range, ":i", 0, ":num_of_stacks"),
        (party_stack_get_troop_id, ":troop_id", "p_main_party", ":i"),
        (neq, ":troop_id", "trp_player"),
        (troop_is_hero, ":troop_id"),
        (neg|troop_is_wounded, ":troop_id"),
        (val_add, ":bodyguard_count", 1),
                
        (try_begin), #For prison-breaks
            (this_or_next|eq, "$talk_context", tc_escape),
            (eq, "$talk_context", tc_prison_break),      
            (troop_set_slot, ":troop_id", slot_troop_will_join_prison_break, 1),
        (try_end),

        (add_visitors_to_current_scene, ":entry_point", ":troop_id", 1),

        (eq, ":bodyguard_count", ":max_guards"),
        (assign, ":num_of_stacks", 0), #Break Loop       
    (try_end), #Stack Loop
    (gt, ":bodyguard_count", 0), #If bodyguards spawned...
    (set_show_messages, 0),   
    (team_give_order, "$fplayer_team_no", 8, mordr_follow), #Division 8 to avoid potential conflicts
    (team_set_order_listener, "$fplayer_team_no", 8),
    (set_show_messages, 1),   
   ]),   

 (ti_on_agent_spawn, 0, 0, [(party_slot_eq, "p_main_party", slot_party_pref_bodyguard, 1)], 
   [
    (store_trigger_param_1, ":agent"),
    (agent_get_troop_id, ":troop", ":agent"),
    (neq, ":troop", "trp_player"),
    (troop_is_hero, ":troop"),
    (main_party_has_troop, ":troop"),
    
    (get_player_agent_no, ":player"),
    (ge, ":player", 0),
    (agent_get_team, ":player_team", ":player"),
    (agent_get_position,pos1,":player"),        
    
    (agent_set_team, ":agent", ":player_team"),
    (agent_set_division, ":agent", 8),
    (agent_add_relation_with_agent, ":agent", ":player", 1),
    (agent_set_is_alarmed, ":agent", 1),
    (store_random_in_range, ":shift", 1, 3),
    (val_mul, ":shift", 100),
    (position_move_y, pos1, ":shift"),
    (store_random_in_range, ":shift", 1, 3),
    (store_random_in_range, ":shift_2", 0, 2),
    (val_mul, ":shift_2", -1),
    (try_begin),
        (neq, ":shift_2", 0),
        (val_mul, ":shift", ":shift_2"),
    (try_end),
    (position_move_x, pos1, ":shift"),
    (agent_set_position, ":agent", pos1),
   ]),
  
 (ti_on_agent_killed_or_wounded, 0, 0, [(party_slot_eq, "p_main_party", slot_party_pref_bodyguard, 1)],
    [
     (store_trigger_param_1, ":dead_agent"),
        
     (agent_get_troop_id, ":troop", ":dead_agent"),
     (neq, ":troop", "trp_player"),
     (troop_is_hero, ":troop"),
     (main_party_has_troop, ":troop"),
     (neg|troop_is_wounded, ":troop"),
     (party_wound_members, "p_main_party", ":troop", 1),
    ]),
 ]
  
deathcam_mouse_deadzone = 2 #set this to a positive number (MV: 2 or 3 works well for me, but needs testing on other people's PCs)
custom_camera_triggers = [  
 # CUSTOM CAMERA - dunde (Rubik, MartinF) + DEATH CAMERA - MadVader
 (0, 0, ti_once, [(get_player_agent_no, "$cam_current_agent"), (gt, "$cam_current_agent", -1)],
    #camera_init
    [ (assign,"$cam_mode", 0),(assign, "$shoot_mode",0), (assign, "$cam_free", -1), #cam_free was 0; -1 not free; 0 custom/movement free; 1 all agent cycle free                       
      #(assign, "$g_camera_z", 300),(assign, "$g_camera_y", -1000),(assign, "$g_camera_x", 0),      
      (assign, "$deathcam_on", 0), (assign, "$pin_player_fallen", 0),
      # mouse center coordinates (non-windowed)
      (assign, "$camera_mouse_center_x", 500),
      (assign, "$camera_mouse_center_y", 375),
      # last recorded mouse coordinates
      (assign, "$camera_mouse_x", "$camera_mouse_center_x"),
      (assign, "$camera_mouse_y", "$camera_mouse_center_y"),
      # counts how many cycles the mouse stays in the same position, to determine new center in windowed mode
      (assign, "$camera_mouse_counter", 0),
    ]),
    
 ## MadVader deathcam begin
 (0, 0, 0, [(main_hero_fallen),(eq, "$deathcam_on", 0),(eq, "$cam_mode", 2)],
   #deathcam_start 
   #0, 4, ti_once, # 4 seconds delay before the camera activates [(main_hero_fallen),(eq, "$deathcam_on", 0),]
   [
      (agent_get_position, pos1, "$fplayer_agent_no"),
      (position_get_x, ":pos_x", pos1),
      (position_get_y, ":pos_y", pos1),
      (init_position, pos47),
      (position_set_x, pos47, ":pos_x"),
      (position_set_y, pos47, ":pos_y"),
      (position_set_z_to_ground_level, pos47),
      (position_move_z, pos47, 250),
      (mission_cam_set_mode, 1, 0, 0),
      (mission_cam_set_position, pos47),
      (assign, "$g_camera_rotx", 0),
      (assign, "$deathcam_on", 1),
   ]),

 (0, 0, 0, [(eq, "$deathcam_on", 1),(eq, "$cam_mode", 2),
    #deathcam_move
      (this_or_next|key_clicked, "$key_camera_forward"),
      (this_or_next|key_is_down, "$key_camera_forward"),
      (this_or_next|key_clicked, "$key_camera_backward"),
      (this_or_next|key_is_down, "$key_camera_backward"),
      (this_or_next|key_clicked, "$key_camera_left"),
      (this_or_next|key_is_down, "$key_camera_left"),
      (this_or_next|key_clicked, "$key_camera_right"),
      (key_is_down, "$key_camera_right"),],
    [
      (mission_cam_get_position, pos47),
      (assign, ":move_x", 0),
      (assign, ":move_y", 0),
      (try_begin), #forward
        (this_or_next|key_clicked, "$key_camera_forward"),
        (key_is_down, "$key_camera_forward"),
        (assign, ":move_y", 10),
      (try_end),
      (try_begin), #backward
        (this_or_next|key_clicked, "$key_camera_backward"),
        (key_is_down, "$key_camera_backward"),
        (assign, ":move_y", -10),
      (try_end),
      (try_begin), #left
        (this_or_next|key_clicked, "$key_camera_left"),
        (key_is_down, "$key_camera_left"),
        (assign, ":move_x", -10),
      (try_end),
      (try_begin), #right
        (this_or_next|key_clicked, "$key_camera_right"),
        (key_is_down, "$key_camera_right"),
        (assign, ":move_x", 10),
      (try_end),
      (position_move_x, pos47, ":move_x"),
      (position_move_y, pos47, ":move_y"),
      (mission_cam_set_position, pos47),   
    ]),

 (0, 0, 0, [(eq, "$deathcam_on", 1),(eq, "$cam_mode", 2),
    #deathcam_rotate
      (neg|is_presentation_active, "prsnt_battle"),
      (mouse_get_position, pos1),
      (set_fixed_point_multiplier, 1000),
      (position_get_x, reg1, pos1),
      (position_get_y, reg2, pos1),
      (this_or_next|neq, reg1, "$camera_mouse_center_x"),
      (neq, reg2, "$camera_mouse_center_y"),],
    [
      # fix for windowed mode: recenter the mouse
      (assign, ":continue", 1),
      (try_begin),
        (eq, reg1, "$camera_mouse_x"),
        (eq, reg2, "$camera_mouse_y"),
        (val_add, "$camera_mouse_counter", 1),
        (try_begin), #hackery: if the mouse hasn't moved for X cycles, recenter it
          (gt, "$camera_mouse_counter", 50),
          (assign, "$camera_mouse_center_x", reg1),
          (assign, "$camera_mouse_center_y", reg2),
          (assign, "$camera_mouse_counter", 0),
        (try_end),
        (assign, ":continue", 0),
      (try_end),
      (eq, ":continue", 1), #continue only if mouse has moved
      (assign, "$camera_mouse_counter", 0), # reset recentering hackery
     
      # update recorded mouse position
      (assign, "$camera_mouse_x", reg1),
      (assign, "$camera_mouse_y", reg2),
     
      (mission_cam_get_position, pos47),
      (store_sub, ":shift", "$camera_mouse_center_x", reg1), #horizontal shift for pass 0
      (store_sub, ":shift_vertical", reg2, "$camera_mouse_center_y"), #for pass 1
     
      (try_for_range, ":pass", 0, 2), #pass 0: check mouse x movement (left/right), pass 1: check mouse y movement (up/down)
        (try_begin),
          (eq, ":pass", 1),
          (assign, ":shift", ":shift_vertical"), #get ready for the second pass
        (try_end),
        (this_or_next|lt, ":shift", -deathcam_mouse_deadzone), #skip pass if not needed (mouse deadzone)
        (gt, ":shift", deathcam_mouse_deadzone),
       
        (assign, ":sign", 1),
        (try_begin),
          (lt, ":shift", 0),
          (assign, ":sign", -1),
        (try_end),
        # square root calc
        (val_abs, ":shift"),
        (val_sub, ":shift", deathcam_mouse_deadzone), # ":shift" is now 1 or greater
        (convert_to_fixed_point, ":shift"),
        (store_sqrt, ":shift", ":shift"),
        (convert_from_fixed_point, ":shift"),
        (val_clamp, ":shift", 1, 6), #limit rotation speed
        (val_mul, ":shift", ":sign"),
        (try_begin),
          (eq, ":pass", 0), # rotate around z (left/right)
          (store_mul, ":minusrotx", "$g_camera_rotx", -1),
          (position_rotate_x, pos47, ":minusrotx"), #needed so camera yaw won't change
          (position_rotate_z, pos47, ":shift"),
          (position_rotate_x, pos47, "$g_camera_rotx"), #needed so camera yaw won't change
        (try_end),
        (try_begin),
          (eq, ":pass", 1), # rotate around x (up/down)
          (position_rotate_x, pos47, ":shift"),
          (val_add, "$g_camera_rotx", ":shift"),
        (try_end),
      (try_end), #try_for_range ":pass"
      (mission_cam_set_position, pos47),
    ]),
 ## MadVader deathcam end
 
 (0, 0, 0, [(eq, "$deathcam_on", 0),(eq, "$cam_mode", 1)],
   #camera_follow
   [
     (set_fixed_point_multiplier, 100),
     (agent_get_look_position, pos7, "$cam_current_agent"),
     (position_get_rotation_around_x, ":angle", pos7),
     (store_sub, ":reverse", 0, ":angle"),
     (position_rotate_x, pos7, ":reverse"),
     (try_begin),
        (eq, "$cam_free", -1),
        (val_clamp, "$g_camera_x", -1000, 1000),
        (val_clamp, "$g_camera_y", -1000, 1000),
        (val_min, "$g_camera_z", 1000),
     (try_end),
     (position_move_y, pos7, "$g_camera_y"),
     (position_move_z, pos7, "$g_camera_z"),
     (position_move_x, pos7, "$g_camera_x"),
     (agent_get_horse, ":horse_agent", "$cam_current_agent"),
     (try_begin),
        (ge, ":horse_agent", 0),
        (position_move_z, pos7, 80),       
     (try_end),
     (store_mul, ":reverse", -1, "$g_camera_y"),
     (store_atan2, ":drop", "$g_camera_z", ":reverse"),
     (convert_from_fixed_point, ":drop"),
     (val_sub, ":angle", ":drop"),
     (position_rotate_x, pos7, ":angle"),
     (mission_cam_animate_to_position, pos7, 100, 0),
  
    (try_begin), 
        (neg|main_hero_fallen),
        (this_or_next|game_key_clicked, gk_view_char),
        (game_key_clicked, gk_cam_toggle),
        (mission_cam_set_mode, 0),
        (assign, "$cam_mode", 0),
    (try_end),
  ]),
  
 (0, 0, 0, [(key_clicked, "$key_camera_toggle"),(lt, "$cam_mode", 3),(neq, "$shoot_mode", 1)],
   #camera_toggle
   # toggling only when came mode =0 or 1 (2=disable) ; shoot_mode=1 temporary diable toggling
   [(try_begin),
     (eq, "$cam_mode", 0),
     (assign, "$cam_mode", 1),
     (assign, "$g_camera_z", 300),
     (assign, "$g_camera_y", -1000),
     (assign, "$g_camera_x", 0),
     #(display_message, "@Mode 1-Follow"),
    (else_try),
     (eq, "$cam_mode", 1),
     (try_begin),
        (eq, "$cam_free", -1),
        (try_begin),
            (neg|main_hero_fallen, 0),
            (get_player_agent_no, "$cam_current_agent"),                 
        (try_end),
        (assign, "$cam_mode", 0),
        #(display_message, "@Mode 0-OFF"),
     (else_try),
        (assign, "$cam_mode", 2),
        #(display_message, "@Mode 2-Free"),
     (try_end),
    (else_try),
     (eq, "$cam_mode", 2),
     (try_begin),
        (ge, "$cam_free", 0),
        (assign, "$cam_mode", 1),
        (assign, "$g_camera_z", 300),
        (assign, "$g_camera_y", -1000),
        (assign, "$g_camera_x", 0),
        #(display_message, "@Mode 1-Follow"),
        (assign, "$deathcam_on", 0),
     (else_try),
        (assign, "$cam_mode", 0),
        #(display_message, "@Mode 0-OFF"),
     (try_end),
    (try_end),
    (start_presentation, "prsnt_caba_camera_mode_display"),
    (try_begin),
      (eq, "$cam_mode", 0),
      (mission_cam_set_mode, 0),
    (else_try),
      (mission_cam_set_mode, 1),
    (try_end),
  ]),

 (0, 0, 0,[(key_is_down, "$key_camera_right"), (eq, "$cam_mode", 1)], [(val_add, "$g_camera_x",1),(neg|key_is_down, key_left_shift),(val_add, "$g_camera_x",9)]), #camera_right
 (0, 0, 0,[(key_is_down, "$key_camera_left"), (eq, "$cam_mode", 1)], [(val_sub, "$g_camera_x",1),(neg|key_is_down, key_left_shift),(val_sub, "$g_camera_x",9)]), #camera_left
 (0, 0, 0,[(key_is_down, "$key_camera_forward"), (eq, "$cam_mode", 1)], [(val_add, "$g_camera_y",1),(neg|key_is_down, key_left_shift),(val_add, "$g_camera_y",9),]), #camera_forward
 (0, 0, 0,[(key_is_down, "$key_camera_backward"), (eq, "$cam_mode", 1)], [(val_sub, "$g_camera_y",1),(neg|key_is_down, key_left_shift),(val_sub, "$g_camera_y",9),]), #camera_backward
 (0, 0, 0,[(key_is_down, "$key_camera_zoom_plus"),(eq, "$cam_mode", 1)], [(val_add, "$g_camera_z",1),(neg|key_is_down, key_left_shift),(val_add, "$g_camera_z",9),]), #camera_up
 (0, 0, 0,[(key_is_down, "$key_camera_zoom_min"), (eq, "$cam_mode", 1)], [(val_sub, "$g_camera_z",1),(neg|key_is_down, key_left_shift),(val_sub, "$g_camera_z",9),(val_max,"$g_camera_z", 50),]), #camera_down
 (0, 0, 0,[(key_clicked, "$key_camera_next"),(eq, "$cam_mode", 1),(ge, "$cam_free", 1)], [(call_script, "script_cust_cam_cycle_forwards")]), #camera_cycle_fowards     
 (0, 0, 0,[(key_clicked, "$key_camera_prev"),(eq, "$cam_mode", 1),(ge, "$cam_free", 1)], [(call_script, "script_cust_cam_cycle_backwards")]), #camera_cycle_backwards
 (0, 0, 0,[(neg|main_hero_fallen),(key_is_down, key_left_mouse_button),(eq, "$cam_mode", 1)], [(eq, "$fplayer_agent_no","$cam_current_agent"),(agent_is_alive, "$fplayer_agent_no"),(agent_get_wielded_item,":weapon","$cam_current_agent",0),(ge, ":weapon", 0),(item_get_type, ":type", ":weapon"), (this_or_next|eq,":type",itp_type_bow),(this_or_next|eq,":type",itp_type_crossbow),(eq,":type",itp_type_thrown),(assign,"$shoot_mode",1),(mission_cam_set_mode, 0)]), #camera_shot
 (0, 0, 0,[(neg|main_hero_fallen),(neg|key_is_down, key_left_mouse_button), (eq, "$shoot_mode",1)], [(assign,"$shoot_mode",0),(mission_cam_set_mode, 1)]) , #camera_return_normal      
  
 ]
## Prebattle Orders & Deployment End

multiplayer_server_check_belfry_movement = (
  0, 0, 0, [],
  [
    (multiplayer_is_server),
    (set_fixed_point_multiplier, 100),

    (try_for_range, ":belfry_kind", 0, 2),
      (try_begin),
        (eq, ":belfry_kind", 0),
        (assign, ":belfry_body_scene_prop", "spr_belfry_a"),
      (else_try),
        (assign, ":belfry_body_scene_prop", "spr_belfry_b"),
      (try_end),
    
      (scene_prop_get_num_instances, ":num_belfries", ":belfry_body_scene_prop"),
      (try_for_range, ":belfry_no", 0, ":num_belfries"),
        (scene_prop_get_instance, ":belfry_scene_prop_id", ":belfry_body_scene_prop", ":belfry_no"),
        (prop_instance_get_position, pos1, ":belfry_scene_prop_id"), #pos1 holds position of current belfry 
        (prop_instance_get_starting_position, pos11, ":belfry_scene_prop_id"),

        (store_add, ":belfry_first_entry_point_id", 11, ":belfry_no"), #belfry entry points are 110..119 and 120..129 and 130..139
        (try_begin),
          (eq, ":belfry_kind", 1),
          (scene_prop_get_num_instances, ":number_of_belfry_a", "spr_belfry_a"),
          (val_add, ":belfry_first_entry_point_id", ":number_of_belfry_a"),
        (try_end),        
                
        (val_mul, ":belfry_first_entry_point_id", 10),
        (store_add, ":belfry_last_entry_point_id", ":belfry_first_entry_point_id", 10),
    
        (try_for_range, ":entry_point_id", ":belfry_first_entry_point_id", ":belfry_last_entry_point_id"),
          (entry_point_is_auto_generated, ":entry_point_id"),
          (assign, ":belfry_last_entry_point_id", ":entry_point_id"),
        (try_end),
        
        (assign, ":belfry_last_entry_point_id_plus_one", ":belfry_last_entry_point_id"),
        (val_sub, ":belfry_last_entry_point_id", 1),
        (assign, reg0, ":belfry_last_entry_point_id"),
        (neg|entry_point_is_auto_generated, ":belfry_last_entry_point_id"),

        (try_begin),
          (get_sq_distance_between_positions, ":dist_between_belfry_and_its_destination", pos1, pos11),
          (ge, ":dist_between_belfry_and_its_destination", 4), #0.2 * 0.2 * 100 = 4 (if distance between belfry and its destination already less than 20cm no need to move it anymore)

          (assign, ":max_dist_between_entry_point_and_belfry_destination", -1), #should be lower than 0 to allow belfry to go last entry point
          (assign, ":belfry_next_entry_point_id", -1),
          (try_for_range, ":entry_point_id", ":belfry_first_entry_point_id", ":belfry_last_entry_point_id_plus_one"),
            (entry_point_get_position, pos4, ":entry_point_id"),
            (get_sq_distance_between_positions, ":dist_between_entry_point_and_belfry_destination", pos11, pos4),
            (lt, ":dist_between_entry_point_and_belfry_destination", ":dist_between_belfry_and_its_destination"),
            (gt, ":dist_between_entry_point_and_belfry_destination", ":max_dist_between_entry_point_and_belfry_destination"),
            (assign, ":max_dist_between_entry_point_and_belfry_destination", ":dist_between_entry_point_and_belfry_destination"),
            (assign, ":belfry_next_entry_point_id", ":entry_point_id"),
          (try_end),

          (try_begin),
            (ge, ":belfry_next_entry_point_id", 0),
            (entry_point_get_position, pos5, ":belfry_next_entry_point_id"), #pos5 holds belfry next entry point target during its path
          (else_try),
            (copy_position, pos5, pos11),    
          (try_end),
        
          (get_distance_between_positions, ":belfry_next_entry_point_distance", pos1, pos5),
        
          #collecting scene prop ids of belfry parts
          (try_begin),
            (eq, ":belfry_kind", 0),
            #belfry platform_a
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_platform_a", ":belfry_no"),
            #belfry platform_b
            (scene_prop_get_instance, ":belfry_platform_b_scene_prop_id", "spr_belfry_platform_b", ":belfry_no"),
          (else_try),
            #belfry platform_a
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_b_platform_a", ":belfry_no"),
          (try_end),
    
          #belfry wheel_1
          (store_mul, ":wheel_no", ":belfry_no", 3),
          (try_begin),
            (eq, ":belfry_body_scene_prop", "spr_belfry_b"),
            (scene_prop_get_num_instances, ":number_of_belfry_a", "spr_belfry_a"),    
            (store_mul, ":number_of_belfry_a_wheels", ":number_of_belfry_a", 3),
            (val_add, ":wheel_no", ":number_of_belfry_a_wheels"),
          (try_end),
          (scene_prop_get_instance, ":belfry_wheel_1_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
          #belfry wheel_2
          (val_add, ":wheel_no", 1),
          (scene_prop_get_instance, ":belfry_wheel_2_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),
          #belfry wheel_3
          (val_add, ":wheel_no", 1),
          (scene_prop_get_instance, ":belfry_wheel_3_scene_prop_id", "spr_belfry_wheel", ":wheel_no"),

          (init_position, pos17),
          (position_move_y, pos17, -225),
          (position_transform_position_to_parent, pos18, pos1, pos17),
          (position_move_y, pos17, -225),
          (position_transform_position_to_parent, pos19, pos1, pos17),

          (assign, ":number_of_agents_around_belfry", 0),
          (get_max_players, ":num_players"),
          (try_for_range, ":player_no", 0, ":num_players"),
            (player_is_active, ":player_no"),
            (player_get_agent_id, ":agent_id", ":player_no"),
            (ge, ":agent_id", 0),
            (agent_get_team, ":agent_team", ":agent_id"),
            (eq, ":agent_team", 1), #only team2 players allowed to move belfry (team which spawns outside the castle (team1 = 0, team2 = 1))
            (agent_get_horse, ":agent_horse_id", ":agent_id"),
            (eq, ":agent_horse_id", -1),
            (agent_get_position, pos2, ":agent_id"),
            (get_sq_distance_between_positions_in_meters, ":dist_between_agent_and_belfry", pos18, pos2),

            (lt, ":dist_between_agent_and_belfry", multi_distance_sq_to_use_belfry), #must be at most 10m * 10m = 100m away from the player
            (neg|scene_prop_has_agent_on_it, ":belfry_scene_prop_id", ":agent_id"),
            (neg|scene_prop_has_agent_on_it, ":belfry_platform_a_scene_prop_id", ":agent_id"),

            (this_or_next|eq, ":belfry_kind", 1), #there is this_or_next here because belfry_b has no platform_b
            (neg|scene_prop_has_agent_on_it, ":belfry_platform_b_scene_prop_id", ":agent_id"),
    
            (neg|scene_prop_has_agent_on_it, ":belfry_wheel_1_scene_prop_id", ":agent_id"),#can be removed to make faster
            (neg|scene_prop_has_agent_on_it, ":belfry_wheel_2_scene_prop_id", ":agent_id"),#can be removed to make faster
            (neg|scene_prop_has_agent_on_it, ":belfry_wheel_3_scene_prop_id", ":agent_id"),#can be removed to make faster
            (neg|position_is_behind_position, pos2, pos19),
            (position_is_behind_position, pos2, pos1),
            (val_add, ":number_of_agents_around_belfry", 1),        
          (try_end),

          (val_min, ":number_of_agents_around_belfry", 16),

          (try_begin),
            (scene_prop_get_slot, ":pre_number_of_agents_around_belfry", ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing),
            (scene_prop_get_slot, ":next_entry_point_id", ":belfry_scene_prop_id", scene_prop_next_entry_point_id),
            (this_or_next|neq, ":pre_number_of_agents_around_belfry", ":number_of_agents_around_belfry"),
            (neq, ":next_entry_point_id", ":belfry_next_entry_point_id"),

            (try_begin),
              (eq, ":next_entry_point_id", ":belfry_next_entry_point_id"), #if we are still targetting same entry point subtract 
              (prop_instance_is_animating, ":is_animating", ":belfry_scene_prop_id"),
              (eq, ":is_animating", 1),

              (store_mul, ":sqrt_number_of_agents_around_belfry", "$g_last_number_of_agents_around_belfry", 100),
              (store_sqrt, ":sqrt_number_of_agents_around_belfry", ":sqrt_number_of_agents_around_belfry"),
              (val_min, ":sqrt_number_of_agents_around_belfry", 300),
              (assign, ":distance", ":belfry_next_entry_point_distance"),
              (val_mul, ":distance", ":sqrt_number_of_agents_around_belfry"),
              (val_div, ":distance", 100), #100 is because of fixed_point_multiplier
              (val_mul, ":distance", 4), #multiplying with 4 to make belfry pushing process slower, 
                                                                 #with 16 agents belfry will go with 4 / 4 = 1 speed (max), with 1 agent belfry will go with 1 / 4 = 0.25 speed (min)    
            (try_end),

            (try_begin),
              (ge, ":belfry_next_entry_point_id", 0),

              #up down rotation of belfry's next entry point
              (init_position, pos9),
              (position_set_y, pos9, -500), #go 5.0 meters back
              (position_set_x, pos9, -300), #go 3.0 meters left
              (position_transform_position_to_parent, pos10, pos5, pos9), 
              (position_get_distance_to_terrain, ":height_to_terrain_1", pos10), #learn distance between 5 meters back of entry point(pos10) and ground level at left part of belfry
      
              (init_position, pos9),
              (position_set_y, pos9, -500), #go 5.0 meters back
              (position_set_x, pos9, 300), #go 3.0 meters right
              (position_transform_position_to_parent, pos10, pos5, pos9), 
              (position_get_distance_to_terrain, ":height_to_terrain_2", pos10), #learn distance between 5 meters back of entry point(pos10) and ground level at right part of belfry

              (store_add, ":height_to_terrain", ":height_to_terrain_1", ":height_to_terrain_2"),
              (val_mul, ":height_to_terrain", 100), #because of fixed point multiplier

              (store_div, ":rotate_angle_of_next_entry_point", ":height_to_terrain", 24), #if there is 1 meters of distance (100cm) then next target position will rotate by 2 degrees. #ac sonra
              (init_position, pos20),    
              (position_rotate_x_floating, pos20, ":rotate_angle_of_next_entry_point"),
              (position_transform_position_to_parent, pos23, pos5, pos20),

              #right left rotation of belfry's next entry point
              (init_position, pos9),
              (position_set_x, pos9, -300), #go 3.0 meters left
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in -x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_left", pos10), #learn distance between 3.0 meters left of entry point(pos10) and ground level
              (init_position, pos9),
              (position_set_x, pos9, 300), #go 3.0 meters left
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_right", pos10), #learn distance between 3.0 meters right of entry point(pos10) and ground level
              (store_sub, ":height_to_terrain_1", ":height_to_terrain_at_left", ":height_to_terrain_at_right"),

              (init_position, pos9),
              (position_set_x, pos9, -300), #go 3.0 meters left
              (position_set_y, pos9, -500), #go 5.0 meters forward
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in -x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_left", pos10), #learn distance between 3.0 meters left of entry point(pos10) and ground level
              (init_position, pos9),
              (position_set_x, pos9, 300), #go 3.0 meters left
              (position_set_y, pos9, -500), #go 5.0 meters forward
              (position_transform_position_to_parent, pos10, pos5, pos9), #applying 3.0 meters in x to position of next entry point target, final result is in pos10
              (position_get_distance_to_terrain, ":height_to_terrain_at_right", pos10), #learn distance between 3.0 meters right of entry point(pos10) and ground level
              (store_sub, ":height_to_terrain_2", ":height_to_terrain_at_left", ":height_to_terrain_at_right"),

              (store_add, ":height_to_terrain", ":height_to_terrain_1", ":height_to_terrain_2"),    
              (val_mul, ":height_to_terrain", 100), #100 is because of fixed_point_multiplier
              (store_div, ":rotate_angle_of_next_entry_point", ":height_to_terrain", 24), #if there is 1 meters of distance (100cm) then next target position will rotate by 25 degrees. 
              (val_mul, ":rotate_angle_of_next_entry_point", -1),

              (init_position, pos20),
              (position_rotate_y_floating, pos20, ":rotate_angle_of_next_entry_point"),
              (position_transform_position_to_parent, pos22, pos23, pos20),
            (else_try),
              (copy_position, pos22, pos5),      
            (try_end),
              
            (try_begin),
              (ge, ":number_of_agents_around_belfry", 1), #if there is any agents pushing belfry

              (store_mul, ":sqrt_number_of_agents_around_belfry", ":number_of_agents_around_belfry", 100),
              (store_sqrt, ":sqrt_number_of_agents_around_belfry", ":sqrt_number_of_agents_around_belfry"),
              (val_min, ":sqrt_number_of_agents_around_belfry", 300),
              (val_mul, ":belfry_next_entry_point_distance", 100), #100 is because of fixed_point_multiplier
              (val_mul, ":belfry_next_entry_point_distance", 3), #multiplying with 3 to make belfry pushing process slower, 
                                                                 #with 9 agents belfry will go with 3 / 3 = 1 speed (max), with 1 agent belfry will go with 1 / 3 = 0.33 speed (min)    
              (val_div, ":belfry_next_entry_point_distance", ":sqrt_number_of_agents_around_belfry"),
              #calculating destination coordinates of belfry parts
              #belfry platform_a
              (prop_instance_get_position, pos6, ":belfry_platform_a_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos1, pos6),
              (position_transform_position_to_parent, pos8, pos22, pos7),
              (prop_instance_animate_to_position, ":belfry_platform_a_scene_prop_id", pos8, ":belfry_next_entry_point_distance"),    
              #belfry platform_b
              (try_begin),
                (eq, ":belfry_kind", 0),
                (prop_instance_get_position, pos6, ":belfry_platform_b_scene_prop_id"),
                (position_transform_position_to_local, pos7, pos1, pos6),
                (position_transform_position_to_parent, pos8, pos22, pos7),
                (prop_instance_animate_to_position, ":belfry_platform_b_scene_prop_id", pos8, ":belfry_next_entry_point_distance"),
              (try_end),
              #wheel rotation
              (store_mul, ":belfry_wheel_rotation", ":belfry_next_entry_point_distance", -25),
              #(val_add, "$g_belfry_wheel_rotation", ":belfry_wheel_rotation"),
              (assign, "$g_last_number_of_agents_around_belfry", ":number_of_agents_around_belfry"),

              #belfry wheel_1
              #(prop_instance_get_starting_position, pos13, ":belfry_wheel_1_scene_prop_id"),
              (prop_instance_get_position, pos13, ":belfry_wheel_1_scene_prop_id"),
              (prop_instance_get_position, pos20, ":belfry_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos20, pos13),
              (position_transform_position_to_parent, pos21, pos22, pos7),
              (prop_instance_rotate_to_position, ":belfry_wheel_1_scene_prop_id", pos21, ":belfry_next_entry_point_distance", ":belfry_wheel_rotation"),
      
              #belfry wheel_2
              #(prop_instance_get_starting_position, pos13, ":belfry_wheel_2_scene_prop_id"),
              (prop_instance_get_position, pos13, ":belfry_wheel_2_scene_prop_id"),
              (prop_instance_get_position, pos20, ":belfry_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos20, pos13),
              (position_transform_position_to_parent, pos21, pos22, pos7),
              (prop_instance_rotate_to_position, ":belfry_wheel_2_scene_prop_id", pos21, ":belfry_next_entry_point_distance", ":belfry_wheel_rotation"),
      
              #belfry wheel_3
              (prop_instance_get_position, pos13, ":belfry_wheel_3_scene_prop_id"),
              (prop_instance_get_position, pos20, ":belfry_scene_prop_id"),
              (position_transform_position_to_local, pos7, pos20, pos13),
              (position_transform_position_to_parent, pos21, pos22, pos7),
              (prop_instance_rotate_to_position, ":belfry_wheel_3_scene_prop_id", pos21, ":belfry_next_entry_point_distance", ":belfry_wheel_rotation"),

              #belfry main body
              (prop_instance_animate_to_position, ":belfry_scene_prop_id", pos22, ":belfry_next_entry_point_distance"),    
            (else_try),
              (prop_instance_is_animating, ":is_animating", ":belfry_scene_prop_id"),
              (eq, ":is_animating", 1),

              #belfry platform_a
              (prop_instance_stop_animating, ":belfry_platform_a_scene_prop_id"),
              #belfry platform_b
              (try_begin),
                (eq, ":belfry_kind", 0),
                (prop_instance_stop_animating, ":belfry_platform_b_scene_prop_id"),
              (try_end),
              #belfry wheel_1
              (prop_instance_stop_animating, ":belfry_wheel_1_scene_prop_id"),
              #belfry wheel_2
              (prop_instance_stop_animating, ":belfry_wheel_2_scene_prop_id"),
              #belfry wheel_3
              (prop_instance_stop_animating, ":belfry_wheel_3_scene_prop_id"),
              #belfry main body
              (prop_instance_stop_animating, ":belfry_scene_prop_id"),
            (try_end),
        
            (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, ":number_of_agents_around_belfry"),    
            (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, ":belfry_next_entry_point_id"),
          (try_end),
        (else_try),
          (le, ":dist_between_belfry_and_its_destination", 4),
          (scene_prop_slot_eq, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
      
          (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 1),    

          (try_begin),
            (eq, ":belfry_kind", 0),
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_platform_a", ":belfry_no"),
          (else_try),
            (scene_prop_get_instance, ":belfry_platform_a_scene_prop_id", "spr_belfry_b_platform_a", ":belfry_no"),
          (try_end),
    
          (prop_instance_get_starting_position, pos0, ":belfry_platform_a_scene_prop_id"),
          (prop_instance_animate_to_position, ":belfry_platform_a_scene_prop_id", pos0, 400),    
        (try_end),
      (try_end),
    (try_end),
    ])

multiplayer_server_spawn_bots = (
  0, 0, 0, [],
  [
    (multiplayer_is_server),
    (eq, "$g_multiplayer_ready_for_spawning_agent", 1),
    (store_add, ":total_req", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
    (try_begin),
      (gt, ":total_req", 0),

      (try_begin),
        (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
        (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
        (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

        (team_get_score, ":team_1_score", 0),
        (team_get_score, ":team_2_score", 1),

        (store_add, ":current_round", ":team_1_score", ":team_2_score"),
        (eq, ":current_round", 0),

        (store_mission_timer_a, ":round_time"),
        (val_sub, ":round_time", "$g_round_start_time"),
        (lt, ":round_time", 20),

        (assign, ":rounded_game_first_round_time_limit_past", 0),
      (else_try),
        (assign, ":rounded_game_first_round_time_limit_past", 1),
      (try_end),
    
      (eq, ":rounded_game_first_round_time_limit_past", 1),
    
      (store_random_in_range, ":random_req", 0, ":total_req"),
      (val_sub, ":random_req", "$g_multiplayer_num_bots_required_team_1"),
      (try_begin),
        (lt, ":random_req", 0),
        #add to team 1
        (assign, ":selected_team", 0),
      (else_try),
        #add to team 2
        (assign, ":selected_team", 1),
      (try_end),

      (try_begin),
        (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
        (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),

        (store_mission_timer_a, ":round_time"),
        (val_sub, ":round_time", "$g_round_start_time"),

        (try_begin),
          (le, ":round_time", 20),
          (assign, ":look_only_actives", 0),
        (else_try),
          (assign, ":look_only_actives", 1),
        (try_end),
      (else_try),
        (assign, ":look_only_actives", 1),
      (try_end),
    
      (call_script, "script_multiplayer_find_bot_troop_and_group_for_spawn", ":selected_team", ":look_only_actives"),
      (assign, ":selected_troop", reg0),
      (assign, ":selected_group", reg1),

      (team_get_faction, ":team_faction", ":selected_team"),
      (assign, ":num_ai_troops", 0),
      (try_for_range, ":cur_ai_troop", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
        (store_troop_faction, ":ai_troop_faction", ":cur_ai_troop"),
        (eq, ":ai_troop_faction", ":team_faction"),
        (val_add, ":num_ai_troops", 1),
      (try_end),

      (assign, ":number_of_active_players_wanted_bot", 0),

      (get_max_players, ":num_players"),
      (try_for_range, ":player_no", 0, ":num_players"),
        (player_is_active, ":player_no"),
        (player_get_team_no, ":player_team_no", ":player_no"),
        (eq, ":selected_team", ":player_team_no"),

        (assign, ":ai_wanted", 0),
        (store_add, ":end_cond", slot_player_bot_type_1_wanted, ":num_ai_troops"),
        (try_for_range, ":bot_type_wanted_slot", slot_player_bot_type_1_wanted, ":end_cond"),
          (player_slot_ge, ":player_no", ":bot_type_wanted_slot", 1),
          (assign, ":ai_wanted", 1),
          (assign, ":end_cond", 0), 
        (try_end),

        (ge, ":ai_wanted", 1),

        (val_add, ":number_of_active_players_wanted_bot", 1),
      (try_end),

      (try_begin),
        (this_or_next|ge, ":selected_group", 0),
        (eq, ":number_of_active_players_wanted_bot", 0),

        (troop_get_inventory_slot, ":has_item", ":selected_troop", ek_horse),
        (try_begin),
          (ge, ":has_item", 0),
          (assign, ":is_horseman", 1),
        (else_try),
          (assign, ":is_horseman", 0),
        (try_end),

        (try_begin),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),

          (store_mission_timer_a, ":round_time"),
          (val_sub, ":round_time", "$g_round_start_time"),

          (try_begin),
            (lt, ":round_time", 20), #at start of game spawn at base entry point
            (try_begin),
              (eq, ":selected_team", 0),
              (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 1, ":is_horseman"), 
            (else_try),
              (assign, reg0, multi_initial_spawn_point_team_2),
            (try_end),
          (else_try),
            (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"), 
          (try_end),
        (else_try),
          (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
      
          (try_begin),
            (eq, ":selected_team", 0),
            (assign, reg0, 0),
          (else_try),
            (assign, reg0, 32),
          (try_end),
        (else_try),
          (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"), 
        (try_end),
      
        (store_current_scene, ":cur_scene"),
        (modify_visitors_at_site, ":cur_scene"),
        (add_visitors_to_current_scene, reg0, ":selected_troop", 1, ":selected_team", ":selected_group"),
        (assign, "$g_multiplayer_ready_for_spawning_agent", 0),

        (try_begin),
          (eq, ":selected_team", 0),
          (val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
        (else_try),
          (eq, ":selected_team", 1),
          (val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
        (try_end),
      (try_end),
    (try_end),    
    ])

multiplayer_server_manage_bots = (
  3, 0, 0, [],
  [
    (multiplayer_is_server),
    (try_for_agents, ":cur_agent"),
      (agent_is_non_player, ":cur_agent"),
      (agent_is_human, ":cur_agent"),
      (agent_is_alive, ":cur_agent"),
      (agent_get_group, ":agent_group", ":cur_agent"),
      (try_begin),
        (neg|player_is_active, ":agent_group"),
        (call_script, "script_multiplayer_change_leader_of_bot", ":cur_agent"),
      (else_try),
        (player_get_team_no, ":leader_team_no", ":agent_group"),
        (agent_get_team, ":agent_team", ":cur_agent"),
        (neq, ":leader_team_no", ":agent_team"),
        (call_script, "script_multiplayer_change_leader_of_bot", ":cur_agent"),
      (try_end),
    (try_end),
    ])

multiplayer_server_check_polls = (
  1, 5, 0,
  [
    (multiplayer_is_server),
    (eq, "$g_multiplayer_poll_running", 1),
    (eq, "$g_multiplayer_poll_ended", 0),
    (store_mission_timer_a, ":mission_timer"),
    (store_add, ":total_votes", "$g_multiplayer_poll_no_count", "$g_multiplayer_poll_yes_count"),
    (this_or_next|eq, ":total_votes", "$g_multiplayer_poll_num_sent"),
    (gt, ":mission_timer", "$g_multiplayer_poll_end_time"),
    (call_script, "script_cf_multiplayer_evaluate_poll"),
    ],
  [
    (assign, "$g_multiplayer_poll_running", 0),
    (try_begin),
      (this_or_next|eq, "$g_multiplayer_poll_to_show", 0), #change map
      (eq, "$g_multiplayer_poll_to_show", 3), #change map with factions
      (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
      (start_multiplayer_mission, reg0, "$g_multiplayer_poll_value_to_show", 1),
      (call_script, "script_game_set_multiplayer_mission_end"),
    (try_end),
    ])
    
multiplayer_server_check_end_map = ( 
  1, 0, 0, [],
  [
    (multiplayer_is_server),
    #checking for restarting the map
    (assign, ":end_map", 0),
    (try_begin),
      (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
      (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
      (eq, "$g_multiplayer_game_type", multiplayer_game_type_siege),
    
      (try_begin),
        (eq, "$g_round_ended", 1),

        (store_mission_timer_a, ":seconds_past_till_round_ended"),
        (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
        (store_sub, ":multiplayer_respawn_period_minus_one", "$g_multiplayer_respawn_period", 1),
        (ge, ":seconds_past_till_round_ended", ":multiplayer_respawn_period_minus_one"),
  
        (store_mission_timer_a, ":mission_timer"),    
        (try_begin),
          (this_or_next|eq, "$g_multiplayer_game_type", multiplayer_game_type_battle),
          (eq, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
          (assign, ":reduce_amount", 90),
        (else_try),
          (assign, ":reduce_amount", 120),
        (try_end),
    
        (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
        (store_sub, ":game_max_seconds_min_n_seconds", ":game_max_seconds", ":reduce_amount"), #when round ends if there are 60 seconds to map change time then change map without completing exact map time.
        (gt, ":mission_timer", ":game_max_seconds_min_n_seconds"),
        (assign, ":end_map", 1),
      (try_end),
      
      (eq, ":end_map", 1),
    (else_try),
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_battle), #battle mod has different end map condition by time
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_destroy), #fight and destroy mod has different end map condition by time
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_siege), #siege mod has different end map condition by time
      (neq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters), #in headquarters mod game cannot limited by time, only can be limited by score.
      (store_mission_timer_a, ":mission_timer"),
      (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
      (gt, ":mission_timer", ":game_max_seconds"),
      (assign, ":end_map", 1),
    (else_try),
      #assuming only 2 teams in scene
      (team_get_score, ":team_1_score", 0),
      (team_get_score, ":team_2_score", 1),
      (try_begin),
        (neq, "$g_multiplayer_game_type", multiplayer_game_type_headquarters), #for not-headquarters mods
        (try_begin),
          (this_or_next|ge, ":team_1_score", "$g_multiplayer_game_max_points"),
          (ge, ":team_2_score", "$g_multiplayer_game_max_points"),
          (assign, ":end_map", 1),
        (try_end),
      (else_try),
        (assign, ":at_least_one_player_is_at_game", 0),
        (get_max_players, ":num_players"),
        (try_for_range, ":player_no", 0, ":num_players"),
          (player_is_active, ":player_no"),
          (player_get_agent_id, ":agent_id", ":player_no"),
          (ge, ":agent_id", 0),
          (neg|agent_is_non_player, ":agent_id"),
          (assign, ":at_least_one_player_is_at_game", 1),
          (assign, ":num_players", 0),
        (try_end),
    
        (eq, ":at_least_one_player_is_at_game", 1),

        (this_or_next|le, ":team_1_score", 0), #in headquarters game ends only if one team has 0 score.
        (le, ":team_2_score", 0),
        (assign, ":end_map", 1),
      (try_end),
    (try_end),
    (try_begin),
      (eq, ":end_map", 1),
      (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
      (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
      (call_script, "script_game_set_multiplayer_mission_end"),           
    (try_end),
    ])

multiplayer_once_at_the_first_frame = (
  0, 0, ti_once, [], [
    (start_presentation, "prsnt_multiplayer_welcome_message"),
    ])

multiplayer_battle_window_opened = (
  ti_battle_window_opened, 0, 0, [], [
    (start_presentation, "prsnt_multiplayer_team_score_display"),
    ])


common_battle_mission_start = (
  ti_before_mission_start, 0, 0, [],
  [
    (team_set_relation, 0, 2, 1),
    (team_set_relation, 1, 3, 1),
    (play_sound, "snd_battle_begin"),
    (call_script, "script_change_banners_and_chest"),
    ])

common_battle_tab_press = (
  ti_tab_pressed, 0, 0, [],
  [
    (try_begin),
      (eq, "$g_battle_won", 1),
      (call_script, "script_count_mission_casualties_from_agents"),
      (finish_mission,0),
    #PBOD - Battle Continuation
    (else_try),
      (party_slot_eq, "p_main_party", slot_party_pref_bc_continue, 1), #PBOD Battle Continuation On
      (this_or_next|main_hero_fallen),   #CABA EDIT/FIX FOR DEATH CAM
      (eq, "$pin_player_fallen", 1),
      (str_store_string, s5, "str_retreat"),
      (call_script, "script_simulate_retreat", 5, 20, 0),
      (call_script, "script_count_mission_casualties_from_agents"),
      (set_mission_result, -1),
      (play_sound,"snd_retreat"),  
      (finish_mission,0),
    #PBOD - Battle Continuation END
    (else_try),
      (call_script, "script_cf_check_enemies_nearby"),
      (question_box,"str_do_you_want_to_retreat"),
    (else_try),
    
      (call_script, "script_tutorial_message_set_format", 17, 17, 400, 650, 0, 1),
      (tutorial_message, "str_can_not_retreat", 0, 5),
      #(display_message,"str_can_not_retreat"),
    (try_end),
    ])

common_battle_init_banner = (
  ti_on_agent_spawn, 0, 0, [],
  [
    (store_trigger_param_1, ":agent_no"),
    (agent_get_troop_id, ":troop_no", ":agent_no"),
    (call_script, "script_troop_agent_set_banner", "tableau_game_troop_label_banner", ":agent_no", ":troop_no"),
  ])


common_arena_fight_tab_press = (
  ti_tab_pressed, 0, 0, [],
  [
    (question_box,"str_give_up_fight"),
    ])

common_custom_battle_tab_press = (
  ti_tab_pressed, 0, 0, [],
  [
    (try_begin),
      (neq, "$g_battle_result", 0),
      (call_script, "script_custom_battle_end"),
      (finish_mission),
    (else_try),
      (question_box,"str_give_up_fight"),
    (try_end),
    ])

custom_battle_check_victory_condition = (
  1, 60, ti_once,
  [
    (store_mission_timer_a,reg(1)),
    (ge,reg(1),10),
    (all_enemies_defeated, 2),
    ##diplomacy begin
    (neg|main_hero_fallen, 0),
    ##diplomacy end
    (set_mission_result,1),
    ## CC
    #(display_message,"str_msg_battle_won"),
    (call_script, "script_tutorial_message_set_format", 17, 17, 400, 650, 0, 1),
    (tutorial_message, "str_msg_battle_won", 0, 5),
    (play_sound,"snd_win_battle"),  
    ## CC
    (assign, "$g_battle_won",1),
    (assign, "$g_battle_result", 1),
    ],
  [
    (call_script, "script_custom_battle_end"),
    (finish_mission, 1),
    ])

custom_battle_check_defeat_condition = (
  1, 4, ti_once,
  [
    (main_hero_fallen),
    (assign,"$g_battle_result",-1),
    ],
  [
    (call_script, "script_custom_battle_end"),
    (finish_mission),
    ])

common_battle_victory_display = (
  10, 0, 0, [],
  [
    (eq,"$g_battle_won",1),
    ## CC
    #(display_message,"str_msg_battle_won"),
    (call_script, "script_tutorial_message_set_format", 17, 17, 400, 650, 0, 1),
    (tutorial_message, "str_msg_battle_won", 0, 5),
        (play_sound,"snd_win_battle"),  

    ## CC
    ])

common_siege_question_answered = (
  ti_question_answered, 0, 0, [],
   [
     (store_trigger_param_1,":answer"),
     (eq,":answer",0),
     (assign, "$pin_player_fallen", 0),
     (get_player_agent_no, ":player_agent"),
     (agent_get_team, ":agent_team", ":player_agent"),
     (try_begin),
       (neq, "$attacker_team", ":agent_team"),
       (neq, "$attacker_team_2", ":agent_team"),
       (str_store_string, s5, "str_siege_continues"),
       (call_script, "script_simulate_retreat", 8, 15, 0),
     (else_try),
       (str_store_string, s5, "str_retreat"),
       (call_script, "script_simulate_retreat", 5, 20, 0),
     (try_end),
     (call_script, "script_count_mission_casualties_from_agents"),
      (play_sound,"snd_retreat"),  
     (finish_mission,0),
     ])

common_custom_battle_question_answered = (
   ti_question_answered, 0, 0, [],
   [
     (store_trigger_param_1,":answer"),
     (eq,":answer",0),
     (assign, "$g_battle_result", -1),
     (call_script, "script_custom_battle_end"),
      (play_sound,"snd_retreat"),  
     (finish_mission),
     ])

common_custom_siege_init = (
  0, 0, ti_once, [],
  [
    (assign, "$g_battle_result", 0),
    (party_set_slot,"p_main_party", slot_party_is_in_siege, 1),
    (call_script, "script_music_set_situation_with_culture", mtf_sit_siege),
    ])

common_siege_init = (
  0, 0, ti_once, [],
  [
    (assign,"$g_battle_won",0),
    (party_set_slot,"p_main_party", slot_party_is_in_siege, 1),
    (assign,"$defender_reinforcement_stage",0),
    (assign,"$attacker_reinforcement_stage",0),
    (call_script, "script_music_set_situation_with_culture", mtf_sit_siege),
    ])

common_music_situation_update = (
  30, 0, 0, [],
  [
    (call_script, "script_combat_music_set_situation_with_culture"),
    ])

common_siege_ai_trigger_init = (
  0, 0, ti_once,
  [
    (assign, "$defender_team", 0),
    (assign, "$attacker_team", 1),
    (assign, "$defender_team_2", 2),
    (assign, "$attacker_team_2", 3),
    ], [])

common_siege_ai_trigger_init_2 = (
  0, 0, ti_once,
  [
    (set_show_messages, 0),
    (entry_point_get_position, pos10, 10),
    (try_for_range, ":cur_group", 0, grc_everyone),
      (neq, ":cur_group", grc_archers),
      (team_give_order, "$defender_team", ":cur_group", mordr_hold),
      (team_give_order, "$defender_team", ":cur_group", mordr_stand_closer),
      (team_give_order, "$defender_team", ":cur_group", mordr_stand_closer),
      (team_give_order, "$defender_team_2", ":cur_group", mordr_hold),
      (team_give_order, "$defender_team_2", ":cur_group", mordr_stand_closer),
      (team_give_order, "$defender_team_2", ":cur_group", mordr_stand_closer),
    (try_end),
    (team_give_order, "$defender_team", grc_archers, mordr_stand_ground),
    (team_set_order_position, "$defender_team", grc_everyone, pos10),
    (team_give_order, "$defender_team_2", grc_archers, mordr_stand_ground),
    (team_set_order_position, "$defender_team_2", grc_everyone, pos10),
    (set_show_messages, 1),
    ], [])

common_siege_ai_trigger_init_after_2_secs = (
  0, 2, ti_once, [],
  [
    (try_for_agents, ":agent_no"),
      (agent_set_slot, ":agent_no", slot_agent_is_not_reinforcement, 1),
    (try_end),
    ])


common_siege_defender_reinforcement_check = (
  3, 0, 0, [],
  ## CC
  [
    (store_mission_timer_a,":mission_time"),
    (ge,":mission_time",10),
    
    (assign, ":continue", 0),
    (try_begin),
      (lt, "$defender_reinforcement_stage", 7),
      (assign, ":continue", 1),
    (else_try),
      (get_player_agent_no, ":player_agent"),
      (try_begin),
        (agent_is_defender, ":player_agent"),
        (call_script, "script_get_num_defender_left", 1),
        (assign, ":num_defender_remaining", reg0),
      (else_try),
        (call_script, "script_get_num_defender_left", 0),
        (assign, ":num_defender_remaining", reg0),
      (try_end),
      (store_current_scene, ":cur_scene"),
      (try_begin),
        (is_between, ":cur_scene", "scn_town_1_walls", "scn_town_1_alley"),
        (assign, ":defender_limit", 50),
      (else_try),
        (assign, ":defender_limit", 20),
      (try_end),
      (gt, ":num_defender_remaining", ":defender_limit"),
      (assign, ":continue", 1),
    (try_end),

    (try_begin),
      (eq, ":continue", 1),
      (store_mul, ":attacker_reinf_stage_mul_3", "$attacker_reinforcement_stage", 3),
      (this_or_next|lt, "$defender_reinforcement_stage", 14),
      (le, "$defender_reinforcement_stage", ":attacker_reinf_stage_mul_3"),
      (store_normalized_team_count, ":num_defenders_normalized", 0),
      (lt, ":num_defenders_normalized", 10),
      (add_reinforcements_to_entry,4, 7),
      (val_add,"$defender_reinforcement_stage",1),
    (try_end),
    ## CC
    (try_begin),
      (ge, "$defender_reinforcement_stage", 3), ## CC
      (set_show_messages, 0),
      (team_give_order, "$defender_team", grc_infantry, mordr_charge), #AI desperate charge:infantry!!!
      (team_give_order, "$defender_team_2", grc_infantry, mordr_charge), #AI desperate charge:infantry!!!
      (set_show_messages, 1),
      (ge, "$defender_reinforcement_stage", 6), ## CC
      (set_show_messages, 0),
      #(team_give_order, "$defender_team", grc_everyone, mordr_charge), #AI desperate charge: everyone!!!
      #(team_give_order, "$defender_team_2", grc_everyone, mordr_charge), #AI desperate charge: everyone!!!
      (set_show_messages, 1),
    (try_end),
   ])

common_siege_defender_reinforcement_archer_reposition = (
  2, 0, 0,
  [
    (gt, "$defender_reinforcement_stage", 0),
    ],
  [
    (call_script, "script_siege_move_archers_to_archer_positions"),
    ])

## CC
common_siege_attacker_reinforcement_check = (
  3, 0, 0,
  [
    (assign, ":continue", 1),
    (try_begin),
      (ge,"$attacker_reinforcement_stage",11),
      (store_mul, ":defender_reinf_stage_mul_3", "$defender_reinforcement_stage", 3),
      (gt, "$attacker_reinforcement_stage", ":defender_reinf_stage_mul_3"),
      (assign, ":continue", 0),
    (try_end),
    (eq, ":continue", 1),
    (store_mission_timer_a,":mission_time"),
    (ge,":mission_time",10),
    (store_normalized_team_count,":num_attackers",1),
    (lt,":num_attackers",6)
    ],
  [
    (add_reinforcements_to_entry, 1, 8),
    (val_add,"$attacker_reinforcement_stage", 1),
    ])
## CC

common_siege_attacker_do_not_stall = (
  5, 0, 0, [],
  [ #Make sure attackers do not stall on the ladders...
    (try_for_agents, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_get_team, ":agent_team", ":agent_no"),
      (this_or_next|eq, ":agent_team", "$attacker_team"),
      (eq, ":agent_team", "$attacker_team_2"),
      (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
    (try_end),
    ])

common_battle_check_friendly_kills = (
  2, 0, 0, [],
  [
    (call_script, "script_check_friendly_kills"),
    ])

common_battle_check_victory_condition = (
  1, 60, ti_once,
  [
    (store_mission_timer_a,reg(1)),
    (ge,reg(1),10),
    (all_enemies_defeated, 5),
    ##PBOD - Battle Continuation
    (this_or_next|party_slot_eq, "p_main_party", slot_party_pref_bc_continue, 1), #PBOD Battle Continuation Active
    ##PBOD - Battle Continuation
    (neg|main_hero_fallen, 0),
    (set_mission_result,1),
    ## CC
    #(display_message,"str_msg_battle_won"),
    (call_script, "script_tutorial_message_set_format", 17, 17, 400, 650, 0, 1),
    (tutorial_message, "str_msg_battle_won", 0, 5),
    (play_sound,"snd_win_battle"),  
    ## CC
    (assign,"$g_battle_won",1),
    (assign, "$g_battle_result", 1),
    (call_script, "script_play_victorious_sound"),
    ],
  [
    (call_script, "script_count_mission_casualties_from_agents"),
    (finish_mission, 1),
    ])

common_battle_victory_display = (
  10, 0, 0, [],
  [
    (eq,"$g_battle_won",1),
    ## CC
    #(display_message,"str_msg_battle_won"),
    (call_script, "script_tutorial_message_set_format", 17, 17, 400, 650, 0, 1),
    (tutorial_message, "str_msg_battle_won", 0, 5),
    (play_sound,"snd_win_battle"),  
    ## CC
    ])

common_siege_refill_ammo = (
  120, 0, 0, [],
  [#refill ammo of defenders every two minutes.
    #(get_player_agent_no, ":player_agent"),
    (try_for_agents,":cur_agent"),
      #(neq, ":cur_agent", ":player_agent"),
      (agent_is_alive, ":cur_agent"),
      (agent_is_human, ":cur_agent"),
##      (agent_is_defender, ":cur_agent"),
      (agent_get_team, ":agent_team", ":cur_agent"),
      (this_or_next|eq, ":agent_team", "$defender_team"),
      (eq, ":agent_team", "$defender_team_2"),
      (agent_refill_ammo, ":cur_agent"),
      ## CC reset it to 0
      (agent_set_slot, ":cur_agent", slot_agent_refill_ammo_times, 0),
      ## CC
    (try_end),
    ])

common_siege_check_defeat_condition = (
  1, 4, 0, #was ti_once
  [
    (main_hero_fallen)
    ],
  [
    (assign, "$pin_player_fallen", 1),
    ##PBOD - Battle Continuation
    (try_begin),
      (party_slot_eq, "p_main_party", slot_party_pref_bc_continue, 1), #PBOD Battle Continuation Active
      (assign, ":num_allies", 0),
      (try_for_agents, ":agent"),
         (agent_is_ally, ":agent"),
         (agent_is_alive, ":agent"),
         (val_add, ":num_allies", 1),
      (try_end),
      (gt, ":num_allies", 0),
      (try_begin),
          (neq, "$cam_free", 1),
          (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
          (assign, "$cam_free", 1),
          (assign, "$cam_mode", 2),
          (call_script, "script_cust_cam_cycle_forwards"), #So, on Follow, it doesn't begin with the player's dead body
          (mission_cam_set_mode, 1),
          # (party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active
          # (set_show_messages, 0),
          # (team_give_order, "$fplayer_team_no", grc_everyone, mordr_charge),
          # (set_show_messages, 1),
      (try_end),
    (else_try),
    (get_player_agent_no, ":player_agent"),
    (agent_get_team, ":agent_team", ":player_agent"),
    (try_begin),
      (neq, "$attacker_team", ":agent_team"),
      (neq, "$attacker_team_2", ":agent_team"),
      (str_store_string, s5, "str_siege_continues"),
      (call_script, "script_simulate_retreat", 8, 15, 0),
    (else_try),
      (str_store_string, s5, "str_retreat"),
      (call_script, "script_simulate_retreat", 5, 20, 0),
    (try_end),
    (assign, "$g_battle_result", -1),
    (set_mission_result,-1),
    (call_script, "script_count_mission_casualties_from_agents"),
      (play_sound,"snd_retreat"),  
    (finish_mission,0),
    (try_end)
    ])

## CC
#common_battle_order_panel =(
  #0, 0, 0, [],
  #[
    #(game_key_clicked, gk_view_orders),
    #(neg|main_hero_fallen), ##PBOD - Battle Continuation
    #(neg|is_presentation_active, "prsnt_battle"),
    #(start_presentation, "prsnt_battle"),
  #])
common_battle_order_panel =(
 0, 0, ti_once, [],
  [
    (neg|is_presentation_active, "prsnt_mini_map"),
    (neg|is_presentation_active, "prsnt_caba_order_display"),
    (start_presentation, "prsnt_mini_map"),
  ])

#common_battle_order_panel_tick = (
  #0.1, 0, 0, [],
  #[
    #(is_presentation_active, "prsnt_battle"),
    #(call_script, "script_update_order_panel_statistics_and_map"),
    #])

common_battle_order_panel_tick = (
  0, 0, 0, [],
  [
    (try_begin),
    (game_key_clicked, gk_view_orders),
    (neg|main_hero_fallen), ##PBOD - Battle Continuation
    (neg|is_presentation_active, "prsnt_battle"),
    (start_presentation, "prsnt_battle"),
    (try_end),
    (try_begin),
      (neg|is_presentation_active, "prsnt_battle"),
      (neg|is_presentation_active, "prsnt_mini_map"),
      (neg|is_presentation_active, "prsnt_caba_order_display"),
      (start_presentation, "prsnt_mini_map"),
    (try_end),
    (try_begin),
      (is_presentation_active, "prsnt_battle"),
      (call_script, "script_update_order_panel_statistics_and_map"),
    (else_try),
      (is_presentation_active, "prsnt_mini_map"),
      (call_script, "script_update_agent_hp_bar"),
      (eq, "$g_show_minimap", 1),
      (call_script, "script_update_order_panel_map"),
    (try_end),
    ])

common_battle_inventory = (
  ti_inventory_key_pressed, 0, 0, [],
  [
    (display_message,"str_use_baggage_for_inventory"),
    ])

common_inventory_not_available = (
  ti_inventory_key_pressed, 0, 0,
  [
    (display_message, "str_cant_use_inventory_now"),
    ], [])

common_siege_init_ai_and_belfry = (
  0, 0, ti_once,
  [
    (call_script, "script_siege_init_ai_and_belfry"),
    ], [])

common_siege_move_belfry = (
  0, 0, ti_once,
  [
    (call_script, "script_cf_siege_move_belfry"),
    ], [])

common_siege_rotate_belfry = (
  0, 2, ti_once,
  [
    (call_script, "script_cf_siege_rotate_belfry_platform"),
    ],
  [
    (assign, "$belfry_positioned", 3),
    ])

common_siege_assign_men_to_belfry = (
  0, 0, ti_once,
  [
    (call_script, "script_cf_siege_assign_men_to_belfry"),
    ], [])

arena_triggers = [
  (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest"),
                                       (assign, "$g_arena_training_num_agents_spawned", 0)]),
  (ti_before_mission_start, 0, 0, [], [
    (party_clear, "p_temp_party"),
    (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
    (try_for_range, ":stack_no", 0, ":num_stacks"),
      (party_stack_get_troop_id, ":stack_troop","p_main_party",":stack_no"),
	  (troop_is_hero, ":stack_troop"),
	  (neq, ":stack_troop", "$g_player_troop"),
	  (neq, ":stack_troop", "trp_kidnapped_girl"),
	  (neg|troop_is_wounded, ":stack_troop"),
      (party_add_members, "p_temp_party", ":stack_troop", 1),
    (try_end),	
  ]),
  
  (ti_before_mission_start, 0, 0, [], [(call_script, "script_multiplayer_remove_destroy_mod_targets"),]),
                                       
  (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_arena")], []),

    #(0, 0, 0, [(key_is_down, key_left_control),(key_clicked, key_f4)],[(assign, "$item_add", 0)]),
    #(0, 0, 0, [(key_is_down, key_left_control),(key_is_down, key_left_alt),(key_clicked, key_f4),],[(assign, "$item_add", 0)]),

  (ti_tab_pressed, 0, 0, [],
   [(try_begin),
      (eq, "$g_mt_mode", abm_visit),
      (set_trigger_result, 1),
    (else_try),
      (question_box,"str_give_up_fight"),
    (try_end),
    ]),
  (ti_question_answered, 0, 0, [],
   [(store_trigger_param_1,":answer"),
    (eq,":answer",0),
    (try_begin),
      (eq, "$g_mt_mode", abm_tournament),
      (call_script, "script_end_tournament_fight", 0),
    (else_try),
      (eq, "$g_mt_mode", abm_training),
      (get_player_agent_no, ":player_agent"),
      (agent_get_kill_count, "$g_arena_training_kills", ":player_agent", 1),#use this for conversation
    (try_end),
    (finish_mission,0),
    ]),


    (0, 0, 1, [], [
     (try_for_agents, ":agent_no"),
       (agent_is_alive, ":agent_no"),
       (try_begin),
         (neg|agent_is_human, ":agent_no"),
         (agent_get_rider, ":rider_agent", ":agent_no"),
         (neg|gt, ":rider_agent", -1),
         (agent_fade_out, ":agent_no"),
      (else_try),
        (agent_get_slot, ":spawned_timer", ":agent_no", slot_agent_spawned),
        (gt, ":spawned_timer", 0),
        (agent_fade_out, ":agent_no"),
      (try_end),
    (try_end),
    ]),
  
  (1, 0, ti_once, 
  [
     (eq, "$g_mt_mode", abm_tournament),
     (assign, ":passed", 0),
     (get_player_agent_no, ":player_agent"),
     (agent_get_kill_count, ":kill_count", ":player_agent", 1),
     (try_begin),
       (ge, ":kill_count", 2),
       (assign, ":passed", 1),
     (else_try),
       (eq, ":kill_count", 1),
       (le, "$g_tournament_cur_tier", 1),
       (assign, ":passed", 1),
     (try_end),
     (eq, ":passed", 1),
     (call_script, "script_tutorial_message_set_format", 17, 17, 400, 650, 0, 1),
     (tutorial_message, "@You advance to next round, you can press the Tab key and end this round.", 0, 3),
  ], []),
  
  (1, 0, ti_once, [], [
      (eq, "$g_mt_mode", abm_visit),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
      (store_current_scene, reg(1)),
      (scene_set_slot, reg(1), slot_scene_visited, 1),
      (mission_enable_talk),
      (get_player_agent_no, ":player_agent"),
      (assign, ":team_set", 0),
      (try_for_agents, ":agent_no"),
        (neq, ":agent_no", ":player_agent"),
        (agent_get_troop_id, ":troop_id", ":agent_no"),
        (is_between, ":troop_id", regular_troops_begin, regular_troops_end),
        (eq, ":team_set", 0),
        (agent_set_team, ":agent_no", 1),
        (assign, ":team_set", 1),
      (try_end),
    ]),
  
  (0, 0, ti_once, [],
   [
     (eq, "$g_mt_mode", abm_tournament),
     (play_sound, "snd_arena_ambiance", sf_looping),
     (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
     ]),

  (1, 4, ti_once, [(eq, "$g_mt_mode", abm_tournament),
                   (this_or_next|main_hero_fallen),
                   (num_active_teams_le, 1)],
   [
       (try_begin),
         (neg|main_hero_fallen),
         (call_script, "script_end_tournament_fight", 1),
         (call_script, "script_play_victorious_sound"),
         (finish_mission),
       (else_try),
         (call_script, "script_end_tournament_fight", 0),
         (finish_mission),
       (try_end),
       ]),

  (1, 0, ti_once, [], [
      (eq, "$g_mt_mode", abm_visit),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
      (store_current_scene, reg(1)),
      (scene_set_slot, reg(1), slot_scene_visited, 1),
      (mission_enable_talk),
      (get_player_agent_no, ":player_agent"),
      (assign, ":team_set", 0),
      (try_for_agents, ":agent_no"),
        (neq, ":agent_no", ":player_agent"),
        (agent_get_troop_id, ":troop_id", ":agent_no"),
        (is_between, ":troop_id", regular_troops_begin, regular_troops_end),
        (eq, ":team_set", 0),
        (agent_set_team, ":agent_no", 1),
        (assign, ":team_set", 1),
      (try_end),
    ]),
  
    (0, 0, 10, [], [
    (try_for_agents, ":agent_no"),
      (agent_is_alive, ":agent_no"),
      (agent_is_human, ":agent_no"),
      (agent_get_slot, ":spawned_timer", ":agent_no", slot_agent_spawned),
      (gt, ":spawned_timer", 0),
      (agent_fade_out, ":agent_no"),
    (try_end),
    ]),

  (ti_battle_window_opened, 0, 0, [], [(eq, "$g_mt_mode", abm_training),(start_presentation, "prsnt_arena_training")]),
  
  (0, 0, ti_once, [], [(eq, "$g_mt_mode", abm_training),
                       (store_random_in_range, ":random", 30, 81),
                       (assign, "$g_arena_training_max_opponents", ":random"),
                       (assign, "$g_arena_training_num_agents_spawned", 0),
                       (assign, "$g_arena_training_kills", 0),
                       (assign, "$g_arena_training_won", 0),
                       (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
                       ]),

  (1, 4, ti_once, [(eq, "$g_mt_mode", abm_training),
                   (store_mission_timer_a, ":cur_time"),
                   (gt, ":cur_time", 3),
                   (assign, ":win_cond", 0),
                   (try_begin),
                     (ge, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents"),#spawn at most 40 agents
                     (num_active_teams_le, 1),
                     (assign, ":win_cond", 1),
                   (try_end),
                   (this_or_next|eq, ":win_cond", 1),
                   (main_hero_fallen)],
   [
       (get_player_agent_no, ":player_agent"),
       (agent_get_kill_count, "$g_arena_training_kills", ":player_agent", 1),#use this for conversation
       (assign, "$g_arena_training_won", 0),
       (try_begin),
         (neg|main_hero_fallen),
         (assign, "$g_arena_training_won", 1),#use this for conversation
       (try_end),
       (call_script, "script_reset_arena_fighter"),
       (party_clear, "p_temp_party"),
	   
      # (assign, "$g_mt_mode", abm_visit),
      # (set_jump_mission, "mt_arena_melee_fight_2"),
      # (party_get_slot, ":arena_scene", "$current_town", slot_town_arena),
      # (modify_visitors_at_site, ":arena_scene"),
      # (reset_visitors),
      # (set_visitor, 35, "trp_veteran_fighter"),
      # (set_visitor, 36, "trp_hired_blade"),
      # (set_jump_entry, 50),
      # (jump_to_scene, ":arena_scene"),
       ]),


  (0.2, 0, 0,
   [
       (eq, "$g_mt_mode", abm_training),
       (assign, ":num_active_fighters", 0),
       (try_for_agents, ":agent_no"),
         (agent_is_human, ":agent_no"),
         (agent_is_alive, ":agent_no"),
         (agent_get_team, ":team_no", ":agent_no"),
         (is_between, ":team_no", 0 ,7),
         (val_add, ":num_active_fighters", 1),
       (try_end),
       (lt, ":num_active_fighters", 10),
       (neg|main_hero_fallen),
       (store_mission_timer_a, ":cur_time"),
       (this_or_next|ge, ":cur_time", "$g_arena_training_next_spawn_time"),
       (this_or_next|lt, "$g_arena_training_num_agents_spawned", 9),
       (num_active_teams_le, 1),
       (lt, "$g_arena_training_num_agents_spawned", "$g_arena_training_max_opponents"),
      ],
    [
	   (party_get_num_companion_stacks, ":num_stacks","p_temp_party"),
	   (try_begin),
	     (ge, ":num_stacks", 1),
	     (party_stack_get_troop_id,":added_troop","p_temp_party",0),
	     (party_remove_members, "p_temp_party", ":added_troop", 1),
	   (else_try),	
         (assign, ":added_troop", "$g_arena_training_num_agents_spawned"),
         (store_div,  ":added_troop", "$g_arena_training_num_agents_spawned", 6),
         (assign, ":added_troop_sequence", "$g_arena_training_num_agents_spawned"),
         (val_mod, ":added_troop_sequence", 6),
         (val_add, ":added_troop", ":added_troop_sequence"),
         (val_min, ":added_troop", 9),
         (val_add, ":added_troop", "trp_arena_training_fighter_1"),
	   (try_end),
       (assign, ":end_cond", 10000),
       (get_player_agent_no, ":player_agent"),
       (agent_get_position, pos5, ":player_agent"),
       (try_for_range, ":unused", 0, ":end_cond"),
         (store_random_in_range, ":random_entry_point", 32, 40),
         (try_begin),
           (eq, "$item_add", 1),
           (store_random_in_range, ":random_entry_point", 0, 69),
         (try_end),
#         (store_random_in_range, ":random_entry_point", 32, 40),
         (neq, ":random_entry_point", "$g_player_entry_point"), # make sure we don't overwrite player
         (entry_point_get_position, pos1, ":random_entry_point"),
         (get_distance_between_positions, ":dist", pos5, pos1),
         (gt, ":dist", 1200), #must be at least 12 meters away from the player
         (assign, ":end_cond", 0),
       (try_end),

       (add_visitors_to_current_scene, ":random_entry_point", ":added_troop", 1),
       (store_add, ":new_spawned_count", "$g_arena_training_num_agents_spawned", 1),
       (store_mission_timer_a, ":cur_time"),
       (store_add, "$g_arena_training_next_spawn_time", ":cur_time", 14),
       (store_div, ":time_reduction", ":new_spawned_count", 3),
       (val_sub, "$g_arena_training_next_spawn_time", ":time_reduction"),
       ]),

  (ti_on_agent_killed_or_wounded, 0, 0, [(eq, "$g_mt_mode", abm_training),],
  [
	(store_trigger_param_1, ":dead_agent"),
	(agent_is_non_player, ":dead_agent"),
	(agent_get_troop_id, ":dead_troop", ":dead_agent"),
	(troop_is_hero, ":dead_troop"),
	(agent_get_kill_count, ":kill_count", ":dead_agent", 1),
	(ge, ":kill_count", arena_tier1_opponents_to_beat),
	(try_begin),
		(ge, ":kill_count", arena_tier5_opponents_to_beat),
		(val_mul, ":kill_count", arena_tier5_prize),
	(else_try),
		(ge, ":kill_count", arena_tier4_opponents_to_beat),
		(val_mul, ":kill_count", arena_tier4_prize),	
	(else_try),
		(ge, ":kill_count", arena_tier3_opponents_to_beat),
		(val_mul, ":kill_count", arena_tier3_prize),	
	(else_try),
		(ge, ":kill_count", arena_tier2_opponents_to_beat),
		(val_mul, ":kill_count", arena_tier2_prize),	
	(else_try),
		(ge, ":kill_count", arena_tier1_opponents_to_beat),
		(val_mul, ":kill_count", arena_tier1_prize),			
	(try_end),
	(troop_add_gold, ":dead_troop", ":kill_count"),
  ]
  ),

  (0, 0, 0,
   [
       (eq, "$g_mt_mode", abm_training)
       ],
    [
       (assign, ":max_teams", 6),
       (val_max, ":max_teams", 1),
       (get_player_agent_no, ":player_agent"),
       (try_for_agents, ":agent_no"),
         (agent_is_human, ":agent_no"),
         (agent_is_alive, ":agent_no"),
         (agent_slot_eq, ":agent_no", slot_agent_arena_team_set, 0),
         (agent_get_team, ":team_no", ":agent_no"),
         (is_between, ":team_no", 0 ,7),
         (try_begin),
           (eq, ":agent_no", ":player_agent"),
           (agent_set_team, ":agent_no", 6), #player is always team 6.
         (else_try),
           (store_random_in_range, ":selected_team", 0, ":max_teams"),
          # find strongest team
           (try_for_range, ":t", 0, 6),
             (troop_set_slot, "trp_temp_array_a", ":t", 0),
           (try_end),
           (try_for_agents, ":other_agent_no"),
             (agent_is_human, ":other_agent_no"),
             (agent_is_alive, ":other_agent_no"),
             (neq, ":agent_no", ":player_agent"),
             (agent_slot_eq, ":other_agent_no", slot_agent_arena_team_set, 1),
             (agent_get_team, ":other_agent_team", ":other_agent_no"),
             (troop_get_slot, ":count", "trp_temp_array_a", ":other_agent_team"),
             (val_add, ":count", 1),
             (troop_set_slot, "trp_temp_array_a", ":other_agent_team", ":count"),
           (try_end),
           (assign, ":strongest_team", 0),
           (troop_get_slot, ":strongest_team_count", "trp_temp_array_a", 0),
           (try_for_range, ":t", 1, 6),
             (troop_slot_ge, "trp_temp_array_a", ":t", ":strongest_team_count"),
             (troop_get_slot, ":strongest_team_count", "trp_temp_array_a", ":t"),
             (assign, ":strongest_team", ":t"),
           (try_end),
           (store_random_in_range, ":rand", 5, 100),
           (try_begin),
             (lt, ":rand", "$g_arena_training_num_agents_spawned"),
             (assign, ":selected_team", ":strongest_team"),
           (try_end),
           (agent_set_team, ":agent_no", ":selected_team"),
         (try_end),
         (agent_set_slot, ":agent_no", slot_agent_arena_team_set, 1),
         (try_begin),
           (neq, ":agent_no", ":player_agent"),
           (val_add, "$g_arena_training_num_agents_spawned", 1),
         (try_end),
       (try_end),
       ]),
  ]
  
tournament_triggers = [
  (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest"),
                                       (assign, "$g_arena_training_num_agents_spawned", 0)]),
  (ti_before_mission_start, 0, 0, [], [(call_script, "script_multiplayer_remove_destroy_mod_targets"),]),
                                       
  (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_arena")], []),

    (0, 0, 1, [], [
     (try_for_agents, ":agent_no"),
       (agent_is_alive, ":agent_no"),
       (try_begin),
         (neg|agent_is_human, ":agent_no"),
         (agent_get_rider, ":rider_agent", ":agent_no"),
         (neg|gt, ":rider_agent", -1),
         (agent_fade_out, ":agent_no"),
      (else_try),
        (agent_get_slot, ":spawned_timer", ":agent_no", slot_agent_spawned),
        (gt, ":spawned_timer", 0),
        (agent_fade_out, ":agent_no"),
      (try_end),
    (try_end),
    ]),
  
  (1, 0, ti_once, 
  [
     (eq, "$g_mt_mode", abm_tournament),
     (assign, ":passed", 0),
     (get_player_agent_no, ":player_agent"),
     (agent_get_kill_count, ":kill_count", ":player_agent", 1),
     (try_begin),
       (ge, ":kill_count", 2),
       (assign, ":passed", 1),
     (else_try),
       (eq, ":kill_count", 1),
       (le, "$g_tournament_cur_tier", 1),
       (assign, ":passed", 1),
     (try_end),
     (eq, ":passed", 1),
     (call_script, "script_tutorial_message_set_format", 17, 17, 400, 650, 0, 1),
     (tutorial_message, "@You advance to next round, you can press the Tab key and end this round.", 0, 3),
  ], []),
  
  (ti_tab_pressed, 0, 0, [],
   [(try_begin),
      (eq, "$g_mt_mode", abm_visit),
      (set_trigger_result, 1),
    (else_try),
      (question_box,"str_give_up_fight"),
    (try_end),
    ]),
  (ti_question_answered, 0, 0, [],
   [(store_trigger_param_1,":answer"),
    (eq,":answer",0),
    (try_begin),
      (eq, "$g_mt_mode", abm_tournament),
      (call_script, "script_end_tournament_fight", 0),
    (else_try),
      (eq, "$g_mt_mode", abm_training),
      (get_player_agent_no, ":player_agent"),
      (agent_get_kill_count, "$g_arena_training_kills", ":player_agent", 1),#use this for conversation
    (try_end),
    (finish_mission,0),
    ]),

  (1, 0, ti_once, [], [
      (eq, "$g_mt_mode", abm_visit),
      (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
      (store_current_scene, reg(1)),
      (scene_set_slot, reg(1), slot_scene_visited, 1),
      (mission_enable_talk),
      (get_player_agent_no, ":player_agent"),
      (assign, ":team_set", 0),
      (try_for_agents, ":agent_no"),
        (neq, ":agent_no", ":player_agent"),
        (agent_get_troop_id, ":troop_id", ":agent_no"),
        (is_between, ":troop_id", regular_troops_begin, regular_troops_end),
        (eq, ":team_set", 0),
        (agent_set_team, ":agent_no", 1),
        (assign, ":team_set", 1),
      (try_end),
    ]),
  
  (0, 0, ti_once, [],
   [
     (eq, "$g_mt_mode", abm_tournament),
     (play_sound, "snd_arena_ambiance", sf_looping),
     (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
     ]),

  (1, 4, ti_once, [(eq, "$g_mt_mode", abm_tournament),
                   (this_or_next|main_hero_fallen),
                   (num_active_teams_le, 1)],
   [
       (try_begin),
         (neg|main_hero_fallen),
         (call_script, "script_end_tournament_fight", 1),
         (call_script, "script_play_victorious_sound"),
         (finish_mission),
       (else_try),
         (call_script, "script_end_tournament_fight", 0),
         (finish_mission),
       (try_end),
       ]),

  ]

mission_templates = [
  (
    "town_default",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (8,mtef_scene_source,af_override_horse,0,1,[]),
     (9,mtef_scene_source,af_override_horse,0,1,[]),
     (10,mtef_scene_source,af_override_horse,0,1,[]),
     (11,mtef_scene_source,af_override_horse,0,1,[]),
     (12,mtef_scene_source,af_override_horse,0,1,[]),
     (13,mtef_scene_source,0,0,1,[]),
     (14,mtef_scene_source,0,0,1,[]),
     (15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),
     (17,mtef_visitor_source,af_override_horse,0,1,[]),
     (18,mtef_visitor_source,af_override_horse,0,1,[]),
     (19,mtef_visitor_source,af_override_horse,0,1,[]),
     (20,mtef_visitor_source,af_override_horse,0,1,[]),
     (21,mtef_visitor_source,af_override_horse,0,1,[]),
     (22,mtef_visitor_source,af_override_horse,0,1,[]),
     (23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),
     (25,mtef_visitor_source,af_override_horse,0,1,[]),
     (26,mtef_visitor_source,af_override_horse,0,1,[]),
     (27,mtef_visitor_source,af_override_horse,0,1,[]),
     (28,mtef_visitor_source,af_override_horse,0,1,[]),
     (29,mtef_visitor_source,af_override_horse,0,1,[]),
     (30,mtef_visitor_source,af_override_horse,0,1,[]),
     (31,mtef_visitor_source,af_override_horse,0,1,[]),
     (1, mtef_visitor_source, af_override_gloves|af_override_horse, 0, 1, []),
     (2, mtef_visitor_source, af_override_gloves|af_override_horse, 0, 1, []),
     (3, mtef_visitor_source, af_override_gloves|af_override_horse, 0, 1, []),
     (4, mtef_visitor_source, af_override_gloves|af_override_horse, 0, 1, []),
     (5, mtef_visitor_source, af_override_gloves|af_override_horse, 0, 1, []),
     (6, mtef_visitor_source, af_override_gloves|af_override_horse, 0, 1, []),
     (7, mtef_visitor_source, af_override_gloves|af_override_horse, 0, 1, []),
     (8, mtef_visitor_source, af_override_gloves|af_override_horse, 0, 1, []),
     (10, mtef_visitor_source, af_override_gloves|af_override_horse, 0, 1, []),
     
     ],     
     [
     
    (ti_on_agent_spawn, 1.000000, 0.000000, 
    [
        (eq, "$talk_context", tc_tavern_talk),
        (store_trigger_param_1, ":agent"),
        (agent_is_human, ":agent"),
        (agent_get_troop_id, ":troop", ":agent"),
        (try_begin),
            (is_between, ":troop", "trp_musican_male", "trp_musicans_end"),
            (try_begin),
                (agent_has_item_equipped, ":agent", "itm_dedal_lutnia"),
                (agent_set_stand_animation, ":agent", "anim_lute_sitting"),
                (agent_set_animation, ":agent", "anim_lute_sitting"),
            (else_try),
                (agent_has_item_equipped, ":agent", "itm_dedal_lira"),
                (agent_set_stand_animation, ":agent", "anim_lyre_sitting"),
                (agent_set_animation, ":agent", "anim_lyre_sitting"),
            (try_end),
            (store_random_in_range, ":var_2", 0, 300),
            (agent_set_animation_progress, ":agent", ":var_2"),
        (else_try),
            (is_between, ":troop", tavern_minstrels_begin, tavern_minstrels_end),
            (try_begin),
                (agent_has_item_equipped, ":agent", "itm_dedal_lutnia"),
                (agent_set_stand_animation, ":agent", "anim_lute_standing"),
                (agent_set_animation, ":agent", "anim_lute_standing"),
            (else_try),
                (agent_has_item_equipped, ":agent", "itm_dedal_lira"),
                (agent_set_stand_animation, ":agent", "anim_lyre_standing"),
                (agent_set_animation, ":agent", "anim_lyre_standing"),
            (try_end),
            (store_random_in_range, ":var_2", 0, 300),
            (agent_set_animation_progress, ":agent", ":var_2"),
        (else_try),
            (is_between, ":troop", tavern_booksellers_begin, tavern_booksellers_end),
            (try_begin),
                (agent_has_item_equipped, ":agent", "itm_reading_ani"),
                (agent_set_stand_animation, ":agent", "anim_sitting_reading"),
                (agent_set_animation, ":agent", "anim_sitting_reading"),
                (store_random_in_range, ":var_2", 0, 300),
                (agent_set_animation_progress, ":agent", ":var_2"),
            (try_end),
        (else_try),
            (this_or_next|is_between, ":troop", soldiers_begin, soldiers_end),
            (this_or_next|eq, ":troop", "trp_musicans_end"),
            (is_between, ":troop", walkers_begin, walkers_end),
            (troop_get_slot, ":drunk_troop", "trp_belligerent_drunk", slot_troop_cur_center),
            (neq, ":troop", ":drunk_troop"),
            (try_begin),
                (agent_has_item_equipped, ":agent", "itm_eating_ani"),
                (agent_set_stand_animation, ":agent", "anim_sitting_eating"),
                (agent_set_animation, ":agent", "anim_sitting_eating"),
                (store_random_in_range, ":var_2", 0, 300),
            (else_try),
                (agent_has_item_equipped, ":agent", "itm_sharpening_1_ani"),
                (agent_set_stand_animation, ":agent", "anim_sitting_sharpening_1"),
                (agent_set_animation, ":agent", "anim_sitting_sharpening_1"),
                (store_random_in_range, ":var_2", 0, 300),
            (else_try),
                (agent_has_item_equipped, ":agent", "itm_reading_ani"),
                (agent_set_stand_animation, ":agent", "anim_sitting_reading"),
                (agent_set_animation, ":agent", "anim_sitting_reading"),
                (store_random_in_range, ":var_2", 0, 300),
            (else_try),
                (agent_has_item_equipped, ":agent", "itm_dedal_kufel"),
                (agent_set_stand_animation, ":agent", "anim_sitting_drinking_low"),
                (agent_set_animation, ":agent", "anim_sitting_drinking_low"),
                (store_random_in_range, ":var_2", 0, 300),
            (else_try),
                (agent_set_stand_animation, ":agent", "anim_sitting_low"),
                (agent_set_animation, ":agent", "anim_sitting_low"),
                (store_random_in_range, ":var_2", 0, 300),
            (try_end),
            (agent_set_animation_progress, ":agent", ":var_2"),
        (try_end),
    ],
    [
    ]),
     
      (1, 0, ti_once, [], 
      [
        (store_current_scene, ":cur_scene"),
        (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
        (try_begin),
          (eq, "$sneaked_into_town", 1),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (eq, "$talk_context", tc_tavern_talk),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_tavern),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town),
        (try_end),
        
      ]),
                            
      (ti_before_mission_start, 0, 0, [], 
      [
        (call_script, "script_change_banners_and_chest"),
        (call_script, "script_initialize_tavern_variables"),
      ]),

      (ti_inventory_key_pressed, 0, 0,
       [
        (try_begin),
            (eq, "$g_player_troop", "trp_player"),
            (set_trigger_result, 1),
        (else_try),
            (display_message, "str_cant_use_inventory_now"),
        (try_end),
         ], []),
      
      #tavern - belligerent drunk leaving/fading out
      (1, 0, 0, 
      [
        (gt, "$g_belligerent_drunk_leaving", 0),
        (entry_point_get_position, pos0, 0),
        (agent_get_position, pos1, "$g_belligerent_drunk_leaving"),
        (get_distance_between_positions, ":dist", pos0, pos1),
        (le, ":dist", 150),
      ],
      [
        (agent_fade_out, "$g_belligerent_drunk_leaving"),
        (assign, "$g_belligerent_drunk_leaving", 0),
      ]),
      
      (ti_tab_pressed, 0, 0, 
      [
        (try_begin),
          (eq, "$g_main_attacker_agent", 0),
          (set_trigger_result, 1),
        (try_end),  
      ], []),

      #tavern brawl triggers - drunk
      #(2, 0, 0, 
      #[
      #  (neg|conversation_screen_is_active),
      #
      #  (eq, "$talk_context", tc_tavern_talk),
      #  
      #  #(neg|troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),        
      #  (troop_slot_eq, "trp_belligerent_drunk", slot_troop_cur_center, "$g_encountered_party"),        
      #  (eq, "$drunks_dont_pick_fights", 0),        
      #], 
      #[      
      #  (try_begin),
      #    (eq, "$g_start_belligerent_drunk_fight", 0),
      #    (assign, "$g_start_belligerent_drunk_fight", 1),
      #    
      #    (try_for_agents, ":cur_agent"),
      #      (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
      #      (eq, ":cur_agent_troop", "trp_belligerent_drunk"),
      #      (assign, "$g_belligerent_drunk", ":cur_agent"),
      #    (try_end),
      #  (else_try),
      #    (eq, "$g_start_belligerent_drunk_fight", 1),     
      #         
      #    (agent_is_active, "$g_belligerent_drunk"),
      #    (agent_is_alive, "$g_belligerent_drunk"),
      #    (get_player_agent_no, ":player_agent"),
      #    (agent_get_position, pos0, ":player_agent"),
      #    (agent_get_position, pos1, "$g_belligerent_drunk"),
      #    (get_distance_between_positions, ":dist", pos0, pos1),
      #    (position_get_z, ":pos0_z", pos0),
      #    (position_get_z, ":pos1_z", pos1),
      #    (store_sub, ":z_difference", ":pos1_z", ":pos0_z"),
      #    (try_begin),
      #      (le, ":z_difference", 0),
      #      (val_mul, ":z_difference", -1),
      #    (try_end),
      #    (store_mul, ":z_difference_mul_3", ":z_difference", 3),
      #    (val_add, ":dist", ":z_difference_mul_3"),
      #    (store_random_in_range, ":random_value", 0, 200),
      #    (store_add, ":400_plus_random_200", 400, ":random_value"),
      #    (le, ":dist", ":400_plus_random_200"),
      #    
      #     (call_script, "script_activate_tavern_attackers"),
      #      (start_mission_conversation, "trp_belligerent_drunk"),
      #      (assign, "$g_start_belligerent_drunk_fight", 2),
      #  (try_end),  
      #]),
            
      #tavern brawl triggers - assassin
      (2, 0, 0, [
        (neg|conversation_screen_is_active),
        (eq, "$talk_context", tc_tavern_talk),
          (assign, ":has_assassin", 0),
          (try_for_agents, ":cur_agent"),
            (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
            (eq, ":cur_agent_troop", "trp_hired_assassin"),
            (assign, ":has_assassin", ":cur_agent"),
          (try_end),    
          (this_or_next|gt, ":has_assassin", 0),
        (troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),        
      ], 
      [
        (try_begin),
          (eq, "$g_start_hired_assassin_fight", 0),
          (assign, "$g_start_hired_assassin_fight", 1),
          
          (try_for_agents, ":cur_agent"),
            (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
            (eq, ":cur_agent_troop", "trp_hired_assassin"),
            (assign, "$g_hired_assassin", ":cur_agent"),
          (try_end),          
        (else_try),  
          (eq, "$g_start_hired_assassin_fight", 1),

          (agent_is_active, "$g_hired_assassin"),
          (agent_is_alive, "$g_hired_assassin"),
          (get_player_agent_no, ":player_agent"),
          (agent_get_position, pos0, ":player_agent"),
          (agent_get_position, pos1, "$g_hired_assassin"),
          (get_distance_between_positions, ":dist", pos0, pos1),
          (position_get_z, ":pos0_z", pos0),
          (position_get_z, ":pos1_z", pos1),
          (store_sub, ":z_difference", ":pos1_z", ":pos0_z"),
          (try_begin),
            (le, ":z_difference", 0),
            (val_mul, ":z_difference", -1),
          (try_end),
          (store_mul, ":z_difference_mul_3", ":z_difference", 3),
          (val_add, ":dist", ":z_difference_mul_3"),
          (store_random_in_range, ":random_value", 0, 200),
          (store_add, ":400_plus_random_200", 400, ":random_value"),
          (le, ":dist", ":400_plus_random_200"),

          (call_script, "script_activate_tavern_attackers"),
          (assign, "$g_start_hired_assassin_fight", 2),
        (try_end),  
      ]),
            
      #Aftermath talks
      (3, 0, ti_once, 
      [
        (neg|conversation_screen_is_active),
        (eq, "$talk_context", tc_tavern_talk),
        (gt, "$g_main_attacker_agent", 0),
                
          (assign, ":has_attack", 0),
          (try_for_agents, ":cur_agent"),
            (agent_is_alive, ":cur_agent"),
            (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
            #(this_or_next|eq, ":cur_agent_troop", "trp_hired_assassin"),
            #(eq, ":cur_agent_troop", "trp_belligerent_drunk"),
            (eq, ":cur_agent_troop", "trp_hired_assassin"),
            (assign, ":has_attack", ":cur_agent"),
          (try_end),    
          (eq, ":has_attack", 0),
                
        (this_or_next|neg|agent_is_alive, "$g_main_attacker_agent"),
        (agent_is_wounded, "$g_main_attacker_agent"),
      ],
      [
        (mission_enable_talk),
      
        (try_for_agents, ":agent"),
          (agent_is_alive, ":agent"),
          (agent_get_position, pos4, ":agent"),
          (agent_set_scripted_destination, ":agent", pos4),
        (try_end),
        
        (try_for_agents, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
          (troop_get_slot, ":drunk_troop", "trp_belligerent_drunk", slot_troop_cur_center),
          (eq, ":cur_agent_troop", ":drunk_troop"),
          (entry_point_get_position, pos1, 0),
          (agent_set_scripted_destination, ":cur_agent", pos1),
          (agent_set_slot, ":cur_agent",  slot_agent_is_running_away, 1),
        (try_end),
        
        (party_get_slot, ":tavernkeeper", "$g_encountered_party", slot_town_tavernkeeper),
        (start_mission_conversation, ":tavernkeeper"),     
      ]),

      #tavern - belligerent drunk leaving/fading out
      (1, 0, 0, 
      [
        (entry_point_get_position, pos0, 0),
        
        (try_for_agents, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (agent_slot_eq, ":cur_agent", slot_agent_is_running_away, 1),
          (agent_get_position, pos1, ":cur_agent"),
          (get_distance_between_positions, ":dist", pos0, pos1),
          (le, ":dist", 150),
          (assign, "$g_belligerent_drunk_leaving", ":cur_agent"),
        (try_end),
        (gt, "$g_belligerent_drunk_leaving", 0),
      ],
      [
        (agent_fade_out, "$g_belligerent_drunk_leaving"),
        (assign, "$g_belligerent_drunk_leaving", 0),
      ]),
      
      
      #Aftermath talks
      (3, 0, ti_once, 
      [
        (neg|conversation_screen_is_active),
        (eq, "$talk_context", tc_tavern_talk),
        (gt, "$g_main_attacker_agent", 0),
        (main_hero_fallen),        
      ],
      [
      (jump_to_menu, "mnu_lost_tavern_duel"),
      (finish_mission,0)
      
      ]),      
      
      
      #No shooting in the tavern
      (1, 0, 0, 
      [
        (neg|conversation_screen_is_active),
        (eq, "$talk_context", tc_tavern_talk),
        (gt, "$g_main_attacker_agent", 0),
        
        (get_player_agent_no, ":player_agent"),
        (agent_is_alive, ":player_agent"),
        
        (agent_get_wielded_item, ":wielded_item", ":player_agent", 0),
        (is_between, ":wielded_item", "itm_darts", "itm_torch"),
        (neq, ":wielded_item", "itm_javelin_melee"),
        (neq, ":wielded_item", "itm_throwing_spear_melee"),
        (neq, ":wielded_item", "itm_jarid_melee"),
        (neq, ":wielded_item", "itm_light_throwing_axes_melee"),
        (neq, ":wielded_item", "itm_throwing_axes_melee"),
        (neq, ":wielded_item", "itm_heavy_throwing_axes_melee"),
      ], 
      [
        (party_get_slot, ":tavernkeeper", "$g_encountered_party", slot_town_tavernkeeper),
        (start_mission_conversation, ":tavernkeeper"),     
      ]),
                  
      #Check for weapon in hand of attacker, also, everyone gets out of the way
      (1, 0, 0, 
      [
        (gt, "$g_main_attacker_agent", 0),    
      ],
      [
        (agent_get_wielded_item, ":wielded_item", "$g_main_attacker_agent", 0),
        (val_max, "$g_attacker_drawn_weapon", ":wielded_item"),               
        
        (call_script, "script_neutral_behavior_in_fight"),
      ]),                  
      
    #custom_commander_cheat_refill_ammo,
    ironflesh,
    horses_spook,
    horses_spook2,
    horses_spook3,
    #custom_commander_weapon_strike,
    custom_commander_special_strike,
    armor_modify_decrease,
    #gold_trigger,
      
    ] + common_pbod_triggers + bodyguard_triggers  + custom_commander_commom_triggers,
  ),

# This template is used in party encounters and such.
# 
  (
    "conversation_encounter",0,-1,
    "Conversation_encounter",
    [( 0,mtef_visitor_source,0,0,1,[]),( 1,mtef_visitor_source,0,0,1,[]),
     ( 2,mtef_visitor_source,0,0,1,[]),( 3,mtef_visitor_source,0,0,1,[]),( 4,mtef_visitor_source,0,0,1,[]),( 5,mtef_visitor_source,0,0,1,[]),( 6,mtef_visitor_source,0,0,1,[]),
     ( 7,mtef_visitor_source,0,0,1,[]),( 8,mtef_visitor_source,0,0,1,[]),( 9,mtef_visitor_source,0,0,1,[]),(10,mtef_visitor_source,0,0,1,[]),(11,mtef_visitor_source,0,0,1,[]),
    #prisoners now...
     (12,mtef_visitor_source,0,0,1,[]),(13,mtef_visitor_source,0,0,1,[]),(14,mtef_visitor_source,0,0,1,[]),(15,mtef_visitor_source,0,0,1,[]),(16,mtef_visitor_source,0,0,1,[]),
    #Other party
  #   (17,mtef_visitor_source,0,0,1,[]),(18,mtef_visitor_source,0,0,1,[]),(19,mtef_visitor_source,0,0,1,[]),(20,mtef_visitor_source,0,0,1,[]),(21,mtef_visitor_source,0,0,1,[]),
  #   (22,mtef_visitor_source,0,0,1,[]),(23,mtef_visitor_source,0,0,1,[]),(24,mtef_visitor_source,0,0,1,[]),(25,mtef_visitor_source,0,0,1,[]),(26,mtef_visitor_source,0,0,1,[]),
  #   (27,mtef_visitor_source,0,0,1,[]),(28,mtef_visitor_source,0,0,1,[]),(29,mtef_visitor_source,0,0,1,[]),(30,mtef_visitor_source,0,0,1,[]),(31,mtef_visitor_source,0,0,1,[]),
     
     (17,mtef_visitor_source,0,0,1,[]),(18,mtef_visitor_source,0,0,1,[]),(19,mtef_visitor_source,0,aif_start_alarmed,1,[]),(20,mtef_visitor_source,0,aif_start_alarmed,1,[]),(21,mtef_visitor_source,0,aif_start_alarmed,1,[]),
     (22,mtef_visitor_source,0,aif_start_alarmed,1,[]),(23,mtef_visitor_source,0,aif_start_alarmed,1,[]),(24,mtef_visitor_source,0,aif_start_alarmed,1,[]),(25,mtef_visitor_source,0,aif_start_alarmed,1,[]),(26,mtef_visitor_source,0,aif_start_alarmed,1,[]),
     (27,mtef_visitor_source,0,aif_start_alarmed,1,[]),(28,mtef_visitor_source,0,aif_start_alarmed,1,[]),(29,mtef_visitor_source,0,aif_start_alarmed,1,[]),(30,mtef_visitor_source,0,aif_start_alarmed,1,[]),
	 (31,mtef_visitor_source,af_override_all,0,1,[]),#(32,mtef_attackers|mtef_team_1,0,aif_start_alarmed,1,[]),
     
     ],
    [],
  ),
  
#----------------------------------------------------------------
#mission templates before this point are hardwired into the game.
#-----------------------------------------------------------------

  (
    "town_center",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),     
     (8,mtef_visitor_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,0,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_visitor_source,0,0,1,[]),(14,mtef_scene_source,0,0,1,[]),(15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),
     (23,mtef_visitor_source,af_override_horse,0,1,[]), #guard
     (24,mtef_visitor_source,af_override_horse,0,1,[]), #guard
     (25,mtef_visitor_source,af_override_horse,0,1,[]), #guard
     (26,mtef_visitor_source,af_override_horse,0,1,[]), #guard
     (27,mtef_visitor_source,af_override_horse,0,1,[]), #guard
     (28,mtef_visitor_source,af_override_horse,0,1,[]), #guard
     (29,mtef_visitor_source,af_override_horse,0,1,[]),
     (30,mtef_visitor_source,af_override_horse,0,1,[]),
     (31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),
     (33,mtef_visitor_source,af_override_horse,0,1,[]),
     (34,mtef_visitor_source,af_override_horse,0,1,[]),
     (35,mtef_visitor_source,af_override_horse,0,1,[]),
     (36,mtef_visitor_source,af_override_horse,0,1,[]), #town walker point
     (37,mtef_visitor_source,af_override_horse,0,1,[]), #town walker point
     (38,mtef_visitor_source,af_override_horse,0,1,[]),
     (39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
     (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
     (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
     (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        (call_script, "script_init_town_agent", ":agent_no"),
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (agent_get_troop_id, ":troop_no", ":agent_no"),          
          (troop_slot_eq, ":troop_no", slot_troop_will_join_prison_break, 1),
          ## CC
          (get_player_agent_no, ":player_agent"),
          (agent_get_team, ":player_team", ":player_agent"),
          (agent_set_team, ":agent_no", ":player_team"),
          ## CC
          (agent_ai_set_aggressiveness, ":agent_no", 5),
          (troop_set_slot, ":troop_no", slot_troop_will_join_prison_break, 0),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_mission_participation, mp_prison_break_stand_back),
            (agent_get_position, pos1, ":agent_no"),            
            (agent_set_scripted_destination, ":agent_no", pos1),
          (try_end),
        (try_end),         
      ]),

      (ti_before_mission_start, 0, 0, [],
      [
        (assign, "$g_main_attacker_agent", 0),
      ]),
         
      (1, 0, ti_once, 
      [],
      [
        (try_begin),
          (eq, "$g_mt_mode", tcm_default),
          (store_current_scene, ":cur_scene"),
          (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
        (try_end),
        (call_script, "script_init_town_walker_agents"),
        (try_begin),
          (eq, "$sneaked_into_town", 1),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town),
        (try_end),
      ]),

      (ti_before_mission_start, 0, 0, 
      [], 
      [
        (call_script, "script_change_banners_and_chest")
      ]),
        
      (ti_inventory_key_pressed, 0, 0,
      [
        (try_begin),
          (this_or_next|eq, "$g_player_troop", "trp_player"),
          (eq, "$g_mt_mode", tcm_default),
          (set_trigger_result,1),
        (else_try),
          (eq, "$g_mt_mode", tcm_disguised),
          (display_message,"str_cant_use_inventory_disguised"),
        (else_try),
          (display_message, "str_cant_use_inventory_now"),
        (try_end),
      ], 
      []),
       
       
      (ti_tab_pressed, 0, 0,
      [
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (display_message, "str_cannot_leave_now"),
        (else_try),
          (this_or_next|eq, "$g_mt_mode", tcm_default),
          (eq, "$g_mt_mode", tcm_disguised),
          (mission_enable_talk),
          (set_trigger_result,1),
        (else_try),
          (display_message, "str_cannot_leave_now"),
        (try_end),
      ], 
      []),

      (ti_on_leave_area, 0, 0,
      [
        (try_begin),
          (eq, "$g_defending_against_siege", 0),
          (assign,"$g_leave_town",1),
        (try_end),            
      ], 
      [
        (try_begin),
          (eq, "$talk_context", tc_escape),
          (call_script, "script_deduct_casualties_from_garrison"),
          (jump_to_menu,"mnu_sneak_into_town_caught_dispersed_guards"),
        (try_end),
        
        (mission_enable_talk),
      ]),            

    (0, 0, ti_once, [],### replace static horse
      [(neg|is_edit_mode_enabled),
        (try_for_range, ":horse", all_items_begin, all_items_end), # horses_begin, horses_end
            (item_get_type, ":type", ":horse"),
            (eq, ":type", itp_type_horse),
            (scene_item_get_num_instances, ":num_instances", ":horse"),
            (try_for_range, ":number", 0, ":num_instances"),
                (scene_item_get_instance, ":scene_item", ":horse", ":number"),
                (prop_instance_get_position, pos53, ":scene_item"),
                (prop_instance_set_scale, ":scene_item", 0, 0, 0),
                (set_spawn_position, pos53),
                (spawn_horse, ":horse", 0),
            (try_end),
        (try_end),
     ]),
     
     (0, 0, ti_once, 
     [], 
     [
       (party_slot_eq, "$current_town", slot_party_type, spt_town),
       (call_script, "script_town_init_doors", 0),
       (try_begin),
         (eq, "$town_nighttime", 0),
         (play_sound, "snd_town_ambiance", sf_looping),
       (try_end),
     ]),

    (3, 0, 0, 
    [
      (call_script, "script_tick_town_walkers")
    ], 
    []),
    
    (2, 0, 0, 
    [
      (call_script, "script_center_ambiance_sounds")
    ], 
    []),
        
    #JAILBREAK TRIGGERS 
    #Civilians get out of the way
    (1, 0, 0,
    [
      (this_or_next|eq, "$talk_context", tc_prison_break),
      (eq, "$talk_context", tc_escape),        
    ],
    [
      #(agent_get_team, ":prisoner_agent", 0),
      (call_script, "script_neutral_behavior_in_fight"),
      (mission_disable_talk),            
    ]),

    #The game begins with the town alerted
    (1, 0, ti_once, 
      [
        #If I set this to 1, 0, ti_once, then the prisoner spawns twice
        (eq, "$talk_context", tc_escape),
      ],      
      [
        (get_player_agent_no, ":player_agent"),
        (assign, reg6, ":player_agent"),
        (call_script, "script_activate_town_guard"),        
        
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos4, ":player_agent"),
        
        (try_for_range, ":prisoner", active_npcs_begin, kingdom_ladies_end),        
          (troop_slot_ge, ":prisoner", slot_troop_mission_participation, mp_prison_break_fight),

          (str_store_troop_name, s4, ":prisoner"),
          (display_message, "str_s4_joins_prison_break"),
            
          (store_current_scene, ":cur_scene"), #this might be a better option?
          (modify_visitors_at_site, ":cur_scene"),
                        
          #<entry_no>,<troop_id>,<number_of_troops>, <team_no>, <group_no>), 
          #team no and group no are used in multiplayer mode only. default team in entry is used in single player mode            
          (store_current_scene, ":cur_scene"),
          (modify_visitors_at_site, ":cur_scene"),                      
          (add_visitors_to_current_scene, 24, ":prisoner", 1, 0, 0),
          (troop_set_slot, ":prisoner", slot_troop_will_join_prison_break, 1),                              
        (try_end),
      ]),
    
   (3, 0, 0, 
   [     
     (main_hero_fallen, 0),
   ],      
   [
     (try_begin),
       (this_or_next|eq, "$talk_context", tc_prison_break),
       (eq, "$talk_context", tc_escape),
       
       (call_script, "script_deduct_casualties_from_garrison"),
       (jump_to_menu,"mnu_captivity_start_castle_defeat"), 
     
       (assign, ":end_cond", kingdom_ladies_end),
       (try_for_range, ":prisoner", active_npcs_begin, ":end_cond"),
           (troop_set_slot, ":prisoner", slot_troop_mission_participation, 0), #new      
         (try_end),  
     
       (mission_enable_talk),
       (finish_mission, 0),
     (else_try),  
       (set_trigger_result,1),
     (try_end),          
   ]),
        
   (3, 0, 0, 
   [
     (eq, "$talk_context", tc_escape),
     (neg|main_hero_fallen,0),
     (store_mission_timer_a, ":time"),
     (ge, ":time", 10),
        
     (all_enemies_defeated), #1 is default enemy team for in-town battles
   ],      
   [
     (call_script, "script_deduct_casualties_from_garrison"),
     (try_for_agents, ":agent"),
     (agent_get_troop_id, ":troop", ":agent"),
       (troop_slot_ge, ":troop", slot_troop_mission_participation, mp_prison_break_fight),
       (try_begin),
         (agent_is_alive, ":agent"),
         (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_escaped),
       (else_try),    
         (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_caught),
       (try_end),
     (try_end),
     (jump_to_menu,"mnu_sneak_into_town_caught_ran_away"),
     
     (mission_enable_talk),
     (finish_mission,0)
   ]),
   
   (ti_on_agent_killed_or_wounded, 0, 0, [],
   [
     (store_trigger_param_1, ":dead_agent_no"),
     (store_trigger_param_2, ":killer_agent_no"),
     #(store_trigger_param_3, ":is_wounded"),
        
     (agent_get_troop_id, ":dead_agent_troop_no", ":dead_agent_no"),
     (agent_get_troop_id, ":killer_agent_troop_no", ":killer_agent_no"),
     (store_faction_of_party, ":faction", "$current_town"),
     (try_begin), 
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_france_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_polish_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_khergit_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_england_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_italian_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_sarranid_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_german_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_vaegir_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_janissary_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_nord_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_iberian_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_marinid_prison_guard"),
       #(eq, ":dead_agent_troop_no", "trp_teu_prison_guard"),

       (faction_slot_eq, ":faction", slot_faction_prison_guard_troop, ":dead_agent_troop_no"),   
       (eq, ":killer_agent_troop_no", "trp_player"),
          
       (display_message, "@You got keys of dungeon."),
     (try_end),
   ]),     
    ## CC
    common_battle_order_panel,
    common_battle_order_panel_tick,
    
    ## CC
  ]  + common_pbod_triggers + bodyguard_triggers + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers , ## CC
 ),

  (
    "village_center",0,-1,
    "village center",
    [(0,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     
     (8,mtef_visitor_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,0,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_visitor_source,0,0,1,[]),(14,mtef_visitor_source,0,0,1,[]),(15,mtef_visitor_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),(23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),(25,mtef_visitor_source,af_override_horse,0,1,[]),(26,mtef_visitor_source,af_override_horse,0,1,[]),(27,mtef_visitor_source,af_override_horse,0,1,[]),(28,mtef_visitor_source,af_override_horse,0,1,[]),(29,mtef_visitor_source,af_override_horse,0,1,[]),(30,mtef_visitor_source,af_override_horse,0,1,[]),(31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),(33,mtef_visitor_source,af_override_horse,0,1,[]),(34,mtef_visitor_source,af_override_horse,0,1,[]),(35,mtef_visitor_source,af_override_horse,0,1,[]),(36,mtef_visitor_source,af_override_horse,0,1,[]),(37,mtef_visitor_source,af_override_horse,0,1,[]),(38,mtef_visitor_source,af_override_horse,0,1,[]),(39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source,af_override_horse,0,1,[]),(41,mtef_visitor_source,af_override_horse,0,1,[]),(42,mtef_visitor_source,af_override_horse,0,1,[]),(43,mtef_visitor_source,af_override_horse,0,1,[]),(44,mtef_visitor_source,af_override_horse,0,1,[]),(45,mtef_visitor_source,af_override_horse,0,1,[]),(46,mtef_visitor_source,af_override_horse,0,1,[]),(47,mtef_visitor_source,af_override_horse,0,1,[]),
     ],
    [
      (1, 0, ti_once, [], [
          (store_current_scene, ":cur_scene"),
          (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
          (call_script, "script_init_town_walker_agents"),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
        ]),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),
      (ti_inventory_key_pressed, 0, 0,
       [
        (try_begin),
            (eq, "$g_player_troop", "trp_player"),
            (set_trigger_result, 1),
        (else_try),
            (display_message, "str_cant_use_inventory_now"),
        (try_end),
         ], []),
      
# Bounty Hunting triggers
      (ti_tab_pressed, 0, 0, [(try_begin),
                                (check_quest_active, "qst_bounty_1"),
                                (neg|check_quest_succeeded, "qst_bounty_1"),
                                (neg|check_quest_failed, "qst_bounty_1"),
                                (quest_slot_eq, "qst_bounty_1", slot_quest_current_state, 1),
                                (try_begin),
                                  (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_1"),
                                  (call_script, "script_fail_quest", "qst_bounty_1"),
                                (else_try),
                                  (call_script, "script_succeed_quest", "qst_bounty_1"),
                                (try_end),
                              (try_end),
                              (set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(try_begin),
                                (check_quest_active, "qst_bounty_2"),
                                (neg|check_quest_succeeded, "qst_bounty_2"),
                                (neg|check_quest_failed, "qst_bounty_2"),
                                (quest_slot_eq, "qst_bounty_2", slot_quest_current_state, 1),
                                (try_begin),
                                  (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_2"),
                                  (call_script, "script_fail_quest", "qst_bounty_2"),
                                (else_try),
                                  (call_script, "script_succeed_quest", "qst_bounty_2"),
                                (try_end),
                              (try_end),
                              (set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(try_begin),
                                (check_quest_active, "qst_bounty_3"),
                                (neg|check_quest_succeeded, "qst_bounty_3"),
                                (neg|check_quest_failed, "qst_bounty_3"),
                                (quest_slot_eq, "qst_bounty_3", slot_quest_current_state, 1),
                                (try_begin),
                                  (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_3"),
                                  (call_script, "script_fail_quest", "qst_bounty_3"),
                                (else_try),
                                  (call_script, "script_succeed_quest", "qst_bounty_3"),
                                (try_end),
                              (try_end),
                              (set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(try_begin),
                                (check_quest_active, "qst_bounty_4"),
                                (neg|check_quest_succeeded, "qst_bounty_4"),
                                (neg|check_quest_failed, "qst_bounty_4"),
                                (quest_slot_eq, "qst_bounty_4", slot_quest_current_state, 1),
                                (try_begin),
                                  (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_4"),
                                  (call_script, "script_fail_quest", "qst_bounty_4"),
                                (else_try),
                                  (call_script, "script_succeed_quest", "qst_bounty_4"),
                                (try_end),
                              (try_end),
                              (set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(try_begin),
                                (check_quest_active, "qst_bounty_5"),
                                (neg|check_quest_succeeded, "qst_bounty_5"),
                                (neg|check_quest_failed, "qst_bounty_5"),
                                (quest_slot_eq, "qst_bounty_5", slot_quest_current_state, 1),
                                (try_begin),
                                  (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_5"),
                                  (call_script, "script_fail_quest", "qst_bounty_5"),
                                (else_try),
                                  (call_script, "script_succeed_quest", "qst_bounty_5"),
                                (try_end),
                              (try_end),
                              (set_trigger_result,1)], []),
      (ti_tab_pressed, 0, 0, [(try_begin),
                                (check_quest_active, "qst_bounty_6"),
                                (neg|check_quest_succeeded, "qst_bounty_6"),
                                (neg|check_quest_failed, "qst_bounty_6"),
                                (quest_slot_eq, "qst_bounty_6", slot_quest_current_state, 1),
                                (try_begin),
                                  (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_6"),
                                  (call_script, "script_fail_quest", "qst_bounty_6"),
                                (else_try),
                                  (call_script, "script_succeed_quest", "qst_bounty_6"),
                                (try_end),
                              (try_end),
                              (set_trigger_result,1)], []),

      (1, 0, ti_once, [(check_quest_active, "qst_bounty_1"),
                       (neg|check_quest_succeeded, "qst_bounty_1"),
                       (neg|check_quest_failed, "qst_bounty_1"),
                       (quest_slot_eq, "qst_bounty_1", slot_quest_current_state, 1),
                       (assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_1"),
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (this_or_next|main_hero_fallen),
                       (eq, ":not_alive", 1),
                       ],
       [(try_begin),
          (main_hero_fallen),
          (jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
          (call_script, "script_fail_quest", "qst_bounty_1"),
          (finish_mission, 4),
        (else_try),
          (call_script, "script_succeed_quest", "qst_bounty_1"),
        (try_end),
        ]),
      (1, 0, ti_once, [(check_quest_active, "qst_bounty_2"),
                       (neg|check_quest_succeeded, "qst_bounty_2"),
                       (neg|check_quest_failed, "qst_bounty_2"),
                       (quest_slot_eq, "qst_bounty_2", slot_quest_current_state, 1),
                       (assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_2"),
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (this_or_next|main_hero_fallen),
                       (eq, ":not_alive", 1),
                       ],
       [(try_begin),
          (main_hero_fallen),
          (jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
          (call_script, "script_fail_quest", "qst_bounty_2"),
          (finish_mission, 4),
        (else_try),
          (call_script, "script_succeed_quest", "qst_bounty_2"),
        (try_end),
        ]),
      (1, 0, ti_once, [(check_quest_active, "qst_bounty_3"),
                       (neg|check_quest_succeeded, "qst_bounty_3"),
                       (neg|check_quest_failed, "qst_bounty_3"),
                       (quest_slot_eq, "qst_bounty_3", slot_quest_current_state, 1),
                       (assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_3"),
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (this_or_next|main_hero_fallen),
                       (eq, ":not_alive", 1),
                       ],
       [(try_begin),
          (main_hero_fallen),
          (jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
          (call_script, "script_fail_quest", "qst_bounty_3"),
          (finish_mission, 4),
        (else_try),
          (call_script, "script_succeed_quest", "qst_bounty_3"),
        (try_end),
        ]),
      (1, 0, ti_once, [(check_quest_active, "qst_bounty_4"),
                       (neg|check_quest_succeeded, "qst_bounty_4"),
                       (neg|check_quest_failed, "qst_bounty_4"),
                       (quest_slot_eq, "qst_bounty_4", slot_quest_current_state, 1),
                       (assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_4"),
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (this_or_next|main_hero_fallen),
                       (eq, ":not_alive", 1),
                       ],
       [(try_begin),
          (main_hero_fallen),
          (jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
          (call_script, "script_fail_quest", "qst_bounty_4"),
          (finish_mission, 4),
        (else_try),
          (call_script, "script_succeed_quest", "qst_bounty_4"),
        (try_end),
        ]),
      (1, 0, ti_once, [(check_quest_active, "qst_bounty_5"),
                       (neg|check_quest_succeeded, "qst_bounty_5"),
                       (neg|check_quest_failed, "qst_bounty_5"),
                       (quest_slot_eq, "qst_bounty_5", slot_quest_current_state, 1),
                       (assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_5"),
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (this_or_next|main_hero_fallen),
                       (eq, ":not_alive", 1),
                       ],
       [(try_begin),
          (main_hero_fallen),
          (jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
          (call_script, "script_fail_quest", "qst_bounty_5"),
          (finish_mission, 4),
        (else_try),
          (call_script, "script_succeed_quest", "qst_bounty_5"),
        (try_end),
        ]),
      (1, 0, ti_once, [(check_quest_active, "qst_bounty_6"),
                       (neg|check_quest_succeeded, "qst_bounty_6"),
                       (neg|check_quest_failed, "qst_bounty_6"),
                       (quest_slot_eq, "qst_bounty_6", slot_quest_current_state, 1),
                       (assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", "$bounty_target_6"),
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (this_or_next|main_hero_fallen),
                       (eq, ":not_alive", 1),
                       ],
       [(try_begin),
          (main_hero_fallen),
          (jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
          (call_script, "script_fail_quest", "qst_bounty_6"),
          (finish_mission, 4),
        (else_try),
          (call_script, "script_succeed_quest", "qst_bounty_6"),
        (try_end),
        ]),
# Bounty Hunting Triggers end
      
      (ti_tab_pressed, 0, 0, [(try_begin),
                                (check_quest_active, "qst_hunt_down_fugitive"),
                                (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
                                (neg|check_quest_failed, "qst_hunt_down_fugitive"),
                                (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),
                                (try_begin),
                                  (call_script, "script_cf_troop_agent_is_alive", "trp_fugitive"),
                                  (call_script, "script_fail_quest", "qst_hunt_down_fugitive"),
                                (else_try),
                                  (call_script, "script_succeed_quest", "qst_hunt_down_fugitive"),
                                (try_end),
                              (try_end),
                              (set_trigger_result,1)], []),
      (ti_on_leave_area, 0, 0, [
          (try_begin),
            (assign,"$g_leave_town",1),
          (try_end),
          ], []),
      (3, 0, 0, [(call_script, "script_tick_town_walkers")], []),
      (2, 0, 0, [(call_script, "script_center_ambiance_sounds")], []),

   (ti_on_agent_killed_or_wounded, 0, ti_once, [(check_quest_active, "qst_hunt_down_fugitive"),
                       (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
                       (neg|check_quest_failed, "qst_hunt_down_fugitive"),
                       (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_current_state, 1),],
   [
    (store_trigger_param_1, ":dead_agent_no"),    
    (store_trigger_param_2, ":killer_agent"),
    (store_trigger_param_3, ":is_wounded"),
    (get_player_agent_no, ":player_agent"),
    (agent_get_troop_id, ":corpse", ":dead_agent_no"),
    (try_begin),
      (this_or_next|eq, ":dead_agent_no", ":player_agent"),
      (main_hero_fallen),#should be same
	  
      (jump_to_menu, "mnu_village_hunt_down_fugitive_defeated"),
      (call_script, "script_fail_quest", "qst_hunt_down_fugitive"),
      (finish_mission, 4),
	(else_try),
	  (eq, ":corpse", "trp_fugitive"),
	  (eq, ":killer_agent", ":player_agent"),
	  (try_begin),
	    (eq, ":is_wounded", 0),#killed rather than wounded
	    (call_script, "script_change_player_relation_with_center", "$current_town", -1),
	    (store_random_in_range, ":imod", imod_plain, imod_fine),
	  (else_try),
	    (display_message, "@You leave the fugitive to villager's justice."),
		(store_random_in_range, ":imod", imod_well_made, imod_powerful),
	  (try_end),
	  (agent_get_wielded_item, ":item", ":dead_agent_no", 0),
	  (try_begin),
	    (gt, ":item", 0),
		(neg|item_has_property, ":item", itp_no_pick_up_from_ground),
		(val_sub, ":item", 1),
		(try_begin),
			(neg|item_has_property, ":item", itp_next_item_as_melee),
			(val_add, ":item", 1),
		(try_end),
		(try_begin),
			(neg|is_vanilla_warband),
			(agent_get_wielded_item_slot_no, ":ek_slot", ":dead_agent_no"),
			(agent_get_item_slot_modifier, ":imod", ":dead_agent_no", ":ek_slot"),
		(try_end),		
	    (troop_add_item, "trp_player", ":item", ":imod"),
	  (try_end),
	  (call_script, "script_succeed_quest", "qst_hunt_down_fugitive"),
	(try_end),
   ]),  

    ]  + common_pbod_triggers + bodyguard_triggers + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers ,
  ),

  (
    "bandits_at_night",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     
     (8,mtef_scene_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_scene_source,0,0,1,[]),(14,mtef_scene_source,0,0,1,[]),(15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),(23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),(25,mtef_visitor_source,af_override_horse,0,1,[]),(26,mtef_visitor_source,af_override_horse,0,1,[]),(27,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(28,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(29,mtef_visitor_source,af_override_horse,0,1,[]),(30,mtef_visitor_source,af_override_horse,0,1,[]),(31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),(33,mtef_visitor_source,af_override_horse,0,1,[]),(34,mtef_visitor_source,af_override_horse,0,1,[]),(35,mtef_visitor_source,af_override_horse,0,1,[]),(36,mtef_visitor_source,af_override_horse,0,1,[]),(37,mtef_visitor_source,af_override_horse,0,1,[]),(38,mtef_visitor_source,af_override_horse,0,1,[]),(39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_get_troop_id, ":troop_no", ":agent_no"),
         (neq, ":troop_no", "trp_player"),
         (agent_set_team, ":agent_no", 1),
         ]),

      (ti_before_mission_start, 0, 0, [], [(play_sound, "snd_battle_begin"),(call_script, "script_change_banners_and_chest")]),

      common_inventory_not_available,
      
      (ti_tab_pressed, 0, 0,
       [
         (display_message, "str_cannot_leave_now"),
         ], []),
      (ti_on_leave_area, 0, 0,
       [
         (try_begin),
           (eq, "$g_defending_against_siege", 0),
           (assign,"$g_leave_town",1),
         (try_end),
         ], []),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
         (party_slot_eq, "$current_town", slot_party_type, spt_town),
         (call_script, "script_town_init_doors", 0),
        ]),

      (1, 4, ti_once,
       [
         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
         (this_or_next|main_hero_fallen),
         (num_active_teams_le,1)
         ],
       [
         (try_begin),
           (main_hero_fallen),
           (jump_to_menu, "mnu_town_bandits_failed"),
         (else_try),
           (jump_to_menu, "mnu_town_bandits_succeeded"),
         (try_end),
         (finish_mission),
         ]),
      ## CC
      common_battle_order_panel,
      common_battle_order_panel_tick,
      
      ## CC
    ] + bodyguard_triggers + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers,
    ),

  (
    "bandits_at_night2",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     
     (8,mtef_scene_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_scene_source,0,0,1,[]),(14,mtef_scene_source,0,0,1,[]),(15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),(23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),(25,mtef_visitor_source,af_override_horse,0,1,[]),(26,mtef_visitor_source,af_override_horse,0,1,[]),(27,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(28,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(29,mtef_visitor_source,af_override_horse,0,1,[]),(30,mtef_visitor_source,af_override_horse,0,1,[]),(31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),(33,mtef_visitor_source,af_override_horse,0,1,[]),(34,mtef_visitor_source,af_override_horse,0,1,[]),(35,mtef_visitor_source,af_override_horse,0,1,[]),(36,mtef_visitor_source,af_override_horse,0,1,[]),(37,mtef_visitor_source,af_override_horse,0,1,[]),(38,mtef_visitor_source,af_override_horse,0,1,[]),(39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_get_troop_id, ":troop_no", ":agent_no"),
         (neq, ":troop_no", "trp_player"),
         (agent_set_team, ":agent_no", 1),
         ]),

      (ti_before_mission_start, 0, 0, [], [(play_sound, "snd_battle_begin"),(call_script, "script_change_banners_and_chest")]),

      common_inventory_not_available,
      
      (ti_tab_pressed, 0, 0,
       [
         (display_message, "str_cannot_leave_now"),
         ], []),
      (ti_on_leave_area, 0, 0,
       [
         (try_begin),
           (eq, "$g_defending_against_siege", 0),
           (assign,"$g_leave_town",1),
         (try_end),
         ], []),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
         (party_slot_eq, "$current_town", slot_party_type, spt_town),
         (call_script, "script_town_init_doors", 0),
        ]),

      (1, 4, ti_once,
       [
         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
         (this_or_next|main_hero_fallen),
         (num_active_teams_le,1)
         ],
       [
         (try_begin),
           (main_hero_fallen),
           (jump_to_menu, "mnu_town_bandits_failed"),
         (else_try),
           (jump_to_menu, "mnu_town_bandits_succeeded2"),
         (try_end),
         (finish_mission),
         ]),
      ## CC
      common_battle_order_panel,
      common_battle_order_panel_tick,
      
      ## CC
    ] + bodyguard_triggers + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers,
    ),

  (
    "bandits_at_night3",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     
     (8,mtef_scene_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_scene_source,0,0,1,[]),(14,mtef_scene_source,0,0,1,[]),(15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),(23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),(25,mtef_visitor_source,af_override_horse,0,1,[]),(26,mtef_visitor_source,af_override_horse,0,1,[]),(27,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(28,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(29,mtef_visitor_source,af_override_horse,0,1,[]),(30,mtef_visitor_source,af_override_horse,0,1,[]),(31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),(33,mtef_visitor_source,af_override_horse,0,1,[]),(34,mtef_visitor_source,af_override_horse,0,1,[]),(35,mtef_visitor_source,af_override_horse,0,1,[]),(36,mtef_visitor_source,af_override_horse,0,1,[]),(37,mtef_visitor_source,af_override_horse,0,1,[]),(38,mtef_visitor_source,af_override_horse,0,1,[]),(39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_get_troop_id, ":troop_no", ":agent_no"),
         (neq, ":troop_no", "trp_player"),
         (agent_set_team, ":agent_no", 1),
         ]),

      (ti_before_mission_start, 0, 0, [], [(play_sound, "snd_battle_begin"),(call_script, "script_change_banners_and_chest")]),

      common_inventory_not_available,
      
      (ti_tab_pressed, 0, 0,
       [
         (display_message, "str_cannot_leave_now"),
         ], []),
      (ti_on_leave_area, 0, 0,
       [
         (try_begin),
           (eq, "$g_defending_against_siege", 0),
           (assign,"$g_leave_town",1),
         (try_end),
         ], []),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
         (party_slot_eq, "$current_town", slot_party_type, spt_town),
         (call_script, "script_town_init_doors", 0),
        ]),

      (1, 4, ti_once,
       [
         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
         (this_or_next|main_hero_fallen),
         (num_active_teams_le,1)
         ],
       [
         (try_begin),
           (main_hero_fallen),
           (jump_to_menu, "mnu_town_bandits_failed"),
         (else_try),
           (jump_to_menu, "mnu_town_bandits_succeeded3"),
         (try_end),
         (finish_mission),
         ]),
      ## CC
      common_battle_order_panel,
      common_battle_order_panel_tick,
      
      ## CC
    ] + bodyguard_triggers + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers,
    ),

  (
    "credit_fight",0,-1,
    "Default town visit",
    [(0,mtef_scene_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,0,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (4,mtef_visitor_source|mtef_team_0, af_override_horse, aif_start_alarmed, 1, []),
     (5,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     
     (8,mtef_scene_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),(10,mtef_visitor_source,af_override_horse,0,1,[]),(11,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(12,mtef_visitor_source,af_override_horse,0,1,[]),(13,mtef_scene_source,0,0,1,[]),(14,mtef_scene_source,0,0,1,[]),(15,mtef_scene_source,0,0,1,[]),
     (16,mtef_visitor_source,af_override_horse,0,1,[]),(17,mtef_visitor_source,af_override_horse,0,1,[]),(18,mtef_visitor_source,af_override_horse,0,1,[]),(19,mtef_visitor_source,af_override_horse,0,1,[]),(20,mtef_visitor_source,af_override_horse,0,1,[]),(21,mtef_visitor_source,af_override_horse,0,1,[]),(22,mtef_visitor_source,af_override_horse,0,1,[]),(23,mtef_visitor_source,af_override_horse,0,1,[]),
     (24,mtef_visitor_source,af_override_horse,0,1,[]),(25,mtef_visitor_source,af_override_horse,0,1,[]),(26,mtef_visitor_source,af_override_horse,0,1,[]),(27,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(28,mtef_visitor_source,af_override_horse,aif_start_alarmed,1,[]),(29,mtef_visitor_source,af_override_horse,0,1,[]),(30,mtef_visitor_source,af_override_horse,0,1,[]),(31,mtef_visitor_source,af_override_horse,0,1,[]),
     (32,mtef_visitor_source,af_override_horse,0,1,[]),(33,mtef_visitor_source,af_override_horse,0,1,[]),(34,mtef_visitor_source,af_override_horse,0,1,[]),(35,mtef_visitor_source,af_override_horse,0,1,[]),(36,mtef_visitor_source,af_override_horse,0,1,[]),(37,mtef_visitor_source,af_override_horse,0,1,[]),(38,mtef_visitor_source,af_override_horse,0,1,[]),(39,mtef_visitor_source,af_override_horse,0,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),(47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_get_troop_id, ":troop_no", ":agent_no"),
         (neq, ":troop_no", "trp_player"),
         (agent_set_team, ":agent_no", 1),
         ]),

      (ti_before_mission_start, 0, 0, [], [(play_sound, "snd_battle_begin"),(call_script, "script_change_banners_and_chest")]),

      common_inventory_not_available,
      
      (ti_tab_pressed, 0, 0,
       [
         (display_message, "str_cannot_leave_now"),
         ], []),
      (ti_on_leave_area, 0, 0,
       [
         (try_begin),
           (eq, "$g_defending_against_siege", 0),
           (assign,"$g_leave_town",1),
         (try_end),
         ], []),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
         (party_slot_eq, "$current_town", slot_party_type, spt_town),
         (call_script, "script_town_init_doors", 0),
        ]),

      (1, 4, ti_once,
       [
         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
         (this_or_next|main_hero_fallen),
         (num_active_teams_le,1)
         ],
       [
         (try_begin),
           (main_hero_fallen),
           (jump_to_menu, "mnu_credit_fight_failed"),
         (else_try),
           (jump_to_menu, "mnu_credit_fight_succeeded"),
         (try_end),
         (finish_mission),
         ]),
      ## CC
      common_battle_order_panel,
      common_battle_order_panel_tick,
      
      ## CC
    ] + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers,
    ),
  
  (
    "village_training", mtf_arena_fight, -1,
    "village_training",
    [(2,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_practice_staff, itm_practice_boots]),
     (4,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff, itm_practice_boots]),
     ],
    [
      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_train_peasants_against_bandits_training_succeeded", 0),
         (call_script, "script_change_banners_and_chest"),
         ]),
      
      common_arena_fight_tab_press,
      
      (ti_question_answered, 0, 0, [],
       [
         (store_trigger_param_1,":answer"),
         (eq,":answer",0),
         (finish_mission),
         ]),
      
      common_inventory_not_available,

      (1, 4, ti_once,
       [
         (this_or_next|main_hero_fallen),
         (num_active_teams_le, 1)
         ],
       [
         (try_begin),
           (neg|main_hero_fallen),
           (assign, "$g_train_peasants_against_bandits_training_succeeded", 1),
         (try_end),
         (finish_mission),
         ]),
      ] + custom_commander_commom_triggers + battle_triggers,
    ),
    
  (
    "visit_town_castle",0,-1,
    "You enter the halls of the lord.",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
     (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]), 
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]), #for doors
     (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (8,mtef_visitor_source,af_override_horse,0,1,[]),
     (9,mtef_visitor_source,af_override_horse,0,1,[]),
     (10,mtef_scene_source,af_override_horse,0,1,[]),
     (11,mtef_scene_source,af_override_horse,0,1,[]),
     (12,mtef_visitor_source,af_override_horse,0,1,[]),
     (13,mtef_visitor_source,0,0,1,[]),
     (14,mtef_visitor_source,0,0,1,[]),
     (15,mtef_visitor_source,0,0,1,[]),
     (16,mtef_visitor_source,af_castle_lord,0,1,[]),
     (17,mtef_visitor_source,af_castle_lord,0,1,[]),
     (18,mtef_visitor_source,af_castle_lord,0,1,[]),
     (19,mtef_visitor_source,af_castle_lord,0,1,[]),
     (20,mtef_visitor_source,af_castle_lord,0,1,[]),
     (21,mtef_visitor_source,af_castle_lord,0,1,[]),
     (22,mtef_visitor_source,af_castle_lord,0,1,[]),
     (23,mtef_visitor_source,af_castle_lord,0,1,[]),
     (24,mtef_visitor_source,af_castle_lord,0,1,[]),
     (25,mtef_visitor_source,af_castle_lord,0,1,[]),
     (26,mtef_visitor_source,af_castle_lord,0,1,[]),
     (27,mtef_visitor_source,af_castle_lord,0,1,[]),
     (28,mtef_visitor_source,af_castle_lord,0,1,[]),
     (29,mtef_visitor_source,af_castle_lord,0,1,[]),
     (30,mtef_visitor_source,af_castle_lord,0,1,[]),
     (31,mtef_visitor_source,af_castle_lord,0,1,[])
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        (call_script, "script_init_town_agent", ":agent_no"),
      ]),
      
      (ti_before_mission_start, 0, 0, [],
      [
        (call_script, "script_change_banners_and_chest"),
      ]),
       
      (ti_inventory_key_pressed, 0, 0,
       [
        (try_begin),
            (eq, "$g_player_troop", "trp_player"),
            (set_trigger_result, 1),
        (else_try),
            (display_message, "str_cant_use_inventory_now"),
        (try_end),
         ], []),
      
      #adjust for prison break
      (ti_tab_pressed, 0, 0,
      [
        (neq, "$talk_context", tc_prison_break),
        (set_trigger_result,1)
      ], []),
      
      (ti_on_leave_area, 0, 0,
      [
         (eq, "$talk_context", tc_prison_break),
       ], 
      [
        (display_message, "str_leaving_area_during_prison_break"),
        (set_jump_mission, "mt_sneak_caught_fight"),
      ]),
           
      (0, 0, ti_once, [], [
        #(set_fog_distance, 150, 0xFF736252)
        (try_begin),
          (eq, "$talk_context", tc_court_talk),
          (try_begin),
            (store_faction_of_party, ":center_faction", "$current_town"),
            (faction_slot_eq, ":center_faction", slot_faction_ai_state, sfai_feast),
            (faction_slot_eq, ":center_faction", slot_faction_ai_object, "$current_town"),
            (call_script, "script_music_set_situation_with_culture", mtf_sit_feast),
            #(call_script, "script_music_set_situation_with_culture", mtf_sit_lords_hall),
          (try_end),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", 0), #prison
        (try_end),
        ]),
      ## CC
      (0, 0, 0.5, [(eq,1,0)], [
        (key_is_down, key_right_mouse_button),
        (scene_prop_get_instance, ":player_chest", "spr_player_chest", 0),
        (ge, ":player_chest", 0),
        (prop_instance_get_position, pos1, ":player_chest"),
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos2, ":player_agent"),
        (get_distance_between_positions, ":dist", pos1, pos2),
        (lt, ":dist", 300),
        (start_presentation, "prsnt_deposit_withdraw_money"),
      ]),
      
      (0, 1, ti_once, [(eq,1,0)], [
        (scene_prop_get_instance, ":player_chest", "spr_player_chest", 0),
        (ge, ":player_chest", 0),
        (tutorial_message_set_size, 20, 20),
        (tutorial_message_set_position, 500, 650),
        (tutorial_message_set_center_justify, 0),
        (tutorial_message_set_background, 1),
        (tutorial_message, "@Go near the chest and hold down the right mouse button for a while, then you can deposit or withdraw money from the chest.", 0, 5),
      ]),
      ## CC
    ] + custom_commander_commom_triggers,
  ),
  #("oim_tavern_rich_man_hunt", mtf_battle_mode|mtf_synch_inventory, charge,
  ("oim_tavern_rich_man_hunt", mtf_battle_mode|mtf_synch_inventory, charge,
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (4,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (5,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (6,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (7,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (8,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (9,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (10,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (33,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (34,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (35,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (36,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (37,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (38,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (39,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (48,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (49,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (50,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (51,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (52,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (53,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (54,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (55,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (56,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (57,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (58,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (59,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (60,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (61,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (62,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (63,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (64,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [

      common_inventory_not_available,

      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
        (assign, ":num_guards", 5),
                
        (assign, ":last_nearest_entry_distance", -1),
        (assign, ":last_nearest_entry_point", -1),
        
        (store_faction_of_party, ":party_faction", "$g_encountered_party"), 

        (assign,":rand_2" , "$g_main_attacker_agent"),
        (assign, "$g_main_attacker_agent", -1),
        #(store_random_in_range, ":rand_2", 0, 18),
        (store_random_in_range, ":rand", 0, 100),
        (try_begin), 
          (is_between, ":rand_2", 10, 13), 
          (faction_get_slot, ":castle_troop", ":party_faction",  slot_faction_tier_1_castle_troop),
          (gt, ":castle_troop", 0),
          (assign, "$g_main_attacker_agent", ":castle_troop"),
        (else_try),
          (eq, ":rand_2", 13), 
          (party_get_slot, ":weaponsmith", "$g_encountered_party",  slot_town_weaponsmith),
          (gt, ":weaponsmith", 0),
          (assign, "$g_main_attacker_agent", ":weaponsmith"),
          (assign, ":rand", 30), 
        (else_try),
          (eq, ":rand_2", 14), 
          (party_get_slot, ":armorer", "$g_encountered_party",  slot_town_armorer),
          (gt, ":armorer", 0),
          (assign, "$g_main_attacker_agent", ":armorer"),
          (assign, ":rand", 30), 
        (else_try),
          (eq, ":rand_2", 15), 
          (party_get_slot, ":merchant", "$g_encountered_party",  slot_town_merchant),
          (gt, ":merchant", 0),
          (assign, "$g_main_attacker_agent", ":merchant"),
          (assign, ":rand", 30), 
        (else_try),
          (eq, ":rand_2", 16), 
          (assign, "$g_main_attacker_agent", "trp_assassin"),
        (else_try),
          (eq, ":rand_2", 17), 
          (assign, "$g_main_attacker_agent", "trp_sarranid_assasin_2"),
        (else_try),
          (is_between, ":rand_2", 5, 10), 
          (party_get_slot, ":culture", "$g_encountered_party", slot_center_culture),
          (faction_get_slot, ":town_troop", ":culture",  slot_faction_town_walker_male_troop),
          (gt, ":town_troop", 0),
          (assign, "$g_main_attacker_agent", ":town_troop"),
        (else_try),
          (assign, "$g_main_attacker_agent", "trp_belligerent_drunk"),
        (try_end),   

        (gt, "$g_main_attacker_agent", -1), 
        (store_random_in_range, ":rand_2", 2, 32),
        (add_visitors_to_current_scene, ":rand_2", "$g_main_attacker_agent", 1, 0), 

        (try_begin),
          (eq, "$g_is_quick_battle", -2),
          (entry_point_get_position, pos0, 0), 
        (else_try),  
          (entry_point_get_position, pos0, ":rand_2"), 
        (try_end),

        (try_begin),
          (eq, "$g_is_quick_battle", -2),
          (assign, ":num_guards", 4),
        (try_end),
        
        (try_for_range, ":guard_no", 0, ":num_guards"),
          (assign, ":smallest_dist", 100000),
          (faction_get_slot, ":tier_2_troop", ":party_faction", slot_faction_tier_2_troop),
          (faction_get_slot, ":tier_3_troop", ":party_faction", slot_faction_tier_3_troop),
          (faction_get_slot, ":tier_5_troop", ":party_faction", slot_faction_tier_5_troop),
          (faction_get_slot, ":guard_troop", ":party_faction", slot_faction_castle_guard_troop),
          (try_for_range, ":guard_entry_point", 2, 64),
            (neq, ":rand_2", ":guard_entry_point"),
            (neq, ":last_nearest_entry_point", ":guard_entry_point"),
            (entry_point_get_position, pos1, ":guard_entry_point"), 
            (get_distance_between_positions, ":dist", pos0, pos1),
            (lt, ":dist", ":smallest_dist"),
            (gt, ":dist", ":last_nearest_entry_distance"),
            (assign, ":smallest_dist", ":dist"),
            (assign, ":nearest_entry_point", ":guard_entry_point"),
          (try_end),  
          
          (assign, ":last_nearest_entry_point", ":nearest_entry_point"),
          (assign, ":last_nearest_entry_distance", ":smallest_dist"),
          
          (try_begin),
            (eq, "$g_is_quick_battle", -2),
            (try_begin),
              (this_or_next|eq, ":guard_no", 0),
              (eq, ":guard_no", 2),
              (add_visitors_to_current_scene, ":nearest_entry_point", ":tier_5_troop", 1, 0),
            (else_try),  
              (add_visitors_to_current_scene, ":nearest_entry_point", ":guard_troop", 1, 0),                      
            (try_end),
          (else_try),  
            (le, ":rand", 40), 
            (try_begin),
              (this_or_next|eq, ":guard_no", 0),
              (eq, ":guard_no", 2),
              (add_visitors_to_current_scene, ":nearest_entry_point", ":tier_2_troop", 1, 0),                      
            (else_try),  
              (eq, ":guard_no", 1),
              (add_visitors_to_current_scene, ":nearest_entry_point", ":tier_3_troop", 1, 0),                      
            (else_try),  
              (add_visitors_to_current_scene, ":nearest_entry_point", ":tier_5_troop", 1, 0),                      
            (try_end),
          (try_end),
          
        (try_end),
      ]),

      (1, 0, 0, 
      [
        (gt, "$g_main_attacker_agent", 0),    
      ],
      [
        (store_trigger_param_1, ":agent_no"),
        (assign, ":attacker_agent", -1),    
        (try_for_agents, ":agent_no"),
          (eq, ":attacker_agent", -1),    
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (eq, ":troop_no", "$g_main_attacker_agent"),
          (assign, ":attacker_agent", ":agent_no"), 
          (agent_get_wielded_item, ":wielded_item", ":attacker_agent", 0),
          (assign, "$g_attacker_drawn_weapon", ":wielded_item"),               
        (try_end),
        
      ]),        
       
      (1, 0, 0, [], 
       [
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),
                
        (try_for_agents, ":agent_no"),
          (neq, ":agent_no", ":player_agent"),
          (agent_is_alive, ":agent_no"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (eq, ":agent_team", 1),
          
          (agent_get_position, pos1, ":agent_no"),
        
          (get_distance_between_positions, ":dist", pos0, pos1),
         
          (try_begin),
            (le, ":dist", 800),
            (agent_clear_scripted_mode, ":agent_no"),
          (else_try),  
            (agent_set_scripted_destination, ":agent_no", pos0, 0),
          (try_end),
        (try_end),                            
       ]), 
      (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),
      #(ti_tab_pressed, 0, 0, [],[(question_box,"str_do_you_wish_to_surrender")]),
       
      #(ti_question_answered, 0, 0, [],       [(store_trigger_param_1,":answer"),(eq,":answer",0),(assign, "$g_battle_result", -1),(jump_to_menu,"mnu_oim_rich_visitor_result"),(finish_mission),]),
           
      (5, 1, ti_once, [
         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
         (this_or_next|main_hero_fallen),
         (num_active_teams_le,1),],
       [
           (try_begin),
             (main_hero_fallen),
             (assign, "$g_battle_result", -1),
           (try_end),
           (assign, "$g_is_quick_battle", 0),
           (jump_to_menu, "mnu_oim_rich_visitor_result"),
           (finish_mission,1),
       ]),
       
       
      common_battle_order_panel,
      common_battle_order_panel_tick,

    ] + custom_commander_commom_triggers + battle_triggers,
  ),

  (
    "back_alley_kill_local_merchant",mtf_battle_mode|mtf_synch_inventory,-1,
    "You enter the back alley",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    ],
    [
      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         ]),

      (0, 0, ti_once, [
          (store_mission_timer_a,":cur_time"),
          (ge,":cur_time",1), 
          (assign, ":merchant_hp", 0),
          (assign, ":player_hp", 0),
          (assign, ":merchant_hp", 0),
          (assign, ":merchant_agent", -1),
          (assign, ":player_agent", -1),
          (try_for_agents, ":agent_no"),
            (agent_get_troop_id, ":troop_id", ":agent_no"),
            (try_begin),
              (eq, ":troop_id", "trp_local_merchant"),
              (store_agent_hit_points, ":merchant_hp", ":agent_no"),
              (assign, ":merchant_agent", ":agent_no"),
            (else_try),
              (eq, ":troop_id", "trp_player"),
              (store_agent_hit_points, ":player_hp",":agent_no"),
              (assign, ":player_agent", ":agent_no"),
            (try_end),
          (try_end),
          (ge, ":player_agent", 0),
          (ge, ":merchant_agent", 0),
          (agent_is_alive, ":player_agent"),
          (agent_is_alive, ":merchant_agent"),
          (is_between, ":merchant_hp", 1, 30),
          (gt, ":player_hp", 50),
          (start_mission_conversation, "trp_local_merchant"),
          ], []),
      
      (1, 4, ti_once, [(assign, ":not_alive", 0),
                       (try_begin),
                         (call_script, "script_cf_troop_agent_is_alive", "trp_local_merchant"),
                       (else_try),
                         (assign, ":not_alive", 1),
                       (try_end),
                       (this_or_next|main_hero_fallen),
                       (eq, ":not_alive", 1)],
       [
           (try_begin),
             (main_hero_fallen),
             (call_script, "script_fail_quest", "qst_kill_local_merchant"),
           (else_try),
             (call_script, "script_change_player_relation_with_center", "$current_town", -4),
             (call_script, "script_succeed_quest", "qst_kill_local_merchant"),
           (try_end),
           (finish_mission),
           ]),
    ] + custom_commander_commom_triggers + battle_triggers,
  ),

  (
    "back_alley_revolt",mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",
    [(0,mtef_team_0|mtef_use_exact_number,af_override_horse|af_override_weapons|af_override_head,aif_start_alarmed,4,[itm_quarter_staff]),
     (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      common_inventory_not_available,

      common_battle_init_banner,

      (ti_tab_pressed, 0, 0, [],
       [(question_box,"str_do_you_want_to_retreat"),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (jump_to_menu, "mnu_collect_taxes_failed"),
        (finish_mission),]),

      (ti_tab_pressed, 0, 0, [(display_message,"str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
         ]),

      (1, 4, ti_once, [(this_or_next|main_hero_fallen),(num_active_teams_le,1)],
       [
           (try_begin),
             (main_hero_fallen),
             (jump_to_menu, "mnu_collect_taxes_failed"),
           (else_try),
             (jump_to_menu, "mnu_collect_taxes_rebels_killed"),
           (try_end),
           (finish_mission),
           ]),
    ] + custom_commander_commom_triggers + battle_triggers,
  ),

  (
    "lead_charge",mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",
    [
     (1,mtef_defenders|mtef_team_0,0,aif_start_alarmed,12,[]),
     (0,mtef_defenders|mtef_team_0,0,aif_start_alarmed,0,[]),
     (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,12,[]),
     (4,mtef_attackers|mtef_team_1,0,aif_start_alarmed,0,[]),
     ],
    [
      common_battle_init_banner,
    
      common_battle_tab_press,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (try_begin),
          (store_mission_timer_a, ":elapsed_time"),
          (gt, ":elapsed_time", 20),
          (str_store_string, s5, "str_retreat"),
          (call_script, "script_simulate_retreat", 10, 20, 1),
        (try_end),
        (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_retreat"),  
        (finish_mission,0),]),

      (ti_before_mission_start, 0, 0, [],
       [
         (team_set_relation, 0, 2, 1),
         (team_set_relation, 1, 3, 1),
         (play_sound, "snd_battle_begin"),
         (call_script, "script_place_player_banner_near_inventory_bms"),

         (party_clear, "p_routed_enemies"),

         (assign, "$g_latest_order_1", 1), 
         (assign, "$g_latest_order_2", 1), 
         (assign, "$g_latest_order_3", 1), 
         (assign, "$g_latest_order_4", 1), 
         ]),

      
      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           (assign,"$defender_reinforcement_stage",0),
                           (assign,"$attacker_reinforcement_stage",0),
                           (call_script, "script_place_player_banner_near_inventory"),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ## CC
                           (assign, "$g_defender_reinforcement_limit", "$g_reinforcement_stage"),
                           (get_player_agent_no, ":player_agent"),
                           (agent_get_team, ":player_team", ":player_agent"),
                           (set_show_messages, 0),
                           (team_give_order, ":player_team", grc_everyone, mordr_hold),
                           (team_give_order, ":player_team", grc_infantry, mordr_stand_closer),
                           (team_give_order, ":player_team", grc_infantry, mordr_advance),
                           (team_give_order, ":player_team", grc_cavalry, mordr_follow),
                           (team_give_order, ":player_team", grc_horse_archers, mordr_follow),
                           (team_give_order, ":player_team", grc_spearmen, mordr_charge),
                           (try_begin),
                              (ge, "$g_ally_party", 0), 
                              (team_give_order, "$ai_team_1", grc_everyone, mordr_charge),
                              (team_give_order, "$ai_team_2", grc_everyone, mordr_charge),
                           (try_end),   
                           (set_show_messages, 1),
                           ## CC
                           ]),

      (ti_on_agent_spawn, 0, 0,
      [
         (ge, "$g_ally_party", 0), # if player has joined already started battle
         #(eq, "$freelancer_state", 0),
         (eq, "$attacker_reinforcement_stage", 0), # and there hasn't been any reinforcements yet
         (eq, "$defender_reinforcement_stage", 0),
         (store_mission_timer_a,":mission_time"),
         (lt,":mission_time",10),
      ],
      [
          (store_trigger_param_1, ":agent"),
          (assign, ":agent_to_move", -1),
          (try_begin),
            (agent_is_human, ":agent"),
            (agent_get_party_id, ":a_party", ":agent"),
            (neq, ":a_party", "p_main_party"),
            (agent_is_non_player, ":agent"),
            (assign, ":agent_to_move", ":agent"),
          (else_try), 
            (neg|agent_is_human, ":agent"),
            (agent_get_rider, ":rider", ":agent"),
            (agent_get_party_id, ":r_party", ":rider"),
            (neq, ":r_party", "p_main_party"),
            (agent_is_non_player, ":rider"),
            (assign, ":agent_to_move", ":agent"),
          (try_end),   
          (neq, ":agent_to_move", -1),
          (get_scene_boundaries, pos10, pos11),
          (set_fixed_point_multiplier, 100),
          (position_get_x, "$g_scene_max_x", pos11),
          (position_get_y, "$g_scene_max_y", pos11),
          (val_add, "$g_scene_max_x", 2400), 
          (val_add, "$g_scene_max_y", 2400),
          (store_div, ":pos_x", "$g_scene_max_x", 2),
          (store_div, ":pos_y", "$g_scene_max_x", 2),
          (init_position, pos22), # map center
          (try_begin),
            (agent_is_human, ":agent"),
            (agent_get_ammo, ":ammo", ":agent"),
            (gt, ":ammo", 0),
            (agent_get_position, pos21, ":agent"),
            (position_get_x, ":old_pos_x", pos21),
            (position_get_y, ":old_pos_y", pos21),
            (val_add, ":pos_x", ":old_pos_x"),
            (val_add, ":pos_y", ":old_pos_y"),
            (val_div, ":pos_x", 2),
            (val_div, ":pos_y", 2),
          (try_end),  
          
          
          
          (store_random_in_range, ":x_shift", -3000, 3000),
          (store_random_in_range, ":y_shift", -3000, 3000),
          (val_add, ":pos_x", ":x_shift"),
          (val_add, ":pos_y", ":y_shift"),
          (position_set_x, pos22, ":pos_x"),
          (position_set_y, pos22, ":pos_y"),
          (agent_set_position, ":agent_to_move", pos22),
      ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 0, 5, [
                              
      #new (25.11.09) starts (sdsd = TODO : make a similar code to also helping ally encounters)
      #count all total (not dead) enemy soldiers (in battle area + not currently placed in battle area)
      (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
      (assign, ":total_enemy_soldiers", reg0),
      
      #decrease number of agents already in battle area to find all number of reinforcement enemies
      (assign, ":enemy_soldiers_in_battle_area", 0),
      (try_for_agents,":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_party_id, ":agent_party", ":cur_agent"),
        (try_begin),
          (neq, ":agent_party", "p_main_party"),
          (neg|agent_is_ally, ":cur_agent"),
          (val_add, ":enemy_soldiers_in_battle_area", 1),
        (try_end),
      (try_end),
      (store_sub, ":total_enemy_reinforcements", ":total_enemy_soldiers", ":enemy_soldiers_in_battle_area"),

      (try_begin),
        (lt, ":total_enemy_reinforcements", 15),
        (ge, "$defender_reinforcement_stage", 2),
        (eq, "$defender_reinforcement_limit_increased", 0),
        (val_add, "$g_defender_reinforcement_limit", 1),                    
        (assign, "$defender_reinforcement_limit_increased", 1),
      (try_end),    
      #new (25.11.09) ends
      
      ## CC
      (try_begin),
        (le, ":total_enemy_reinforcements", 50),
        (assign,"$defender_reinforcement_stage",0),
        (assign,"$attacker_reinforcement_stage",0),
      (try_end), 
      ## CC
      
      (lt,"$defender_reinforcement_stage","$g_defender_reinforcement_limit"),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                ## CC
                (assign, ":defenders", 0),
                (assign, ":attackers", 0),
                (try_for_agents, ":agent_no"),
                  (agent_is_human, ":agent_no"),
                  (agent_is_alive, ":agent_no"),          
                  (try_begin),
                    (agent_is_defender, ":agent_no"),
                    (val_add, ":defenders", 1),
                  (else_try),
                    (val_add, ":attackers", 1),
                  (try_end),
                (try_end),
                (store_mul, ":defenders_mul_3", ":defenders", 3),
                (store_normalized_team_count,":num_defenders", 0),
                (this_or_next|lt,":num_defenders",6),
                (lt, ":defenders_mul_3", ":attackers"), # 3 times
                ## CC
                ],
           [(add_reinforcements_to_entry,0,7),(assign, "$defender_reinforcement_limit_increased", 0),(val_add,"$defender_reinforcement_stage",1)]),
      
      (1, 0, 5, [(lt,"$attacker_reinforcement_stage", "$g_reinforcement_stage"), ## CC
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                ## CC
                (assign, ":defenders", 0),
                (assign, ":attackers", 0),
                (try_for_agents, ":agent_no"),
                  (agent_is_human, ":agent_no"),
                  (agent_is_alive, ":agent_no"),          
                  (try_begin),
                    (agent_is_defender, ":agent_no"),
                    (val_add, ":defenders", 1),
                  (else_try),
                    (val_add, ":attackers", 1),
                  (try_end),
                (try_end),
                (store_mul, ":attackers_mul_3", ":attackers", 3),
                (store_normalized_team_count,":num_attackers", 1),
                (this_or_next|lt,":num_attackers",6),
                (lt, ":attackers_mul_3", ":defenders"),  # 3 times
                ## CC
              ],
           [(add_reinforcements_to_entry,3,7),(val_add,"$attacker_reinforcement_stage",1)]),

      common_battle_check_victory_condition,
      common_battle_victory_display,

      (1, 4, 0, [(main_hero_fallen)], #PBOD was 1, 4, ti_once
          [
              (assign, "$pin_player_fallen", 1),           
            (try_begin),
              (party_slot_eq, "p_main_party", slot_party_pref_bc_continue, 1), #PBOD Battle Continuation Active
              (assign, ":num_allies", 0),
              (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
              (try_end),
              (gt, ":num_allies", 0),
              (try_begin),
                  (neq, "$cam_free", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  (assign, "$cam_free", 1),
                  (assign, "$cam_mode", 2),
                  (call_script, "script_cust_cam_cycle_forwards"), #So, on Follow, it doesn't begin with the player's dead body
                  (mission_cam_set_mode, 1),
                  (party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active
                  (set_show_messages, 0),
                  (team_give_order, "$fplayer_team_no", grc_everyone, mordr_charge),
                  (team_set_order_listener, "$fplayer_team_no", grc_everyone),
                  (call_script, "script_player_order_formations", mordr_charge),
                  (set_show_messages, 1),
              (try_end),
            (else_try),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
        (play_sound,"snd_loss_battle"),  
            (try_end),]),

      common_battle_inventory,


      #AI Triggers
      (0, 0, ti_once, [(neg|party_slot_eq, "p_main_party", slot_party_pref_formations, 1), ## PBOD - Formations AI NOT active
          (store_mission_timer_a,":mission_time"),(ge,":mission_time",2),
          ],
       [(call_script, "script_select_battle_tactic"),
        (call_script, "script_battle_tactic_init"),
        (call_script, "script_cf_get_double_wings_position"), ## CC
        #(call_script, "script_battle_calculate_initial_powers"), #deciding run away method changed and that line is erased
        ]),
      

      (5, 0, 0, [(neg|party_slot_eq, "p_main_party", slot_party_pref_formations, 1), ## PBOD - Formations AI NOT active
          (store_mission_timer_a,":mission_time"),

          (ge,":mission_time",3),
          
          (call_script, "script_battle_tactic_apply"),
          ], []), #applying battle tactic

      common_battle_order_panel,
      common_battle_order_panel_tick,
      #horse_archer_skirmish,
      ## CC
      custom_commander_check_player_can_join_battle,
      ## CC
    ]  + common_pbod_triggers  + prebattle_orders_triggers + prebattle_deployment_triggers + battle_triggers + caba_order_triggers + field_ai_triggers + custom_camera_triggers + custom_commander_commom_triggers + common_courage_triggers,
  ),

  (
    "lead_charge_for_bandit_lair",mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",
    [
     (0,mtef_attackers|mtef_team_0,af_override_horse,aif_start_alarmed,12,[]),
     (1,mtef_defenders|mtef_team_1,af_override_horse,aif_start_alarmed,2,[]),
     (2,mtef_defenders|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (3,mtef_defenders|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (4,mtef_defenders|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (5,mtef_defenders|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (6,mtef_defenders|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (7,mtef_defenders|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (8,mtef_defenders|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (9,mtef_defenders|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (10,mtef_defenders|mtef_team_1,af_override_horse,aif_start_alarmed,2,[]),
     ],
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_multiplayer_remove_destroy_mod_targets"),]),
    
    
      common_battle_init_banner,
    
      common_battle_tab_press,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (try_begin),
          (store_mission_timer_a, ":elapsed_time"),
          (gt, ":elapsed_time", 20),
          (str_store_string, s5, "str_retreat"),
          (call_script, "script_simulate_retreat", 10, 20, 1),
        (try_end),
        (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_retreat"),  
        (finish_mission,0),]),

      (ti_before_mission_start, 0, 0, [],
       [
         (team_set_relation, 0, 2, 1),
         (team_set_relation, 1, 3, 1),
         (play_sound, "snd_battle_begin"),
         (call_script, "script_place_player_banner_near_inventory_bms"),

         (party_clear, "p_routed_enemies"),

         (assign, "$g_latest_order_1", 1), 
         (assign, "$g_latest_order_2", 1), 
         (assign, "$g_latest_order_3", 1), 
         (assign, "$g_latest_order_4", 1), 
         ]),

      
      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           (assign,"$defender_reinforcement_stage",0),
                           (assign,"$attacker_reinforcement_stage",0),
                           (call_script, "script_place_player_banner_near_inventory"),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ## CC
                           (assign, "$g_defender_reinforcement_limit", "$g_reinforcement_stage"),
                           ## CC
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 0, 5, [
                              
      #new (25.11.09) starts (sdsd = TODO : make a similar code to also helping ally encounters)
      #count all total (not dead) enemy soldiers (in battle area + not currently placed in battle area)
      (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
      (assign, ":total_enemy_soldiers", reg0),
      
      #decrease number of agents already in battle area to find all number of reinforcement enemies
      (assign, ":enemy_soldiers_in_battle_area", 0),
      (try_for_agents,":cur_agent"),
        (agent_is_human, ":cur_agent"),
        (agent_get_party_id, ":agent_party", ":cur_agent"),
        (try_begin),
          (neq, ":agent_party", "p_main_party"),
          (neg|agent_is_ally, ":cur_agent"),
          (val_add, ":enemy_soldiers_in_battle_area", 1),
        (try_end),
      (try_end),
      (store_sub, ":total_enemy_reinforcements", ":total_enemy_soldiers", ":enemy_soldiers_in_battle_area"),

      (try_begin),
        (lt, ":total_enemy_reinforcements", 15),
        (ge, "$defender_reinforcement_stage", 2),
        (eq, "$defender_reinforcement_limit_increased", 0),
        (val_add, "$g_defender_reinforcement_limit", 1),                    
        (assign, "$defender_reinforcement_limit_increased", 1),
      (try_end),    
      #new (25.11.09) ends
      
      ## CC
      (try_begin),
        (le, ":total_enemy_reinforcements", 50),
        (assign,"$defender_reinforcement_stage",0),
        (assign,"$attacker_reinforcement_stage",0),
      (try_end), 
      ## CC
      
      (lt,"$defender_reinforcement_stage","$g_defender_reinforcement_limit"),
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                ## CC
                (assign, ":defenders", 0),
                (assign, ":attackers", 0),
                (try_for_agents, ":agent_no"),
                  (agent_is_human, ":agent_no"),
                  (agent_is_alive, ":agent_no"),          
                  (try_begin),
                    (agent_is_defender, ":agent_no"),
                    (val_add, ":defenders", 1),
                  (else_try),
                    (val_add, ":attackers", 1),
                  (try_end),
                (try_end),
                (store_mul, ":defenders_mul_3", ":defenders", 3),
                (store_normalized_team_count,":num_defenders", 0),
                (this_or_next|lt,":num_defenders",6),
                (lt, ":defenders_mul_3", ":attackers"), # 3 times
                ## CC
                ],
           [(add_reinforcements_to_entry,0,7),(assign, "$defender_reinforcement_limit_increased", 0),(val_add,"$defender_reinforcement_stage",1)]),
      
      (1, 0, 5, [(lt,"$attacker_reinforcement_stage", "$g_reinforcement_stage"), ## CC
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                ## CC
                (assign, ":defenders", 0),
                (assign, ":attackers", 0),
                (try_for_agents, ":agent_no"),
                  (agent_is_human, ":agent_no"),
                  (agent_is_alive, ":agent_no"),          
                  (try_begin),
                    (agent_is_defender, ":agent_no"),
                    (val_add, ":defenders", 1),
                  (else_try),
                    (val_add, ":attackers", 1),
                  (try_end),
                (try_end),
                (store_mul, ":attackers_mul_3", ":attackers", 3),
                (store_normalized_team_count,":num_attackers", 1),
                (this_or_next|lt,":num_attackers",6),
                (lt, ":attackers_mul_3", ":defenders"),  # 3 times
                ## CC
              ],
           [
            #(store_random_in_range, ":random_entry_point", 1, 11),
            #(add_reinforcements_to_entry,":random_entry_point",7),
            (try_for_range, ":unused", 0, 7),        
              (store_random_in_range, ":random_entry_point", 1, 11),
              (add_reinforcements_to_entry,":random_entry_point",1),
            (try_end),
            (val_add,"$attacker_reinforcement_stage",1)
           ]),


      common_battle_check_victory_condition,
      common_battle_victory_display,

      (1, 4, 0, [(main_hero_fallen)], #PBOD was 1, 4, ti_once
          [
              (assign, "$pin_player_fallen", 1),           
            (try_begin),
              (party_slot_eq, "p_main_party", slot_party_pref_bc_continue, 1), #PBOD Battle Continuation Active
              (assign, ":num_allies", 0),
              (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
              (try_end),
              (gt, ":num_allies", 0),
              (try_begin),
                  (neq, "$cam_free", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  (assign, "$cam_free", 1),
                  (assign, "$cam_mode", 2),
                  (call_script, "script_cust_cam_cycle_forwards"), #So, on Follow, it doesn't begin with the player's dead body
                  (mission_cam_set_mode, 1),
                  (party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active
                  (set_show_messages, 0),
                  (team_give_order, "$fplayer_team_no", grc_everyone, mordr_charge),
                  (team_set_order_listener, "$fplayer_team_no", grc_everyone),
                  (call_script, "script_player_order_formations", mordr_charge),
                  (set_show_messages, 1),
              (try_end),
            (else_try),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
              (finish_mission,0),
        (play_sound,"snd_loss_battle"),  
            (try_end),]),

      common_battle_inventory,


      #AI Triggers
      (0, 0, ti_once, [(neg|party_slot_eq, "p_main_party", slot_party_pref_formations, 1), ## PBOD - Formations AI NOT active
          (store_mission_timer_a,":mission_time"),(ge,":mission_time",2),
          ],
       [(call_script, "script_select_battle_tactic"),
        (call_script, "script_battle_tactic_init"),
        (call_script, "script_cf_get_double_wings_position"), ## CC
        #(call_script, "script_battle_calculate_initial_powers"), #deciding run away method changed and that line is erased
        ]),
      

      (5, 0, 0, [(neg|party_slot_eq, "p_main_party", slot_party_pref_formations, 1), ## PBOD - Formations AI NOT active
          (store_mission_timer_a,":mission_time"),

          (ge,":mission_time",3),
          
          (call_script, "script_battle_tactic_apply"),
          ], []), #applying battle tactic

      common_battle_order_panel,
      common_battle_order_panel_tick,
      #horse_archer_skirmish,
      ## CC
      custom_commander_check_player_can_join_battle,
      ## CC
    ]  + common_pbod_triggers  + prebattle_orders_triggers + prebattle_deployment_triggers + battle_triggers + caba_order_triggers + field_ai_triggers + custom_camera_triggers + custom_commander_commom_triggers + common_courage_triggers,
  ),

  (
    "village_attack_bandits",mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",
    [
     (3,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     (1,mtef_team_0|mtef_use_exact_number,0,aif_start_alarmed, 7,[]),
     (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_tab_press,
      common_battle_init_banner,

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 10, 20, 1),
        (assign, "$g_battle_result", -1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_retreat"),  
        (finish_mission,0),]),

      (0, 0, ti_once, [], [(assign, "$g_battle_won", 0),
                           (assign, "$defender_reinforcement_stage", 0),
                           (assign, "$attacker_reinforcement_stage", 0),
                           (try_begin),
                             (eq, "$g_mt_mode", vba_after_training),
                             (add_reinforcements_to_entry, 1, 6),
                           (else_try),
                             (add_reinforcements_to_entry, 1, 29),
                           (try_end),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ## CC
                           (get_player_agent_no, ":player_agent"),
                           (agent_get_team, ":player_team", ":player_agent"),
                           (set_show_messages, 0),
                           (team_give_order, ":player_team", grc_everyone, mordr_hold),
                           (team_give_order, ":player_team", grc_infantry, mordr_stand_closer),
                           (team_give_order, ":player_team", grc_infantry, mordr_advance),
                           (team_give_order, ":player_team", grc_cavalry, mordr_follow),
                           (team_give_order, ":player_team", grc_horse_archers, mordr_follow),
                           (team_give_order, ":player_team", grc_spearmen, mordr_charge),
                           (set_show_messages, 1),
                           ## CC
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,

      (1, 4, 0, [(main_hero_fallen)], ##PBOD  was ti_once
          [
              (assign, "$pin_player_fallen", 1),           
            ##PBOD - Battle Continuation
            (try_begin),
              (party_slot_eq, "p_main_party", slot_party_pref_bc_continue, 1), #PBOD Battle Continuation Active
              (assign, ":num_allies", 0),
              (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
              (try_end),
              (gt, ":num_allies", 0),
              (try_begin),
                  (neq, "$cam_free", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  (assign, "$cam_free", 1),
                  (assign, "$cam_mode", 2),
                  (call_script, "script_cust_cam_cycle_forwards"), #So, on Follow, it doesn't begin with the player's dead body
                  (mission_cam_set_mode, 1),
                  (party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active
                  (set_show_messages, 0),
                  (team_give_order, "$fplayer_team_no", grc_everyone, mordr_charge),
                  (set_show_messages, 1),
              (try_end),
            (else_try),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result, -1),
              (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_loss_battle"),  
              (finish_mission, 0),
            (try_end),]),

      common_battle_inventory,      
      common_battle_order_panel,
      common_battle_order_panel_tick,
      
      ## CC
      custom_commander_check_player_can_join_battle,
      ## CC
    ]  + common_pbod_triggers + prebattle_orders_triggers + prebattle_deployment_triggers + caba_order_triggers + field_ai_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers + common_courage_triggers,
  ),



  (
    "village_raid",mtf_battle_mode|mtf_synch_inventory,charge,
    "You lead your men to battle.",
    [
     (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,12,[]),
     (3,mtef_defenders|mtef_team_0,0,aif_start_alarmed,0,[]),
     (1,mtef_attackers|mtef_team_1,0,aif_start_alarmed,12,[]),
     (1,mtef_attackers|mtef_team_1,0,aif_start_alarmed,0,[]),
     ],
    [
      common_battle_tab_press,
      common_battle_init_banner,

## CC
     # (ti_on_agent_killed_or_wounded, 0, 0, [],
     #  [
     #   (store_trigger_param_1, ":dead_agent_no"),
     #   (store_trigger_param_2, ":killer_agent_no"),
     #   (store_trigger_param_3, ":is_wounded"),

     #   (try_begin),
     #     (ge, ":dead_agent_no", 0),
     #     (neg|agent_is_ally, ":dead_agent_no"),
     #     (agent_is_human, ":dead_agent_no"),
     #     (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
     #     (str_store_troop_name, s6, ":dead_agent_troop_id"),
     #     (assign, reg0, ":dead_agent_no"),
     #     (assign, reg1, ":killer_agent_no"),
     #     (assign, reg2, ":is_wounded"),
     #     (agent_get_team, reg3, ":dead_agent_no"),          
     #     #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"), 
     #     (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
     #     (eq, ":is_wounded", 1),
     #     (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
     #   (try_end),
     #  ]),
      ## CC
      
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 10, 20, 1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_retreat"),  
        (finish_mission,0),]),

      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           (assign,"$defender_reinforcement_stage",0),
                           (assign,"$attacker_reinforcement_stage",0),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ## CC
                           (get_player_agent_no, ":player_agent"),
                           (agent_get_team, ":player_team", ":player_agent"),
                           (set_show_messages, 0),
                           (team_give_order, ":player_team", grc_everyone, mordr_hold),
                           (team_give_order, ":player_team", grc_infantry, mordr_stand_closer),
                           (team_give_order, ":player_team", grc_infantry, mordr_advance),
                           (team_give_order, ":player_team", grc_cavalry, mordr_follow),
                           (team_give_order, ":player_team", grc_horse_archers, mordr_follow),
                           (team_give_order, ":player_team", grc_spearmen, mordr_charge),
                           (set_show_messages, 1),
                           ## CC
                           ]),

      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 0, 5, [(lt,"$defender_reinforcement_stage","$g_reinforcement_stage"), ## CC
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_defenders", 0),
                 (lt,":num_defenders",6)],
           [(add_reinforcements_to_entry,0,6),(val_add,"$defender_reinforcement_stage",1)]),
      (1, 0, 5, [(lt,"$attacker_reinforcement_stage", "$g_reinforcement_stage"), ## CC
                 (store_mission_timer_a,":mission_time"),
                 (ge,":mission_time",10),
                 (store_normalized_team_count,":num_attackers", 1),
                 (lt,":num_attackers",6)],
           [(add_reinforcements_to_entry,3,6),(val_add,"$attacker_reinforcement_stage",1)]),

      (1, 60, ti_once,
       [
         (store_mission_timer_a,reg(1)),
         (ge,reg(1),10),
         (all_enemies_defeated, 5),
         (neg|main_hero_fallen, 0),
         (set_mission_result,1),
    ## CC
    #(display_message,"str_msg_battle_won"),
    (call_script, "script_tutorial_message_set_format", 17, 17, 400, 650, 0, 1),
    (tutorial_message, "str_msg_battle_won", 0, 5),
    (play_sound,"snd_win_battle"),  
    ## CC
         (assign,"$g_battle_won",1),
         (assign, "$g_battle_result", 1),
         (try_begin),
           (eq, "$g_village_raid_evil", 0),
           (call_script, "script_play_victorious_sound"),
         (else_try),
           (play_track, "track_victorious_evil", 1),
         (try_end),
         ],
       [
         (call_script, "script_count_mission_casualties_from_agents"),
         (finish_mission, 1),
         ]),

      common_battle_victory_display,

      (1, 4, 0, [(main_hero_fallen)], #PBOD was ti_once
          [
              (assign, "$pin_player_fallen", 1),          
          ##PBOD - Battle Continuation
            (try_begin),
              (party_slot_eq, "p_main_party", slot_party_pref_bc_continue, 1), #PBOD Battle Continuation Active
              (assign, ":num_allies", 0),
              (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
              (try_end),
              (gt, ":num_allies", 0),
              (try_begin),
                  (neq, "$cam_free", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  (assign, "$cam_free", 1),
                  (assign, "$cam_mode", 2),
                  (call_script, "script_cust_cam_cycle_forwards"), #So, on Follow, it doesn't begin with the player's dead body
                  (mission_cam_set_mode, 1),
                  (party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active
                  (set_show_messages, 0),
                  (team_give_order, "$fplayer_team_no", grc_everyone, mordr_charge),
                  (set_show_messages, 1),
              (try_end),
            (else_try),
            ##PBOD - Battle Continuation    
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 10, 20, 1),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_loss_battle"),  
              (finish_mission,0),
            (try_end)]),

      common_battle_inventory,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      
      custom_commander_check_player_can_join_battle, ## CC
      ## CC
##      #AI Tiggers
##      (0, 0, ti_once, [
##          (store_mission_timer_a,reg(1)),(ge,reg(1),4),
##          (call_script, "script_select_battle_tactic"),
##          (call_script, "script_battle_tactic_init"),
##          ], []),
##      (1, 0, 0, [
##          (store_mission_timer_a,reg(1)),(ge,reg(1),4),
##          (call_script, "script_battle_tactic_apply"),
##          ], []),
    ]  + common_pbod_triggers  + prebattle_orders_triggers + prebattle_deployment_triggers + caba_order_triggers + field_ai_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers + common_courage_triggers,
  ),



##  (
##    "charge_with_allies",mtf_battle_mode|mtf_synch_inventory,charge_with_ally,
##    "Taking a handful of fighters with you, you set off to patrol the area.",
##    [
##     (1,mtef_defenders,0,0|aif_start_alarmed,8,[]),
##     (0,mtef_defenders,0,0|aif_start_alarmed,0,[]),
##     (4,mtef_attackers,0,aif_start_alarmed,8,[]),
##     (4,mtef_attackers,0,aif_start_alarmed,0,[]),
##     ],
##    [
##      (ti_tab_pressed, 0, 0, [],
##       [
##           (try_begin),
##             (eq, "$battle_won", 1),
##             (finish_mission,0),
##           (else_try),
##             (call_script, "script_cf_check_enemies_nearby"),
##             (question_box,"str_do_you_want_to_retreat"),
##           (else_try),
##             (display_message,"str_can_not_retreat"),
##           (try_end),
##        ]),
##      (ti_question_answered, 0, 0, [],
##       [(store_trigger_param_1,":answer"),
##        (eq,":answer",0),
##        (assign, "$pin_player_fallen", 0),
##        (str_store_string, s5, "str_retreat"),
##        (call_script, "script_simulate_retreat", 10, 30),
##        (finish_mission,0),]),
##
##      (0, 0, ti_once, [], [(assign,"$battle_won",0),(assign,"$defender_reinforcement_stage",0),(assign,"$attacker_reinforcement_stage",0)]),
##      (1, 0, 5, [(lt,"$defender_reinforcement_stage",2),(store_mission_timer_a,reg(1)),(ge,reg(1),10),(store_defender_count,reg(2)),(lt,reg(2),3)],
##           [(add_reinforcements_to_entry,0,4),(val_add,"$defender_reinforcement_stage",1)]),
##      (1, 0, 5, [(lt,"$attacker_reinforcement_stage",2),(store_mission_timer_a,reg(1)),(ge,reg(1),10),(store_attacker_count,reg(2)),(lt,reg(2),3)],
##           [(add_reinforcements_to_entry,3,4),(val_add,"$attacker_reinforcement_stage",1)]),
##      (1, 60, ti_once, [(store_mission_timer_a,reg(1)),
##                        (ge,reg(1),10),(all_enemies_defeated,2),
##                        (neg|main_hero_fallen,0),
##                        (set_mission_result,1),
##                        (assign, "$g_battle_result", 1),
##                        (display_message,"str_msg_battle_won"),
##                        (assign,"$battle_won",1)],
##           [(finish_mission,1)]),
##      (10, 0, 0, [], [(eq,"$battle_won",1),(display_message,"str_msg_battle_won")]),
##
##      (1, 4, ti_once, [(main_hero_fallen)],
##          [
##              (assign, "$pin_player_fallen", 1),
##              (str_store_string, s5, "str_retreat"),
##              (call_script, "script_simulate_retreat", 20, 30),
##              (assign, "$g_battle_result", -1),
##              (set_mission_result,-1),(finish_mission,0)]),
##      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_use_baggage_for_inventory")], []),
##    ],
##  ),

##  (
##    "charge_with_allies_old",mtf_battle_mode|mtf_synch_inventory,charge_with_ally,
##    "Taking a handful of fighters with you, you set off to patrol the area.",
##    [(1,mtef_leader_only,0,0,1,[]),
##     (1,mtef_no_leader,0,0|aif_start_alarmed,2,[]),
##     (1,mtef_reverse_order|mtef_ally_party,0,0|aif_start_alarmed,3,[]),
##     (0,mtef_no_leader,0,0|aif_start_alarmed,0,[]),
##     (0,mtef_reverse_order|mtef_ally_party,0,0|aif_start_alarmed,0,[]),
##     (3,mtef_reverse_order|mtef_enemy_party,0,aif_start_alarmed,6,[]),
##     (4,mtef_reverse_order|mtef_enemy_party,0,aif_start_alarmed,0,[])],
##    [
##      (ti_tab_pressed, 0, 0, [],
##       [
##           (try_begin),
##             (eq, "$battle_won", 1),
##             (finish_mission,0),
##           (else_try),
##             (call_script, "script_cf_check_enemies_nearby"),
##             (question_box,"str_do_you_want_to_retreat"),
##           (else_try),
##             (display_message,"str_can_not_retreat"),
##           (try_end),
##        ]),
##      (ti_question_answered, 0, 0, [],
##       [(store_trigger_param_1,":answer"),(eq,":answer",0),(finish_mission,0),]),
##
##      (0, 0, ti_once, [], [(assign,"$battle_won",0),(assign,"$enemy_reinforcement_stage",0),(assign,"$friend_reinforcement_stage",0),(assign,"$ally_reinforcement_stage",0)]),
##      
##      (1, 0, 5, [(lt,"$enemy_reinforcement_stage",2),(store_mission_timer_a,reg(1)),(ge,reg(1),10),(store_enemy_count,reg(2)),(lt,reg(2),3)],
##       [(add_reinforcements_to_entry,6,3),(val_add,"$enemy_reinforcement_stage",1)]),
##      (1, 0, 5, [(lt,"$friend_reinforcement_stage",2),(store_mission_timer_a,reg(1)),(ge,reg(1),10),(store_friend_count,reg(2)),(lt,reg(2),2)],
##       [(add_reinforcements_to_entry,3,1),(val_add,"$friend_reinforcement_stage",1)]),
##      (1, 0, 5, [(lt,"$ally_reinforcement_stage",2),(store_mission_timer_a,reg(1)),(ge,reg(1),10),(store_ally_count,reg(2)),  (lt,reg(2),2)],
##       [(add_reinforcements_to_entry,4,2),(val_add,"$ally_reinforcement_stage",1)]),
##      (1, 60, ti_once, [(store_mission_timer_a,reg(1)),
##                        (ge,reg(1),10),
##                        (all_enemies_defeated,2),
##                        (neg|main_hero_fallen,0),
##                        (set_mission_result,1),
##                        (assign, "$g_battle_result", 1),
##                        (display_message,"str_msg_battle_won"),
##                        (assign,"$battle_won",1),
##                        ],
##       [(finish_mission,1)]),
##      (10, 0, 0, [], [(eq,"$battle_won",1),(display_message,"str_msg_battle_won")]),
##      (1, 4, ti_once, [(main_hero_fallen,0)],
##       [(set_mission_result,-1),(finish_mission,1)]),
##      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_use_baggage_for_inventory")], []),
##    ],
##  ),
##  (
##    "lead_charge_old",mtf_battle_mode|mtf_synch_inventory,charge,
##    "You lead your men to battle.",
##    [
##     (1,mtef_leader_only,0,0,1,[]),
##     (1,mtef_no_leader,0,0|aif_start_alarmed,5,[]),
##     (0,mtef_no_leader,0,0|aif_start_alarmed,0,[]),
##     (3,mtef_enemy_party|mtef_reverse_order,0,aif_start_alarmed,6,[]),
##     (4,mtef_enemy_party|mtef_reverse_order,0,aif_start_alarmed,0,[]),
##     ],
##    [
##      (ti_tab_pressed, 0, 0, [],
##       [
##           (try_begin),
##             (eq, "$battle_won", 1),
##             (finish_mission,0),
##           (else_try),
##             (call_script, "script_cf_check_enemies_nearby"),
##             (question_box,"str_do_you_want_to_retreat"),
##           (else_try),
##             (display_message,"str_can_not_retreat"),
##           (try_end),
##        ]),
##      (ti_question_answered, 0, 0, [],
##       [(store_trigger_param_1,":answer"),(eq,":answer",0),(finish_mission,0),]),
##
##      (0, 0, ti_once, [], [(assign,"$battle_won",0),(assign,"$enemy_reinforcement_stage",0),(assign,"$friend_reinforcement_stage",0)]),
##      (1, 0, 5, [(lt,"$enemy_reinforcement_stage",2),(store_mission_timer_a,reg(1)),(ge,reg(1),10),(store_enemy_count,reg(2)),(lt,reg(2),3)],
##           [(add_reinforcements_to_entry,4,3),(val_add,"$enemy_reinforcement_stage",1)]),
##      (1, 0, 5, [(lt,"$friend_reinforcement_stage",2),(store_mission_timer_a,reg(1)),(ge,reg(1),10),(store_friend_count,reg(2)),(lt,reg(2),3)],
##           [(add_reinforcements_to_entry,2,3),(val_add,"$friend_reinforcement_stage",1)]),
##      (1, 60, ti_once, [(store_mission_timer_a,reg(1)),
##                        (ge,reg(1),10),(all_enemies_defeated,2),
##                        (neg|main_hero_fallen,0),
##                        (set_mission_result,1),
##                        (assign, "$g_battle_result", 1),
##                        (display_message,"str_msg_battle_won"),
##                        (assign,"$battle_won",1)],
##           [(finish_mission,1)]),
##      (10, 0, 0, [], [(eq,"$battle_won",1),(display_message,"str_msg_battle_won")]),
##      (1, 4, ti_once, [(main_hero_fallen)],
##          [
##              (assign, "$g_battle_result", -1),
##              (set_mission_result,-1),(finish_mission,1)]),
##      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_use_baggage_for_inventory")], []),
##    ],
##  ),



  (
    "besiege_inner_battle_castle",mtf_battle_mode|mtf_synch_inventory,-1,
    "You attack the walls of the castle...",
    [
     (0, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (6, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (7, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (16, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (17, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (18, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (19, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     (20, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      common_battle_tab_press,
      common_battle_init_banner,
      common_battle_mission_start, #freelancer chief
      #freelancer_siege_triggers, #freelancer chief
      
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 5, 20, 0),
        (assign, "$g_battle_result", -1),
        (set_mission_result,-1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_retreat"),  
        (finish_mission,0),
        ]),
        
      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
                           ]),
      
      #AI Tiggers
      (0, 0, ti_once, [
          (assign, "$defender_team", 0),
          (assign, "$attacker_team", 1),
          (assign, "$defender_team_2", 2),
          (assign, "$attacker_team_2", 3),
          ], []),

      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,


      (1, 4, 0, [(main_hero_fallen)], #PBOD was ti_once
          [
              (assign, "$pin_player_fallen", 1),             
            (try_begin),
              (party_slot_eq, "p_main_party", slot_party_pref_bc_continue, 1), #PBOD Battle Continuation Active
              (assign, ":num_allies", 0),
              (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
              (try_end),
              (gt, ":num_allies", 0),
              (try_begin),
                  (neq, "$cam_free", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  (assign, "$cam_free", 1),
                  (assign, "$cam_mode", 2),
                  (call_script, "script_cust_cam_cycle_forwards"), #So, on Follow, it doesn't begin with the player's dead body
                  (mission_cam_set_mode, 1),
                  (party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active
                  (set_show_messages, 0),
                  (team_give_order, "$fplayer_team_no", grc_everyone, mordr_charge),
                  (set_show_messages, 1),
              (try_end),
            (else_try),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 5, 20, 0),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_loss_battle"),  
              (finish_mission,0),
            (try_end)
              ]),
      
      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_battle_inventory,
      
      custom_commander_check_player_can_join_battle_dismounted, ## CC
    ]  + common_pbod_triggers + prebattle_orders_triggers + prebattle_deployment_triggers + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers + common_courage_triggers, ## CC
  ),

  (
    "besiege_inner_battle_town_center",mtf_battle_mode|mtf_synch_inventory,-1,
    "You attack the walls of the castle...",
    [
     ## CC
     (0, mtef_attackers|mtef_use_exact_number|mtef_team_1,af_override_horse,aif_start_alarmed,30,[]),
     (2, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (23, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (24, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (25, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (26, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (27, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     (28, mtef_defenders|mtef_use_exact_number|mtef_team_0,af_override_horse,aif_start_alarmed,6,[]),
     ## CC
     ],
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      common_battle_tab_press,
      common_battle_init_banner,
      common_battle_mission_start, #+Freelancer chief
      #freelancer_siege_triggers, #freelancer chief

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 5, 20, 0),
        (assign, "$g_battle_result", -1),
        (set_mission_result,-1),
        (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_retreat"),  
        (finish_mission,0),
        ]),
        
      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           ##diplomacy begin
                           ##diplomacy end         
                           (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),                          
                           ]),
      
      #AI Tiggers
      (0, 0, ti_once, [
          (assign, "$defender_team", 0),
          (assign, "$attacker_team", 1),
          (assign, "$defender_team_2", 2),
          (assign, "$attacker_team_2", 3),
          ], []),


      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,

      (1, 4, 0, [(main_hero_fallen)], #PBOD was ti_once
          [
              (assign, "$pin_player_fallen", 1),          
            (try_begin),
              (party_slot_eq, "p_main_party", slot_party_pref_bc_continue, 1), #PBOD Battle Continuation Active
              (assign, ":num_allies", 0),
              (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
              (try_end),
              (gt, ":num_allies", 0),
              (try_begin),
                  (neq, "$cam_free", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  (assign, "$cam_free", 1),
                  (assign, "$cam_mode", 2),
                  (call_script, "script_cust_cam_cycle_forwards"), #So, on Follow, it doesn't begin with the player's dead body
                  (mission_cam_set_mode, 1),
                  (party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active
                  (set_show_messages, 0),
                  (team_give_order, "$fplayer_team_no", grc_everyone, mordr_charge),
                  (set_show_messages, 1),
              (try_end),
            (else_try),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 5, 20, 0),
              (assign, "$g_battle_result", -1),
              (set_mission_result,-1),
              (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_loss_battle"),  
              (finish_mission,0),
            (try_end)
              ]),

      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_battle_inventory,
      
      custom_commander_check_player_can_join_battle_dismounted, ## CC
    ]   + common_pbod_triggers + prebattle_orders_triggers + prebattle_deployment_triggers + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers + common_courage_triggers, ## CC
  ),

  (
    "castle_attack_walls_defenders_sally",mtf_battle_mode|mtf_synch_inventory,-1,
    "You attack the walls of the castle...",
    [
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,12,[]),
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),
     (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,12,[]),
     (3,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
     ],
    [
      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_agent_reassign_team", ":agent_no"),
         ]),
      
      (ti_before_mission_start, 0, 0, [],
       [
         (team_set_relation, 0, 2, 1),
         (team_set_relation, 1, 3, 1),
         (call_script, "script_change_banners_and_chest"),
         (call_script, "script_remove_siege_objects"),
         (play_sound, "snd_battle_begin"),
         ]),



      common_battle_tab_press,
      common_battle_init_banner,

     # (ti_on_agent_killed_or_wounded, 0, 0, [],
     #  [
     #   (store_trigger_param_1, ":dead_agent_no"),
     #   (store_trigger_param_2, ":killer_agent_no"),
     #   (store_trigger_param_3, ":is_wounded"),

     #   (try_begin),
     #     (ge, ":dead_agent_no", 0),
     #     (neg|agent_is_ally, ":dead_agent_no"),
     #     (agent_is_human, ":dead_agent_no"),
     #     (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
     #     (str_store_troop_name, s6, ":dead_agent_troop_id"),
     #     (assign, reg0, ":dead_agent_no"),
     #     (assign, reg1, ":killer_agent_no"),
     #     (assign, reg2, ":is_wounded"),
     #     (agent_get_team, reg3, ":dead_agent_no"),          
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"), 
     #     (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
     #     (eq, ":is_wounded", 1),
     #     (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
     #   (try_end),
     #  ]),

      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (assign, "$pin_player_fallen", 0),
        (str_store_string, s5, "str_retreat"),
        (call_script, "script_simulate_retreat", 5, 20, 0),
        (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_retreat"),  
        (finish_mission,0),]),
        
      (0, 0, ti_once, [], [(assign,"$g_battle_won",0),
                           (call_script, "script_combat_music_set_situation_with_culture"),
                           ]),
      
      common_music_situation_update,
      common_battle_check_friendly_kills,

      (1, 60, ti_once, [(store_mission_timer_a, reg(1)),
                        (ge, reg(1), 10),
                        (all_enemies_defeated, 2),
                        (neg|main_hero_fallen,0),
                        (set_mission_result,1),
    ## CC
    #(display_message,"str_msg_battle_won"),
    (call_script, "script_tutorial_message_set_format", 17, 17, 400, 650, 0, 1),
    (tutorial_message, "str_msg_battle_won", 0, 5),
    (play_sound,"snd_win_battle"),  
    ## CC
                        (assign, "$g_battle_won", 1),
                        (assign, "$g_battle_result", 1),
                        (assign, "$g_siege_sallied_out_once", 1),
                        (assign, "$g_siege_method", 1), #reset siege timer
                        (call_script, "script_play_victorious_sound"),
                        ],
           [(call_script, "script_count_mission_casualties_from_agents"),
            (finish_mission,1)]),

      common_battle_victory_display,

      (1, 4, 0, [(main_hero_fallen)], #was ti_once
          [
              (assign, "$pin_player_fallen", 1),
            (try_begin),
              (party_slot_eq, "p_main_party", slot_party_pref_bc_continue, 1), #PBOD Battle Continuation Active
              (assign, ":num_allies", 0),
              (try_for_agents, ":agent"),
                 (agent_is_ally, ":agent"),
                 (agent_is_alive, ":agent"),
                 (val_add, ":num_allies", 1),
              (try_end),
              (gt, ":num_allies", 0),
              (try_begin),
                  (neq, "$cam_free", 1),
                  (display_message, "@You have been knocked out by the enemy. Watch your men continue the fight without you or press Tab to retreat."),
                  (assign, "$cam_free", 1),
                  (assign, "$cam_mode", 2),
                  (call_script, "script_cust_cam_cycle_forwards"), #So, on Follow, it doesn't begin with the player's dead body
                  (mission_cam_set_mode, 1),
                  (party_slot_eq, "p_main_party", slot_party_pref_bc_charge_ko, 1), #PBOD "Charge on KO" Active
                  (set_show_messages, 0),
                  (team_give_order, "$fplayer_team_no", grc_everyone, mordr_charge),
                  (set_show_messages, 1),
              (try_end),
            (else_try),
              (str_store_string, s5, "str_retreat"),
              (call_script, "script_simulate_retreat", 5, 20, 0),
              (assign, "$g_battle_result", -1),
              (set_mission_result, -1),
              (call_script, "script_count_mission_casualties_from_agents"),
        (play_sound,"snd_loss_battle"),  
              (finish_mission,0),
            (try_end)]),

      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_battle_inventory,
      
      custom_commander_check_player_can_join_battle_dismounted, ## CC
    ]  + common_pbod_triggers + prebattle_orders_triggers + prebattle_deployment_triggers + caba_order_triggers + field_ai_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers + common_courage_triggers, ## CC
  ),


  (
    "castle_attack_walls_belfry",mtf_battle_mode|mtf_synch_inventory,-1,
    "You attack the walls of the castle...",
    [
     ## CC
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,18,[]),
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),
     (10,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
     (11,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,4,[]),
     (15,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),

     (40,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (41,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (42,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (43,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (44,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (45,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (46,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (47,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     ## CC
     ],
    [
      common_battle_mission_start,
      common_battle_tab_press,
      common_battle_init_banner,
      common_siege_question_answered,
      common_siege_init,
      common_music_situation_update,
      common_siege_ai_trigger_init,
      common_siege_ai_trigger_init_2,

     # freelancer_siege_triggers, #freelancer chief
      (0, 0, ti_once,
       [
         (set_show_messages, 0),
         (team_give_order, "$attacker_team", grc_everyone, mordr_spread_out),
         (team_give_order, "$attacker_team", grc_everyone, mordr_spread_out),
         (team_give_order, "$attacker_team", grc_everyone, mordr_spread_out),
         (set_show_messages, 1),
         ], []),
      
      ## CC
      # spawn player's chest, when player is the defender
      (0, 0, ti_once, [], 
        [
          (get_player_agent_no, ":player_agent"),
          (agent_get_team, ":player_team", ":player_agent"),
          (this_or_next|eq, ":player_team", "$defender_team"),
          (eq, ":player_team", "$defender_team_2"),
          (entry_point_get_position, pos1, 15),
          (position_set_z_to_ground_level, pos1),
          (set_spawn_position, pos1),
          (spawn_scene_prop, "spr_inventory", 0),
        ]),
      ## CC
      
      
     # (ti_on_agent_killed_or_wounded, 0, 0, [],
     #  [
     #   (store_trigger_param_1, ":dead_agent_no"),
     #   (store_trigger_param_2, ":killer_agent_no"),
     #   (store_trigger_param_3, ":is_wounded"),

     #   (try_begin),
     #     (ge, ":dead_agent_no", 0),
     #     (neg|agent_is_ally, ":dead_agent_no"),
     #     (agent_is_human, ":dead_agent_no"),
     #     (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
     #     (str_store_troop_name, s6, ":dead_agent_troop_id"),
     #     (assign, reg0, ":dead_agent_no"),
     #     (assign, reg1, ":killer_agent_no"),
     #     (assign, reg2, ":is_wounded"),
     #     (agent_get_team, reg3, ":dead_agent_no"),          
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"), 
     #     (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
     #     (eq, ":is_wounded", 1),
     #     (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
     #   (try_end),
     #  ]),

      common_siege_ai_trigger_init_after_2_secs,
      common_siege_defender_reinforcement_check,
      common_siege_defender_reinforcement_archer_reposition,
      common_siege_attacker_reinforcement_check,
      common_siege_attacker_do_not_stall,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,
      common_siege_refill_ammo,
      common_siege_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_inventory_not_available,
      common_siege_init_ai_and_belfry,
      common_siege_move_belfry,
      common_siege_rotate_belfry,
      common_siege_assign_men_to_belfry,
      
      ## CC
      custom_commander_check_player_can_join_battle_dismounted,
    ]  + common_pbod_triggers + prebattle_orders_triggers + prebattle_deployment_triggers + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers + common_courage_triggers,
  ),

  (
    "castle_attack_walls_ladder",mtf_battle_mode|mtf_synch_inventory,-1,
    "You attack the walls of the castle...",
    [
     ## CC
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,18,[]),
     (0,mtef_attackers|mtef_team_1,af_override_horse,aif_start_alarmed,0,[]),
     (10,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),
     (11,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,4,[]),
     (15,mtef_defenders|mtef_team_0,af_override_horse,aif_start_alarmed,0,[]),

     (40,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (41,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (42,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (43,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (44,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (45,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     (46,mtef_defenders|mtef_team_0|mtef_archers_first|mtef_use_exact_number,af_override_horse,aif_start_alarmed,6,[]),
     ## CC
     ],
    [
      common_battle_mission_start,
      common_battle_tab_press,
      common_battle_init_banner,
      common_siege_question_answered,
      common_siege_init,
      common_music_situation_update,
      common_siege_ai_trigger_init,
      common_siege_ai_trigger_init_2,
      common_siege_ai_trigger_init_after_2_secs,
      common_siege_defender_reinforcement_check,
      common_siege_defender_reinforcement_archer_reposition,
      common_siege_attacker_reinforcement_check,
      common_siege_attacker_do_not_stall,
      common_battle_check_friendly_kills,
      common_battle_check_victory_condition,
      common_battle_victory_display,
      common_siege_refill_ammo,
      common_siege_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      common_inventory_not_available,
      #freelancer_siege_triggers, #freelancer chief
      ## CC
      custom_commander_check_player_can_join_battle_dismounted,
      ## CC
      ## CC
      # spawn player's chest, when player is the defender
      (0, 0, ti_once, [], 
        [
          (get_player_agent_no, ":player_agent"),
          (agent_get_team, ":player_team", ":player_agent"),
          (this_or_next|eq, ":player_team", "$defender_team"),
          (eq, ":player_team", "$defender_team_2"),
          (entry_point_get_position, pos1, 15),
          (position_set_z_to_ground_level, pos1),
          (set_spawn_position, pos1),
          (spawn_scene_prop, "spr_inventory", 0),
        ]),
      ## CC
     # (ti_on_agent_killed_or_wounded, 0, 0, [],
     #  [
     #   (store_trigger_param_1, ":dead_agent_no"),
     #   (store_trigger_param_2, ":killer_agent_no"),
     #   (store_trigger_param_3, ":is_wounded"),

     #   (try_begin),
     #     (ge, ":dead_agent_no", 0),
     #     (neg|agent_is_ally, ":dead_agent_no"),
     #     (agent_is_human, ":dead_agent_no"),
     #     (agent_get_troop_id, ":dead_agent_troop_id", ":dead_agent_no"),
     #     (str_store_troop_name, s6, ":dead_agent_troop_id"),
     #     (assign, reg0, ":dead_agent_no"),
     #     (assign, reg1, ":killer_agent_no"),
     #     (assign, reg2, ":is_wounded"),
     #     (agent_get_team, reg3, ":dead_agent_no"),          
          #(display_message, "@{!}dead agent no : {reg0} ; killer agent no : {reg1} ; is_wounded : {reg2} ; dead agent team : {reg3} ; {s6} is added"), 
     #     (party_add_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), #addition_to_p_total_enemy_casualties
     #     (eq, ":is_wounded", 1),
     #     (party_wound_members, "p_total_enemy_casualties", ":dead_agent_troop_id", 1), 
     #   (try_end),
     #  ]),


##      (15, 0, 0,
##       [
##         (get_player_agent_no, ":player_agent"),
##         (agent_get_team, ":agent_team", ":player_agent"),
##         (neq, "$attacker_team", ":agent_team"),
##         (assign, ":non_ranged", 0),
##         (assign, ":ranged", 0),
##         (assign, ":ranged_pos_x", 0),
##         (assign, ":ranged_pos_y", 0),
##         (set_fixed_point_multiplier, 100),
##         (try_for_agents, ":agent_no"),
##           (eq, ":non_ranged", 0),
##           (agent_is_human, ":agent_no"),
##           (agent_is_alive, ":agent_no"),
##           (neg|agent_is_defender, ":agent_no"),
##           (agent_get_class, ":agent_class", ":agent_no"),
##           (try_begin),
##             (neq, ":agent_class", grc_archers),
##             (val_add, ":non_ranged", 1),
##           (else_try),
##             (val_add, ":ranged", 1),
##             (agent_get_position, pos0, ":agent_no"),
##             (position_get_x, ":pos_x", pos0),
##             (position_get_y, ":pos_y", pos0),
##             (val_add, ":ranged_pos_x", ":pos_x"),
##             (val_add, ":ranged_pos_y", ":pos_y"),
##           (try_end),
##         (try_end),
##         (try_begin),
##           (eq, ":non_ranged", 0),
##           (gt, ":ranged", 0),
##           (val_div, ":ranged_pos_x", ":ranged"),
##           (val_div, ":ranged_pos_y", ":ranged"),
##           (entry_point_get_position, pos0, 10),
##           (init_position, pos1),
##           (position_set_x, pos1, ":ranged_pos_x"),
##           (position_set_y, pos1, ":ranged_pos_y"),
##           (position_get_z, ":pos_z", pos0),
##           (position_set_z, pos1, ":pos_z"),
##           (get_distance_between_positions, ":dist", pos0, pos1),
##           (gt, ":dist", 1000), #average position of archers is more than 10 meters far from entry point 10
##           (team_give_order, "$attacker_team", grc_archers, mordr_hold),
##           (team_set_order_position, "$attacker_team", grc_archers, pos0),
##         (else_try),
##           (team_give_order, "$attacker_team", grc_everyone, mordr_charge),
##         (try_end),
##         ],
##       []),
    ]  + common_pbod_triggers + prebattle_orders_triggers + prebattle_deployment_triggers + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers + common_courage_triggers,
  ),
  

  (
    "castle_visit",0,-1,
    "Castle visit",
    [(0,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons|af_override_head,0,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (2,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (3,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise), 
     (4,mtef_scene_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise), #for doors
     (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,pilgrim_disguise),
     (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(10,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(11,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (12,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(13,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(14,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(15,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (16,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(17,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(18,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(19,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (20,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(21,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(22,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(23,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (24,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(25,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(26,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(27,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (28,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(29,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(30,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(31,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (32,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(33,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(34,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(35,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (36,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(37,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(38,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),(39,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     # Party members
     (40,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (41,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (42,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (43,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (44,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (45,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     (46,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
     ],
    [    
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        (call_script, "script_init_town_agent", ":agent_no"),
        (get_player_agent_no, ":player_agent"),
        (try_begin),
          (neq, ":player_agent", ":agent_no"),
          (agent_set_team, ":agent_no", 7),
        (try_end),
        
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (troop_get_slot, ":will_join_prison_break", ":troop_no", slot_troop_will_join_prison_break),
          (eq, ":will_join_prison_break", 1),
          ## CC
          (get_player_agent_no, ":player_agent"),
          (agent_get_team, ":player_team", ":player_agent"),
          (agent_set_team, ":agent_no", ":player_team"),
          ## CC
          (agent_ai_set_aggressiveness, ":agent_no", 5),
          (troop_set_slot, ":troop_no", slot_troop_will_join_prison_break, 0),

          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_mission_participation, mp_prison_break_stand_back),
            (agent_get_position, pos1, ":agent_no"),                        
            (agent_set_scripted_destination, ":agent_no", pos1),
          (try_end),
        (try_end),
      ]),
      
      (ti_on_agent_killed_or_wounded, 0, 0, [],
      [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        #(store_trigger_param_3, ":is_wounded"),
        
        (agent_get_troop_id, ":dead_agent_troop_no", ":dead_agent_no"),
        (agent_get_troop_id, ":killer_agent_troop_no", ":killer_agent_no"),
        (store_faction_of_party, ":faction", "$current_town"),
        (try_begin), 
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_france_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_polish_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_khergit_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_england_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_italian_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_sarranid_prison_guard"),

       #(this_or_next|eq, ":dead_agent_troop_no", "trp_german_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_vaegir_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_janissary_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_nord_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_iberian_prison_guard"),
       #(this_or_next|eq, ":dead_agent_troop_no", "trp_marinid_prison_guard"),
       #(eq, ":dead_agent_troop_no", "trp_teu_prison_guard"),
          (faction_slot_eq, ":faction", slot_faction_prison_guard_troop, ":dead_agent_troop_no"),
          (eq, ":killer_agent_troop_no", "trp_player"),
          
          (display_message, "@You got keys of dungeon."),
        (try_end),
      ]),     

      #JAILBREAK TRIGGERS 
      #Civilians get out of the way
      (1, 0, 0,
      [
        (this_or_next|eq, "$talk_context", tc_prison_break),
        (eq, "$talk_context", tc_escape),
      ],
      [
        #(agent_get_team, ":prisoner_agent", 0),
        (call_script, "script_neutral_behavior_in_fight"),
        (mission_disable_talk),
      ]),
      
      #The game begins with the town alerted
      (1, 0, ti_once,
      [
        #If I set this to 1, 0, ti_once, then the prisoner spawns twice
        (eq, "$talk_context", tc_escape),
      ],
      [
        (get_player_agent_no, ":player_agent"),
        (assign, reg6, ":player_agent"),
        (call_script, "script_activate_town_guard"),        
        
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos4, ":player_agent"),
        
        (try_for_range, ":prisoner", active_npcs_begin, kingdom_ladies_end),
          (troop_slot_ge, ":prisoner", slot_troop_mission_participation, 1),
          
          (str_store_troop_name, s4, ":prisoner"),
          (display_message, "str_s4_joins_prison_break"),
          
          (store_current_scene, ":cur_scene"), #this might be a better option?
          (modify_visitors_at_site, ":cur_scene"),
          #<entry_no>,<troop_id>,<number_of_troops>, <team_no>, <group_no>), 
          #team no and group no are used in multiplayer mode only. default team in entry is used in single player mode
          (store_current_scene, ":cur_scene"),
          (modify_visitors_at_site, ":cur_scene"),
          (assign, ":nearest_entry_no", 24),
          (add_visitors_to_current_scene, ":nearest_entry_no", ":prisoner", 1, 0, 0),
          (troop_set_slot, ":prisoner", slot_troop_will_join_prison_break, 1),          
        (try_end),
      ]),

      (ti_tab_pressed, 0, 0,
      [
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (display_message, "str_cannot_leave_now"),
        (else_try),
          (this_or_next|eq, "$g_mt_mode", tcm_default),
          (eq, "$g_mt_mode", tcm_disguised),
          (set_trigger_result, 1),
          (mission_enable_talk),
        (else_try),
          (display_message, "str_cannot_leave_now"),
        (try_end),
      ], 
      []),
            
      (ti_before_mission_start, 0, 0, [], 
      [
        (call_script, "script_change_banners_and_chest"),
        (call_script, "script_remove_siege_objects"),
        (play_sound, "snd_battle_begin"),
      ]),
      
      (3, 0, 0, 
      [     
        (main_hero_fallen, 0),
      ],      
      [
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_prison_break),
          (eq, "$talk_context", tc_escape),
       
          (call_script, "script_deduct_casualties_from_garrison"),
          (jump_to_menu,"mnu_captivity_start_castle_defeat"), 
     
          (assign, ":end_cond", kingdom_ladies_end),
          (try_for_range, ":prisoner", active_npcs_begin, ":end_cond"),
              (troop_set_slot, ":prisoner", slot_troop_mission_participation, 0), #new      
            (try_end),  
     
          (mission_enable_talk),
          (finish_mission, 0),
        (else_try),  
          (mission_enable_talk),
          (finish_mission, 0),
          (set_trigger_result, 1),
        (try_end),          
      ]),
      
      (3, 0, 0, 
      [
        (eq, "$talk_context", tc_escape),
        (neg|main_hero_fallen,0),
        (store_mission_timer_a, ":time"),
        (ge, ":time", 10),      
        (all_enemies_defeated), #1 is default enemy team for in-town battles
      ],
      [
        (call_script, "script_deduct_casualties_from_garrison"),
        (try_for_agents, ":agent"),
          (agent_get_troop_id, ":troop", ":agent"),
          (troop_slot_ge, ":troop", slot_troop_mission_participation, mp_prison_break_fight),
          (try_begin),
            (agent_is_alive, ":agent"),
            (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_escaped),
          (else_try),
            (troop_set_slot, ":troop", slot_troop_mission_participation, mp_prison_break_caught),
          (try_end),
        (try_end),
        (jump_to_menu, "mnu_sneak_into_town_caught_ran_away"),
        (mission_enable_talk),
        (finish_mission, 0),
      ]),
      ## CC
      common_battle_order_panel,
      common_battle_order_panel_tick,
      
      ## CC
    ]  + common_pbod_triggers + bodyguard_triggers + caba_order_triggers + custom_camera_triggers + custom_commander_commom_triggers + battle_triggers ,
  ),


  (
    "training_ground_trainer_talk", 0, -1,
    "Training.",
    [
      (0,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (1,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (2,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (3,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (4,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (5,mtef_scene_source|mtef_team_0,af_override_horse|af_override_weapons,0,1,[]),
      (6,mtef_scene_source|mtef_team_0,0,0,1,[]),
    ],
    [
      (ti_before_mission_start, 0, 0, [],
       [
         (call_script, "script_change_banners_and_chest"),
         ]),
      (ti_inventory_key_pressed, 0, 0,
       [
        (try_begin),
            (eq, "$g_player_troop", "trp_player"),
            (set_trigger_result, 1),
        (else_try),
            (display_message, "str_cant_use_inventory_now"),
        (try_end),
         ], []),
      (ti_tab_pressed, 0, 0,
       [
         (set_trigger_result,1),
         ], []),
     (0.0, 1.0, 2.0,
      [(lt, "$trainer_help_message", 2),
        ],
      [(try_begin),
         (eq, "$trainer_help_message", 0),
#         (tutorial_box, "str_trainer_help_1", "@Tutorial"),
       (else_try),
#         (tutorial_box, "str_trainer_help_2", "@Tutorial"),
       (try_end),
       (val_add, "$trainer_help_message", 1),
          ]),
      
    ],
  ),

  (
    "training_ground_trainer_training",mtf_arena_fight,-1,
    "You will fight a match in the arena.",
    [
      (16, mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_practice_shield,itm_practice_sword,itm_practice_boots]),
      (17, mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff,itm_practice_boots]),
      (18, mtef_visitor_source|mtef_team_2,af_override_everything,aif_start_alarmed,1,[itm_practice_staff,itm_practice_boots]),
      (19, mtef_visitor_source|mtef_team_3,af_override_everything,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_boots]),
      (20, mtef_visitor_source,0,0,1,[]),
    ],
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),
      
      common_arena_fight_tab_press,
      
      (ti_question_answered, 0, 0, [],
       [
         (store_trigger_param_1, ":answer"),
         (eq, ":answer", 0),
         (set_jump_mission, "mt_training_ground_trainer_talk"),
         (modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
         (reset_visitors),
         (set_jump_entry, 5),
         (jump_to_scene, "$g_training_ground_melee_training_scene"),
         ]),
      (1, 3, ti_once, [(main_hero_fallen,0)],
       [
         (set_jump_mission, "mt_training_ground_trainer_talk"),
         (modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
         (reset_visitors),
         (set_jump_entry, 5),
         (jump_to_scene, "$g_training_ground_melee_training_scene"),
         ]),
      (1, 3, ti_once,
       [
         (store_mission_timer_a, reg1),
         (ge, reg1, 1),
         (num_active_teams_le, 1),
         (neg|main_hero_fallen),
         (assign, "$training_fight_won", 1),
         ],
       [
         (set_jump_mission, "mt_training_ground_trainer_talk"),
         (modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
         (reset_visitors),
         (set_jump_entry, 5),
         (jump_to_scene, "$g_training_ground_melee_training_scene"),
         ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_arena")], []),
    ] + custom_commander_commom_triggers + battle_triggers,
  ),


  (
    "training_ground_training", mtf_arena_fight, -1,
    "Training.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (1,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (2,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (3,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (4,mtef_visitor_source|mtef_team_1,af_override_everything,aif_start_alarmed,1,[itm_practice_staff]),
      (8,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (9,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (10,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (11,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (12,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (13,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (14,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
      (15,mtef_visitor_source,af_override_weapons|af_override_horse|af_override_head,0,1,[]),
    ],
    [
      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_last_destroyed_gourds", 0),
         (call_script, "script_change_banners_and_chest")]),
      
      common_arena_fight_tab_press,
      
      (ti_question_answered, 0, 0, [],
       [
         (store_trigger_param_1,":answer"),
         (eq,":answer",0),
         (assign, "$g_training_ground_training_success_ratio", 0),
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),
      
      common_inventory_not_available,

      (0, 0, ti_once,
       [
         (try_begin),
           (eq, "$g_mt_mode", ctm_ranged),
           (set_fixed_point_multiplier, 100),
           (entry_point_get_position, pos1, 0),
           (init_position, pos2),
           (position_set_y, pos2, "$g_training_ground_ranged_distance"),
           (position_transform_position_to_parent, pos3, pos1, pos2),
           (copy_position, pos1, pos3),
           (assign, ":end_cond", 10),
           (assign, ":shift_value", 0),
           (try_for_range, ":cur_i", 0, ":end_cond"),
             (store_sub, ":cur_instance", ":cur_i", ":shift_value"),
             (scene_prop_get_instance, ":target_object", "spr_gourd", ":cur_instance"),
             (copy_position, pos2, pos1),
             (init_position, pos0),
             (store_random_in_range, ":random_no", 0, 360),
             (position_rotate_z, pos2, ":random_no"),
             (store_random_in_range, ":random_no", 50, 600),
             (position_move_x, pos2, ":random_no"),
             (store_random_in_range, ":random_no", 0, 360),
             (position_transform_position_to_local, pos3, pos1, pos2),
             (position_rotate_z, pos0, ":random_no"),
             (position_transform_position_to_parent, pos4, pos0, pos3),
             (position_transform_position_to_parent, pos2, pos1, pos4),
             (position_set_z_to_ground_level, pos2),
             (position_move_z, pos2, 150),
             (assign, ":valid", 1),
             (try_for_range, ":cur_instance_2", 0, 10),
               (eq, ":valid", 1),
               (neq, ":cur_instance", ":cur_instance_2"),
               (scene_prop_get_instance, ":target_object_2", "spr_gourd", ":cur_instance_2"),
               (prop_instance_get_position, pos3, ":target_object_2"),
               (get_distance_between_positions, ":dist", pos2, pos3),
               (lt, ":dist", 100),
               (assign, ":valid", 0),
             (try_end),
             (try_begin),
               (eq, ":valid", 0),
               (val_add, ":end_cond", 1),
               (val_add, ":shift_value", 1),
             (else_try),
               (prop_instance_set_position, ":target_object", pos2),
               (prop_instance_animate_to_position, ":target_object", pos2, 1),
               (scene_prop_get_instance, ":target_object_2", "spr_gourd_spike", ":cur_instance"),
               (position_move_z, pos2, -150), #moving back to ground level
               (prop_instance_set_position, ":target_object_2", pos2),
               (prop_instance_animate_to_position, ":target_object_2", pos2, 1),
             (try_end),
           (try_end),
         (else_try),
           (eq, "$g_mt_mode", ctm_mounted),
           (assign, ":num_gourds", 0),
           #First, placing gourds on the spikes
           (try_for_range, ":cur_i", 0, 100),
             (scene_prop_get_instance, ":target_object", "spr_gourd", ":cur_i"),
             (scene_prop_get_instance, ":target_object_2", "spr_gourd_spike", ":cur_i"),
             (ge, ":target_object", 0),
             (ge, ":target_object_2", 0),
             (val_add, ":num_gourds", 1),
             (prop_instance_get_position, pos0, ":target_object_2"),
             (position_move_z, pos0, 150),
             (prop_instance_set_position, ":target_object", pos0),
             (prop_instance_animate_to_position, ":target_object", pos0, 1),
           (try_end),
           (store_sub, ":end_cond", ":num_gourds", "$g_training_ground_training_num_gourds_to_destroy"),
           #Second, removing gourds and their spikes randomly
           (try_for_range, ":cur_i", 0, ":end_cond"),
             (store_random_in_range, ":random_instance", 0, ":num_gourds"),
             (scene_prop_get_instance, ":target_object", "spr_gourd", ":random_instance"),
             (prop_instance_get_position, pos0, ":target_object"),
             (position_get_z, ":pos_z", pos0),
             (try_begin),
               (lt, ":pos_z", -50000),
#               (val_add, ":end_cond", 1), #removed already, try again
             (else_try),
               (position_set_z, pos0, -100000),
               (prop_instance_set_position, ":target_object", pos0),
               (prop_instance_animate_to_position, ":target_object", pos0, 1),
               (scene_prop_get_instance, ":target_object_2", "spr_gourd_spike", ":random_instance"),
               (prop_instance_set_position, ":target_object_2", pos0),
               (prop_instance_animate_to_position, ":target_object_2", pos0, 1),
             (try_end),
           (try_end),
         (try_end),
         ],
       []),

      (1, 3, ti_once,
       [
         (eq, "$g_mt_mode", ctm_melee),
         (this_or_next|main_hero_fallen),
         (num_active_teams_le, 1)
         ],
       [
         (try_begin),
           (neg|main_hero_fallen),
           (assign, "$g_training_ground_training_success_ratio", 100),
         (else_try),
           (assign, ":alive_enemies", 0),
           (try_for_agents, ":agent_no"),
             (agent_is_alive, ":agent_no"),
             (agent_is_human, ":agent_no"),
             (agent_get_team, ":team_no", ":agent_no"),
             (eq, ":team_no", 1),
             (val_add, ":alive_enemies", 1),
           (try_end),
           (store_sub, ":dead_enemies", "$g_training_ground_training_num_enemies", ":alive_enemies"),
           (store_mul, "$g_training_ground_training_success_ratio", ":dead_enemies", 100),
           (val_div, "$g_training_ground_training_success_ratio", "$g_training_ground_training_num_enemies"),
         (try_end),
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),

      (1, 3, ti_once,
       [
         (eq, "$g_mt_mode", ctm_ranged),
         (get_player_agent_no, ":player_agent"),
         (agent_get_ammo, ":ammo", ":player_agent"),
         (store_mission_timer_a, ":cur_seconds"),
         (this_or_next|main_hero_fallen),
         (this_or_next|eq, ":ammo", 0),
         (gt, ":cur_seconds", 116), 
         ],
       [
         (store_mul, "$g_training_ground_training_success_ratio", "$scene_num_total_gourds_destroyed", 10),
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),

      (1, 3, ti_once,
       [
         (eq, "$g_mt_mode", ctm_mounted),
         (get_player_agent_no, ":player_agent"),
         (agent_get_horse, ":player_horse", ":player_agent"),
         (store_mission_timer_a, ":cur_seconds"),
         (this_or_next|lt, ":player_horse", 0),
         (this_or_next|main_hero_fallen),
         (this_or_next|ge, "$scene_num_total_gourds_destroyed", "$g_training_ground_training_num_gourds_to_destroy"),
         (gt, ":cur_seconds", 120),
         ],
       [
         (store_mul, "$g_training_ground_training_success_ratio", "$scene_num_total_gourds_destroyed", 100),
         (val_div, "$g_training_ground_training_success_ratio", "$g_training_ground_training_num_gourds_to_destroy"),
         (jump_to_menu, "mnu_training_ground_training_result"),
         (finish_mission),
         ]),

      (0, 0, 0,
       [
         (gt, "$g_last_destroyed_gourds", 0),
         (try_begin),
           (eq, "$g_mt_mode", ctm_ranged),
           (entry_point_get_position, pos1, 0),
           (position_move_y, pos1, 100, 0),
           (get_player_agent_no, ":player_agent"),
           (agent_get_position, pos2, ":player_agent"),
           (try_begin),
             (position_is_behind_position, pos2, pos1),
             (val_add, "$scene_num_total_gourds_destroyed", "$g_last_destroyed_gourds"),
           (else_try),
             (display_message, "@You must stay behind the line on the ground! Point is not counted."),
           (try_end),
         (else_try),
           (val_add, "$scene_num_total_gourds_destroyed", "$g_last_destroyed_gourds"),
         (try_end),
         (assign, "$g_last_destroyed_gourds", 0),
         ],
       []),
    ] + custom_commander_commom_triggers,
  ),

  (
    "sneak_caught_fight",mtf_battle_mode,-1,
    "You must fight your way out!",
    [
     (0,mtef_scene_source|mtef_team_0,af_override_all,aif_start_alarmed,1,pilgrim_disguise),
     (1,mtef_scene_source|mtef_team_0,af_override_all,aif_start_alarmed,1,pilgrim_disguise),
     (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (4,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (5,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (6,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (7,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (8,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (9,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (10,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (33,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (34,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (35,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (36,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (37,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (38,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (39,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (48,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (49,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (50,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (51,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (52,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (53,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (54,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (55,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (56,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (57,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (58,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (59,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (60,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (61,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (62,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (63,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     (64,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     
     # (0,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,pilgrim_disguise),
     # (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     # (32,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    ],
    [    
      (ti_before_mission_start, 0, 0, [], 
      [
        (call_script, "script_change_banners_and_chest"),
      ]),
      
      (ti_after_mission_start, 0, 0, [],
       [
        (assign, ":num_guards", 5),
        
        (try_begin),
          (party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),                          
          (store_current_hours, ":cur_time"),
          (store_add, ":fire_finish_time", ":last_nearby_fire_time", 4),                          
          (is_between, ":cur_time", ":fire_finish_time", ":last_nearby_fire_time"),
          (assign, ":num_guards", 4),
        (else_try),  
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),

          (assign, ":num_guards", 12),
        (try_end),
        
        (try_begin),
          (this_or_next|eq, "$talk_context", tc_escape),
          (eq, "$talk_context", tc_prison_break),
          (entry_point_get_position, pos0, 7), 
        (else_try),          
          (party_slot_eq, "$current_town", slot_party_type, spt_town),
          (entry_point_get_position, pos0, 0), 
        (else_try),  
          (entry_point_get_position, pos0, 1), 
        (try_end),
                        
        (assign, ":last_nearest_entry_distance", -1),
        (assign, ":last_nearest_entry_point", -1),
        (try_for_range, ":guard_no", 0, ":num_guards"),
          (assign, ":smallest_dist", 100000),
          (try_for_range, ":guard_entry_point", 2, 64),
            (neq, ":last_nearest_entry_point", ":guard_entry_point"),
            (entry_point_get_position, pos1, ":guard_entry_point"), 
            (get_distance_between_positions, ":dist", pos0, pos1),
            (lt, ":dist", ":smallest_dist"),
            (gt, ":dist", ":last_nearest_entry_distance"),
            (assign, ":smallest_dist", ":dist"),
            (assign, ":nearest_entry_point", ":guard_entry_point"),
          (try_end),  
          
          (store_faction_of_party, ":town_faction","$current_town"),
          
          
          (try_begin),
            (this_or_next|eq, "$talk_context", tc_escape),
            (eq, "$talk_context", tc_prison_break),
            (this_or_next|eq, ":guard_no", 0),
            (eq, ":guard_no", 2),
            (faction_get_slot, ":troop_of_guard", ":town_faction", slot_faction_tier_5_troop),
          (else_try),  
            (this_or_next|eq, ":guard_no", 0),
            (eq, ":guard_no", 2),
            (faction_get_slot, ":troop_of_guard", ":town_faction", slot_faction_tier_3_troop),
          (else_try),  
            (this_or_next|eq, "$talk_context", tc_escape),
            (eq, "$talk_context", tc_prison_break),
            (faction_get_slot, ":troop_of_guard", ":town_faction", slot_faction_tier_3_troop),
          (else_try),  
            (faction_get_slot, ":troop_of_guard", ":town_faction", slot_faction_tier_2_troop),
          (try_end),
          
          (assign, ":last_nearest_entry_point", ":nearest_entry_point"),
          (assign, ":last_nearest_entry_distance", ":smallest_dist"),
                    
          (add_visitors_to_current_scene, ":nearest_entry_point", ":troop_of_guard", 1, 0),                      
        (try_end),
      ]),
      
      (ti_tab_pressed, 0, 0, [],
       [(question_box,"str_do_you_wish_to_surrender")]),
       
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),(eq,":answer",0),(jump_to_menu,"mnu_captivity_start_castle_defeat"),(finish_mission,0),]),
      
      (1, 0, ti_once, [],
       [
         (play_sound,"snd_sneak_town_halt"),
         (call_script, "script_music_set_situation_with_culture", mtf_sit_fight),
         ]),
         
      (0, 3, 0,
       [
          (main_hero_fallen,0),
        ],
       [
         (jump_to_menu,"mnu_captivity_start_castle_defeat"),
         (finish_mission,0),
       ]),
       
      (1, 0, 0, [], 
       [
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),
                
        (try_for_agents, ":agent_no"),
          (neq, ":agent_no", ":player_agent"),
          (agent_is_alive, ":agent_no"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (eq, ":agent_team", 1),
          
          (agent_get_position, pos1, ":agent_no"),
        
          (get_distance_between_positions, ":dist", pos0, pos1),
         
          (try_begin),
            (le, ":dist", 800),
            (agent_clear_scripted_mode, ":agent_no"),
          (else_try),  
            (agent_set_scripted_destination, ":agent_no", pos0, 0),
          (try_end),
        (try_end),                            
       ]), 

       (5, 1, ti_once, 
       [
         (num_active_teams_le,1),
         (neg|main_hero_fallen),

         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
       ],
       [
         (assign,"$auto_menu",-1),
         (jump_to_menu,"mnu_sneak_into_town_caught_dispersed_guards"),
         (finish_mission,1),
       ]),
       
       (ti_on_leave_area, 0, ti_once, [],
       [(assign,"$auto_menu",-1),(jump_to_menu,"mnu_sneak_into_town_caught_ran_away"),(finish_mission,0)]),

      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_arena")], []),
      ## CC
      common_battle_order_panel,
      common_battle_order_panel_tick,
      
      ## CC
    ] + custom_commander_commom_triggers + battle_triggers,
  ),

   (
    "ai_training",0,-1,
    "You start training.",
    [
#     (0,0,af_override_horse,aif_start_alarmed,1,[]),
     (0,0,0,aif_start_alarmed,30,[]),
#     (1,mtef_no_leader,0,0|aif_start_alarmed,5,[]),
#     (0,mtef_no_leader,0,0|aif_start_alarmed,0,[]),
#     (3,mtef_enemy_party|mtef_reverse_order,0,aif_start_alarmed,6,[]),
#     (4,mtef_enemy_party|mtef_reverse_order,0,aif_start_alarmed,0,[]),
     ],
    [
#      (ti_before_mission_start, 0, 0, [], [(set_rain, 1,100), (set_fog_distance, 10)]),
      (ti_tab_pressed, 0, 0, [],
       [(finish_mission,0)]),

      common_battle_order_panel,
      common_battle_order_panel_tick,
      

##      (0, 0, ti_once,
##       [
##         (key_clicked, key_numpad_7),
##        (mission_cam_set_mode,1),
##        (get_player_agent_no, ":player_agent"),
##        (mission_cam_set_target_agent, ":player_agent", 1),
##        (mission_cam_set_animation, "anim_test_cam"),], []),
    ],
  ),
   (
    "camera_test",0,-1,
    "camera Test.",
    [
#     (0,mtef_attackers,0,aif_start_alarmed,5,[]),
     ],
    [
      (1, 0, 0, [(mission_cam_set_mode,1),
          (entry_point_get_position, pos3, 3),
          (mission_cam_set_position, pos3)], []),
#      (ti_before_mission_start, 0, 0, [], [(set_rain, 1,100)]),
      (ti_tab_pressed, 0, 0, [],
       [(finish_mission,0)]),
    ],
  ),

  (
    "arena_melee_fight",mtf_arena_fight,-1,
    "You enter a melee fight in the arena.",
    [
      (2,mtef_visitor_source|mtef_team_0,af_override_body,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),
      (3,mtef_visitor_source|mtef_team_0,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword, itm_arena_tunic_red]),
      (4,mtef_visitor_source|mtef_team_0,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),
      (5,mtef_visitor_source|mtef_team_0,af_override_body,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),
      (6,mtef_visitor_source|mtef_team_0,af_override_body,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows, itm_practice_dagger, itm_arena_tunic_red]),
      (40,mtef_visitor_source|mtef_team_0,af_override_body,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_red]),
      (43,mtef_visitor_source|mtef_team_0,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_red]),
      (45,mtef_visitor_source|mtef_team_0,af_override_body,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),

      (15,mtef_visitor_source|mtef_team_1,af_override_body,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_blue]),
      (16,mtef_visitor_source|mtef_team_1,af_override_body,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_blue,itm_blue_tourney_helmet]),
      (17,mtef_visitor_source|mtef_team_1,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_blue]),
      (18,mtef_visitor_source|mtef_team_1,af_override_body,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_blue, itm_blue_tourney_helmet]),
      (19,mtef_visitor_source|mtef_team_1,af_override_body,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_blue]),
      (20,mtef_visitor_source|mtef_team_1,af_override_body,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_blue,itm_blue_tourney_helmet]),
      (58,mtef_visitor_source|mtef_team_1,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_blue]),
      (63,mtef_visitor_source|mtef_team_1,af_override_body,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_blue]),

      (21,mtef_visitor_source|mtef_team_2,af_override_body,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (22,mtef_visitor_source|mtef_team_2,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (23,mtef_visitor_source|mtef_team_2,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_2,af_override_body,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (25,mtef_visitor_source|mtef_team_2,af_override_body,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_green, itm_green_tourney_helmet]),
      (26,mtef_visitor_source|mtef_team_2,af_override_body,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_green]),
      (52,mtef_visitor_source|mtef_team_2,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_green]),
      (67,mtef_visitor_source|mtef_team_2,af_override_body,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),

      (27,mtef_visitor_source|mtef_team_3,af_override_body,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (28,mtef_visitor_source|mtef_team_3,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (29,mtef_visitor_source|mtef_team_3,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (30,mtef_visitor_source|mtef_team_3,af_override_body,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (31,mtef_visitor_source|mtef_team_3,af_override_body,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (47,mtef_visitor_source|mtef_team_3,af_override_body,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_yellow]),
      (49,mtef_visitor_source|mtef_team_3,af_override_body,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow]),
      (51,mtef_visitor_source|mtef_team_3,af_override_body,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
#32
      (32,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_throwing_daggers,itm_red_tourney_armor,itm_red_tourney_helmet]),
      (33,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_shield,itm_practice_javelin,itm_gold_tourney_armor,itm_gold_tourney_helmet]),
      (34,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_crossbow,itm_practice_bolts,itm_green_tourney_armor,itm_green_tourney_helmet]),
      (35,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_practice_axe,itm_practice_javelin,itm_gold_tourney_armor,itm_gold_tourney_helmet]),
      (36, mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows, itm_practice_dagger,itm_green_tourney_armor,itm_green_tourney_helmet]),
      (37,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_sword, itm_practice_shield,itm_blue_tourney_armor,itm_blue_tourney_helmet]),
      (38,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_staff,itm_practice_shield,itm_practice_horse,itm_red_tourney_armor,itm_red_tourney_helmet]),
      (39,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_practice_axe, itm_practice_shield,itm_blue_tourney_armor,itm_blue_tourney_helmet]),
#40-49 not used yet
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_yellow]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),

      (50, mtef_scene_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),
      (51, mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),
      (52, mtef_scene_source,af_override_horse,0,1,[]),
#not used yet:
      (53, mtef_scene_source,af_override_horse,0,1,[]),(54, mtef_scene_source,af_override_horse,0,1,[]),(55, mtef_scene_source,af_override_horse,0,1,[]),
#used for torunament master scene

      (56, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield, itm_padded_cloth, itm_sallet]),
      (57, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield, itm_padded_cloth, itm_sallet]),
    ],
    [] + arena_triggers + arena_battle_triggers,
  ),

  (
    "arena_challenge_fight",mtf_arena_fight|mtf_commit_casualties,-1,
    "You enter a melee fight in the arena.",
    [
      (56, mtef_visitor_source|mtef_team_0, 0, aif_start_alarmed, 1, []),
      (58, mtef_visitor_source|mtef_team_2, 0, aif_start_alarmed, 1, []),
    ],
    [
      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(display_message, "str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
         ]),

         
    #NOTE -- THIS IS A VESTIGIAL SCRIPT. FOR LORD DUELS, USE THE NEXT SCRIPT DOWN      
      (1, 4, ti_once, [
      (this_or_next|main_hero_fallen),
        (num_active_teams_le,1)],
       [
           (try_begin),
             (main_hero_fallen),
             (check_quest_active, "qst_duel_for_lady"),
             (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_for_lady"),
           (else_try),
             (check_quest_active, "qst_duel_for_lady"),
             (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_for_lady"),
           (else_try),
             (main_hero_fallen),
#             (check_quest_active, "qst_duel_for_companions"),
#             (quest_slot_eq, "qst_duel_for_companions", slot_quest_target_troop, "$g_duel_troop"),
#             (call_script, "script_fail_quest", "qst_duel_for_companions"),
#           (else_try),
#             (check_quest_active, "qst_duel_for_companions"),
#             (quest_slot_eq, "qst_duel_for_companions", slot_quest_target_troop, "$g_duel_troop"),
#             (call_script, "script_succeed_quest", "qst_duel_for_companions"),
#           (else_try),
#             (main_hero_fallen),
             (check_quest_active, "qst_duel_courtship_rival"),
             (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_courtship_rival"),
           (else_try),
             (check_quest_active, "qst_duel_courtship_rival"),
             (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_courtship_rival"),
           (else_try),     
             (main_hero_fallen),
             (check_quest_active, "qst_duel_avenge_insult"),
             (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_avenge_insult"),
           (else_try),
             (check_quest_active, "qst_duel_avenge_insult"),
             (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_avenge_insult"),
           (else_try),     
             (main_hero_fallen),
             (check_quest_active, "qst_denounce_lord"),
             (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_denounce_lord"),
           (else_try),
             (check_quest_active, "qst_denounce_lord"),
             (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_denounce_lord"),
           (else_try),
             (quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
             (str_store_troop_name, s4, ":target_troop"),
           (try_end),
           (finish_mission),
           ]),
    ] + custom_commander_commom_triggers + battle_triggers,
  ),

  (
    "duel_with_lord",mtf_arena_fight|mtf_commit_casualties,-1,
    "You enter a melee fight in the arena.",
    [    
      (0, mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_sword_medieval_a,itm_arena_tunic_blue]),
      (16, mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_sword_medieval_a,itm_arena_tunic_blue]),
    ],
    [
      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(display_message, "str_cannot_leave_now")], []),
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
         ]),


      (1, 4, ti_once, [
      (this_or_next|main_hero_fallen),
        (num_active_teams_le,1)],
       [
           (try_begin),
             (main_hero_fallen),
             (check_quest_active, "qst_duel_for_lady"),
             (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_for_lady"),
           (else_try),
             (check_quest_active, "qst_duel_for_lady"),
             (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_for_lady"),
#           (else_try),
#             (main_hero_fallen),
#             (check_quest_active, "qst_duel_for_companions"),
#             (quest_slot_eq, "qst_duel_for_companions", slot_quest_target_troop, "$g_duel_troop"),
#             (call_script, "script_fail_quest", "qst_duel_for_companions"),
#           (else_try),
#             (check_quest_active, "qst_duel_for_companions"),
#             (quest_slot_eq, "qst_duel_for_companions", slot_quest_target_troop, "$g_duel_troop"),
#             (call_script, "script_succeed_quest", "qst_duel_for_companions"),
           (else_try),
             (main_hero_fallen),
             (check_quest_active, "qst_duel_courtship_rival"),
             (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_courtship_rival"),
           (else_try),
             (check_quest_active, "qst_duel_courtship_rival"),
             (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_courtship_rival"),
           (else_try),     
             (main_hero_fallen),
             (check_quest_active, "qst_duel_avenge_insult"),
             (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_duel_avenge_insult"),
           (else_try),
             (check_quest_active, "qst_duel_avenge_insult"),
             (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_duel_avenge_insult"),
           (else_try),     
             (main_hero_fallen),
             (check_quest_active, "qst_denounce_lord"),
             (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_fail_quest", "qst_denounce_lord"),
           (else_try),
             (check_quest_active, "qst_denounce_lord"),
             (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
             (call_script, "script_succeed_quest", "qst_denounce_lord"),
           (else_try),
             (quest_get_slot, ":target_troop", "qst_denounce_lord", slot_quest_target_troop),
             (str_store_troop_name, s4, ":target_troop"),
           (try_end),
           (finish_mission),
           ]),
    ] + custom_commander_commom_triggers + battle_triggers,
  ),  
  
  (
    "freelancer_train_player",mtf_arena_fight|mtf_commit_casualties,-1,
    "You enter a melee fight in the arena.",
    [    
      (0, mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_sword_medieval_a,itm_arena_tunic_blue]),
      (16, mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_sword_medieval_a,itm_arena_tunic_blue]),
    ],
    [
      common_inventory_not_available,
      (ti_tab_pressed, 0, 0, [(display_message, "str_cannot_leave_now")], []),


      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_arena),
         ]),

    (1.0, 4.0, ti_once, 
    [
        (this_or_next|main_hero_fallen),
        (num_active_teams_le, 1),
    ],
    [
        (try_begin),
          (main_hero_fallen),
          (jump_to_menu, "mnu_freelancer_train_player_lose"),
        (else_try),
          (jump_to_menu, "mnu_freelancer_train_player_win"),
        (try_end),
        (finish_mission),
    ]),




    ] + arena_battle_triggers,
  ),  
  
  
##   (
##    "tutorial",0,-1,
##    "You enter the training ground.",
##    [
##        (1,mtef_leader_only,af_override_horse,0,1,[]), #af_override_weapons
##        (2,mtef_scene_source,af_override_horse,0,1,[]), #af_override_weapons
##     ],
##    [
##      (ti_tab_pressed, 0, 0, [],
##       [(question_box,"str_do_you_wish_to_leave_tutorial")]),
##      (ti_question_answered, 0, 0, [],
##       [(store_trigger_param_1,":answer"),
##        (eq,":answer",0),
##        (finish_mission,0),
##        (leave_encounter),
##        (change_screen_return),
##        (troop_remove_item, "trp_player", "itm_tutorial_sword"),
##        (troop_remove_item, "trp_player", "itm_tutorial_axe"),
##        (troop_remove_item, "trp_player", "itm_tutorial_spear"),
##        (troop_remove_item, "trp_player", "itm_tutorial_club"),
##        (troop_remove_item, "trp_player", "itm_tutorial_battle_axe"),
##        (troop_remove_item, "trp_player", "itm_tutorial_arrows"),
##        (troop_remove_item, "trp_player", "itm_tutorial_bolts"),
##        (troop_remove_item, "trp_player", "itm_tutorial_short_bow"),
##        (troop_remove_item, "trp_player", "itm_tutorial_crossbow"),
##        (troop_remove_item, "trp_player", "itm_tutorial_throwing_daggers"),
##        
##        (check_quest_active, "qst_destroy_dummies"),
##        (cancel_quest,"qst_destroy_dummies"),
##        ]),
###      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),
##      (ti_inventory_key_pressed, 0, 0, [(set_trigger_result,1)], []),
##
##        
##      (0, 0, ti_once, [],
##       [
##        (assign, "$tutorial_enter_melee", 0),
##        (assign, "$tutorial_enter_ranged", 0),
##        (assign, "$tutorial_enter_mounted", 0),
##        (assign, "$tutorial_camp_stage", 0),
##        (assign, "$tutorial_quest_taken", 0),
##        (assign, "$tutorial_quest_succeeded", 0),
##        (assign, "$tutorial_num_total_dummies_destroyed", 0),
##        (assign, "$tutorial_melee_chest", 0),
##        (assign, "$tutorial_ranged_chest", 0),
##        (assign, "$tutorial_award_taken", 0),
##
##           
##        (entry_point_get_position,2,2),#Trainer
##        (entry_point_get_position,16,16),#Horse
##        (set_spawn_position, 16),
##        (spawn_horse, "itm_tutorial_saddle_horse"),
##
##        (troop_remove_item, "trp_tutorial_chest_1", "itm_tutorial_sword"),
##        (troop_remove_item, "trp_tutorial_chest_1", "itm_tutorial_axe"),
##        (troop_remove_item, "trp_tutorial_chest_1", "itm_tutorial_spear"),
##        (troop_remove_item, "trp_tutorial_chest_1", "itm_tutorial_club"),
##        (troop_remove_item, "trp_tutorial_chest_1", "itm_tutorial_battle_axe"),
##        (troop_remove_item, "trp_tutorial_chest_2", "itm_tutorial_arrows"),
##        (troop_remove_item, "trp_tutorial_chest_2", "itm_tutorial_bolts"),
##        (troop_remove_item, "trp_tutorial_chest_2", "itm_tutorial_short_bow"),
##        (troop_remove_item, "trp_tutorial_chest_2", "itm_tutorial_crossbow"),
##        (troop_remove_item, "trp_tutorial_chest_2", "itm_tutorial_throwing_daggers"),
##        (troop_add_item, "trp_tutorial_chest_1", "itm_tutorial_sword"),
##        (troop_add_item, "trp_tutorial_chest_1", "itm_tutorial_axe"),
##        (troop_add_item, "trp_tutorial_chest_1", "itm_tutorial_spear"),
##        (troop_add_item, "trp_tutorial_chest_1", "itm_tutorial_club"),
##        (troop_add_item, "trp_tutorial_chest_1", "itm_tutorial_battle_axe"),
##        (troop_add_item, "trp_tutorial_chest_2", "itm_tutorial_arrows"),
##        (troop_add_item, "trp_tutorial_chest_2", "itm_tutorial_bolts"),
##        (troop_add_item, "trp_tutorial_chest_2", "itm_tutorial_short_bow"),
##        (troop_add_item, "trp_tutorial_chest_2", "itm_tutorial_crossbow"),
##        (troop_add_item, "trp_tutorial_chest_2", "itm_tutorial_throwing_daggers"),
##        ]
##       ),
##     
##      (1, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (get_player_agent_no, ":player_agent"),
##                       (ge, ":player_agent", 0),
##                       (agent_get_position, pos1, ":player_agent"),
##                       (entry_point_get_position,3,3),
##                       (get_distance_between_positions, ":distance_to_area", 1, 3),
##                       (lt, ":distance_to_area", 500),
##                       (eq, "$tutorial_enter_melee", 0),],
##       [(tutorial_box,"str_tutorial_enter_melee", "str_tutorial"), (val_add,"$tutorial_enter_melee", 1)]),
##      (1, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (get_player_agent_no, ":player_agent"),
##                       (ge, ":player_agent", 0),
##                       (neg|conversation_screen_is_active),
##                       (agent_get_position, pos1, ":player_agent"),
##                       (entry_point_get_position,4,4),
##                       (get_distance_between_positions, ":distance_to_area", 1, 4),
##                       (lt, ":distance_to_area", 500),
##                       (eq, "$tutorial_enter_ranged", 0),],
##       [(tutorial_box,"str_tutorial_enter_ranged", "str_tutorial"), (val_add,"$tutorial_enter_ranged", 1)]),
##      (1, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (get_player_agent_no, ":player_agent"),
##                       (ge, ":player_agent", 0),
##                       (neg|conversation_screen_is_active),
##                       (agent_get_position, pos1, ":player_agent"),
##                       (entry_point_get_position,5,5),
##                       (get_distance_between_positions, ":distance_to_area", 1, 5),
##                       (lt, ":distance_to_area", 500),
##                       (eq, "$tutorial_enter_mounted", 0),],
##       [(tutorial_box,"str_tutorial_enter_mounted", "str_tutorial"), (val_add,"$tutorial_enter_mounted", 1)]),
##
##
##      (2, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (get_player_agent_no, ":player_agent"),
##                       (ge, ":player_agent", 0),
##                       (neg|conversation_screen_is_active),
##                       (agent_get_position, pos1, ":player_agent"),
##                       (entry_point_get_position,6,6),
##                       (get_distance_between_positions, ":distance_to_area", 1, 6),
##                       (lt, ":distance_to_area", 300),
##                       (eq, "$tutorial_melee_chest", 0),],
##       [(tutorial_box,"str_tutorial_melee_chest", "str_tutorial"), (val_add,"$tutorial_melee_chest", 1)]),
##      (2, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (get_player_agent_no, ":player_agent"),
##                       (ge, ":player_agent", 0),
##                       (agent_get_position, pos1, ":player_agent"),
##                       (entry_point_get_position,7,7),
##                       (get_distance_between_positions, ":distance_to_area", 1, 7),
##                       (lt, ":distance_to_area", 300),
##                       (eq, "$tutorial_ranged_chest", 0),],
##       [(tutorial_box,"str_tutorial_ranged_chest", "str_tutorial"), (val_add,"$tutorial_ranged_chest", 1)]),
##
##      (2, 0, ti_once, [(store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (eq, "$tutorial_item_equipped", 0),
##                       (try_begin),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_sword"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_axe"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_spear"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_club"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_battle_axe"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_arrows"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_bolts"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_short_bow"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_crossbow"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (else_try),
##                         (troop_has_item_equipped, "trp_player", "itm_tutorial_throwing_daggers"),
##                         (assign, "$tutorial_item_equipped", 1),
##                       (try_end),
##                       (eq, "$tutorial_item_equipped", 1),],
##       [(tutorial_box,"str_tutorial_item_equipped", "str_tutorial")]),
##
##
##      
##
###      (2, 0, ti_once, [(get_player_agent_no, ":player_agent"),
###                       (agent_get_position, pos1, ":player_agent"),
###                       (entry_point_get_position,21,21),
###                       (get_distance_between_positions, ":distance_to_area", 1, 21),
###                       (lt, ":distance_to_area", 200),
###                       (eq, "$tutorial_group_of_weapons", 0),],
###       [(tutorial_box,"str_tutorial_group_of_weapons", "str_tutorial"), (val_add,"$tutorial_group_of_weapons", 1)]),
##
##      
##
##      (1, 5, ti_once, [(eq,"$tutorial_camp_stage",0),
##                       (neg|conversation_screen_is_active),
##                       (eq,"$tutorial_quest_award_taken",0),
##                       (store_character_level, ":player_level", "trp_player"),
##                       (le, ":player_level", 1),
##                       (tutorial_box,"str_tutorial_camp1","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1)]),
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",1),
##                       (neg|conversation_screen_is_active),
##                       (tutorial_box,"str_tutorial_camp2","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1)]),
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",2),
##                       (neg|conversation_screen_is_active),
##                       (tutorial_box,"str_tutorial_camp3","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1)]),
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",3),(eq, "$tutorial_award_taken", 0),
##                       (neg|conversation_screen_is_active),
##                       (tutorial_box,"str_tutorial_camp4","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",2)]),
##      
##     
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",5),
##                       (neg|conversation_screen_is_active),
##                       (eq,"$tutorial_quest_taken",1),
##                       (tutorial_box,"str_tutorial_camp6","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1)]),
##
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",6),
##                       (neg|conversation_screen_is_active),
##                       (ge,"$tutorial_num_total_dummies_destroyed",10),
##                       (tutorial_box,"str_tutorial_camp7","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1), (assign,"$tutorial_quest_succeeded",1),]),
##      
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",7),
##                       (neg|conversation_screen_is_active),
##                       (eq,"$tutorial_quest_award_taken",1),
##                       (tutorial_box,"str_tutorial_camp8","str_tutorial"),
##                       (troop_add_proficiency_points, "trp_player", 10),
##                       (assign, "$tutorial_last_proficiency_sum", 0),
##                       (try_for_range, ":cur_attribute", 0, num_weapon_proficiencies),
##                         (store_proficiency_level, ":cur_attribute_point", "trp_player", ":cur_attribute"),
##                         (val_add, "$tutorial_last_proficiency_sum", ":cur_attribute_point"),
##                       (try_end),],
##       [(val_add,"$tutorial_camp_stage",1),]),
##      
##      (1, 3, ti_once, [(eq,"$tutorial_camp_stage",8),
##                       (neg|conversation_screen_is_active),
##                       (assign, ":new_proficiency_sum", 0),
##                       (try_for_range, ":cur_attribute", 0, num_weapon_proficiencies),
##                         (store_proficiency_level, ":cur_attribute_point", "trp_player", ":cur_attribute"),
##                         (val_add, ":new_proficiency_sum", ":cur_attribute_point"),
##                       (try_end),
##                       (assign, reg(48), ":new_proficiency_sum"),
##                       (assign, reg(49), "$tutorial_last_proficiency_sum"),
##                       (lt,"$tutorial_last_proficiency_sum",":new_proficiency_sum"),
##                       (tutorial_box,"str_tutorial_camp9","str_tutorial"),],
##          [(val_add,"$tutorial_camp_stage",1)]),
##
##      (2, 0, 0, [(check_quest_active,"qst_destroy_dummies"),
##                 (le, "$tutorial_num_total_dummies_destroyed", 10),],
##          [
##              (assign, ":progress", "$tutorial_num_total_dummies_destroyed"),
##              (val_mul, ":progress", 10),
##              (set_quest_progression,"qst_destroy_dummies",":progress"),
##              ]
##       ),
##
##    ],
##  ),


  (
    "wedding",0,-1,
    "Wedding",
    [
        (0,mtef_visitor_source,af_override_everything,0,1,[itm_tabard, itm_ankle_boots]),
        (1,mtef_visitor_source,af_override_everything,0,1,[itm_bride_dress, itm_bride_crown, itm_bride_shoes]),
        (2,mtef_visitor_source,af_castle_lord,0,1,[]),
        (3,mtef_visitor_source,af_override_everything,0,1,[itm_courtly_outfit, itm_blue_hose]),
        (4,mtef_visitor_source,af_castle_lord,0,1,[]),
        (5,mtef_visitor_source,af_castle_lord,0,1,[]),
        (6,mtef_visitor_source,af_castle_lord,0,1,[]),
        (7,mtef_visitor_source,af_castle_lord,0,1,[]),
        (8,mtef_visitor_source,af_castle_lord,0,1,[]),
        (9,mtef_visitor_source,af_castle_lord,0,1,[]),
        (10,mtef_visitor_source,af_castle_lord,0,1,[]),
        (11,mtef_visitor_source,af_castle_lord,0,1,[]),
        (12,mtef_visitor_source,af_castle_lord,0,1,[]),
        (13,mtef_visitor_source,af_castle_lord,0,1,[]),
        (14,mtef_visitor_source,af_castle_lord,0,1,[]),
        (15,mtef_visitor_source,af_castle_lord,0,1,[]),
        (16,mtef_visitor_source,af_castle_lord,0,1,[]),
        (17,mtef_visitor_source,af_castle_lord,0,1,[]),
        (18,mtef_visitor_source,af_castle_lord,0,1,[]),
        (19,mtef_visitor_source,af_castle_lord,0,1,[]),
        (20,mtef_visitor_source,af_castle_lord,0,1,[]),
        (21,mtef_visitor_source,af_castle_lord,0,1,[]),
        (22,mtef_visitor_source,af_castle_lord,0,1,[]),
        (23,mtef_visitor_source,af_castle_lord,0,1,[]),
        (24,mtef_visitor_source,af_castle_lord,0,1,[]),
        (25,mtef_visitor_source,af_castle_lord,0,1,[]),
        (26,mtef_visitor_source,af_castle_lord,0,1,[]),
        (27,mtef_visitor_source,af_castle_lord,0,1,[]),
        (28,mtef_visitor_source,af_castle_lord,0,1,[]),
        (29,mtef_visitor_source,af_castle_lord,0,1,[]),
        (30,mtef_visitor_source,af_castle_lord,0,1,[]),
        (31,mtef_visitor_source,af_castle_lord,0,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [
         (show_object_details_overlay, 1),
         (finish_mission,0),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (show_object_details_overlay, 1),
        (finish_mission,0),
        ]),

      (ti_after_mission_start, 0, 0, [],
       [
        (assign, "$g_wedding_state", 0),
        (play_track, "track_wedding", 2),
        (show_object_details_overlay, 0),
         ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_get_troop_id, ":troop_no", ":agent_no"),
         (troop_get_type, ":gender", ":troop_no"),
         (set_fixed_point_multiplier, 100),
         (try_begin),
           (eq, ":troop_no", "$g_wedding_bishop_troop"),
         (else_try),
           (eq, ":troop_no", "$g_wedding_bride_troop"),
           (agent_set_no_dynamics, ":agent_no", 1),
           (init_position, pos1),
           (position_set_z, pos1, -1000),
           (agent_set_position, ":agent_no", pos1),
         (else_try),
           (eq, ":troop_no", "$g_wedding_brides_dad_troop"),
           (agent_set_no_dynamics, ":agent_no", 1),
           (init_position, pos1),
           (position_set_z, pos1, -1000),
           (agent_set_position, ":agent_no", pos1),
         (else_try),
           (eq, ":troop_no", "$g_wedding_groom_troop"),
           (agent_set_no_dynamics, ":agent_no", 1),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (agent_set_position, ":agent_no", pos1),
           (agent_set_animation, ":agent_no", "anim_wedding_groom_wait"),
         (else_try),
           (try_begin),
             (neg|eq, ":gender", 1), #male
             (neg|eq, ":gender", 3), #male
             (store_random_in_range, ":random_no", 0, 3),
             (try_begin),
               (eq, ":random_no", 0),
               (agent_set_slot, ":agent_no", slot_agent_cur_animation, "anim_wedding_guest_notr"),
               (agent_set_animation, ":agent_no", "anim_wedding_guest_notr"),
             (else_try),
               (agent_set_slot, ":agent_no", slot_agent_cur_animation, "anim_wedding_guest"),
               (agent_set_animation, ":agent_no", "anim_wedding_guest"),
             (try_end),
           (else_try), #female
             (agent_set_slot, ":agent_no", slot_agent_cur_animation, "anim_wedding_guest_woman"),
             (agent_set_animation, ":agent_no", "anim_wedding_guest_woman"),
           (try_end),
           (store_random_in_range, ":progress", 0, 100),
           (agent_set_animation_progress, ":agent_no", ":progress"),
         (try_end),
         ]),

      (0, 0, 0,
       [
         (store_mission_timer_a, ":cur_time"),
         (set_fixed_point_multiplier, 100),
         (try_for_agents, ":agent_no"),
           (agent_get_troop_id, ":troop_no", ":agent_no"),
           (try_begin),
             (eq, ":troop_no", "$g_wedding_groom_troop"),
           (else_try),
             (eq, ":troop_no", "$g_wedding_bride_troop"),
           (else_try),
             (eq, ":troop_no", "$g_wedding_brides_dad_troop"),
           (else_try),
             (eq, ":troop_no", "$g_wedding_bishop_troop"),
           (else_try),
             (agent_get_slot, ":cur_animation", ":agent_no", slot_agent_cur_animation),
             (agent_set_animation, ":agent_no", ":cur_animation"),
           (try_end),
         (try_end),
         (try_begin),
           (eq, "$g_wedding_state", 0),
           (mission_cam_set_mode, 1, 0, 0),
           (init_position, pos1),
           (position_rotate_z, pos1, 180),
           (position_rotate_x, pos1, 5),
           (position_set_x, pos1, -500),
           (position_set_y, pos1, 1000),
           (position_set_z, pos1, 600),
           (mission_cam_set_position, pos1),
           (init_position, pos1),
           (position_rotate_z, pos1, 180),
           (position_rotate_x, pos1, -15),
           (position_set_x, pos1, -500),
           (position_set_y, pos1, 1000),
           (position_set_z, pos1, 600),
           (mission_cam_animate_to_position, pos1, 4000, 0),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 1),
           (ge, ":cur_time", 4),
           (init_position, pos1),
           (position_rotate_z, pos1, 90),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -580),
           (position_set_y, pos1, 700),
           (position_set_z, pos1, 200),
           (mission_cam_set_position, pos1),
           (init_position, pos1),
           (position_rotate_z, pos1, 150),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -580),
           (position_set_y, pos1, 100),
           (position_set_z, pos1, 200),
           (mission_cam_animate_to_position, pos1, 6000, 1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 2),
           (ge, ":cur_time", 9),
           (mission_cam_animate_to_screen_color, 0xFF000000, 1000),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 3),
           (ge, ":cur_time", 10),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (try_for_agents, ":agent_no"),
             (agent_get_troop_id, ":agent_troop", ":agent_no"),
             (try_begin),
               (eq, ":agent_troop", "$g_wedding_bride_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_bride_stairs"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_brides_dad_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_dad_stairs"),
             (try_end),
           (try_end),
           (init_position, pos1),
           (position_rotate_z, pos1, -90),
           (position_set_x, pos1, 300),
           (position_set_y, pos1, 950),
           (position_set_z, pos1, 420),
           (mission_cam_set_position, pos1),
           (position_set_x, pos1, 175),
           (position_set_y, pos1, 950),
           (position_set_z, pos1, 320),
           (mission_cam_animate_to_position, pos1, 4000, 0),
           (mission_cam_animate_to_screen_color, 0x00000000, 500),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 4),
           (ge, ":cur_time", 14),
           (init_position, pos1),
           (position_rotate_z, pos1, -60),
           (position_rotate_x, pos1, 10),
           (position_set_x, pos1, -400),
           (position_set_y, pos1, 200),
           (position_set_z, pos1, 115),
           (mission_cam_set_position, pos1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 5),
           (ge, ":cur_time", 20),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (try_for_agents, ":agent_no"),
             (agent_get_troop_id, ":agent_troop", ":agent_no"),
             (try_begin),
               (eq, ":agent_troop", "$g_wedding_bride_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_bride_walk"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_brides_dad_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_dad_walk"),
             (try_end),
           (try_end),
           (init_position, pos1),
           (position_rotate_z, pos1, -140),
           (position_rotate_x, pos1, -15),
           (position_set_x, pos1, -625),
           (position_set_y, pos1, -530),
           (position_set_z, pos1, 180),
           (mission_cam_set_position, pos1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 6),
           (ge, ":cur_time", 22),
           (init_position, pos1),
           (position_rotate_z, pos1, 45),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -260),
           (position_set_y, pos1, 120),
           (position_set_z, pos1, 275),
           (mission_cam_set_position, pos1),
           (position_rotate_z, pos1, 10),
           (mission_cam_animate_to_position, pos1, 2000, 0),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 7),
           (ge, ":cur_time", 24),
           (init_position, pos1),
           (position_move_x, pos1, 175),
           (position_move_z, pos1, 10),
           (position_rotate_z, pos1, 180),
           (try_for_agents, ":agent_no"),
             (agent_get_troop_id, ":agent_troop", ":agent_no"),
             (try_begin),
               (eq, ":agent_troop", "$g_wedding_bride_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_bride_last"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_brides_dad_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_dad_last"),
             (else_try),
               (eq, ":agent_troop", "$g_wedding_groom_troop"),
               (agent_set_position, ":agent_no", pos1),
               (agent_set_animation, ":agent_no", "anim_wedding_groom_last"),
             (try_end),
           (try_end),
           (init_position, pos1),
           (position_rotate_z, pos1, -45),
           (position_rotate_x, pos1, -10),
           (position_set_x, pos1, -900),
           (position_set_y, pos1, -850),
           (position_set_z, pos1, 230),
           (mission_cam_set_position, pos1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 8),
           (ge, ":cur_time", 31),
           (init_position, pos1),
           (position_set_x, pos1, -550),
           (position_set_y, pos1, -625),
           (position_set_z, pos1, 1500),
           (particle_system_burst, "psys_wedding_rose", pos1, 750),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 9),
           (ge, ":cur_time", 33),
           (init_position, pos1),
           (position_rotate_z, pos1, 180),
           (position_set_x, pos1, -536),
           (position_set_y, pos1, -415),
           (position_set_z, pos1, 135),
           (mission_cam_set_position, pos1),
           (position_rotate_z, pos1, -8),
           (position_set_z, pos1, 350),
           (position_rotate_x, pos1, 35),
           (mission_cam_animate_to_position_and_aperture, pos1, 10, 9000, 1),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 10),
           (ge, ":cur_time", 41),
           (mission_cam_set_screen_color, 0x00FFFFFF),
           (mission_cam_animate_to_screen_color, 0xFFFFFFFF, 3000),
           (val_add, "$g_wedding_state", 1),
         (else_try),
           (eq, "$g_wedding_state", 11),
           (ge, ":cur_time", 48),
           (show_object_details_overlay, 1),
           (finish_mission,0),
         (try_end),
         ], []),
    ],
  ),

  (
    "tutorial_training_ground",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,0,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (33,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (34,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (35,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (36,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      (42,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      (43,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (62,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_sword]),
      (63,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      (64,mtef_visitor_source|mtef_team_0,af_override_weapons,aif_start_alarmed,1,[itm_practice_bow, itm_practice_arrows]),
      ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$g_tutorial_training_ground_state", 20),
         (question_box, "str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message, "str_cant_use_inventory_tutorial")], []),

      (ti_battle_window_opened, 0, 0, [],
       [
         (start_presentation, "prsnt_tutorial_show_mouse_movement"),
        ]),

      (0, 0, 0,
       [
       (key_clicked, key_enter), # replace with any button you want
       (neg|is_presentation_active, "prsnt_particle_preview"), # every presentation call spawns a new plate, so we have to check if it is spawned already
       ],
       [
         (start_presentation, "prsnt_particle_preview"),
      ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (agent_ai_set_always_attack_in_melee, ":agent_no", 1),
         (agent_set_no_death_knock_down_only, ":agent_no", 1),
         (agent_set_invulnerable_shield, ":agent_no", 1),
         (agent_get_position, pos1, ":agent_no"),
         (agent_set_slot, ":agent_no", slot_agent_spawn_entry_point, -1),
         (get_player_agent_no, ":player_agent"),
         (try_begin),
           (eq, ":agent_no", ":player_agent"),
           (agent_set_team, ":agent_no", 7),
         (try_end),
         (try_for_range, ":cur_entry_point", 0, 64),
           (entry_point_get_position, pos2, ":cur_entry_point"),
           (get_sq_distance_between_positions, ":dist", pos1, pos2),
           (lt, ":dist", 100), #10 cm
           (agent_set_slot, ":agent_no", slot_agent_spawn_entry_point, ":cur_entry_point"),
         (try_end),
         (agent_get_troop_id, ":cur_agent_troop", ":agent_no"),
         (try_begin),
           (eq, ":cur_agent_troop", "trp_tutorial_archer_1"),
           (agent_get_position, pos1, ":agent_no"),
           (agent_set_scripted_destination, ":agent_no", pos1),
           (scene_prop_get_num_instances, ":num_instances", "spr_archery_target_with_hit_a"),
           (assign, ":shortest_dist", 10000000),
           (assign, ":best_instance", -1),
           (try_for_range, ":cur_instance", 0, ":num_instances"),
             (scene_prop_get_instance, ":spr_instance", "spr_archery_target_with_hit_a", ":cur_instance"),
             (prop_instance_get_position, pos2, ":spr_instance"),
             (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
             (lt, ":cur_dist", ":shortest_dist"),
             (assign, ":shortest_dist", ":cur_dist"),
             (assign, ":best_instance", ":spr_instance"),
           (try_end),
           (agent_set_slot, ":agent_no", slot_agent_target_prop_instance, ":best_instance"),
         (else_try),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_rider_1"),
           (eq, ":cur_agent_troop", "trp_tutorial_rider_2"),
           (agent_set_slot, ":agent_no", slot_agent_target_entry_point, 48),
           (agent_set_slot, ":agent_no", slot_agent_target_prop_instance, -1),
           (entry_point_get_position, pos1, 48),
           (agent_set_scripted_destination, ":agent_no", pos1),
         (try_end),
         ]),

      (ti_on_agent_knocked_down, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (store_trigger_param_2, ":enemy_agent_no"),
         (agent_get_troop_id, ":agent_troop", ":agent_no"),
         (agent_get_troop_id, ":enemy_agent_troop", ":enemy_agent_no"),
         (try_begin),
           (ge, "$g_tutorial_training_ground_melee_trainer_attack", 0),
           #do nothing
         (else_try),
           (ge, "$g_tutorial_training_ground_melee_trainer_parry", 0),
           (try_begin),
             (eq, ":agent_troop", "trp_player"),
             (eq, ":enemy_agent_troop", "$g_tutorial_training_ground_melee_trainer_parry"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 0),
             (agent_set_team, ":enemy_agent_no", 7),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 2), #player knocked down in parry
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
             (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (else_try),
             (eq, ":enemy_agent_troop", "trp_player"),
             (eq, ":agent_troop", "$g_tutorial_training_ground_melee_trainer_parry"),
             (agent_set_team, ":agent_no", 7),
             (agent_set_team, ":enemy_agent_no", 0),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 3), #trainer knocked down in parry
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
             (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (try_end),
         (else_try),
           (ge, "$g_tutorial_training_ground_melee_trainer_chamber", 0),
           (try_begin),
             (eq, ":agent_troop", "trp_player"),
             (eq, ":enemy_agent_troop", "$g_tutorial_training_ground_melee_trainer_chamber"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 0),
             (agent_set_team, ":enemy_agent_no", 7),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 7), #player knocked down in chamber
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
             (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (else_try),
             (eq, ":enemy_agent_troop", "trp_player"),
             (eq, ":agent_troop", "$g_tutorial_training_ground_melee_trainer_chamber"),
             (agent_set_team, ":agent_no", 7),
             (agent_set_team, ":enemy_agent_no", 0),
             (tutorial_message, -1),
             (assign, "$g_tutorial_mouse_dir", -1),
             (assign, "$g_tutorial_mouse_click", -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 8), #trainer knocked down in chamber
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
             (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1), #still in attack ready action
               (agent_set_attack_action, ":agent_no", 0, 0), #release
             (try_end),
           (try_end),
         (else_try),
           (ge, "$g_tutorial_training_ground_melee_trainer_combat", 0),
           (try_begin),
             (eq, ":agent_troop", "trp_player"),
             (eq, ":enemy_agent_troop", "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 0),
             (agent_set_team, ":enemy_agent_no", 7),
             (tutorial_message, -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 4), #player knocked down in combat
             (play_sound, "snd_tutorial_fail"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
           (else_try),
             (eq, ":enemy_agent_troop", "trp_player"),
             (eq, ":agent_troop", "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_state", 0),
             (agent_set_team, ":agent_no", 7),
             (agent_set_team, ":enemy_agent_no", 0),
##             (assign, "$g_tutorial_training_ground_melee_trainer_combat_completed", 1), #not used
             (tutorial_message, -1),
             (assign, "$g_tutorial_training_ground_conversation_state", 5), #trainer knocked down in combat
             (play_sound, "snd_tutorial_2"),
             (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_combat"),
             (assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
           (try_end),
         (else_try),
           (agent_is_human, ":agent_no"),
           (assign, "$g_tutorial_training_ground_melee_last_winner", ":enemy_agent_no"),
           (assign, "$g_tutorial_training_ground_melee_last_loser", ":agent_no"),
           (assign, "$g_tutorial_training_ground_melee_state", 0),
           (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_1", 7),
           (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_2", 7),
           (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_1"),
           (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_2"),
         (try_end),
         (agent_set_hit_points, ":agent_no", 100, 0),
         (agent_set_hit_points, ":enemy_agent_no", 100, 0),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (scene_set_day_time, 13),
         (team_set_relation, 0, 1, 0),
         (team_set_relation, 0, 2, 0),
         (team_set_relation, 0, 3, 0),
         (team_set_relation, 0, 7, 0),
         (team_set_relation, 7, 1, 1),
         (team_set_relation, 7, 2, 1),
         (team_set_relation, 7, 3, 1),
         (team_set_relation, 1, 2, -1),
         (team_set_relation, 1, 3, 1),
         (team_set_relation, 2, 3, 1),
         (assign, "$g_position_to_use_for_replacing_scene_items", pos8),
         (call_script, "script_replace_scene_items_with_spawn_items_before_ms"),
         (assign, "$g_tutorial_training_ground_state", 0),
         (assign, "$g_tutorial_training_ground_conversation_state", 0),
         (assign, "$g_tutorial_training_ground_melee_paused", 0),
         (assign, "$g_tutorial_training_ground_melee_state", 0),
         (assign, "$g_tutorial_training_ground_melee_next_action_time", 0),
         (assign, "$g_tutorial_training_ground_melee_last_winner", -1),
         (assign, "$g_tutorial_training_ground_melee_last_loser", -1),
         (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
         (assign, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
##         (assign, "$g_tutorial_training_ground_melee_trainer_attack_completed", 0), #not used
##         (assign, "$g_tutorial_training_ground_melee_trainer_parry_completed", 0), #not used
##         (assign, "$g_tutorial_training_ground_melee_trainer_combat_completed", 0), #not used
##         (assign, "$g_tutorial_training_ground_melee_trainer_chamber_completed", 0), #not used
         (assign, "$g_tutorial_training_ground_melee_trainer_next_action_time", 0),
         (assign, "$g_tutorial_training_ground_archer_trainer_state", 0),
         (assign, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
         (assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
         (assign, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
         (assign, "$g_tutorial_training_ground_next_score_time", 0),
         (assign, "$g_tutorial_mouse_dir", -1),
         (assign, "$g_tutorial_mouse_click", -1),
         (assign, "$g_pointer_arrow_height_adder", -1000),
         ]),

      (0, 0, ti_once, [],
       [
         (tutorial_message_set_size, 17, 17),
         (tutorial_message_set_position, 500, 650),
         (tutorial_message_set_center_justify, 0),
         (mission_enable_talk),
         (call_script, "script_replace_scene_items_with_spawn_items_after_ms"),
         (entry_point_get_position, pos1, 59),
         (set_spawn_position, pos1),
         (spawn_horse, "itm_practice_horse", 0),
         (assign, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_bow", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_bow_2", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_arrows", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_arrows_2", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_crossbow", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_bolts", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_practice_javelin", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         (scene_spawned_item_get_instance, ":item_instance", "itm_arena_lance", 0),
         (prop_instance_get_position, pos0, ":item_instance"),
         (position_move_z, pos0, -1000, 1),
         (prop_instance_set_position, ":item_instance", pos0),
         ]),

      (0, 1, ti_once, [],
       [
         (tutorial_message_set_background, 1),
         (tutorial_message, "str_tutorial_training_ground_intro_message"),
         ]),

      (0, 0, 0,
       [
         (store_mission_timer_a, ":cur_time"),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "trp_tutorial_archer_1"),
           (try_begin),
             (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
             (neq, ":cur_wielded_item", "itm_practice_bow"),
             (agent_set_wielded_item, ":cur_agent", "itm_practice_bow"),
           (else_try),
             (agent_get_slot, ":look_spr", ":cur_agent", slot_agent_target_prop_instance),
             (prop_instance_get_position, pos1, ":look_spr"),
             (position_move_z, pos1, 10),
             (agent_set_look_target_position, ":cur_agent", pos1),
             (try_begin),
               (neg|agent_slot_ge, ":cur_agent", slot_agent_next_action_time, ":cur_time"),
               (agent_set_attack_action, ":cur_agent", 0),
               (store_random_in_range, ":next_action_time", 3, 13),
               (val_add, ":next_action_time", ":cur_time"),
               (agent_set_slot, ":cur_agent", slot_agent_next_action_time, ":next_action_time"),
             (try_end),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (set_fixed_point_multiplier, 100),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_rider_1"),
           (eq, ":cur_agent_troop", "trp_tutorial_rider_2"),
           (agent_get_slot, ":target_entry_point", ":cur_agent", slot_agent_target_entry_point),
           (entry_point_get_position, pos1, ":target_entry_point"),
           (agent_get_position, pos2, ":cur_agent"),
           (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
           (try_begin),
             (lt, ":cur_dist", 6400),
             (val_add, ":target_entry_point", 1),
             (try_begin),
               (gt, ":target_entry_point", 57), #last entry point
               (assign, ":target_entry_point", 48), #first entry point
             (try_end),
             (agent_set_slot, ":cur_agent", slot_agent_target_entry_point, ":target_entry_point"),
             (entry_point_get_position, pos1, ":target_entry_point"),
             (agent_set_scripted_destination, ":cur_agent", pos1),
           (try_end),
           (try_begin),
             (eq, ":cur_agent_troop", "trp_tutorial_rider_2"),
             (try_begin),
               (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
               (neq, ":cur_wielded_item", "itm_practice_bow"),
               (agent_set_wielded_item, ":cur_agent", "itm_practice_bow"),
             (else_try),
               (scene_prop_get_num_instances, ":num_instances", "spr_archery_target_with_hit_a"),
               (assign, ":shortest_dist", 10000000),
               (assign, ":best_instance", -1),
               (try_for_range, ":cur_instance", 0, ":num_instances"),
                 (scene_prop_get_instance, ":spr_instance", "spr_archery_target_with_hit_a", ":cur_instance"),
                 (neg|agent_slot_eq, ":cur_agent", slot_agent_target_prop_instance, ":spr_instance"),
                 (prop_instance_get_position, pos1, ":spr_instance"),
                 (position_is_behind_position, pos2, pos1), #target is facing towards us
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", ":shortest_dist"),
                 (assign, ":shortest_dist", ":cur_dist"),
                 (assign, ":best_instance", ":spr_instance"),
               (try_end),
               (try_begin),
                 (lt, ":shortest_dist", 40000), #20 meters
                 (prop_instance_get_position, pos1, ":best_instance"),
                 (position_move_z, pos1, 10),
                 (init_position, pos3),
                 (position_set_x, pos3, -160), #1.6 meters
                 (position_transform_position_to_parent, pos4, pos1, pos3),
                 (copy_position, pos1, pos4),
                 (agent_set_look_target_position, ":cur_agent", pos1),
                 (lt, ":shortest_dist", 22500), #15 meters
                 (agent_set_slot, ":cur_agent", slot_agent_target_prop_instance, ":best_instance"),
                 (agent_set_attack_action, ":cur_agent", 0),
               (else_try),
                 (agent_get_slot, ":last_instance", ":cur_agent", slot_agent_target_prop_instance),
                 (ge, ":last_instance", 0),
                 (prop_instance_get_position, pos1, ":last_instance"),
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", 40000), #20 meters
                 (position_move_z, pos1, 10),
                 (init_position, pos3),
                 (position_set_x, pos3, -160), #1.6 meters
                 (position_transform_position_to_parent, pos4, pos1, pos3),
                 (copy_position, pos1, pos4),
                 (agent_set_look_target_position, ":cur_agent", pos1),
               (try_end),
             (try_end),
           (else_try),
             (eq, ":cur_agent_troop", "trp_tutorial_rider_1"),
             (try_begin),
               (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
               (neq, ":cur_wielded_item", "itm_practice_sword"),
               (agent_set_wielded_item, ":cur_agent", "itm_practice_sword"),
             (else_try),
               (scene_prop_get_num_instances, ":num_instances", "spr_dummy_a_undestructable"),
               (assign, ":shortest_dist", 10000000),
               (assign, ":best_instance", -1),
               (try_for_range, ":cur_instance", 0, ":num_instances"),
                 (scene_prop_get_instance, ":spr_instance", "spr_dummy_a_undestructable", ":cur_instance"),
                 (neg|agent_slot_eq, ":cur_agent", slot_agent_target_prop_instance, ":spr_instance"),
                 (prop_instance_get_position, pos1, ":spr_instance"),
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", ":shortest_dist"),
                 (assign, ":shortest_dist", ":cur_dist"),
                 (assign, ":best_instance", ":spr_instance"),
               (try_end),
               (try_begin),
                 (lt, ":shortest_dist", 10000), #10 meters
                 (prop_instance_get_position, pos1, ":best_instance"),
                 (position_transform_position_to_local, pos3, pos2, pos1),
                 (position_get_x, ":local_x", pos3),
                 (position_get_y, ":local_y", pos3),
                 (is_between, ":local_x", -200, 200),
                 (gt, ":local_y", -100),
                 (init_position, pos3),
                 (try_begin),
                   (lt, ":local_x", 0),
                   (position_move_x, pos3, -100),
                   (position_move_z, pos3, 100),
                 (else_try),
                   (position_move_x, pos3, 100),
                   (position_move_z, pos3, 150),
                 (try_end),
                 (position_transform_position_to_parent, pos4, pos2, pos3),
                 (agent_set_look_target_position, ":cur_agent", pos4),
                 (try_begin),
                   (lt, ":local_x", 0),
                   (agent_set_attack_action, ":cur_agent", 2, 1), #left
                 (else_try),
                   (agent_set_attack_action, ":cur_agent", 1, 1), #right
                 (try_end),
                 (this_or_next|lt, ":shortest_dist", 900), #3 meters
                 (lt, ":local_y", 100), #1 meter
                 (agent_set_attack_action, ":cur_agent", 0, 0), #release
                 (agent_set_slot, ":cur_agent", slot_agent_target_prop_instance, ":best_instance"),
               (else_try),
                 (agent_get_slot, ":last_instance", ":cur_agent", slot_agent_target_prop_instance),
                 (ge, ":last_instance", 0),
                 (prop_instance_get_position, pos1, ":last_instance"),
                 (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
                 (lt, ":cur_dist", 10000), #10 meters
                 (position_transform_position_to_local, pos3, pos2, pos1),
                 (position_get_x, ":local_x", pos3),
                 (position_get_y, ":local_y", pos3),
                 (is_between, ":local_x", -200, 200),
                 (gt, ":local_y", -100),
                 (init_position, pos3),
                 (try_begin),
                   (lt, ":local_x", 0),
                   (position_move_x, pos3, -100),
                   (position_move_z, pos3, 100),
                 (else_try),
                   (position_move_x, pos3, 100),
                   (position_move_z, pos3, 150),
                 (try_end),
                 (position_transform_position_to_parent, pos4, pos2, pos3),
                 (agent_set_look_target_position, ":cur_agent", pos4),
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         ], []),
      
      (0, 0, 0,
       [
         (store_mission_timer_a, ":cur_time"),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "trp_tutorial_archer_1"),
           (try_begin),
             (agent_get_wielded_item, ":cur_wielded_item", ":cur_agent", 0),
             (neq, ":cur_wielded_item", "itm_practice_bow"),
             (agent_set_wielded_item, ":cur_agent", "itm_practice_bow"),
           (else_try),
             (agent_get_slot, ":look_spr", ":cur_agent", slot_agent_target_prop_instance),
             (prop_instance_get_position, pos1, ":look_spr"),
             (agent_set_look_target_position, ":cur_agent", pos1),
             (try_begin),
               (neg|agent_slot_ge, ":cur_agent", slot_agent_next_action_time, ":cur_time"),
               (agent_set_attack_action, ":cur_agent", 0),
               (store_random_in_range, ":next_action_time", 3, 13),
               (val_add, ":next_action_time", ":cur_time"),
               (agent_set_slot, ":cur_agent", slot_agent_next_action_time, ":next_action_time"),
             (try_end),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (call_script, "script_iterate_pointer_arrow"),
         ], []),


      (5, 0, 0,
       [
         (try_begin),
           (store_mission_timer_a, ":cur_time"),
           (ge, ":cur_time", 30),
           (eq, "$g_tutorial_training_ground_intro_message_being_displayed", 1),
           (assign, "$g_tutorial_training_ground_intro_message_being_displayed", 0),
           (tutorial_message, -1),
         (try_end),
         (get_player_agent_no, ":player_agent"),
         (try_for_agents, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (neq, ":cur_agent", ":player_agent"),
           (agent_refill_ammo, ":cur_agent"),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (agent_get_wielded_item, ":wielded_weapon", ":player_agent", 0),
         (assign, ":refill", 0),
         (try_begin),
           (eq, ":wielded_weapon", "itm_practice_bow"),
           (agent_has_item_equipped, ":player_agent", "itm_practice_arrows"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (eq, ":cur_ammo", 0),
           (assign, ":refill", 1),
         (else_try),
           (eq, ":wielded_weapon", "itm_practice_bow_2"),
           (agent_has_item_equipped, ":player_agent", "itm_practice_arrows_2"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (eq, ":cur_ammo", 0),
           (assign, ":refill", 1),
         (else_try),
           (eq, ":wielded_weapon", "itm_practice_crossbow"),
           (agent_has_item_equipped, ":player_agent", "itm_practice_bolts"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (eq, ":cur_ammo", 0),
           (assign, ":refill", 1),
         (else_try),
           (eq, ":wielded_weapon", "itm_practice_javelin"),
           (agent_get_ammo, ":cur_ammo", ":player_agent", 1),
           (le, ":cur_ammo", 1),
           (assign, ":refill", 1),
         (try_end),
         (eq, ":refill", 1),
         (agent_refill_ammo, ":player_agent"),
         (tutorial_box, "str_tutorial_training_ground_ammo_refill", "@Tutorial"),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_horseman_trainer_state", 0),
         (mission_disable_talk),
         (try_begin),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (assign, "$g_tutorial_training_ground_current_score", 0),
           (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 2),
           (try_begin),
             (try_begin),
               (ge, "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
               (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
               (prop_instance_get_position, pos0, ":item_instance"),
               (position_move_z, pos0, 1000, 1),
               (prop_instance_set_position, ":item_instance", pos0),

               (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
               (prop_instance_set_position, ":pointer_instance", pos0),
               (assign, "$g_pointer_arrow_height_adder", 200),

               (try_begin),
                 (ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
                 (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
                 (prop_instance_get_position, pos0, ":item_instance"),
                 (position_move_z, pos0, 1000, 1),
                 (prop_instance_set_position, ":item_instance", pos0),
               (try_end),
             (try_end),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 3),
           (try_begin),
             (ge, "$g_tutorial_training_ground_horseman_trainer_item_1", 0),
             (try_begin),
               (str_store_item_name, s0, "$g_tutorial_training_ground_horseman_trainer_item_1"),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_1"),
               (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_1"),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 4),
           (try_begin),
             (ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
             (try_begin),
               (str_store_item_name, s0, "$g_tutorial_training_ground_horseman_trainer_item_2"),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_1"),
               (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_2"),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 5),
           (try_begin),
             (agent_get_horse, ":player_horse", ":player_agent"),
             (lt, ":player_horse", 0),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_2"),
             (try_begin),
               (assign, ":horse_agent_to_mount", -1),
               (try_for_agents, ":cur_agent"),
                 (agent_get_item_id, ":cur_agent_item", ":cur_agent"),
                 (eq, ":cur_agent_item", "itm_practice_horse"),
                 (assign, ":horse_agent_to_mount", ":cur_agent"),
               (try_end),
               (agent_get_position, pos0, ":horse_agent_to_mount"),
               (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
               (prop_instance_get_position, pos1, ":pointer_instance"),
               (set_fixed_point_multiplier, 100),
               (position_get_x, ":x1", pos0),
               (position_get_x, ":x2", pos1),
               (position_get_y, ":y1", pos0),
               (position_get_y, ":y2", pos1),
               (this_or_next|neq, ":x1", ":x2"),
               (neq, ":y1", ":y2"),
               (prop_instance_set_position, ":pointer_instance", pos0),
               (assign, "$g_pointer_arrow_height_adder", 200),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_horseman_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_horseman_trainer_state", 6),
           (try_begin),
             (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_3"),
           (else_try),
             (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
             (assign, ":prop_to_search_for", "spr_dummy_a_undestructable"),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_4"),
           (else_try),
             (assign, ":prop_to_search_for", "spr_archery_target_with_hit_a"),
             (tutorial_message, "str_tutorial_training_ground_horseman_text_5"),
           (try_end),
           (try_begin),
             (eq, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 0),
             (store_add, ":cur_entry_point", "$g_tutorial_training_ground_current_score", 48),
             (entry_point_get_position, pos0, ":cur_entry_point"),
             (init_position, pos2),
             (position_move_y, pos2, -800),
             (position_transform_position_to_parent, pos3, pos0, pos2),
             (copy_position, pos0, pos3),
             (agent_get_position, pos2, ":player_agent"),
             (try_begin),
               (get_distance_between_positions, ":cur_dist", pos0, pos2),
               (lt, ":cur_dist", 500), #5 meters
               (val_add, "$g_tutorial_training_ground_current_score", 1),
               (ge, "$g_tutorial_training_ground_current_score", 10),
               (assign, "$g_pointer_arrow_height_adder", -1000),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_6", 0, 10),
               (assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
               (play_sound, "snd_tutorial_2"),
             (try_end),
             (try_begin),
               (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
               (prop_instance_get_position, pos1, ":pointer_instance"),
               (set_fixed_point_multiplier, 1),
               (position_get_x, ":x1", pos0),
               (position_get_x, ":x2", pos1),
               (position_get_y, ":y1", pos0),
               (position_get_y, ":y2", pos1),
               (this_or_next|neq, ":x1", ":x2"),
               (neq, ":y1", ":y2"),
               (prop_instance_set_position, ":pointer_instance", pos0),
               (assign, "$g_pointer_arrow_height_adder", 150),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (scene_prop_get_num_instances, ":end_cond", ":prop_to_search_for"),
             (try_begin),
               (lt, "$g_tutorial_training_ground_current_score", 6),
               (assign, ":next_prop_instance", -1),
               (store_add, ":var_id_to_search_for", "$g_tutorial_training_ground_current_score", 1),
               (try_for_range, ":cur_instance", 0, ":end_cond"),
                 (scene_prop_get_instance, ":prop_instance", ":prop_to_search_for", ":cur_instance"),
                 (prop_instance_get_variation_id_2, ":var_id_2", ":prop_instance"),
                 (eq, ":var_id_to_search_for", ":var_id_2"),
                 (assign, ":next_prop_instance", ":prop_instance"),
                 (assign, ":end_cond", 0),
               (try_end),
               (try_begin),
                 (prop_instance_get_position, pos0, ":next_prop_instance"),
                 (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
                 (prop_instance_get_position, pos1, ":pointer_instance"),
                 (set_fixed_point_multiplier, 1),
                 (position_get_x, ":x1", pos0),
                 (position_get_x, ":x2", pos1),
                 (position_get_y, ":y1", pos0),
                 (position_get_y, ":y2", pos1),
                 (this_or_next|neq, ":x1", ":x2"),
                 (neq, ":y1", ":y2"),
                 (prop_instance_set_position, ":pointer_instance", pos0),
                 (assign, "$g_pointer_arrow_height_adder", 200),
                 (play_sound, "snd_tutorial_1"),
               (try_end),
             (else_try),
               (assign, "$g_pointer_arrow_height_adder", -1000),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_horseman_trainer_item_2", 0),
                 (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_2"),
               (try_end),
               (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_horseman_trainer_item_1"),
               (tutorial_message, "str_tutorial_training_ground_horseman_text_6", 0, 10),
               (assign, "$g_tutorial_training_ground_horseman_trainer_state", 0),
               (val_add, "$g_tutorial_training_ground_horseman_trainer_completed_chapters", 1),
               (play_sound, "snd_tutorial_2"),
             (try_end),
           (try_end),
         (try_end),
         ], []),
      
      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_archer_trainer_state", 0),
         (mission_disable_talk),
         (try_begin),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_begin),
             (assign, "$g_last_destroyed_gourds", 0),
             (assign, "$g_tutorial_training_ground_current_score", 0),
             (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_archer_trainer_item_1", 0),
             (prop_instance_get_position, pos0, ":item_instance"),
             (position_move_z, pos0, 1000, 1),
             (prop_instance_set_position, ":item_instance", pos0),

             (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
             (prop_instance_set_position, ":pointer_instance", pos0),
             (assign, "$g_pointer_arrow_height_adder", 100),

             (try_begin),
               (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
               (scene_spawned_item_get_instance, ":item_instance", "$g_tutorial_training_ground_archer_trainer_item_2", 0),
               (prop_instance_get_position, pos0, ":item_instance"),
               (position_move_z, pos0, 1000, 1),
               (prop_instance_set_position, ":item_instance", pos0),
             (try_end),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 2),
           (try_begin),
             (str_store_item_name, s0, "$g_tutorial_training_ground_archer_trainer_item_1"),
             (tutorial_message, "str_tutorial_training_ground_archer_text_1"),
             (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_1"),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
             (play_sound, "snd_tutorial_1"),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 3),
           (try_begin),
             (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
             (try_begin),
               (str_store_item_name, s0, "$g_tutorial_training_ground_archer_trainer_item_2"),
               (tutorial_message, "str_tutorial_training_ground_archer_text_1"),
               (agent_has_item_equipped, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_2"),
               (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
               (play_sound, "snd_tutorial_1"),
             (try_end),
           (else_try),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 4),
           (try_begin),
             (try_for_range, ":cur_instance", 0, 3),
               (scene_prop_get_instance, ":gourd_instance", "spr_gourd", ":cur_instance"),
               (prop_instance_refill_hit_points, ":gourd_instance"),
               (entry_point_get_position, pos0, 45),
               (init_position, pos1),
               (store_sub, ":cur_rotation", ":cur_instance", 1),
               (val_mul, ":cur_rotation", 5),
               (position_rotate_z, pos1, ":cur_rotation"),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
                 (position_move_y, pos1, 1300), #for bow and crossbow
               (else_try),
                 (position_move_y, pos1, 800), #for javelin
                 (val_mul, ":cur_rotation", 2),
               (try_end),
               (position_transform_position_to_parent, pos2, pos0, pos1),
               (position_set_z_to_ground_level, pos2),
               (scene_prop_get_instance, ":spike_instance", "spr_gourd_spike", ":cur_instance"),
               (prop_instance_set_position, ":spike_instance", pos2),
               (position_move_z, pos2, 150, 1),
               (prop_instance_set_position, ":gourd_instance", pos2),
             (try_end),
             (scene_prop_get_instance, ":pointer_instance", "spr_pointer_arrow", 0),
             (scene_prop_get_instance, ":spike_instance", "spr_gourd_spike", 1),
             (prop_instance_get_position, pos1, ":spike_instance"),
             (prop_instance_set_position, ":pointer_instance", pos1),
             (assign, "$g_pointer_arrow_height_adder", 200),
             (tutorial_message, "str_tutorial_training_ground_archer_text_2"),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 5),
           (try_begin),
             (try_begin),
               (neq, "$g_tutorial_training_ground_current_score", "$g_last_destroyed_gourds"),
               (assign, "$g_tutorial_training_ground_current_score", "$g_last_destroyed_gourds"),
               (try_begin),
                 (lt, "$g_last_destroyed_gourds", 3),
                 (play_sound, "snd_tutorial_1"),
               (else_try),
                 (play_sound, "snd_tutorial_2"),
               (try_end),
             (try_end),
             (try_begin),
               (eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
               (eq, "$g_last_destroyed_gourds", 0),
               (entry_point_get_position, pos0, 45),
               (agent_get_position, pos1, ":player_agent"),
               (neg|position_is_behind_position, pos1, pos0),
               (tutorial_message, "str_tutorial_training_ground_archer_text_3"),
             (else_try),
               (eq, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 0),
               (eq, "$g_last_destroyed_gourds", 1),
               (tutorial_message, "str_tutorial_training_ground_archer_text_4"),
             (try_end),
             (ge, "$g_last_destroyed_gourds", 3),
             (assign, "$g_pointer_arrow_height_adder", -1000),
             (val_add, "$g_tutorial_training_ground_archer_trainer_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_archer_trainer_state", 6),
           (try_begin),
             (try_begin),
               (ge, "$g_tutorial_training_ground_archer_trainer_item_2", 0),
               (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_2"),
             (try_end),
             (agent_unequip_item, ":player_agent", "$g_tutorial_training_ground_archer_trainer_item_1"),
             (tutorial_message, "str_tutorial_training_ground_archer_text_5", 0, 10),
             (assign, "$g_tutorial_training_ground_archer_trainer_state", 0),
             (val_add, "$g_tutorial_training_ground_archer_trainer_completed_chapters", 1),
           (try_end),
         (try_end),
         ], []),
      
      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_attack"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (store_random_in_range, "$g_tutorial_training_ground_melee_state", 1, 5), #random attack dir
             (assign, "$g_tutorial_update_mouse_presentation", 1),
             (assign, "$g_tutorial_training_ground_next_score_time", 0),
           (try_end),
         (else_try),
           (gt, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_get_position, pos1, ":player_agent"),
             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1),
             (agent_get_attack_action, ":attack_action", ":player_agent"),
             (try_begin),
               (eq, ":attack_action", 2), #release
               (agent_get_action_dir, ":action_dir_attacker", ":player_agent"),
               (try_begin),
                 (eq, ":action_dir_attacker", 0), #down
                 (agent_set_defend_action, ":trainer_agent", 0, 1),
               (else_try),
                 (eq, ":action_dir_attacker", 3), #up
                 (agent_set_defend_action, ":trainer_agent", 3, 1),
               (else_try),
                 (eq, ":action_dir_attacker", 1), #right
                 (agent_set_defend_action, ":trainer_agent", 2, 1),
               (else_try),
                 (eq, ":action_dir_attacker", 2), #left
                 (agent_set_defend_action, ":trainer_agent", 1, 1),
               (try_end),
             (try_end),
             (try_begin),
               (ge, "$g_tutorial_training_ground_current_score", 5),
               (tutorial_message, -1),
               (assign, "$g_tutorial_training_ground_melee_state", 0),
               (agent_set_team, ":player_agent", 0),
               (agent_set_team, ":trainer_agent", 7),
               (agent_set_hit_points, ":player_agent", 100, 0),
               (agent_set_hit_points, ":trainer_agent", 100, 0),
##               (assign, "$g_tutorial_training_ground_melee_trainer_attack_completed", 1), #not used
               (assign, "$g_tutorial_training_ground_conversation_state", 9), #attack complete
               (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_attack"),
               (assign, "$g_tutorial_training_ground_melee_trainer_attack", -1),
             (try_end),
           (try_end),
         (try_end),
         (try_begin),
           (agent_get_attack_action, ":attack_action", ":player_agent"),
           (eq, ":attack_action", 2), #release
           (agent_get_action_dir, ":action_dir_attacker", ":player_agent"),
           (store_add, ":attack_state", ":action_dir_attacker", 1),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (store_mission_timer_a, ":cur_time"),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           (try_begin),
             (eq, ":attack_state", "$g_tutorial_training_ground_melee_state"),
             (val_add, "$g_tutorial_training_ground_current_score", 1),
             (try_begin),
               (ge, "$g_tutorial_training_ground_current_score", 5),
               (assign, "$g_tutorial_training_ground_melee_state", 5),
               (play_sound, "snd_tutorial_2"),
             (else_try),
               (play_sound, "snd_tutorial_1"),
               (assign, ":end_cond", 100),
               (try_for_range, ":unused", 0, ":end_cond"),
                 (store_random_in_range, ":random_no", 1, 5), #random attack dir
                 (neq, ":random_no", "$g_tutorial_training_ground_melee_state"),
                 (assign, "$g_tutorial_training_ground_melee_state", ":random_no"),
                 (assign, ":end_cond", 0), #break
               (try_end),
             (try_end),
             (assign, "$g_tutorial_update_mouse_presentation", 1),
           (else_try),
             (val_add, "$g_tutorial_training_ground_current_score_2", 1),
             (play_sound, "snd_tutorial_fail"),
           (try_end),
           (store_add, "$g_tutorial_training_ground_next_score_time", ":cur_time", 1),
         (try_end),
         (assign, reg0, "$g_tutorial_training_ground_current_score"),
         (assign, reg1, "$g_tutorial_training_ground_current_score_2"),
         (str_clear, s0),
         (assign, "$g_tutorial_mouse_dir", -1),
         (assign, "$g_tutorial_mouse_click", -1),
         (try_begin),
           (neq, "$g_tutorial_training_ground_melee_state", 5), #finished
           (store_mission_timer_a, ":cur_time"),
           (this_or_next|eq, "$g_tutorial_update_mouse_presentation", 0),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           (try_begin),
             (eq, "$g_tutorial_training_ground_melee_state", 1), #down
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_down"),
           (else_try),
             (eq, "$g_tutorial_training_ground_melee_state", 4), #up
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_up"),
           (else_try),
             (eq, "$g_tutorial_training_ground_melee_state", 2), #right
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_right"),
           (else_try),
             (eq, "$g_tutorial_training_ground_melee_state", 3), #left
             (str_store_string, s0, "str_tutorial_training_ground_attack_training_left"),
           (try_end),
           (store_sub, "$g_tutorial_mouse_dir", "$g_tutorial_training_ground_melee_state", 1),
           (assign, "$g_tutorial_mouse_click", 0),
           (try_begin),
             (eq, "$g_tutorial_update_mouse_presentation", 1),
             (assign, "$g_tutorial_update_mouse_presentation", 0),
             (start_presentation, "prsnt_tutorial_show_mouse_movement"),
           (try_end),
         (try_end),
         (try_begin),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (tutorial_message, "str_tutorial_training_ground_attack_training"),
         (else_try),
           (tutorial_message, "str_tutorial_training_ground_warning_melee"),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_parry"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_get_position, pos1, ":player_agent"),
             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1),
             (agent_get_position, pos2, ":trainer_agent"),
             (get_sq_distance_between_positions, ":sq_dist", pos1, pos2),
             (lt, ":sq_dist", 400), #2 meters
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_current_score", 5),
                 (assign, "$g_tutorial_mouse_dir", -1),
                 (assign, "$g_tutorial_mouse_click", -1),
                 (tutorial_message, -1),
                 (assign, "$g_tutorial_training_ground_melee_state", 0),
                 (agent_set_team, ":player_agent", 0),
                 (agent_set_team, ":trainer_agent", 7),
                 (agent_set_hit_points, ":player_agent", 100, 0),
                 (agent_set_hit_points, ":trainer_agent", 100, 0),
##                 (assign, "$g_tutorial_training_ground_melee_trainer_parry_completed", 1), #not used
                 (assign, "$g_tutorial_training_ground_conversation_state", 1), #parry complete
                 (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_parry"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_parry", -1),
               (else_try),
                 (store_random_in_range, ":random_no", 0, 4),
                 (agent_set_attack_action, ":trainer_agent", ":random_no", 1), #ready
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (assign, "$g_tutorial_mouse_dir", ":random_no"),
                 (try_begin),
                   (is_between, ":random_no", 1, 3), #right or left
                   (store_sub, "$g_tutorial_mouse_dir", 3, ":random_no"), #revert sides
                 (try_end),
                 (assign, "$g_tutorial_mouse_click", 1),
                 (start_presentation, "prsnt_tutorial_show_mouse_movement"),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
               (agent_get_defend_action, ":defend_action", ":player_agent"),
               (gt, ":defend_action", 0), #parrying or blocking
               (agent_get_action_dir, ":action_dir_defender", ":player_agent"),
               (agent_get_action_dir, ":action_dir_attacker", ":trainer_agent"),
               (assign, ":actions_match", 0),
               (try_begin),
                 (eq, ":action_dir_attacker", 0), #down
                 (eq, ":action_dir_defender", 0), #down
                 (assign, ":actions_match", 1),
               (else_try),
                 (eq, ":action_dir_attacker", 3), #up
                 (eq, ":action_dir_defender", 3), #up
                 (assign, ":actions_match", 1),
               (else_try),
                 (eq, ":action_dir_attacker", 1), #right
                 (eq, ":action_dir_defender", 2), #left
                 (assign, ":actions_match", 1),
               (else_try),
                 (eq, ":action_dir_attacker", 2), #left
                 (eq, ":action_dir_defender", 1), #right
                 (assign, ":actions_match", 1),
               (try_end),
               (eq, ":actions_match", 1),
               (assign, "$g_tutorial_mouse_dir", -1),
               (assign, "$g_tutorial_mouse_click", -1),
               (agent_set_attack_action, ":trainer_agent", 0, 0), #release
               (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
               (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
               (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 2),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 2),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         (try_begin),
           (agent_is_in_parried_animation, ":trainer_agent"),
           (agent_get_wielded_item, ":shield_item", ":player_agent", 1),
           (eq, ":shield_item", -1),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (neq, ":weapon_item", "itm_practice_dagger"),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (store_mission_timer_a, ":cur_time"),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           (val_add, "$g_tutorial_training_ground_current_score", 1),
           (try_begin),
             (lt, "$g_tutorial_training_ground_current_score", 5),
             (play_sound, "snd_tutorial_1"),
           (else_try),
             (play_sound, "snd_tutorial_2"),
           (try_end),
           (store_add, "$g_tutorial_training_ground_next_score_time", ":cur_time", 1),
         (try_end),
         (assign, reg0, "$g_tutorial_training_ground_current_score"),
         (try_begin),
           (agent_get_wielded_item, ":shield_item", ":player_agent", 1),
           (eq, ":shield_item", -1),
           (agent_get_wielded_item, ":weapon_item", ":player_agent", 0),
           (neq, ":weapon_item", "itm_practice_dagger"),
           (call_script, "script_cf_is_melee_weapon_for_tutorial", ":weapon_item"),
           (tutorial_message, "str_tutorial_training_ground_parry_training"),
         (else_try),
           (neq, ":shield_item", -1),
           (tutorial_message, "str_tutorial_training_ground_warning_shield"),
         (else_try),
           (tutorial_message, "str_tutorial_training_ground_warning_melee_with_parry"),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_chamber"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
##             (entry_point_get_position, pos1, 30),
##             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1, 1),
##             (agent_get_position, pos2, ":trainer_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_1", pos1, pos2),
##             (lt, ":sq_dist_1", 400), #2 meters
##             (entry_point_get_position, pos1, 31),
##             (agent_get_position, pos2, ":player_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_2", pos1, pos2),
##             (lt, ":sq_dist_2", 400), #2 meters
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_get_position, pos1, ":player_agent"),
             (agent_set_scripted_destination_no_attack, ":trainer_agent", pos1),
             (agent_get_position, pos2, ":trainer_agent"),
             (get_sq_distance_between_positions, ":sq_dist", pos1, pos2),
             (lt, ":sq_dist", 400), #2 meters
             (try_begin),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_current_score", 5),
                 (tutorial_message, -1),
                 (assign, "$g_tutorial_training_ground_melee_state", 0),
                 (agent_set_team, ":player_agent", 0),
                 (agent_set_team, ":trainer_agent", 7),
                 (agent_set_hit_points, ":player_agent", 100, 0),
                 (agent_set_hit_points, ":trainer_agent", 100, 0),
##                 (assign, "$g_tutorial_training_ground_melee_trainer_chamber_completed", 1), #not used
                 (assign, "$g_tutorial_training_ground_conversation_state", 6), #chamber complete
                 (start_mission_conversation, "$g_tutorial_training_ground_melee_trainer_chamber"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
               (else_try),
                 (store_random_in_range, "$g_tutorial_training_ground_melee_trainer_attack_dir", 0, 4),
                 (agent_set_attack_action, ":trainer_agent", "$g_tutorial_training_ground_melee_trainer_attack_dir", 1), #ready
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 1),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (agent_set_attack_action, ":trainer_agent", -1, 0), #cancel
                 (agent_set_defend_action, ":trainer_agent", 0, 1), #cancel
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 1),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 2),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (agent_set_attack_action, ":trainer_agent", "$g_tutorial_training_ground_melee_trainer_attack_dir", 0),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_action_state", 1),
                 (store_mission_timer_a, "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (val_add, "$g_tutorial_training_ground_melee_trainer_next_action_time", 2),
               (try_end),
             (else_try),
               (eq, "$g_tutorial_training_ground_melee_trainer_action_state", 3),
               (try_begin),
                 (store_mission_timer_a, ":cur_time"),
                 (gt, ":cur_time", "$g_tutorial_training_ground_melee_trainer_next_action_time"),
                 (assign, "$g_tutorial_training_ground_melee_trainer_action_state", 0),
               (try_end),
             (try_end),
           (try_end),
         (try_end),
         (try_begin),
           (agent_is_in_parried_animation, ":trainer_agent"),
           (agent_get_attack_action, ":attack_action", ":player_agent"),
           (store_mission_timer_a, ":cur_time"),
           (gt, ":cur_time", "$g_tutorial_training_ground_next_score_time"),
           #add first, because player might immediately start attacking after parry
           (store_add, "$g_tutorial_training_ground_next_score_time", ":cur_time", 1),
           (eq, ":attack_action", 1), #readying_attack
           (val_add, "$g_tutorial_training_ground_current_score", 1),
           (try_begin),
             (lt, "$g_tutorial_training_ground_current_score", 5),
             (play_sound, "snd_tutorial_1"),
           (else_try),
             (play_sound, "snd_tutorial_2"),
           (try_end),
         (try_end),
         (assign, reg0, "$g_tutorial_training_ground_current_score"),
         (tutorial_message, "str_tutorial_training_ground_chamber_training"),
         ], []),

      (0, 0, 0,
       [
         (get_player_agent_no, ":player_agent"),
         (neq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (mission_disable_talk),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (eq, ":cur_agent_troop", "$g_tutorial_training_ground_melee_trainer_combat"),
           (assign, ":trainer_agent", ":cur_agent"),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (agent_set_team, ":cur_agent", 7),
               (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
               (entry_point_get_position, pos1, ":spawn_point"),
               (agent_set_scripted_destination, ":cur_agent", pos1),
               (agent_force_rethink, ":cur_agent"),
             (try_end),
##             (entry_point_get_position, pos1, 30),
##             (agent_set_scripted_destination, ":trainer_agent", pos1, 1),
##             (agent_get_position, pos2, ":trainer_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_1", pos1, pos2),
##             (lt, ":sq_dist_1", 400), #2 meters
##             (entry_point_get_position, pos1, 31),
##             (agent_get_position, pos2, ":player_agent"),
##             (get_sq_distance_between_positions, ":sq_dist_2", pos1, pos2),
##             (lt, ":sq_dist_2", 400), #2 meters
             (agent_set_wielded_item, ":trainer_agent", "itm_practice_sword"), #TODO: change this
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_set_team, ":player_agent", 1),
             (agent_set_team, ":trainer_agent", 2),
             (agent_clear_scripted_mode, ":trainer_agent"),
             (agent_force_rethink, ":trainer_agent"),
           (try_end),
         (try_end),
         ], []),

      (0, 0, 0,
       [
         (eq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
         (eq, "$g_tutorial_training_ground_archer_trainer_state", 0),
         (eq, "$g_tutorial_training_ground_horseman_trainer_state", 0),
         (mission_enable_talk),
         ], []),

      (0, 0, 0,
       [
         (eq, "$g_tutorial_training_ground_melee_trainer_attack", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_parry", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_combat", -1),
         (eq, "$g_tutorial_training_ground_melee_trainer_chamber", -1),
         (get_player_agent_no, ":player_agent"),
         (agent_get_position, pos1, ":player_agent"),
         (assign, ":shortest_dist", 10000000),
         (try_for_agents, ":cur_agent"),
           (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
           (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
           (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
           (agent_get_position, pos2, ":cur_agent"),
           (get_sq_distance_between_positions, ":cur_dist", pos1, pos2),
           (lt, ":cur_dist", ":shortest_dist"),
           (assign, ":shortest_dist", ":cur_dist"),
         (try_end),
         (try_begin),
           (le, ":shortest_dist", 1600), #4 meters
           (assign, "$g_tutorial_training_ground_melee_paused", 1),
           (try_for_agents, ":cur_agent"),
             (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
             (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
             (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
             (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
             (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
             (agent_set_team, ":cur_agent", 7),
             (agent_get_position, pos2, ":cur_agent"),
             (agent_set_scripted_destination, ":cur_agent", pos2),
             (try_begin),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
               (agent_set_wielded_item, ":cur_agent", -1),
             (try_end),
             (agent_force_rethink, ":cur_agent"),
             (agent_set_look_target_agent, ":cur_agent", ":player_agent"),
           (try_end),
         (else_try),
           (gt, "$g_tutorial_training_ground_melee_paused", 0),
           (assign, "$g_tutorial_training_ground_melee_paused", 0),
           (assign, "$g_tutorial_training_ground_melee_state", 0),
         (try_end),
         (try_begin),
           (eq, "$g_tutorial_training_ground_melee_paused", 0),
           (eq, "$g_tutorial_training_ground_melee_state", 0),
           (try_begin),
             (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
             (assign, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
             (try_for_range, ":unused", 0, 2),
               (try_begin),
                 (ge, "$g_tutorial_training_ground_melee_last_winner", 0),
                 (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_last_winner"),
                 (assign, "$g_tutorial_training_ground_melee_last_winner", -1),
               (try_end),
               (this_or_next|eq, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
               (eq, "$g_tutorial_training_ground_melee_cur_fighter_2", -1),
               (assign, ":num_candidates", 0),
               (try_for_agents, ":cur_agent"),
                 (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
                 (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_last_loser"),
                 (val_add, ":num_candidates", 1),
               (try_end),
               (store_random_in_range, ":random_candidate", 0, ":num_candidates"),
               (try_for_agents, ":cur_agent"),
                 (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
                 (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
                 (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
                 (neq, ":cur_agent", "$g_tutorial_training_ground_melee_last_loser"),
                 (val_sub, ":random_candidate", 1),
                 (lt, ":random_candidate", 0),
                 (try_begin),
                   (eq, "$g_tutorial_training_ground_melee_cur_fighter_1", -1),
                   (assign, "$g_tutorial_training_ground_melee_cur_fighter_1", ":cur_agent"),
                 (else_try),
                   (assign, "$g_tutorial_training_ground_melee_cur_fighter_2", ":cur_agent"),
                 (try_end),
               (try_end),
             (try_end),
             (try_for_agents, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
               (neq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
               (agent_set_wielded_item, ":cur_agent", -1),
             (try_end),
             (val_add, "$g_tutorial_training_ground_melee_state", 1), #fighters are chosen
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 3),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 1),
           (try_begin),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (try_for_agents, ":cur_agent"),
               (agent_is_human, ":cur_agent"),
               (agent_get_troop_id, ":cur_agent_troop", ":cur_agent"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_1"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_2"),
               (this_or_next|eq, ":cur_agent_troop", "trp_tutorial_fighter_3"),
               (eq, ":cur_agent_troop", "trp_tutorial_fighter_4"),
               (try_begin),
                 (eq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_1"),
                 (entry_point_get_position, pos1, 30),
                 (agent_set_scripted_destination, ":cur_agent", pos1),
               (else_try),
                 (eq, ":cur_agent", "$g_tutorial_training_ground_melee_cur_fighter_2"),
                 (entry_point_get_position, pos1, 31),
                 (agent_set_scripted_destination, ":cur_agent", pos1),
               (else_try),
                 (agent_get_slot, ":spawn_point", ":cur_agent", slot_agent_spawn_entry_point),
                 (entry_point_get_position, pos1, ":spawn_point"),
                 (agent_set_scripted_destination, ":cur_agent", pos1),
               (try_end),
             (try_end),
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 2),
           (try_begin),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (agent_get_position, pos1, "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (entry_point_get_position, pos2, 30),
             (get_sq_distance_between_positions, ":sq_dist_1", pos1, pos2),
             (lt, ":sq_dist_1", 400), #2 meters
             (agent_get_position, pos1, "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (entry_point_get_position, pos2, 31),
             (get_sq_distance_between_positions, ":sq_dist_2", pos1, pos2),
             (lt, ":sq_dist_2", 400), #2 meters
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
             (store_mission_timer_a, "$g_tutorial_training_ground_melee_next_action_time"),
             (val_add, "$g_tutorial_training_ground_melee_next_action_time", 1),
           (try_end),
         (else_try),
           (eq, "$g_tutorial_training_ground_melee_state", 3),
           (try_begin),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_1", "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (agent_set_look_target_agent, "$g_tutorial_training_ground_melee_cur_fighter_2", "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (store_mission_timer_a, ":cur_time"),
             (gt, ":cur_time", "$g_tutorial_training_ground_melee_next_action_time"),
             (agent_clear_scripted_mode, "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (agent_clear_scripted_mode, "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_1", 1),
             (agent_set_team, "$g_tutorial_training_ground_melee_cur_fighter_2", 2),
             (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_1"),
             (agent_force_rethink, "$g_tutorial_training_ground_melee_cur_fighter_2"),
             (val_add, "$g_tutorial_training_ground_melee_state", 1),
           (try_end),
         (try_end),
##         (try_begin),
##           (store_mission_timer_a, ":cur_time"),
##           (gt, ":cur_time", 0),
##           (tutorial_message, "str_talk_to_the_trainer"),
##           (assign, "$g_tutorial_training_ground_state", 1),
##         (try_end),
##         (else_try),
##           (eq, "$g_tutorial_training_ground_state", 1),
##         (else_try),
##           (eq, "$g_tutorial_training_ground_state", 2),
##         (else_try),
##           (eq, "$g_tutorial_training_ground_state", 3),
##         (else_try),
##           (eq, "$g_tutorial_training_ground_state", 4),
##         (else_try),
##           (eq, "$g_tutorial_training_ground_state", 5),
##         (try_end),
         ], []),
    ] + custom_commander_commom_triggers,
  ),

  (
    "tutorial_1",0,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only,af_override_everything,0,1,[itm_tutorial_shield,itm_tutorial_sword,itm_tutorial_short_bow,itm_tutorial_arrows,itm_leather_jerkin,itm_leather_boots]), #af_override_weapons
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_1_state", 5),
         (question_box, "str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message, "str_cant_use_inventory_tutorial")], []),

      (0, 0, ti_once, [
                         (tutorial_message_set_size, 17, 17),
                   (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_1_state", 0),
                       (assign, "$tutorial_1_msg_1_displayed", 0),
                       (assign, "$tutorial_1_msg_2_displayed", 0),
                       (assign, "$tutorial_1_msg_3_displayed", 0),
                       (assign, "$tutorial_1_msg_4_displayed", 0),
                       (assign, "$tutorial_1_msg_5_displayed", 0),
                       (assign, "$tutorial_1_msg_6_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_1_state", 0),
                   (try_begin),
                     (eq, "$tutorial_1_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_1_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_1"),
                     (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                     (entry_point_get_position,pos1,1),
                     (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (try_end),
                   (tutorial_message, "str_tutorial_1_msg_1"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,1),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 100),
                   (val_add, "$tutorial_1_state", 1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (entry_point_get_position,pos1,2),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 1),
                   (try_begin),
                     (eq, "$tutorial_1_msg_2_displayed", 0),
                     (assign, "$tutorial_1_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 100),
                   (val_add, "$tutorial_1_state", 1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (entry_point_get_position,pos1,3),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 2),
                   (try_begin),
                     (eq, "$tutorial_1_msg_3_displayed", 0),
                     (assign, "$tutorial_1_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_3"),
                     (assign, "$tutorial_num_total_dummies_destroyed", 0),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (ge, "$tutorial_num_total_dummies_destroyed", 4),
                   (val_add, "$tutorial_1_state", 1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 2),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                 (else_try),
                   (eq, "$tutorial_1_state", 3),
                   (try_begin),
                     (eq, "$tutorial_1_msg_4_displayed", 0),
                     (assign, "$tutorial_1_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_4"),
                     (store_mission_timer_a, "$tutorial_time"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (store_mission_timer_a, ":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (gt, ":cur_time", 10),
                   (val_add, "$tutorial_1_state", 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 4),
                   (try_begin),
                     (eq, "$tutorial_1_msg_5_displayed", 0),
                     (assign, "$tutorial_1_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_1_msg_5"),
                     (assign, "$g_last_archery_point_earned", 0),
                     (assign, "$tutorial_num_arrows_hit", 0),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (try_begin),
                     (get_player_agent_no, ":player_agent"),
                     (agent_get_ammo, ":cur_ammo", ":player_agent"),
                     (le, ":cur_ammo", 0),
                     (agent_refill_ammo, ":player_agent"),
                     (tutorial_message, "str_tutorial_ammo_refilled"),
                   (try_end),
                   (gt, "$g_last_archery_point_earned", 0),
                   (assign, "$g_last_archery_point_earned", 0),
                   (val_add, "$tutorial_num_arrows_hit", 1),
                   (gt, "$tutorial_num_arrows_hit", 2),
                   (val_add, "$tutorial_1_state", 1),
                 (else_try),
                   (eq, "$tutorial_1_state", 5),
                   (eq, "$tutorial_1_msg_6_displayed", 0),
                   (assign, "$tutorial_1_msg_6_displayed", 1),
                   (tutorial_message, "str_tutorial_1_msg_6"),
                   (play_sound, "snd_tutorial_2"),
                   #(assign, "$tutorial_1_finished", 1), ## CC
                 (try_end),
                 ], []),
    ],
  ),

##  (
##    "tutorial_1",0,-1,
##    "You enter the training ground.",
##    [
##        (0,mtef_leader_only|mtef_team_0,af_override_horse|af_override_weapons,0,1,[itm_tutorial_shield,itm_tutorial_sword,itm_tutorial_short_bow,itm_tutorial_arrows]), #af_override_weapons
##        (1,mtef_visitor_source|mtef_team_0,0,0,1,[]),
##        (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##        (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
##     ],
##    [
##      (ti_tab_pressed, 0, 0, [],
##       [(try_begin),
##         (lt, "$tutorial_1_state", 5),
##         (question_box, "str_do_you_wish_to_leave_tutorial"),
##        (else_try),
##          (finish_mission,0),
##        (try_end),
##        ]),
##      (ti_question_answered, 0, 0, [],
##       [(store_trigger_param_1,":answer"),
##        (eq,":answer",0),
##        (finish_mission,0),
##        ]),
##      (ti_inventory_key_pressed, 0, 0, [(display_message, "str_cant_use_inventory_tutorial")], []),
##
##      (0, 0, ti_once, [
##                         (tutorial_message_set_size, 17, 17),
##                   (tutorial_message_set_position, 500, 650),
##                       (tutorial_message_set_center_justify, 0),
##                       (assign, "$tutorial_1_state", 0),
##                       ], []),
##
##      (0, 0, 0, [(try_begin),
##                   (eq, "$tutorial_1_state", 0),
##                   (try_begin),
##                     (store_mission_timer_a, ":cur_time"),
##                     (gt, ":cur_time", 0),
##                     (tutorial_message, "str_talk_to_the_trainer"),
##                     (assign, "$tutorial_1_state", 1),
##                   (try_end),
##                 (else_try),
##                   (eq, "$tutorial_1_state", 1),
##                 (else_try),
##                   (eq, "$tutorial_1_state", 2),
##                 (else_try),
##                   (eq, "$tutorial_1_state", 3),
##                 (else_try),
##                   (eq, "$tutorial_1_state", 4),
##                 (else_try),
##                   (eq, "$tutorial_1_state", 5),
##                 (try_end),
##                 ], []),
##    ],
##  ),


  (
    "tutorial_2",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_tutorial_shield,itm_leather_jerkin,itm_leather_boots]),
        (2,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
        (4,mtef_visitor_source|mtef_team_1,0,0,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_2_state", 9),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),
      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_2_state", 100),
        ], []),

      (0, 0, ti_once, [
                         (tutorial_message_set_size, 17, 17),
                       (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),
                       
                       (assign, "$tutorial_2_state", 0),
                       (assign, "$tutorial_2_msg_1_displayed", 0),
                       (assign, "$tutorial_2_msg_2_displayed", 0),
                       (assign, "$tutorial_2_msg_3_displayed", 0),
                       (assign, "$tutorial_2_msg_4_displayed", 0),
                       (assign, "$tutorial_2_msg_5_displayed", 0),
                       (assign, "$tutorial_2_msg_6_displayed", 0),
                       (assign, "$tutorial_2_msg_7_displayed", 0),
                       (assign, "$tutorial_2_msg_8_displayed", 0),
                       (assign, "$tutorial_2_msg_9_displayed", 0),
                       (assign, "$tutorial_2_melee_agent_state", 0),
                       ], []),

      (10, 0, 0, [(call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_archer"),
                  (agent_refill_ammo, reg0)], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_2_state", 0),
                   (try_begin),
                     (eq, "$tutorial_2_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_2_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_1"),
                     (team_give_order, 1, grc_everyone, mordr_stand_ground),
                     (team_give_order, 1, grc_infantry, mordr_charge),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (ge, ":player_agent", 0),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,1),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 1),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 0),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 2),
                   (get_player_agent_no, ":player_agent"),
                   (agent_set_kick_allowed, ":player_agent", 0), #don't let player kick while defending
                   (try_begin),
                     (eq, "$tutorial_2_melee_agent_state", 0),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 3),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 1),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 3),
                     (agent_get_position, pos2, ":cur_agent"),
                     (get_distance_between_positions, ":cur_distance", pos1, pos2),
                     (le, ":cur_distance", 250),
                     (agent_clear_scripted_mode, ":cur_agent"),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                     (store_mission_timer_a,"$tutorial_time"),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 2),
                     (try_begin),
                       (eq, "$tutorial_2_msg_2_displayed", 0),
                       (assign, "$tutorial_2_msg_2_displayed", 1),
                       (play_sound, "snd_tutorial_1"),
                     (try_end),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (store_mission_timer_a,":cur_time"),
                     (val_sub, ":cur_time", "$tutorial_time"),
                     (store_sub, reg3, 20, ":cur_time"),
                     (tutorial_message, "str_tutorial_2_msg_2"),
                     (gt, ":cur_time", 20),
                     (entry_point_get_position, pos1, 3),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 3),
                     (try_begin),
                       (eq, "$tutorial_2_msg_3_displayed", 0),
                       (assign, "$tutorial_2_msg_3_displayed", 1),
                       (tutorial_message, "str_tutorial_2_msg_3"),
                       (play_sound, "snd_tutorial_1"),
                     (try_end),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 3),
                     (agent_get_position, pos2, ":cur_agent"),
                     (get_distance_between_positions, ":cur_distance", pos1, pos2),
                     (le, ":cur_distance", 250),
                     (entry_point_get_position, pos1, 2),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                   (else_try),
                     (eq, "$tutorial_2_melee_agent_state", 4),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (entry_point_get_position, pos1, 2),
                     (agent_get_position, pos2, ":cur_agent"),
                     (get_distance_between_positions, ":cur_distance", pos1, pos2),
                     (le, ":cur_distance", 250),
                     (entry_point_get_position, pos1, 30),
                     (agent_set_position, ":cur_agent", pos1),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 1),
                     (prop_instance_get_position, pos1, ":door_object"),
                     (position_rotate_z, pos1, 90),
                     (prop_instance_animate_to_position, ":door_object", pos1, 150),
                     (val_add, "$tutorial_2_melee_agent_state", 1),
                     (val_add, "$tutorial_2_state", 1),
                   (try_end),
                 (else_try),
                   (eq, "$tutorial_2_state", 3),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 1),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_set_kick_allowed, ":player_agent", 1), #reenable
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (store_mission_timer_a,"$tutorial_time"),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 4),
                   (try_begin),
                     (eq, "$tutorial_2_msg_4_displayed", 0),
                     (assign, "$tutorial_2_msg_4_displayed", 1),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (store_mission_timer_a,":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (store_sub, reg3, 20, ":cur_time"),
                   (tutorial_message, "str_tutorial_2_msg_4"),
                   (gt, ":cur_time", 20),
                   (entry_point_get_position,pos1,5),
                   (set_spawn_position, pos1),
                   (spawn_item, "itm_tutorial_sword"),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 3),
                   (agent_set_position, ":cur_agent", pos1),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 2),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 5),
                   (try_begin),
                     (eq, "$tutorial_2_msg_5_displayed", 0),
                     (assign, "$tutorial_2_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_5"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 2),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 2),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 6),
                   (try_begin),
                     (eq, "$tutorial_2_msg_6_displayed", 0),
                     (assign, "$tutorial_2_msg_6_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_6"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_has_item_equipped, ":player_agent", "itm_tutorial_sword"),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 3),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 7),
                   (try_begin),
                     (eq, "$tutorial_2_msg_7_displayed", 0),
                     (assign, "$tutorial_2_msg_7_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_7"),
                     (play_sound, "snd_tutorial_1"),
                     (get_player_agent_no, ":player_agent"),
                     (agent_set_hit_points, ":player_agent", 100),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_archer"),
                   (assign, ":cur_agent", reg0),
                   (neg|agent_is_alive, ":cur_agent"),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (agent_clear_scripted_mode, ":cur_agent"),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_a", 4),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 8),
                   (try_begin),
                     (eq, "$tutorial_2_msg_8_displayed", 0),
                     (assign, "$tutorial_2_msg_8_displayed", 1),
                     (tutorial_message, "str_tutorial_2_msg_8"),
                     (play_sound, "snd_tutorial_1"),
                     (get_player_agent_no, ":player_agent"),
                     (agent_set_hit_points, ":player_agent", 100),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (neg|agent_is_alive, ":cur_agent"),
                   (val_add, "$tutorial_2_state", 1),
                 (else_try),
                   (eq, "$tutorial_2_state", 9),
                   (eq, "$tutorial_2_msg_9_displayed", 0),
                   (assign, "$tutorial_2_msg_9_displayed", 1),
                   (tutorial_message, "str_tutorial_2_msg_9"),
                   (play_sound, "snd_tutorial_2"),
                   #(assign, "$tutorial_2_finished", 1), ## CC
                 (else_try),
                   (gt, "$tutorial_2_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                 (try_end),
                 ], []),
    ],
  ),

  (
    "tutorial_3",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_leather_jerkin,itm_leather_boots]),
        (3,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
        (5,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_3_state", 12),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),

      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_3_state", 100),
        ], []),

      (0, 0, ti_once, [
                         (tutorial_message_set_size, 17, 17),
                       (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_3_state", 0),
                       (assign, "$tutorial_3_msg_1_displayed", 0),
                       (assign, "$tutorial_3_msg_2_displayed", 0),
                       (assign, "$tutorial_3_msg_3_displayed", 0),
                       (assign, "$tutorial_3_msg_4_displayed", 0),
                       (assign, "$tutorial_3_msg_5_displayed", 0),
                       (assign, "$tutorial_3_msg_6_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_3_state", 0),
                   (try_begin),
                     (eq, "$tutorial_3_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_3_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_1"),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (entry_point_get_position, pos1, 1),
                     (set_spawn_position, pos1),
                     (spawn_item, "itm_tutorial_staff_no_attack"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (ge, ":player_agent", 0),
                   (agent_has_item_equipped, ":player_agent", "itm_tutorial_staff_no_attack"),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 1),
                   (try_begin),
                     (eq, "$tutorial_3_msg_2_displayed", 0),
                     (assign, "$tutorial_3_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 2),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 0),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 3),
                   (get_player_agent_no, ":player_agent"),
                   (agent_set_kick_allowed, ":player_agent", 0), #don't let player kick while defending
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 4),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 4),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 4),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (agent_clear_scripted_mode, ":cur_agent"),
                   (val_add, "$tutorial_3_state", 1),
                   (store_mission_timer_a,"$tutorial_time"),
                 (else_try),
                   (eq, "$tutorial_3_state", 5),
                   (try_begin),
                     (eq, "$tutorial_3_msg_3_displayed", 0),
                     (assign, "$tutorial_3_msg_3_displayed", 1),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (store_mission_timer_a,":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (store_sub, reg3, 20, ":cur_time"),
                   (tutorial_message, "str_tutorial_3_msg_3"),
                   (gt, ":cur_time", 20),
                   (entry_point_get_position, pos1, 4),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 6),
                   (try_begin),
                     (eq, "$tutorial_3_msg_4_displayed", 0),
                     (assign, "$tutorial_3_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 4),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 3),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 7),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 3),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 7),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (agent_set_position, ":cur_agent", pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 3),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 8),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 1),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 9),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 6),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 10),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 6),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (agent_clear_scripted_mode, ":cur_agent"),
                   (val_add, "$tutorial_3_state", 1),
                   (store_mission_timer_a,"$tutorial_time"),
                 (else_try),
                   (eq, "$tutorial_3_state", 11),
                   (try_begin),
                     (eq, "$tutorial_3_msg_5_displayed", 0),
                     (assign, "$tutorial_3_msg_5_displayed", 1),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (store_mission_timer_a,":cur_time"),
                   (val_sub, ":cur_time", "$tutorial_time"),
                   (store_sub, reg3, 20, ":cur_time"),
                   (tutorial_message, "str_tutorial_3_msg_5"),
                   (gt, ":cur_time", 20),
                   (entry_point_get_position, pos1, 6),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 12),
                   (try_begin),
                     (eq, "$tutorial_3_msg_6_displayed", 0),
                     (assign, "$tutorial_3_msg_6_displayed", 1),
                     (tutorial_message, "str_tutorial_3_msg_6"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 6),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 5),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 13),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (assign, ":cur_agent", reg0),
                   (entry_point_get_position, pos1, 5),
                   (agent_get_position, pos2, ":cur_agent"),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 250),
                   (entry_point_get_position, pos1, 7),
                   (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (agent_set_position, ":cur_agent", pos1),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (gt, "$tutorial_3_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                 (try_end),
                 ], []),
    ],
  ),

  (
    "tutorial_3_2",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_tutorial_staff,itm_leather_jerkin,itm_leather_boots]), 
        (4,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
        (6,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_3_state", 5),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),

      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_3_state", 100),
        ], []),


      (0, 0, ti_once, [
                         (tutorial_message_set_size, 17, 17),
                       (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_3_state", 0),
                       (assign, "$tutorial_3_msg_1_displayed", 0),
                       (assign, "$tutorial_3_msg_2_displayed", 0),
                       (assign, "$tutorial_3_msg_3_displayed", 0),
                       (assign, "$tutorial_3_msg_4_displayed", 0),
                       (assign, "$tutorial_3_msg_5_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_3_state", 0),
                   (try_begin),
                     (eq, "$tutorial_3_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_3_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_1"),
                     (play_sound, "snd_tutorial_1"),
                     (call_script, "script_cf_get_first_agent_with_troop_id","trp_tutorial_maceman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                     (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                     (assign, ":cur_agent", reg0),
                     (agent_get_position, pos1, ":cur_agent"),
                     (agent_set_scripted_destination, ":cur_agent", pos1, 0),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position,pos2,2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 1),
                   (try_begin),
                     (eq, "$tutorial_3_msg_2_displayed", 0),
                     (assign, "$tutorial_3_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 0),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 0),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (agent_clear_scripted_mode, reg0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 2),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_maceman"),
                   (neg|agent_is_alive, reg0),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 3),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, -90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 3),
                   (try_begin),
                     (eq, "$tutorial_3_msg_3_displayed", 0),
                     (assign, "$tutorial_3_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_3"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),                 
                   (scene_prop_get_instance, ":barrier_object", "spr_barrier_4m", 1),
                   (prop_instance_get_position, pos1, ":barrier_object"),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos2, ":player_agent"),
                   (position_is_behind_position, pos2, pos1),
                   (scene_prop_get_instance, ":door_object", "spr_tutorial_door_b", 1),
                   (prop_instance_get_position, pos1, ":door_object"),
                   (position_rotate_z, pos1, 90),
                   (prop_instance_animate_to_position, ":door_object", pos1, 150),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (agent_clear_scripted_mode, reg0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 4),
                   (try_begin),
                     (eq, "$tutorial_3_msg_4_displayed", 0),
                     (assign, "$tutorial_3_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_3_2_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_get_first_agent_with_troop_id", "trp_tutorial_swordsman"),
                   (neg|agent_is_alive, reg0),
                   (val_add, "$tutorial_3_state", 1),
                 (else_try),
                   (eq, "$tutorial_3_state", 5),
                   (eq, "$tutorial_3_msg_5_displayed", 0),
                   (assign, "$tutorial_3_msg_5_displayed", 1),
                   (tutorial_message, "str_tutorial_3_2_msg_5"),
                   (play_sound, "snd_tutorial_2"),
                   #(assign, "$tutorial_3_finished", 1), ## CC
                 (else_try),
                   (gt, "$tutorial_3_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                 (try_end),
                 ], []),

      
    ],
  ),

  (
    "tutorial_4",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_leader_only|mtef_team_0,af_override_everything,0,1,[itm_tutorial_sword,itm_tutorial_short_bow,itm_tutorial_arrows,itm_leather_jerkin,itm_leather_boots]), #af_override_weapons
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_4_state", 11),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),

      (ti_before_mission_start, 0, 0, [],
       [
         (scene_set_day_time, 13),
         ]),

      (0, 0, ti_once, [
                         (tutorial_message_set_size, 17, 17),
                       (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_4_state", 0),
                       (assign, "$tutorial_4_msg_1_displayed", 0),
                       (assign, "$tutorial_4_msg_2_displayed", 0),
                       (assign, "$tutorial_4_msg_3_displayed", 0),
                       (assign, "$tutorial_4_msg_4_displayed", 0),
                       (assign, "$tutorial_4_msg_5_displayed", 0),
                       (assign, "$tutorial_4_msg_6_displayed", 0),
                       (assign, "$tutorial_4_msg_7_displayed", 0),
                       ], []),

      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_4_state", 0),
                   (try_begin),
                     (eq, "$tutorial_4_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_4_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_1"),
                     (entry_point_get_position, pos1, 1),
                     (set_spawn_position, 1),
                     (spawn_horse, "itm_tutorial_saddle_horse"),
                     (assign, "$tutorial_num_total_dummies_destroyed", 0),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_horse, ":horse_agent", ":player_agent"),
                   (ge, ":horse_agent", 0),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 2),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 1),
                   (try_begin),
                     (eq, "$tutorial_4_msg_2_displayed", 0),
                     (assign, "$tutorial_4_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 2),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 3),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 2),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 3),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 4),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 3),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 4),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 5),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 4),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 5),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 6),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 5),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 6),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 1),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 6),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 1),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 7),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 7),
                   (try_begin),
                     (eq, "$tutorial_4_msg_3_displayed", 0),
                     (assign, "$tutorial_4_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_3"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 7),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 20),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 8),
                   (try_begin),
                     (eq, "$tutorial_4_msg_4_displayed", 0),
                     (assign, "$tutorial_4_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (ge, "$tutorial_num_total_dummies_destroyed", 2),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 8),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 9),
                   (try_begin),
                     (eq, "$tutorial_4_msg_5_displayed", 0),
                     (assign, "$tutorial_4_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_5"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 8),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 200),
                   (val_add, "$tutorial_4_state", 1),
                   (entry_point_get_position, pos1, 20),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 10),
                   (try_begin),
                     (eq, "$tutorial_4_msg_6_displayed", 0),
                     (assign, "$tutorial_4_msg_6_displayed", 1),
                     (tutorial_message, "str_tutorial_4_msg_6"),
                     (play_sound, "snd_tutorial_1"),
                     (assign, "$g_last_archery_point_earned", 0),
                     (assign, "$tutorial_num_arrows_hit", 0),
                   (try_end),
                   (try_begin),
                     (get_player_agent_no, ":player_agent"),
                     (agent_get_ammo, ":cur_ammo", ":player_agent"),
                     (le, ":cur_ammo", 0),
                     (agent_refill_ammo, ":player_agent"),
                     (tutorial_message, "str_tutorial_ammo_refilled"),
                   (try_end),
                   (gt, "$g_last_archery_point_earned", 0),
                   (assign, "$g_last_archery_point_earned", 0),
                   (val_add, "$tutorial_num_arrows_hit", 1),
                   (gt, "$tutorial_num_arrows_hit", 2),
                   (val_add, "$tutorial_4_state", 1),
                 (else_try),
                   (eq, "$tutorial_4_state", 11),
                   (eq, "$tutorial_4_msg_7_displayed", 0),
                   (assign, "$tutorial_4_msg_7_displayed", 1),
                   (tutorial_message, "str_tutorial_4_msg_7"),
                   (play_sound, "snd_tutorial_2"),
                   #(assign, "$tutorial_4_finished", 1), ## CC
                 (try_end),
                 ], []),
    ],
  ),

  (
    "tutorial_5",mtf_arena_fight,-1,
    "You enter the training ground.",
    [
        (0,mtef_visitor_source|mtef_team_0,af_override_everything,0,1,[itm_tutorial_sword,itm_tutorial_shield,itm_tutorial_short_bow,itm_tutorial_arrows,itm_tutorial_saddle_horse,itm_leather_jerkin,itm_leather_boots]),
        (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
        (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
        (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
        (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
        (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      (ti_tab_pressed, 0, 0, [],
       [(try_begin),
         (lt, "$tutorial_5_state", 5),
         (question_box,"str_do_you_wish_to_leave_tutorial"),
        (else_try),
          (finish_mission,0),
        (try_end),
        ]),
      (ti_question_answered, 0, 0, [],
       [(store_trigger_param_1,":answer"),
        (eq,":answer",0),
        (finish_mission,0),
        ]),
      (ti_inventory_key_pressed, 0, 0, [(display_message,"str_cant_use_inventory_tutorial")], []),


      (0, 0, ti_once, [
          (store_mission_timer_a, ":cur_time"),
          (gt, ":cur_time", 2),
          (main_hero_fallen),
          (assign, "$tutorial_5_state", 100),
        ], []),

      (0, 0, ti_once, [
                         (tutorial_message_set_size, 17, 17),
                       (tutorial_message_set_position, 500, 650),
                       (tutorial_message_set_center_justify, 0),

                       (assign, "$tutorial_5_state", 0),
                       (assign, "$tutorial_5_msg_1_displayed", 0),
                       (assign, "$tutorial_5_msg_2_displayed", 0),
                       (assign, "$tutorial_5_msg_3_displayed", 0),
                       (assign, "$tutorial_5_msg_4_displayed", 0),
                       (assign, "$tutorial_5_msg_5_displayed", 0),
                       (assign, "$tutorial_5_msg_6_displayed", 0),
                       ], []),

      (0, 0, ti_once, [(set_show_messages, 0),
                       (team_give_order, 0, grc_everyone, mordr_stand_ground),
                       (set_show_messages, 1),
                       (store_mission_timer_a, ":cur_time"),
                       (gt, ":cur_time", 3),
                       ], []),

      (0, 0, 0, [(call_script, "script_cf_turn_windmill_fans", 0)], []),
      
      (0, 0, 0, [(try_begin),
                   (eq, "$tutorial_5_state", 0),
                   (try_begin),
                     (eq, "$tutorial_5_msg_1_displayed", 0),
                     (store_mission_timer_a, ":cur_time"),
                     (gt, ":cur_time", 0),
                     (assign, "$tutorial_5_msg_1_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_1"),
                     (entry_point_get_position, pos1, 5),
                     (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                     (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (try_end),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_infantry),
                   (entry_point_get_position, pos2, 5),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (val_add, "$tutorial_5_state", 1),
                   (entry_point_get_position, pos1, 6),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 1),
                   (try_begin),
                     (eq, "$tutorial_5_msg_2_displayed", 0),
                     (assign, "$tutorial_5_msg_2_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_2"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_infantry),
                   (entry_point_get_position, pos2, 5),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 6),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 500),
                   (val_add, "$tutorial_5_state", 1),
                   (entry_point_get_position, pos1, 7),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (entry_point_get_position, pos1, 30),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 2),
                   (try_begin),
                     (eq, "$tutorial_5_msg_3_displayed", 0),
                     (assign, "$tutorial_5_msg_3_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_3"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (get_player_agent_no, ":player_agent"),
                   (agent_get_position, pos1, ":player_agent"),
                   (entry_point_get_position, pos2, 7),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 500),
                   (val_add, "$tutorial_5_state", 1),
                   (modify_visitors_at_site,"scn_tutorial_5"),
                   (reset_visitors),
                   (set_visitor,5,"trp_musket_man"),
                   (set_visitor,6,"trp_musket_man"),
                   (set_visitor,7,"trp_musket_man"),
                   (entry_point_get_position, pos1, 11),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (entry_point_get_position, pos1, 12),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (set_show_messages, 0),
                   (team_give_order, 0, grc_archers, mordr_stand_ground),
                   (set_show_messages, 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 3),
                   (try_begin),
                     (eq, "$tutorial_5_msg_4_displayed", 0),
                     (assign, "$tutorial_5_msg_4_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_4"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_archers),
                   (entry_point_get_position, pos2, 11),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (call_script, "script_cf_team_get_average_position_of_agents_with_type_to_pos1", 0, grc_infantry),
                   (entry_point_get_position, pos2, 12),
                   (get_distance_between_positions, ":cur_distance", pos1, pos2),
                   (le, ":cur_distance", 1000),
                   (val_add, "$tutorial_5_state", 1),
                   (entry_point_get_position, pos1, 30),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (modify_visitors_at_site,"scn_tutorial_5"),
                   (reset_visitors),
                   (set_visitor,8,"trp_bandit"),
                   (set_visitor,9,"trp_bandit"),
                   (set_visitor,10,"trp_bandit"),
                   (set_visitor,11,"trp_bandit"),
                   (team_give_order, 1, grc_everyone, mordr_charge),
                 (else_try),
                   (eq, "$tutorial_5_state", 4),
                   (try_begin),
                     (eq, "$tutorial_5_msg_5_displayed", 0),
                     (assign, "$tutorial_5_msg_5_displayed", 1),
                     (tutorial_message, "str_tutorial_5_msg_5"),
                     (play_sound, "snd_tutorial_1"),
                   (try_end),
                   (assign, ":enemy_count", 0),
                   (try_for_agents, ":cur_agent"),
                     (agent_is_human, ":cur_agent"),
                     (agent_is_alive, ":cur_agent"),
                     (agent_get_team, ":cur_team", ":cur_agent"),
                     (eq, ":cur_team", 1),
                     (val_add, ":enemy_count", 1),
                   (try_end),
                   (eq, ":enemy_count", 0),
                   (val_add, "$tutorial_5_state", 1),
                 (else_try),
                   (eq, "$tutorial_5_state", 5),
                   (eq, "$tutorial_5_msg_6_displayed", 0),
                   (assign, "$tutorial_5_msg_6_displayed", 1),
                   (tutorial_message, "str_tutorial_5_msg_6"),
                   (play_sound, "snd_tutorial_2"),
                   #(assign, "$tutorial_5_finished", 1), ## CC
                 (else_try),
                   (gt, "$tutorial_5_state", 30),
                   (tutorial_message, "str_tutorial_failed"),
                   (entry_point_get_position, pos1, 30),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_yellow", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                   (scene_prop_get_instance, ":flag_object", "spr_tutorial_flag_red", 0),
                   (prop_instance_animate_to_position, ":flag_object", pos1, 1),
                 (try_end),
                 ], []),
    ],
  ),

  (
    "quick_battle_battle",mtf_battle_mode,-1,
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_custom_battle_tab_press,
      common_custom_battle_question_answered,
      common_inventory_not_available,

      (ti_before_mission_start, 0, 0, [],
       [
         (store_random_in_range, ":time", 0, 24),
         (scene_set_day_time, ":time"),

         ]),

      common_battle_init_banner,
      
      (0, 0, ti_once, [],
        [
          (assign, "$g_battle_result", 0),
          (call_script, "script_combat_music_set_situation_with_culture"),
         ]),

      common_music_situation_update,
      custom_battle_check_victory_condition,
      common_battle_victory_display,
      custom_battle_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      #horse_archer_skirmish,
    ] + quick_battle_triggers,
  ),


  (
    "quick_battle_battle_mult",mtf_battle_mode,-1,
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_custom_battle_tab_press,
      common_custom_battle_question_answered,
      common_inventory_not_available,

      (ti_before_mission_start, 0, 0, [], 
      [
      (call_script, "script_multiplayer_remove_destroy_mod_targets"),
      (call_script, "script_multiplayer_remove_headquarters_flags"), 
      ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (store_random_in_range, ":time", 0, 24),
         (scene_set_day_time, ":time"),

         ]),

      common_battle_init_banner,
      
      (0, 0, ti_once, [],
        [
          (assign, "$g_battle_result", 0),
          (call_script, "script_combat_music_set_situation_with_culture"),
         ]),

      common_music_situation_update,
      custom_battle_check_victory_condition,
      common_battle_victory_display,
      custom_battle_check_defeat_condition,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      #horse_archer_skirmish,
    ] + quick_battle_triggers,
  ),

  (
    "quick_battle_siege", mtf_battle_mode,-1,
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_mission_start,
      common_battle_init_banner,

      (0, 0, ti_once,
       [
         (assign, "$defender_team", 0),
         (assign, "$attacker_team", 1),
         (assign, "$defender_team_2", 2),
         (assign, "$attacker_team_2", 3),
         ], []),

      (ti_before_mission_start, 0, 0, [],
       [
         (store_random_in_range, ":time", 0, 24),
         (scene_set_day_time, ":time"),
         ]),

      common_custom_battle_tab_press,
      common_custom_battle_question_answered,
      common_inventory_not_available,
      common_custom_siege_init,
      common_music_situation_update,
      custom_battle_check_victory_condition,
      common_battle_victory_display,
      custom_battle_check_defeat_condition,
      common_siege_attacker_do_not_stall,
      common_siege_refill_ammo,
      common_siege_init_ai_and_belfry,
      common_siege_move_belfry,
      common_siege_rotate_belfry,
      common_siege_assign_men_to_belfry,
      common_siege_ai_trigger_init_2,
      common_battle_order_panel,
      common_battle_order_panel_tick,
      
      ] + quick_battle_triggers,
    ),
##
##  (
##    "quick_battle_siege_offense",mtf_battle_mode,-1,
##    "You lead your men to battle.",
##    [
##      (0,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##      (1,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##      (2,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##      (3,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##      (4,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##      (5,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##      (6,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##      (7,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##
##      (8,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##      (9,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##      (10,mtef_visitor_source|mtef_team_0,af_override_horse,aif_start_alarmed,1,[]),
##
##      (11,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (12,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (13,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (14,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (15,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##      (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
##
##     ],
##    [
##      common_custom_battle_tab_press,
##      common_battle_init_banner,
##      common_custom_battle_question_answered,
##      common_custom_siege_init,
##      common_inventory_not_available,
##      common_music_situation_update,
##      custom_battle_check_victory_condition,
##      common_battle_victory_display,
##      custom_battle_check_defeat_condition,
##      
##      (0, 0, ti_once,
##       [
##         (assign, "$defender_team", 0),
##         (assign, "$attacker_team", 1),
##         (assign, "$defender_team_2", 2),
##         (assign, "$attacker_team_2", 3),
##         ], []),
##
##      common_siege_ai_trigger_init_2,
##      common_siege_attacker_do_not_stall,
##      common_siege_refill_ammo,
##      common_siege_init_ai_and_belfry,
##      common_siege_move_belfry,
##      common_siege_rotate_belfry,
##      common_siege_assign_men_to_belfry,
##    ],
##  ),

    (
    "multiplayer_dm",mtf_battle_mode,-1, #deathmatch mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      #multiplayer_server_check_belfry_movement,      
     
      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_deathmatch),
         (call_script, "script_multiplayer_server_before_mission_start_common"),
         
         (multiplayer_make_everyone_enemy),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"), # close this line and open map in deathmatch mod and use all ladders firstly 
         ]),                                                            # to be able to edit maps without damaging any headquarters flags ext. 

      (ti_after_mission_start, 0, 0, [], 
       [
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         #ELITE_WARRIOR achievement
         (try_begin),
           (multiplayer_get_my_player, ":my_player_no"),
           (is_between, ":my_player_no", 0, multiplayer_max_possible_player_id),
           (player_get_team_no, ":my_player_team", ":my_player_no"),
           (lt, ":my_player_team", multi_team_spectator),
           (player_get_kill_count, ":kill_count", ":my_player_no"),
           (player_get_death_count, ":death_count", ":my_player_no"),
           (store_mul, ":my_score_plus_death", ":kill_count", 1000),
           (val_sub, ":my_score_plus_death", ":death_count"),
           (assign, ":continue", 1),
           (get_max_players, ":num_players"),
           (assign, ":end_cond", ":num_players"),
           (try_for_range, ":player_no", 0, ":end_cond"),
             (player_is_active, ":player_no"),
             (player_get_team_no, ":player_team", ":player_no"),
             (this_or_next|eq, ":player_team", 0),
             (eq, ":player_team", 1),
             (player_get_kill_count, ":kill_count", ":player_no"),
             (player_get_death_count, ":death_count", ":player_no"), #get_death_count
             (store_mul, ":player_score_plus_death", ":kill_count", 1000),
             (val_sub, ":player_score_plus_death", ":death_count"),
             (gt, ":player_score_plus_death", ":my_score_plus_death"),
             (assign, ":continue", 0),
             (assign, ":end_cond", 0), #break
           (try_end),
           (eq, ":continue", 1),
           (unlock_achievement, ACHIEVEMENT_ELITE_WARRIOR),
         (try_end),
         #ELITE_WARRIOR achievement end

         (call_script, "script_multiplayer_event_mission_end"),

         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"), 
         (store_trigger_param_2, ":killer_agent_no"), 
         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),
         ]),
      
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),             
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),
         
           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"), 
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), 
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      (0, 0, 0, [],
       [
         (multiplayer_is_server),
         (eq, "$g_multiplayer_ready_for_spawning_agent", 1),
         (store_add, ":total_req", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
         (try_begin),
           (gt, ":total_req", 0),
           (store_random_in_range, ":random_req", 0, ":total_req"),
           (val_sub, ":random_req", "$g_multiplayer_num_bots_required_team_1"),
           (try_begin),
             (lt, ":random_req", 0),
             #add to team 1
             (assign, ":selected_team", 0),
             (val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
           (else_try),
             #add to team 2
             (assign, ":selected_team", 1),
             (val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
           (try_end),

           (team_get_faction, ":team_faction_no", ":selected_team"),
           (assign, ":available_troops_in_faction", 0),

           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_add, ":available_troops_in_faction", 1),
           (try_end),

           (store_random_in_range, ":random_troop_index", 0, ":available_troops_in_faction"),
           (assign, ":end_cond", multiplayer_ai_troops_end),
           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, ":end_cond"),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_sub, ":random_troop_index", 1),
             (lt, ":random_troop_index", 0),
             (assign, ":end_cond", 0),
             (assign, ":selected_troop", ":troop_no"),
           (try_end),
         
           (troop_get_inventory_slot, ":has_item", ":selected_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"), 
           (store_current_scene, ":cur_scene"),
           (modify_visitors_at_site, ":cur_scene"),
           (add_visitors_to_current_scene, reg0, ":selected_troop", 1, ":selected_team", -1),
           (assign, "$g_multiplayer_ready_for_spawning_agent", 0),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         #checking for restarting the map
         (assign, ":end_map", 0),
         (try_begin),
           (store_mission_timer_a, ":mission_timer"),
           (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
           (gt, ":mission_timer", ":game_max_seconds"),
           (assign, ":end_map", 1),
         (try_end),
         (try_begin),
           (eq, ":end_map", 1),
           (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
           (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
           (call_script, "script_game_set_multiplayer_mission_end"),
         (try_end),
         ]),
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,
      
      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart_deathmatch"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      
      ],
  ),

    (
    "multiplayer_tdm",mtf_battle_mode,-1, #team_deathmatch mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_team_deathmatch),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [], 
       [
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         #GLORIOUS_MOTHER_FACTION achievement
         (try_begin),
           (multiplayer_get_my_player, ":my_player_no"),
           (is_between, ":my_player_no", 0, multiplayer_max_possible_player_id),
           (player_get_team_no, ":my_player_team", ":my_player_no"),
           (lt, ":my_player_team", multi_team_spectator),
           (team_get_score, ":team_1_score", 0),
           (team_get_score, ":team_2_score", 1),
           (assign, ":continue", 0),
           (try_begin),
             (eq, ":my_player_team", 0),
             (gt, ":team_1_score", ":team_2_score"),
             (assign, ":continue", 1),
           (else_try),
             (eq, ":my_player_team", 1),
             (gt, ":team_2_score", ":team_1_score"),
             (assign, ":continue", 1),
           (try_end),
           (eq, ":continue", 1),
           (unlock_achievement, ACHIEVEMENT_GLORIOUS_MOTHER_FACTION),
         (try_end),
         #GLORIOUS_MOTHER_FACTION achievement end

         (call_script, "script_multiplayer_event_mission_end"),
         
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"), 
         (store_trigger_param_2, ":killer_agent_no"), 
         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),
         #adding 1 score points to killer agent's team. (special for "headquarters" and "team deathmatch" mod)
         (try_begin), 
           (ge, ":killer_agent_no", 0),
           (agent_is_human, ":dead_agent_no"),
           (agent_is_human, ":killer_agent_no"),
           (agent_get_team, ":killer_agent_team", ":killer_agent_no"),
           (le, ":killer_agent_team", 1), #0 or 1 is ok
           (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
           (neq, ":killer_agent_team", ":dead_agent_team"),
           (team_get_score, ":team_score", ":killer_agent_team"),
           (val_add, ":team_score", 1),
           (team_set_score, ":killer_agent_team", ":team_score"),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),             
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 1, ":is_horseman"), 
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), 
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),
      
      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      (20, 0, 0, [],
       [
         (multiplayer_is_server),
         #auto team balance control in every 20 seconds (tdm)
         (call_script, "script_check_team_balance"),
         ]),

      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,
      multiplayer_battle_window_opened,

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ## CC
      ## CC
      ],
  ),
  
  (
    "multiplayer_hq", mtf_battle_mode,-1, #headquarters mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_headquarters),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (store_mul, ":initial_hq_score", "$g_multiplayer_game_max_points", 10000),
         
         (assign, "$g_score_team_1", ":initial_hq_score"),
         (assign, "$g_score_team_2", ":initial_hq_score"),

         (try_for_range, ":cur_flag_slot", multi_data_flag_owner_begin, multi_data_flag_owner_end),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", -1),
         (try_end),
           
         (try_begin),
           (multiplayer_is_server),
           (try_for_range, ":cur_flag_slot", multi_data_flag_pull_code_begin, multi_data_flag_pull_code_end),
             (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", -1),
           (try_end),
         (try_end),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),

         (try_begin),
           (multiplayer_is_server),
           (team_set_score, 0, "$g_multiplayer_game_max_points"),
           (team_set_score, 1, "$g_multiplayer_game_max_points"),
         (try_end),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),         
         (set_spawn_effector_scene_prop_kind, 0, "$team_1_flag_scene_prop"), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to $team_1_flag_scene_prop
         (set_spawn_effector_scene_prop_kind, 1, "$team_2_flag_scene_prop"), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to $team_2_flag_scene_prop
         
         (try_begin),
           (multiplayer_is_server),

           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         
           (assign, "$g_number_of_flags", 0),
         
           #place base flags
           (entry_point_get_position, pos1, multi_base_point_team_1),
           (entry_point_get_position, pos3, multi_base_point_team_1),

           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),           
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),           
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),                    
           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_flag_gray_code_only", 0),           
         
           (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 1),
           (val_add, "$g_number_of_flags", 1),

           (entry_point_get_position, pos2, multi_base_point_team_2),
           (entry_point_get_position, pos3, multi_base_point_team_2),
         
           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),                    
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),                    
           (set_spawn_position, pos3),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),                    
           (set_spawn_position, pos3),
           (spawn_scene_prop, "spr_headquarters_flag_gray_code_only", 0),                    
           (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 2),
           (val_add, "$g_number_of_flags", 1),

           (scene_prop_get_num_instances, ":num_instances_of_red_headquarters_flag", "spr_headquarters_flag_red"),
           (scene_prop_get_num_instances, ":num_instances_of_blue_headquarters_flag", "spr_headquarters_flag_blue"),
           (scene_prop_get_num_instances, ":num_instances_of_gray_headquarters_flag", "spr_headquarters_flag_gray"),

           (store_add, ":end_cond", "spr_headquarters_flag_gray", 1),
           (try_for_range, ":headquarters_flag_no", "spr_headquarters_flag_red", ":end_cond"),
             (try_begin),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_red"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_red_headquarters_flag"),
             (else_try),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_blue"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_blue_headquarters_flag"),
             (else_try),
               (eq, ":headquarters_flag_no", "spr_headquarters_flag_gray"),
               (assign, ":num_instances_of_headquarters_flag", ":num_instances_of_gray_headquarters_flag"),
             (try_end),
             (gt, ":num_instances_of_headquarters_flag", 0),
             (try_for_range, ":instance_no", 0, ":num_instances_of_headquarters_flag"),
               (scene_prop_get_instance, ":flag_id", ":headquarters_flag_no", ":instance_no"),
               (prop_instance_get_position, pos0, ":flag_id"),
        
               (set_spawn_position, pos0),
               (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),               
         
               #place other flags
               (try_for_range, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_red", ":end_cond"),
                 (set_spawn_position, pos0),             
                 (try_begin),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_red"),
                   (spawn_scene_prop, "$team_1_flag_scene_prop"),
                 (else_try),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_blue"),
                   (spawn_scene_prop, "$team_2_flag_scene_prop"),
                 (else_try),
                   (eq, ":headquarters_flag_no_will_be_added", "spr_headquarters_flag_gray"),
                   (spawn_scene_prop, "spr_headquarters_flag_gray_code_only"),
                 (try_end),                         
               (try_end),

               #assign who owns this flag values
               (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
               (try_begin),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_red"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 1),
               (else_try),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_blue"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 2),
               (else_try),
                 (eq, ":headquarters_flag_no", "spr_headquarters_flag_gray"),
                 (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 0),
               (try_end),
               (val_add, "$g_number_of_flags", 1),         
             (try_end),
           (try_end),

           (assign, "$g_number_of_initial_team_1_flags", 0),
           (assign, "$g_number_of_initial_team_2_flags", 0),

           (try_for_range, ":place_no", 0, "$g_number_of_flags"),
             (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, ":place_no"),
             (troop_get_slot, ":current_owner", "trp_multiplayer_data", ":cur_flag_slot"),
         
             (try_begin),
               (eq, ":place_no", 0),
               (entry_point_get_position, pos0, multi_base_point_team_1),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (assign, "$g_base_flag_team_1", ":flag_id"),
             (else_try),
               (eq, ":place_no", 1),
               (entry_point_get_position, pos0, multi_base_point_team_2),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (assign, "$g_base_flag_team_2", ":flag_id"),
             (else_try),
               (assign, ":flag_start_red", 2),
               (scene_prop_get_num_instances, ":num_initial_red_flags", "spr_headquarters_flag_red"),
               (store_add, ":flag_start_blue", ":flag_start_red", ":num_initial_red_flags"),
               (scene_prop_get_num_instances, ":num_initial_blue_flags", "spr_headquarters_flag_blue"),
               (store_add, ":flag_start_gray", ":flag_start_blue", ":num_initial_blue_flags"),
               (scene_prop_get_num_instances, ":num_initial_gray_flags", "spr_headquarters_flag_gray"),         
               (try_begin),
                 (ge, ":place_no", ":flag_start_red"),
                 (gt, ":num_initial_red_flags", 0),         
                 (store_sub, ":flag_no", ":place_no", ":flag_start_red"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_red", ":flag_no"),
               (else_try),
                 (ge, ":place_no", ":flag_start_blue"),
                 (gt, ":num_initial_blue_flags", 0),         
                 (store_sub, ":flag_no", ":place_no", ":flag_start_blue"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_blue", ":flag_no"),
               (else_try),
                 (ge, ":place_no", ":flag_start_gray"),
                 (gt, ":num_initial_gray_flags", 0),         
                 (store_sub, ":flag_no", ":place_no", ":flag_start_gray"),
                 (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray", ":flag_no"),
               (try_end),             
               (prop_instance_get_position, pos0, ":flag_id"),
             (try_end),

             (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":place_no"),
             (prop_instance_set_position, ":pole_id", pos0),
         
             (position_move_z, pos0, multi_headquarters_pole_height),           
             (try_begin),
               (eq, ":current_owner", 0),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 1),
             (else_try),
               (eq, ":current_owner", 1),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 1),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (val_add, "$g_number_of_initial_team_1_flags", 1),
             (else_try),
               (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 1),
               (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":place_no"),
               (prop_instance_set_position, ":flag_id", pos0),
               (scene_prop_set_visibility, ":flag_id", 0),
               (val_add, "$g_number_of_initial_team_2_flags", 1),
             (try_end),
           (try_end),
         (else_try),
           #these three lines both used in calculation of $g_number_of_flags and below part removing of initially placed flags
           (scene_prop_get_num_instances, ":num_instances_of_red_headquarters_flag", "spr_headquarters_flag_red"),
           (scene_prop_get_num_instances, ":num_instances_of_blue_headquarters_flag", "spr_headquarters_flag_blue"),
           (scene_prop_get_num_instances, ":num_instances_of_gray_headquarters_flag", "spr_headquarters_flag_gray"),

           (assign, "$g_number_of_flags", 2),
           (val_add, "$g_number_of_flags", ":num_instances_of_red_headquarters_flag"),
           (val_add, "$g_number_of_flags", ":num_instances_of_blue_headquarters_flag"),
           (val_add, "$g_number_of_flags", ":num_instances_of_gray_headquarters_flag"),         
         (try_end),

         #remove initially placed flags
         (try_for_range, ":flag_no", 0, ":num_instances_of_red_headquarters_flag"),
           (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_red", ":flag_no"),
           (scene_prop_set_visibility, ":flag_id", 0),
         (try_end),
         (try_for_range, ":flag_no", 0, ":num_instances_of_blue_headquarters_flag"),
           (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_blue", ":flag_no"),
           (scene_prop_set_visibility, ":flag_id", 0),
         (try_end),
         (try_for_range, ":flag_no", 0, ":num_instances_of_gray_headquarters_flag"),
           (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray", ":flag_no"),
           (scene_prop_set_visibility, ":flag_id", 0),
         (try_end),

         (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
           (store_add, ":cur_flag_owned_seconds_counts_slot", multi_data_flag_owned_seconds_begin, ":flag_no"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot", 0),
         (try_end),

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
       ]),         

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (try_begin),
           (multiplayer_get_my_player, ":my_player_no"),
           (is_between, ":my_player_no", 0, multiplayer_max_possible_player_id),
           (player_get_team_no, ":my_player_team", ":my_player_no"),
           (lt, ":my_player_team", multi_team_spectator),
           (call_script, "script_get_headquarters_scores"),
           (assign, ":team_1_num_flags", reg0),
           (assign, ":team_2_num_flags", reg1),
           (assign, ":continue", 0),
           (try_begin),
             (eq, ":my_player_team", 0),
             (gt, ":team_1_num_flags", ":team_2_num_flags"),
             (assign, ":continue", 1),
           (else_try),
             (eq, ":my_player_team", 1),
             (gt, ":team_2_num_flags", ":team_1_num_flags"),
             (assign, ":continue", 1),
           (try_end),
           (eq, ":continue", 1),
           (unlock_achievement, ACHIEVEMENT_RUIN_THE_RAID),
         (try_end),
         (call_script, "script_multiplayer_event_mission_end"),

         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"), 
         (store_trigger_param_2, ":killer_agent_no"), 
         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         #adding 1 score points to killer agent's team. (special for "headquarters" and "team deathmatch" mod)
         (try_begin), 
           (multiplayer_is_server),
           (ge, ":killer_agent_no", 0),
           (agent_is_human, ":dead_agent_no"),
           (agent_is_human, ":killer_agent_no"),
           (agent_get_team, ":killer_agent_team", ":killer_agent_no"),
           (le, ":killer_agent_team", 1), #0 or 1 is ok
           (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
           (neq, ":killer_agent_team", ":dead_agent_team"),
           (team_get_score, ":team_score", ":dead_agent_team"),
           (try_begin),
             (eq, ":killer_agent_team", 0),
             (val_add, "$g_score_team_2", -10000), #if someone died from "team 2" then "team 2" loses 1 score point
           (else_try),
             (val_add, "$g_score_team_1", -10000), #if someone died from "team 1" then "team 1" loses 1 score point
           (try_end),
           (val_sub, ":team_score", 1),
           
           (get_max_players, ":num_players"),

           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", ":dead_agent_team", ":team_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, ":dead_agent_team", ":team_score"),             
           (try_end),
         (try_end),
         ]),

      (1, 0, 0, [],
      [
        (multiplayer_is_server),
        #trigger for (a) counting seconds of flags being owned by their owners & (b) to calculate seconds past after that flag's pull message has shown          
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          #part a: counting seconds of flags being owned by their owners
          (store_add, ":cur_flag_owned_seconds_counts_slot", multi_data_flag_owned_seconds_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_owned_seconds", "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot"),
          (val_add, ":cur_flag_owned_seconds", 1),
          (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot", ":cur_flag_owned_seconds"),
          #part b: to calculate seconds past after that flag's pull message has shown
          (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
          (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
          (try_begin),
            (ge, ":cur_flag_pull_code", 100),
            (lt, ":cur_flag_pull_message_seconds_past", 25),
            (val_add, ":cur_flag_pull_code", 1),
            (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":cur_flag_pull_code"),
          (try_end),
        (try_end),        
      ]),               
      
      (0, 0, 0, [], #if this trigger takes lots of time in the future and make server machine runs headqurters mod
                    #very slow with lots of players make period of this trigger 1 seconds, but best is 0. Currently
                    #we are testing this mod with few players and no speed program occured.
      [
        (multiplayer_is_server),
        #main trigger which controls which agent is moving/near which flag.
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
          (troop_get_slot, ":current_owner_code", "trp_multiplayer_data", ":cur_flag_owner_counts_slot"),
          (store_div, ":old_team_1_agent_count", ":current_owner_code", 100),
          (store_mod, ":old_team_2_agent_count", ":current_owner_code", 100),
        
          (assign, ":number_of_agents_around_flag_team_1", 0),
          (assign, ":number_of_agents_around_flag_team_2", 0),

          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.

          (get_max_players, ":num_players"),
            (try_for_range, ":player_no", 0, ":num_players"),
            (player_is_active, ":player_no"),
            (player_get_agent_id, ":cur_agent", ":player_no"),
            (ge, ":cur_agent", 0),
            (agent_is_alive, ":cur_agent"),
            (agent_get_team, ":cur_agent_team", ":cur_agent"),
            (agent_get_position, pos1, ":cur_agent"), #pos1 holds agent's position.
            (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
            (get_sq_distance_between_position_heights, ":squared_height_dist", pos0, pos1),
            (val_add, ":squared_dist", ":squared_height_dist"),
            (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
            (try_begin),
              (eq, ":cur_agent_team", 0),
              (val_add, ":number_of_agents_around_flag_team_1", 1),
            (else_try),
              (eq, ":cur_agent_team", 1),
              (val_add, ":number_of_agents_around_flag_team_2", 1),
            (try_end),
          (try_end),

          (try_begin),
            (this_or_next|neq, ":old_team_1_agent_count", ":number_of_agents_around_flag_team_1"),
            (neq, ":old_team_2_agent_count", ":number_of_agents_around_flag_team_2"),

            (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
            (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),

            (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
            (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
            (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
            (store_div, ":cur_flag_puller_team_last", ":cur_flag_pull_code", 100),

            (try_begin),        
              (assign, ":continue", 0),
              (try_begin),
                (neq, ":cur_flag_owner", 1),
                (eq, ":old_team_1_agent_count", 0),
                (gt, ":number_of_agents_around_flag_team_1", 0),
                (eq, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":puller_team", 1),
                (assign, ":continue", 1),
              (else_try),
                (neq, ":cur_flag_owner", 2),
                (eq, ":old_team_2_agent_count", 0),
                (eq, ":number_of_agents_around_flag_team_1", 0),
                (gt, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":puller_team", 2),
                (assign, ":continue", 1),
              (try_end),
 
              (eq, ":continue", 1),

              (store_mul, ":puller_team_multiplied_by_100", ":puller_team", 100),
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":puller_team_multiplied_by_100"),

              (this_or_next|neq, ":cur_flag_puller_team_last", ":puller_team"),
              (ge, ":cur_flag_pull_message_seconds_past", 25),

              (store_mul, ":flag_code", ":puller_team", 100),
              (val_add, ":flag_code", ":flag_no"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_is_pulling, ":flag_code"), 
              #for only server itself-----------------------------------------------------------------------------------------------     
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_is_pulling, ":flag_code"),
              (try_end),
            (try_end),

            (try_begin),
              (store_mul, ":current_owner_code", ":number_of_agents_around_flag_team_1", 100),
              (val_add, ":current_owner_code", ":number_of_agents_around_flag_team_2"),        
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owner_counts_slot", ":current_owner_code"),

              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_set_num_agents_around_flag", ":flag_no", ":current_owner_code"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (get_max_players, ":num_players"),
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":current_owner_code"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),

        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (assign, ":new_flag_owner", -1),

          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.            

          (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),

          (try_begin),
            (try_begin),
              (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
              (scene_prop_get_visibility, ":flag_visibility", ":flag_id"),
              (assign, ":cur_shown_flag", 1),
              (eq, ":flag_visibility", 0),
              (scene_prop_get_instance, ":flag_id", "$team_2_flag_scene_prop", ":flag_no"),
              (scene_prop_get_visibility, ":flag_visibility", ":flag_id"),
              (assign, ":cur_shown_flag", 2),
              (eq, ":flag_visibility", 0),                    
              (scene_prop_get_instance, ":flag_id", "spr_headquarters_flag_gray_code_only", ":flag_no"),
              (scene_prop_get_visibility, ":flag_visibility", ":flag_id"),        
              (assign, ":cur_shown_flag", 0),
            (try_end),

            #flag_id holds shown flag after this point
            (prop_instance_get_position, pos1, ":flag_id"), #pos1 holds gray/red/blue (current shown) flag position.

            (try_begin),
              (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),        
              (lt, ":squared_dist", multi_headquarters_distance_sq_to_change_flag), #if distance is less than 2 meters

              (store_add, ":cur_flag_players_around_slot", multi_data_flag_players_around_begin, ":flag_no"),
              (troop_get_slot, ":cur_flag_players_around", "trp_multiplayer_data", ":cur_flag_players_around_slot"),
              (store_div, ":number_of_agents_around_flag_team_1", ":cur_flag_players_around", 100),
              (store_mod, ":number_of_agents_around_flag_team_2", ":cur_flag_players_around", 100),

              (try_begin),
                (gt, ":number_of_agents_around_flag_team_1", 0),
                (eq, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":new_flag_owner", 0),
                (assign, ":new_shown_flag", 1),
              (else_try),
                (eq, ":number_of_agents_around_flag_team_1", 0),
                (gt, ":number_of_agents_around_flag_team_2", 0),
                (assign, ":new_flag_owner", 0),
                (assign, ":new_shown_flag", 2),
              (else_try),
                (eq, ":number_of_agents_around_flag_team_1", 0),
                (eq, ":number_of_agents_around_flag_team_2", 0),
                (neq, ":cur_shown_flag", 0),
                (assign, ":new_flag_owner", 0),
                (assign, ":new_shown_flag", 0),
              (try_end),
            (else_try),
              (neq, ":cur_flag_owner", ":cur_shown_flag"),      
              (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),        
              (ge, ":squared_dist", multi_headquarters_distance_sq_to_set_flag), #if distance is more equal than 9 meters

              (store_add, ":cur_flag_players_around_slot", multi_data_flag_players_around_begin, ":flag_no"),
              (troop_get_slot, ":cur_flag_players_around", "trp_multiplayer_data", ":cur_flag_players_around_slot"),
              (store_div, ":number_of_agents_around_flag_team_1", ":cur_flag_players_around", 100),
              (store_mod, ":number_of_agents_around_flag_team_2", ":cur_flag_players_around", 100),

              (try_begin),
                (eq, ":cur_shown_flag", 1),
                (assign, ":new_flag_owner", 1),
                (assign, ":new_shown_flag", 1),
              (else_try),
                (eq, ":cur_shown_flag", 2),
                (assign, ":new_flag_owner", 2),
                (assign, ":new_shown_flag", 2),
              (try_end),        
            (try_end),
          (try_end),
        
          (try_begin),
            (ge, ":new_flag_owner", 0),
            (this_or_next|neq, ":new_flag_owner", ":cur_flag_owner"),
            (neq, ":cur_shown_flag", ":new_shown_flag"),

            (try_begin),
              (neq, ":cur_flag_owner", 0),
              (eq, ":new_flag_owner", 0),
              (try_begin),
                (eq, ":cur_flag_owner", 1),
                (assign, ":neutralizer_team", 2),
              (else_try),
                (eq, ":cur_flag_owner", 2),
                (assign, ":neutralizer_team", 1),
              (try_end),
              (store_mul, ":flag_code", ":neutralizer_team", 100),
              (val_add, ":flag_code", ":flag_no"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_neutralized, ":flag_code"), 
              #for only server itself-----------------------------------------------------------------------------------------------     
              (get_max_players, ":num_players"),        
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_neutralized, ":flag_code"),
              (try_end),              
            (try_end),
        
            (try_begin),
              (neq, ":cur_flag_owner", ":new_flag_owner"),
              (neq, ":new_flag_owner", 0),
              (store_mul, ":flag_code", ":new_flag_owner", 100),
              (val_add, ":flag_code", ":flag_no"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_captured, ":flag_code"), 
              #for only server itself-----------------------------------------------------------------------------------------------     
              (get_max_players, ":num_players"),        
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_captured, ":flag_code"),
              (try_end),              
            (try_end),

            #for only server itself-----------------------------------------------------------------------------------------------
            (call_script, "script_set_num_agents_around_flag", ":flag_no", ":cur_flag_players_around"),
            #for only server itself-----------------------------------------------------------------------------------------------
            (assign, ":number_of_total_players", 0),
            (get_max_players, ":num_players"),        
            (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
              (player_is_active, ":player_no"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":cur_flag_players_around"),
              (val_add, ":number_of_total_players", 1),
            (try_end),

            (store_mul, ":owner_code", ":new_flag_owner", 100),
            (val_add, ":owner_code", ":new_shown_flag"),
            #for only server itself-----------------------------------------------------------------------------------------------
            (call_script, "script_change_flag_owner", ":flag_no", ":owner_code"),
            #for only server itself-----------------------------------------------------------------------------------------------
            (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
              (player_is_active, ":player_no"),
              (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_change_flag_owner, ":flag_no", ":owner_code"),          
            (try_end),

            (try_begin),
              (neq, ":new_flag_owner", 0),

              (try_begin),
                (eq, ":new_flag_owner", 1),
                (assign, ":number_of_players_around_flag", ":number_of_agents_around_flag_team_1"),
              (else_try),
                (assign, ":number_of_players_around_flag", ":number_of_agents_around_flag_team_2"),
              (try_end),

              (store_add, ":cur_flag_owned_seconds_counts_slot", multi_data_flag_owned_seconds_begin, ":flag_no"),
              (troop_get_slot, ":current_flag_owned_seconds", "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot"),              
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owned_seconds_counts_slot", 0),

              (val_min, ":current_flag_owned_seconds", 360), #360 seconds is max time for hq, this will limit money awarding by (180 x total_number_of_players)

              (scene_prop_get_instance, ":flag_of_team_1", "$team_1_flag_scene_prop", ":flag_no"),
              (scene_prop_get_instance, ":flag_of_team_2", "$team_2_flag_scene_prop", ":flag_no"),

              (try_begin),
                (this_or_next|eq, "$g_base_flag_team_1", ":flag_of_team_1"),
                (eq, "$g_base_flag_team_2", ":flag_of_team_2"),
                (assign, ":flag_value", 2),
              (else_try),
                (assign, ":flag_value", 1),
              (try_end),

              (try_begin),                                #score awarding in flag capturing is changed in hq. If only one player captured flag he get 3 points,
                (le, ":number_of_players_around_flag", 1),   #if 2 player captured they get 2 points, if <=6 players get flag all get 1 points. There is no importance of flag value at scoring.
                (assign, ":score_award_per_player", 3),
              (else_try),
                (eq, ":number_of_players_around_flag", 2),
                (assign, ":score_award_per_player", 2),
              (else_try),
                (le, ":number_of_players_around_flag", 6),
                (assign, ":score_award_per_player", 1),
              (else_try),
                (assign, ":score_award_per_player", 0),
              (try_end),
              
              (store_mul, ":total_money_award", ":current_flag_owned_seconds", ":number_of_total_players"), #total money will be shared after a flag capturing is (0.50 * seconds * number_of_players)         
              (val_mul, ":total_money_award", ":flag_value"),                                               #example: if 15 players is playing and 120 seconds past before flag captured, award is 900 golds.
              (val_div, ":total_money_award", 2),

              (try_begin),
                (gt, ":number_of_players_around_flag", 0), #if there are still any living agents around flag.
                (store_div, ":money_award_per_player", ":total_money_award", ":number_of_players_around_flag"),
              (try_end),
        
              (get_max_players, ":num_players"),
                (try_for_range, ":player_no", 0, ":num_players"),
                (player_is_active, ":player_no"),
                (player_get_agent_id, ":cur_agent", ":player_no"),
                (ge, ":cur_agent", 0),
                (agent_get_team, ":cur_agent_team", ":cur_agent"),
                (val_add, ":cur_agent_team", 1),
                (eq, ":cur_agent_team", ":new_flag_owner"),
                (agent_get_position, pos1, ":cur_agent"), 
                (prop_instance_get_position, pos0, ":pole_id"), 
                (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
                (get_sq_distance_between_position_heights, ":squared_height_dist", pos0, pos1),
                (val_add, ":squared_dist", ":squared_height_dist"),
                (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),                
                (player_get_score, ":player_score", ":player_no"), #give score to player which helped flag to be owned by new_flag_owner team 
                (val_add, ":player_score", ":score_award_per_player"),
                (player_set_score, ":player_no", ":player_score"),                
                (player_get_gold, ":player_gold", ":player_no"), #give money to player which helped flag to be owned by new_flag_owner team 
                (val_add, ":player_gold", ":money_award_per_player"),
                (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),              
              (try_end),
            (try_end),
          (try_end),
        (try_end),
        ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
        #trigger for increasing score in each second.
        (assign, ":number_of_team_1_flags", 0),
        (assign, ":number_of_team_2_flags", 0),

        (assign, ":owned_flag_value", 0),        
        (assign, ":not_owned_flag_value", 0),
        
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_owner_slot", multi_data_flag_owner_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_owner", "trp_multiplayer_data", ":cur_flag_owner_slot"),

          (scene_prop_get_instance, ":flag_of_team_1", "$team_1_flag_scene_prop", ":flag_no"),
          (scene_prop_get_instance, ":flag_of_team_2", "$team_2_flag_scene_prop", ":flag_no"),
        
          (try_begin),
            (this_or_next|eq, "$g_base_flag_team_1", ":flag_of_team_1"),
            (eq, "$g_base_flag_team_2", ":flag_of_team_2"),
            (assign, ":flag_value", 2),
          (else_try),
            (assign, ":flag_value", 1),
          (try_end),
        
          (try_begin),
            (eq, ":cur_flag_owner", 1),
            (val_add, ":number_of_team_1_flags", ":flag_value"),
            (val_add, ":owned_flag_value", ":flag_value"),
          (else_try),
            (eq, ":cur_flag_owner", 2),
            (val_add, ":number_of_team_2_flags", ":flag_value"),
            (val_add, ":owned_flag_value", ":flag_value"),
          (else_try),
            (val_add, ":not_owned_flag_value", ":flag_value"),
          (try_end),
        (try_end),
        
        (store_add, ":all_flag_value", ":owned_flag_value", ":not_owned_flag_value"),
        (store_sub, ":cur_flag_difference", ":number_of_team_1_flags", ":number_of_team_2_flags"),
        (store_mul, ":cur_flag_difference_mul_2", ":cur_flag_difference", 2),
        (store_sub, ":initial_flag_difference", "$g_number_of_initial_team_1_flags", "$g_number_of_initial_team_2_flags"),

        (assign, ":number_of_active_players", 0),
        (get_max_players, ":end_cond"),
        (try_for_range, ":player_no", 0, ":end_cond"),
          (player_is_active, ":player_no"),
          (val_add, ":number_of_active_players", 1),
          (assign, ":end_cond", 0),
        (try_end),

        (try_begin),
          (ge, ":cur_flag_difference_mul_2", ":initial_flag_difference"),
          (store_sub, ":difference", ":cur_flag_difference_mul_2", ":initial_flag_difference"),
          (store_mul, ":score_addition_winner", ":difference", 125),
          (val_add, ":score_addition_winner", 500),
          (store_div, ":score_addition_loser", 250000, ":score_addition_winner"),
          
          (try_begin), #if number of owned flag values < all flag values give only a percentage of score to teams
            (lt, ":owned_flag_value", ":all_flag_value"),
            (val_mul, ":score_addition_loser", ":owned_flag_value"),
            (val_div, ":score_addition_loser", ":all_flag_value"),
            (val_mul, ":score_addition_winner", ":owned_flag_value"),
            (val_div, ":score_addition_winner", ":all_flag_value"),
          (try_end),

          (call_script, "script_find_number_of_agents_constant"),        
          (val_mul, ":score_addition_winner", reg0),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", reg0),
          (val_div, ":score_addition_loser", 100),
          
          (val_mul, ":score_addition_winner", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_loser", 100),

          (try_begin),
            (ge, ":number_of_active_players", 1),
            (val_sub, "$g_score_team_2", ":score_addition_winner"),
            (try_begin),
              (ge, ":number_of_team_2_flags", 1),
              (val_sub, "$g_score_team_1", ":score_addition_loser"),
            (else_try),
              (val_sub, "$g_score_team_2", ":score_addition_loser"),
            (try_end),
          (try_end),
        (else_try),
          (store_sub, ":difference", ":initial_flag_difference", ":cur_flag_difference_mul_2"),
          (store_mul, ":score_addition_winner", ":difference", 125),
          (val_add, ":score_addition_winner", 500),
          (store_div, ":score_addition_loser", 250000, ":score_addition_winner"),
          
          (try_begin), #if number of owned flag values < all flag values give only a percentage of score to teams
            (lt, ":owned_flag_value", ":all_flag_value"),
            (val_mul, ":score_addition_loser", ":owned_flag_value"),
            (val_div, ":score_addition_loser", ":all_flag_value"),
            (val_mul, ":score_addition_winner", ":owned_flag_value"),
            (val_div, ":score_addition_winner", ":all_flag_value"),
          (try_end),

          (call_script, "script_find_number_of_agents_constant"),
          (val_mul, ":score_addition_winner", reg0),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", reg0),
          (val_div, ":score_addition_loser", 100),
        
          (val_mul, ":score_addition_winner", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_winner", 100),
          (val_mul, ":score_addition_loser", "$g_multiplayer_point_gained_from_flags"),
          (val_div, ":score_addition_loser", 100),

          (try_begin),
            (ge, ":number_of_active_players", 1),
            (try_begin),
              (ge, ":number_of_team_1_flags", 1),
              (val_sub, "$g_score_team_2", ":score_addition_loser"),
            (else_try),
              (val_sub, "$g_score_team_1", ":score_addition_loser"),
            (try_end),
            (val_sub, "$g_score_team_1", ":score_addition_winner"),
          (try_end),
        (try_end),

        (team_get_score, ":team_score_1", 0),
        (try_begin),
          (store_div, ":team_new_score_1", "$g_score_team_1", 10000),
          (neq, ":team_new_score_1", ":team_score_1"),
          (get_max_players, ":num_players"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (call_script, "script_team_set_score", 0, ":team_new_score_1"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
            (player_is_active, ":player_no"),
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 0, ":team_new_score_1"),
          (try_end),
        (try_end),

        (team_get_score, ":team_score_2", 1),
        (try_begin),
          (store_div, ":team_new_score_2", "$g_score_team_2", 10000),
          (neq, ":team_new_score_2", ":team_score_2"),
          (get_max_players, ":num_players"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (call_script, "script_team_set_score", 1, ":team_new_score_2"),
          #for only server itself-----------------------------------------------------------------------------------------------
          (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
            (player_is_active, ":player_no"),
            (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 1, ":team_new_score_2"),
          (try_end),
        (try_end),
      ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),             
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),
         
           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"), 
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), #new died (< g_multiplayer_respawn_period) so will be counted too
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      (20, 0, 0, [],
       [
         (multiplayer_is_server),
         #auto team balance control in every 10 seconds (hq)
         (call_script, "script_check_team_balance"),
         ]),

      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,
      multiplayer_battle_window_opened,

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ## CC
      
      ## CC
      ],
  ),

    (
    "multiplayer_cf",mtf_battle_mode,-1, #capture_the_flag mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      
      (64,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (65,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),

      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (try_begin),
           (multiplayer_is_server),
           (store_current_scene, ":cur_scene"),
           (this_or_next|eq, ":cur_scene", "scn_random_multi_plain_medium"),
           (this_or_next|eq, ":cur_scene", "scn_random_multi_plain_large"),
           (this_or_next|eq, ":cur_scene", "scn_random_multi_steppe_medium"),
           (eq, ":cur_scene", "scn_random_multi_steppe_large"),
           (entry_point_get_position, pos0, 0),
           (entry_point_set_position, 64, pos0),
           (entry_point_get_position, pos1, 32),
           (entry_point_set_position, 65, pos1),
         (try_end),
         
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_capture_the_flag),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (assign, "$flag_1_at_ground_timer", 0),
         (assign, "$flag_2_at_ground_timer", 0),
         
         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [],
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)
       
         (try_begin),
           (multiplayer_is_server),

           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),

           (entry_point_get_position, pos0, multi_base_point_team_1),
           (set_spawn_position, pos0),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),
         
           (entry_point_get_position, pos0, multi_base_point_team_2),
           (set_spawn_position, pos0),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),
         (try_end),

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         ]),         

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"), 
         (store_trigger_param_2, ":killer_agent_no"), 

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin),                                 #when an agent dies which carrying a flag, assign flag position to current position with
           (agent_is_human, ":dead_agent_no"),        #ground level z and do not change it again according to dead agent's any coordinate/rotation.
           (agent_get_attached_scene_prop, ":attached_scene_prop", ":dead_agent_no"),
           (try_begin),
             (try_begin),
               (multiplayer_is_server),
  
               (ge, ":attached_scene_prop", 0), #moved from above after auto-set position

               (multiplayer_get_my_player, ":my_player_no"),
               (get_max_players, ":num_players"),
               #for only server itself-----------------------------------------------------------------------------------------------
               (call_script, "script_set_attached_scene_prop", ":dead_agent_no", -1),
               (agent_set_horse_speed_factor, ":dead_agent_no", 100),
               #for only server itself-----------------------------------------------------------------------------------------------
               (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":dead_agent_no", -1),
               (try_end),

               (prop_instance_get_position, pos0, ":attached_scene_prop"), #moved from above to here after auto-set position
               (position_set_z_to_ground_level, pos0), #moved from above to here after auto-set position
               (prop_instance_set_position, ":attached_scene_prop", pos0), #moved from above to here after auto-set position

               (agent_get_team, ":dead_agent_team", ":dead_agent_no"),
               (try_begin),
                 (eq, ":dead_agent_team", 0),
                 (assign, ":dead_agent_rival_team", 1),
               (else_try),
                 (assign, ":dead_agent_rival_team", 0),
               (try_end),
               (team_set_slot, ":dead_agent_rival_team", slot_team_flag_situation, 2), #2-flag at ground
               (multiplayer_get_my_player, ":my_player_no"),
               (get_max_players, ":num_players"),
               #for only server itself-----------------------------------------------------------------------------------------------
               (call_script, "script_set_team_flag_situation", ":dead_agent_rival_team", 2),
               #for only server itself-----------------------------------------------------------------------------------------------         
               (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":dead_agent_rival_team", 2), #flag at ground
               (try_end),
             (try_end),
           (try_end),         
         (try_end),
         ]),

      (1, 0, 0, [], #returning flag if it is not touched by anyone in 60 seconds
       [
         (multiplayer_is_server),
         (try_for_range, ":team_no", 0, 2),           
           (try_begin),
             (team_slot_eq, ":team_no", slot_team_flag_situation, 2),

             (assign, ":flag_team_no", -1),
         
             (try_begin),
               (eq, ":team_no", 0),
               (val_add, "$flag_1_at_ground_timer", 1),
               (ge, "$flag_1_at_ground_timer", multi_max_seconds_flag_can_stay_in_ground),
               (assign, ":flag_team_no", 0),
             (else_try),
               (val_add, "$flag_2_at_ground_timer", 1),
               (ge, "$flag_2_at_ground_timer", multi_max_seconds_flag_can_stay_in_ground), 
               (assign, ":flag_team_no", 1),
             (try_end),

             (try_begin),
               (ge, ":flag_team_no", 0),

               (try_begin),
                 (eq, ":flag_team_no", 0),
                 (assign, "$flag_1_at_ground_timer", 0),
               (else_try),
                 (eq, ":flag_team_no", 1),
                 (assign, "$flag_2_at_ground_timer", 0),
               (try_end),
         
               #cur agent returned his own flag to its default position!
               (team_set_slot, ":flag_team_no", slot_team_flag_situation, 0), #0-flag at base

               #return team flag to its starting position.
               #for only server itself-----------------------------------------------------------------------------------------------
               (call_script, "script_set_team_flag_situation", ":flag_team_no", 0),
               #for only server itself-----------------------------------------------------------------------------------------------         
               (multiplayer_get_my_player, ":my_player_no"),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":flag_team_no", 0),
               (try_end),

               (scene_prop_get_instance, ":flag_red_id", "$team_1_flag_scene_prop", 0),
               (scene_prop_get_instance, ":flag_blue_id", "$team_2_flag_scene_prop", 0),

               (assign, ":team_1_flag_id", ":flag_red_id"),
               (assign, ":team_1_base_entry_id", multi_base_point_team_1),

               (assign, ":team_2_flag_id", ":flag_blue_id"),
               (assign, ":team_2_base_entry_id", multi_base_point_team_2),

               #return team flag to its starting position.
               (try_begin),
                 (eq, ":flag_team_no", 0),
                 (entry_point_get_position, pos5, ":team_1_base_entry_id"), #moved from above to here after auto-set position
                 (prop_instance_set_position, ":team_1_flag_id", pos5), #moved from above to here after auto-set position
               (else_try),
                 (entry_point_get_position, pos5, ":team_2_base_entry_id"), #moved from above to here after auto-set position
                 (prop_instance_set_position, ":team_2_flag_id", pos5), #moved from above to here after auto-set position
               (try_end),

               #(team_get_faction, ":team_faction", ":flag_team_no"),
               #(str_store_faction_name, s1, ":team_faction"),
               #(tutorial_message_set_position, 500, 500),
               #(tutorial_message_set_size, 30, 30),
               #(tutorial_message_set_center_justify, 1),
               #(tutorial_message, "str_s1_returned_flag", 0xFFFFFFFF, 5),

               (store_mul, ":minus_flag_team_no", ":flag_team_no", -1),
               (val_sub, ":minus_flag_team_no", 1),

               #for only server itself
               (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_returned_home, ":minus_flag_team_no"), 
 
               #no need to send also server here
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (neq, ":my_player_no", ":player_no"),
                 (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_returned_home, ":minus_flag_team_no"),
               (try_end),
             (try_end),
           (else_try),
             (try_begin),
               (eq, ":team_no", 0),
               (assign, "$flag_1_at_ground_timer", 0),
             (else_try),
               (assign, "$flag_2_at_ground_timer", 0),         
             (try_end),
           (try_end),
         (try_end),           
         ]),
         
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),             
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"), 
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), #new died (< g_multiplayer_respawn_period) so will be counted too
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      multiplayer_server_spawn_bots,
      multiplayer_server_manage_bots,

      (0, 0, 0, [], #control any agent captured flag or made score.
       [
         (multiplayer_is_server),
         (scene_prop_get_instance, ":flag_red_id", "$team_1_flag_scene_prop", 0),
         (prop_instance_get_position, pos1, ":flag_red_id"), #hold position of flag of team 1 (red flag) at pos1

         (scene_prop_get_instance, ":flag_blue_id", "$team_2_flag_scene_prop", 0),
         (prop_instance_get_position, pos2, ":flag_blue_id"), #hold position of flag of team 2 (blue flag) at pos2

         (multiplayer_get_my_player, ":my_player_no"),
         (get_max_players, ":num_players"),                               

         (try_for_agents, ":cur_agent"),
           (agent_is_human, ":cur_agent"), #horses cannot take flag
           (agent_is_alive, ":cur_agent"),
           (neg|agent_is_non_player, ":cur_agent"), #for now bots cannot take flag or return flags to home.
           (agent_get_horse, ":cur_agent_horse", ":cur_agent"),
           (eq, ":cur_agent_horse", -1), #horseman cannot take flag
           (agent_get_attached_scene_prop, ":attached_scene_prop", ":cur_agent"),
         
           (agent_get_team, ":cur_agent_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_agent_team", 0),
             (assign, ":cur_agent_rival_team", 1),
           (else_try),
             (assign, ":cur_agent_rival_team", 0),
           (try_end),

           (try_begin),
             (eq, ":cur_agent_team", 0), 
             (assign, ":our_flag_id", ":flag_red_id"),
             (assign, ":our_base_entry_id", multi_base_point_team_1),
           (else_try), 
             (assign, ":our_flag_id", ":flag_blue_id"),
             (assign, ":our_base_entry_id", multi_base_point_team_2),
           (try_end),

           (agent_get_position, pos3, ":cur_agent"),
           (prop_instance_get_position, pos4, ":our_flag_id"),
           (get_distance_between_positions, ":dist", pos3, pos4),
           (team_get_slot, ":cur_agent_flag_situation", ":cur_agent_team", slot_team_flag_situation),
         
           (try_begin), #control if agent can return his own flag to default position
             (eq, ":cur_agent_flag_situation", 2), #if our flag is at ground
             (lt, ":dist", 100), #if this agent is near to his team's own flag

             #cur agent returned his own flag to its default position!
             (team_set_slot, ":cur_agent_team", slot_team_flag_situation, 0), #0-flag at base

             #return team flag to its starting position.
             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_team_flag_situation", ":cur_agent_team", 0),
             #for only server itself-----------------------------------------------------------------------------------------------         
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":cur_agent_team", 0),
             (try_end),

             #return team flag to its starting position.
             (entry_point_get_position, pos5, ":our_base_entry_id"), #moved from above to here after auto-set position
             (prop_instance_set_position, ":our_flag_id", pos5), #moved from above to here after auto-set position

             (try_begin), #give 1 score points to player which returns his/her flag to team base
               (multiplayer_is_server),
               (neg|agent_is_non_player, ":cur_agent"),
               (agent_get_player_id, ":cur_agent_player_id", ":cur_agent"),
               (player_get_score, ":cur_agent_player_score", ":cur_agent_player_id"),
               (val_add, ":cur_agent_player_score", multi_capture_the_flag_score_flag_returning),
               (player_set_score, ":cur_agent_player_id", ":cur_agent_player_score"),
             (try_end),

             #(team_get_faction, ":cur_agent_faction", ":cur_agent_team"),
             #(str_store_faction_name, s1, ":cur_agent_faction"),
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_s1_returned_flag", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_flag_returned_home, ":cur_agent"), 

             #no need to send also server here
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_flag_returned_home, ":cur_agent"),
             (try_end),         
           (try_end),
                   
           (try_begin), #control if agent carries flag and made score
             (neq, ":attached_scene_prop", -1), #if not agent is carrying anything
         
             (try_begin),
               (eq, ":cur_agent_team", 0), 
               (assign, ":rival_flag_id", ":flag_blue_id"),
               (assign, ":rival_base_entry_id", multi_base_point_team_2),
             (else_try), 
               (assign, ":rival_flag_id", ":flag_red_id"),
               (assign, ":rival_base_entry_id", multi_base_point_team_1),
             (try_end),
             
             (eq, ":attached_scene_prop", ":rival_flag_id"), #if agent is carrying rival flag
             (eq, ":cur_agent_flag_situation", 0), #if our flag is at home position         
             (lt, ":dist", 100), #if this agent (carrying rival flag) is near to his team's own

             #cur_agent's team is scored!#
             (team_get_score, ":cur_agent_team_score", ":cur_agent_team"), #this agent's team scored
             (val_add, ":cur_agent_team_score", 1),
             (team_set_score, ":cur_agent_team", ":cur_agent_team_score"),

             (try_begin), #give 5 score points to player which connects two flag and make score to his/her team
               (multiplayer_is_server),
               (neg|agent_is_non_player, ":cur_agent"),
               (agent_get_player_id, ":cur_agent_player_id", ":cur_agent"),
               (player_get_score, ":cur_agent_player_score", ":cur_agent_player_id"),
               (val_add, ":cur_agent_player_score", "$g_multiplayer_point_gained_from_capturing_flag"),
               (player_set_score, ":cur_agent_player_id", ":cur_agent_player_score"),
             (try_end),
         
             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_team_set_score", ":cur_agent_team", ":cur_agent_team_score"),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, ":cur_agent_team", ":cur_agent_team_score"),
             (try_end),

             (agent_set_attached_scene_prop, ":cur_agent", -1),             
             (team_set_slot, ":cur_agent_rival_team", slot_team_flag_situation, 0), #0-flag at base

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_attached_scene_prop", ":cur_agent", -1),
             (agent_set_horse_speed_factor, ":cur_agent", 100),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":cur_agent", -1),
             (try_end),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_team_flag_situation", ":cur_agent_rival_team", 0),
             #for only server itself-----------------------------------------------------------------------------------------------         
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":cur_agent_rival_team", 0),
             (try_end),

             #return rival flag to its starting position
             (entry_point_get_position, pos5, ":rival_base_entry_id"), #moved from above to here after auto-set position
             (prop_instance_set_position, ":rival_flag_id", pos5), #moved from above to here after auto-set position

             #(team_get_faction, ":cur_agent_faction", ":cur_agent_team"),
             #(str_store_faction_name, s1, ":cur_agent_faction"),
             #(player_get_agent_id, ":my_player_agent", ":my_player_no"),
             #(try_begin),
             #  (ge, ":my_player_agent", 0),
             #  (agent_get_team, ":my_player_team", ":my_player_agent"),
             #  (try_begin),
             #    (eq, ":my_player_team", ":cur_agent_team"),
             #    (assign, ":text_font_color", 0xFF33DDFF),
             #  (else_try),
             #    (assign, ":text_font_color", 0xFFFF0000),
             #  (try_end),
             #(else_try),
             #  (assign, ":text_font_color", 0xFFFFFFFF),
             #(try_end),    
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_s1_captured_flag", ":text_font_color", 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_capture_the_flag_score, ":cur_agent"), 
             
             #no need to send to also server here
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_capture_the_flag_score, ":cur_agent"),
             (try_end),
           (try_end),
         
           (eq, ":attached_scene_prop", -1), #agents carrying other scene prop cannot take flag.
           (agent_get_position, pos3, ":cur_agent"),
           (agent_get_team, ":cur_agent_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_agent_team", 0), #if this agent is from team 1, look its distance to blue flag.
             (get_distance_between_positions, ":dist", pos2, pos3),
             (assign, ":rival_flag_id", ":flag_blue_id"),
           (else_try), #if this agent is from team 2, look its distance to red flag.
             (get_distance_between_positions, ":dist", pos1, pos3),
             (assign, ":rival_flag_id", ":flag_red_id"),
           (try_end),

           (try_begin),  #control if agent stole enemy flag
             (le, ":dist", 100),
             (neg|team_slot_eq, ":cur_agent_rival_team", slot_team_flag_situation, 1), #if flag is not already stolen.
             
             (agent_set_attached_scene_prop, ":cur_agent", ":rival_flag_id"),
             (agent_set_attached_scene_prop_x, ":cur_agent", 20),
             (agent_set_attached_scene_prop_z, ":cur_agent", 50),

             (try_begin),
               (eq, ":cur_agent_team", 0),
               (assign, "$flag_1_at_ground_timer", 0),
             (else_try),
               (eq, ":cur_agent_team", 1),
               (assign, "$flag_2_at_ground_timer", 0),
             (try_end),

             #cur_agent stole rival team's flag!
             (team_set_slot, ":cur_agent_rival_team", slot_team_flag_situation, 1), #1-stolen flag
                      
             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_attached_scene_prop", ":cur_agent", ":rival_flag_id"),
             (agent_set_horse_speed_factor, ":cur_agent", 75),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_attached_scene_prop, ":cur_agent", ":rival_flag_id"),
             (try_end),
         
             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_set_team_flag_situation", ":cur_agent_rival_team", 1),
             #for only server itself-----------------------------------------------------------------------------------------------
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_flag_situation, ":cur_agent_rival_team", 1),
             (try_end),

             #(team_get_faction, ":cur_agent_faction", ":cur_agent_team"),
             #(str_store_faction_name, s1, ":cur_agent_faction"),
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_s1_taken_flag", 0xFFFFFFFF, 5), 

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_capture_the_flag_stole, ":cur_agent"), 

             #no need to send also server here
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_capture_the_flag_stole, ":cur_agent"),
             (try_end),         
           (try_end),
         (try_end),         
         ]),

      (20, 0, 0, [],
       [
         (multiplayer_is_server),
         #auto team balance control in every 10 seconds (cf)
         (call_script, "script_check_team_balance"),
         ]),

      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        (start_presentation, "prsnt_multiplayer_flag_projection_display"),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ## CC
      
      ## CC
      ],
  ),

    (
    "multiplayer_sg",mtf_battle_mode,-1, #siege
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source,0,aif_start_alarmed,1,[]),
     ],
    [
      multiplayer_server_check_belfry_movement,      

      common_battle_init_banner,

      multiplayer_server_check_polls,
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),

         (try_begin),
           (multiplayer_is_server),
           (this_or_next|player_is_active, ":player_no"),
           (eq, ":player_no", 0),
             (store_mission_timer_a, ":round_time"),
             (val_sub, ":round_time", "$g_round_start_time"),
             (try_begin),
               (lt, ":round_time", 25),
               (assign, ":number_of_respawns_spent", 0),
             (else_try),
               (lt, ":round_time", 60),
               (assign, ":number_of_respawns_spent", 1),
             (else_try),
               (lt, ":round_time", 105),
               (assign, ":number_of_respawns_spent", 2),
             (else_try),
               (lt, ":round_time", 160),
               (assign, ":number_of_respawns_spent", 3),
             (else_try),
               (assign, ":number_of_respawns_spent", "$g_multiplayer_number_of_respawn_count"),
             (try_end),
             (player_set_slot, ":player_no", slot_player_spawn_count, ":number_of_respawns_spent"),             
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_return_player_respawn_spent, ":number_of_respawns_spent"),
           (try_end),         
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_siege),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (try_begin),
           (multiplayer_is_server),
           (try_for_range, ":cur_flag_slot", multi_data_flag_pull_code_begin, multi_data_flag_pull_code_end),
             (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", -1),
           (try_end),
           (assign, "$g_my_spawn_count", 0),
         (else_try),
           (assign, "$g_my_spawn_count", 0),
         (try_end),
      
         (assign, "$g_waiting_for_confirmation_to_terminate", 0),
         (assign, "$g_round_ended", 0),
         (try_begin),
           (multiplayer_is_server),
           (assign, "$g_round_start_time", 0),
         (try_end),
         (assign, "$my_team_at_start_of_round", -1),

         (assign, "$g_flag_is_not_ready", 0),

         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [], 
       [
         (call_script, "script_determine_team_flags", 0),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         
         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_number_of_flags", 0),
         (try_begin),
           (multiplayer_is_server),
           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         
           #place base flags
           (entry_point_get_position, pos1, multi_siege_flag_point),
           (set_spawn_position, pos1),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),         
           (position_move_z, pos1, multi_headquarters_pole_height),         
           (set_spawn_position, pos1),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),
           (store_add, ":cur_flag_slot", multi_data_flag_owner_begin, "$g_number_of_flags"),
           (troop_set_slot, "trp_multiplayer_data", ":cur_flag_slot", 1),
         (try_end),
         (val_add, "$g_number_of_flags", 1),

         (try_begin),
           (multiplayer_is_server),
         
           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 1),
           (try_end),
         
           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 1),
           (try_end),

           (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_a"),
           (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_b"),
         
           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
           (try_end),
         
           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
           (try_end),

           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
           (try_end),

           (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
           (try_for_range, ":belfry_no", 0, ":num_belfries"),
             (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
             (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
           (try_end),
         (try_end),
         ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),

         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),

         (try_begin),
           (neg|multiplayer_is_server),
           (try_begin),
             (eq, "$g_round_ended", 1),
             (assign, "$g_round_ended", 0),
             (assign, "$g_my_spawn_count", 0),

             #initialize scene object slots at start of new round at clients.
             (call_script, "script_initialize_all_scene_prop_slots"),

             #these lines are done in only clients at start of each new round.
             (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
             (call_script, "script_initialize_objects_clients"),
             #end of lines
           (try_end),  
         (try_end),         

         (try_begin), 
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),

           (val_add, "$g_my_spawn_count", 1),
         
           (try_begin),
             (ge, "$g_my_spawn_count", "$g_multiplayer_number_of_respawn_count"),
             (gt, "$g_multiplayer_number_of_respawn_count", 0),
             (multiplayer_get_my_player, ":my_player_no"),
             (player_get_team_no, ":my_player_team_no", ":my_player_no"),
             (eq, ":my_player_team_no", 0),
             (assign, "$g_my_spawn_count", 999),
           (try_end),
         (try_end),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),
         
         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),         

         (try_begin),
           (multiplayer_is_server),
           (agent_is_human, ":dead_agent_no"),
           (neg|agent_is_non_player, ":dead_agent_no"),
           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (player_set_slot, ":dead_agent_player_id", slot_player_spawned_this_round, 0),
         (try_end),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),
      
      (0, 0, 0, [], #if this trigger takes lots of time in the future and make server machine runs siege mod
                    #very slow with lots of players make period of this trigger 1 seconds, but best is 0. Currently
                    #we are testing this mod with few players and no speed problem occured.
      [
        (multiplayer_is_server),
        (eq, "$g_round_ended", 0),
        #main trigger which controls which agent is moving/near which flag.
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
          (troop_get_slot, ":current_owner_code", "trp_multiplayer_data", ":cur_flag_owner_counts_slot"),
          (store_div, ":old_team_1_agent_count", ":current_owner_code", 100),
          (store_mod, ":old_team_2_agent_count", ":current_owner_code", 100),
        
          (assign, ":number_of_agents_around_flag_team_1", 0),
          (assign, ":number_of_agents_around_flag_team_2", 0),

          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.

          (get_max_players, ":num_players"),
            (try_for_range, ":player_no", 0, ":num_players"),
            (player_is_active, ":player_no"),
            (player_get_agent_id, ":cur_agent", ":player_no"),            
            (ge, ":cur_agent", 0),
            (agent_is_alive, ":cur_agent"),
            (agent_get_team, ":cur_agent_team", ":cur_agent"),
            (agent_get_position, pos1, ":cur_agent"), #pos1 holds agent's position.
            (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
            (get_sq_distance_between_position_heights, ":squared_height_dist", pos0, pos1),
            (val_add, ":squared_dist", ":squared_height_dist"),
            (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
            (try_begin),
              (eq, ":cur_agent_team", 0),
              (val_add, ":number_of_agents_around_flag_team_1", 1),
            (else_try),
              (eq, ":cur_agent_team", 1),
              (val_add, ":number_of_agents_around_flag_team_2", 1),
            (try_end),
          (try_end),

          (try_begin),
            (this_or_next|neq, ":old_team_1_agent_count", ":number_of_agents_around_flag_team_1"),
            (neq, ":old_team_2_agent_count", ":number_of_agents_around_flag_team_2"),

            (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
            (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
            (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
            (store_div, ":cur_flag_puller_team_last", ":cur_flag_pull_code", 100),

            (try_begin),        
              (eq, ":old_team_2_agent_count", 0),
              (gt, ":number_of_agents_around_flag_team_2", 0),
              (eq, ":number_of_agents_around_flag_team_1", 0),
              (assign, ":puller_team", 2),

              (store_mul, ":puller_team_multiplied_by_100", ":puller_team", 100),
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":puller_team_multiplied_by_100"),

              (this_or_next|neq, ":cur_flag_puller_team_last", ":puller_team"),
              (ge, ":cur_flag_pull_message_seconds_past", 25),

              (store_mul, ":flag_code", ":puller_team", 100),
              (val_add, ":flag_code", ":flag_no"),
            (try_end),

            (try_begin),
              (store_mul, ":current_owner_code", ":number_of_agents_around_flag_team_1", 100),
              (val_add, ":current_owner_code", ":number_of_agents_around_flag_team_2"),        
              (troop_set_slot, "trp_multiplayer_data", ":cur_flag_owner_counts_slot", ":current_owner_code"),
              (get_max_players, ":num_players"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_set_num_agents_around_flag", ":flag_no", ":current_owner_code"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_num_agents_around_flag, ":flag_no", ":current_owner_code"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),

        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (eq, "$g_round_ended", 0), #if round still continues and any team did not sucseed yet
          (eq, "$g_flag_is_not_ready", 0), #if round still continues and any team did not sucseed yet
        
          (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"), 
          (prop_instance_get_position, pos0, ":pole_id"), #pos0 holds pole position.            

          (try_begin),
            (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),

            #flag_id holds shown flag after this point
            (prop_instance_get_position, pos1, ":flag_id"), #pos1 holds gray/red/blue (current shown) flag position.
            (try_begin),
              (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),        
              (lt, ":squared_dist", multi_headquarters_distance_sq_to_change_flag), #if distance is less than 2 meters
              
              (prop_instance_is_animating, ":is_animating", ":flag_id"),
              (eq, ":is_animating", 1),

              #end of round, attackers win
              (assign, "$g_winner_team", 1),
              (prop_instance_stop_animating, ":flag_id"),        
        
              (get_max_players, ":num_players"), 
              #for only server itself-----------------------------------------------------------------------------------------------
              (call_script, "script_draw_this_round", "$g_winner_team"),
              #for only server itself-----------------------------------------------------------------------------------------------
              (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                (player_is_active, ":player_no"),
                (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
              (try_end),

              (assign, "$g_flag_is_not_ready", 1),
            (try_end),        
          (try_end),
        (try_end),
        ]),

      (0, 0, 0, [], #if there is nobody in any teams do not reduce round time.
       [
         #(multiplayer_is_server),
         (assign, ":human_agents_spawned_at_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, ":human_agents_spawned_at_team_2", "$g_multiplayer_num_bots_team_2"),
         
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"), 
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":human_agents_spawned_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":human_agents_spawned_at_team_2", 1),
           (try_end),
         (try_end),

         (try_begin),
           (this_or_next|eq, ":human_agents_spawned_at_team_1", 0),
           (eq, ":human_agents_spawned_at_team_2", 0),

           (store_mission_timer_a, ":seconds_past_since_round_started"),
           (val_sub, ":seconds_past_since_round_started", "$g_round_start_time"),
           (le, ":seconds_past_since_round_started", 2),
                  
           (store_mission_timer_a, "$g_round_start_time"),
         (try_end),
       ]),

      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_flag_is_not_ready", 0),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (ge, ":seconds_past_in_round", "$g_multiplayer_round_max_seconds")],
       [
         (assign, ":flag_no", 0),
         (store_add, ":cur_flag_owner_counts_slot", multi_data_flag_players_around_begin, ":flag_no"),
         (troop_get_slot, ":current_owner_code", "trp_multiplayer_data", ":cur_flag_owner_counts_slot"),
         (store_mod, ":team_2_agent_count_around_flag", ":current_owner_code", 100),

         (try_begin),
           (eq, ":team_2_agent_count_around_flag", 0),
         
           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
           (assign, "$g_flag_is_not_ready", 1),
        
           (assign, "$g_winner_team", 0),

           (get_max_players, ":num_players"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),
         (try_end),
         ]),          

      (1, 0, 0, [],
      [
        (multiplayer_is_server),
        #trigger for calculating seconds past after that flag's pull message has shown          
        (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
          (store_add, ":cur_flag_pull_code_slot", multi_data_flag_pull_code_begin, ":flag_no"),
          (troop_get_slot, ":cur_flag_pull_code", "trp_multiplayer_data", ":cur_flag_pull_code_slot"),
          (store_mod, ":cur_flag_pull_message_seconds_past", ":cur_flag_pull_code", 100),
          (try_begin),
            (ge, ":cur_flag_pull_code", 100),
            (lt, ":cur_flag_pull_message_seconds_past", 25),
            (val_add, ":cur_flag_pull_code", 1),
            (troop_set_slot, "trp_multiplayer_data", ":cur_flag_pull_code_slot", ":cur_flag_pull_code"),
          (try_end),
        (try_end),        
      ]),               

      (10, 0, 0, [(multiplayer_is_server)],
       [
         #auto team balance control during the round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (try_end),          
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (eq, "$g_team_balance_next_round", 0),
         
             (assign, "$g_team_balance_next_round", 1),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
             #for only server itself-----------------------------------------------------------------------------------------------     
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next),
             (try_end),
             
             (call_script, "script_warn_player_about_auto_team_balance"),
           (try_end),
         (try_end),           
         #team balance check part finished
         ]),          

      (1, 0, 3, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 1),
                 (store_mission_timer_a, ":seconds_past_till_round_ended"),
                 (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
                 (ge, ":seconds_past_till_round_ended", "$g_multiplayer_respawn_period")],
       [
         #auto team balance control at the end of round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
             (assign, ":team_with_more_players", 1),
             (assign, ":team_with_less_players", 0),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
             (assign, ":team_with_more_players", 0),
             (assign, ":team_with_less_players", 1),
           (try_end),          
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"), 
               (assign, ":max_player_join_time", 0),
               (assign, ":latest_joined_player_no", -1),
               (get_max_players, ":num_players"),                               
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (player_get_team_no, ":player_team", ":player_no"),
                 (eq, ":player_team", ":team_with_more_players"),
                 (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
                 (try_begin),
                   (gt, ":player_join_time", ":max_player_join_time"),
                   (assign, ":max_player_join_time", ":player_join_time"),
                   (assign, ":latest_joined_player_no", ":player_no"),
                 (try_end),
               (try_end),
               (try_begin),
                 (ge, ":latest_joined_player_no", 0),
                 (try_begin),
                   #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                   (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"), 
                   (ge, ":latest_joined_agent_id", 0),
                   (agent_is_alive, ":latest_joined_agent_id"),

                   (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                   (val_add, ":player_kill_count", 1),
                   (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                   (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                   (val_sub, ":player_death_count", 1),
                   (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                   (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                   (val_add, ":player_score", 1),
                   (player_set_score, ":latest_joined_player_no", ":player_score"),

                   (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                     (player_is_active, ":player_no"),
                     (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_player_score_kill_death, ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
                   (try_end),         

                   (player_get_value_of_original_items, ":old_items_value", ":latest_joined_player_no"),
                   (player_get_gold, ":player_gold", ":latest_joined_player_no"),
                   (val_add, ":player_gold", ":old_items_value"),
                   (player_set_gold, ":latest_joined_player_no", ":player_gold", multi_max_gold_that_can_be_stored),
                 (end_try),

                 (player_set_troop_id, ":latest_joined_player_no", -1),
                 (player_set_team_no, ":latest_joined_player_no", ":team_with_less_players"),
                 (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
               (try_end),
             (try_end),
             #tutorial message (after team balance)
             
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_auto_team_balance_done", 0xFFFFFFFF, 5),
             
             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0), 

             #no need to send also server here
             (multiplayer_get_my_player, ":my_player_no"),
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done),
             (try_end),
             (assign, "$g_team_balance_next_round", 0),
           (try_end),
         (try_end),           
         #team balance check part finished
         (assign, "$g_team_balance_next_round", 0),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
           (player_set_slot, ":player_no", slot_player_spawned_at_siege_round, 0),           
           (player_get_agent_id, ":player_agent", ":player_no"),
           (ge, ":player_agent", 0),
           (agent_is_alive, ":player_agent"),
           (player_save_picked_up_items_for_next_spawn, ":player_no"),
           (player_get_value_of_original_items, ":old_items_value", ":player_no"),
           (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
         (try_end),

         #money management
         (assign, ":per_round_gold_addition", multi_battle_round_team_money_add),
         (val_mul, ":per_round_gold_addition", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":per_round_gold_addition", 100),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_gold, ":player_gold", ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),
         
           (try_begin),
             (this_or_next|eq, ":player_team", 0),
             (eq, ":player_team", 1),
             (val_add, ":player_gold", ":per_round_gold_addition"), 
           (try_end),

           #(below lines added new at 25.11.09 after Armagan decided new money system)
           (try_begin),
             (player_get_slot, ":old_items_value", ":player_no", slot_player_last_rounds_used_item_earnings),
             (store_add, ":player_total_potential_gold", ":player_gold", ":old_items_value"),
             (store_mul, ":minimum_gold", "$g_multiplayer_initial_gold_multiplier", 10),
             (lt, ":player_total_potential_gold", ":minimum_gold"),
             (store_sub, ":additional_gold", ":minimum_gold", ":player_total_potential_gold"),
             (val_add, ":player_gold", ":additional_gold"),
           (try_end),
           #new money system addition end

           (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
         (try_end),

         #initialize my team at start of round (it will be assigned again at next round's first death)
         (assign, "$my_team_at_start_of_round", -1),

         #clear scene and end round
         (multiplayer_clear_scene),
         
         #assigning everbody's spawn counts to 0
         (assign, "$g_my_spawn_count", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawn_count, 0),
         (try_end),

         #(call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_initialize_objects"),

         #initialize moveable object positions
         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_close_gate_if_it_is_open"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_a"),
         (call_script, "script_move_belfries_to_their_first_entry_point", "spr_belfry_b"),
         
         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_a"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_a", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_number_of_agents_pushing, 0),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_next_entry_point_id, 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_belfries", "spr_belfry_b"),
         (try_for_range, ":belfry_no", 0, ":num_belfries"),
           (scene_prop_get_instance, ":belfry_scene_prop_id", "spr_belfry_b", ":belfry_no"),
           (scene_prop_set_slot, ":belfry_scene_prop_id", scene_prop_belfry_platform_moved, 0),
         (try_end),

         #initialize flag coordinates (move up the flag at pole)
         (try_for_range, ":flag_no", 0, "$g_number_of_flags"),
           (scene_prop_get_instance, ":pole_id", "spr_headquarters_pole_code_only", ":flag_no"),
           (prop_instance_get_position, pos1, ":pole_id"),
           (position_move_z, pos1, multi_headquarters_pole_height),
           (scene_prop_get_instance, ":flag_id", "$team_1_flag_scene_prop", ":flag_no"),
           (prop_instance_stop_animating, ":flag_id"),
           (prop_instance_set_position, ":flag_id", pos1),
         (try_end),
         
         (assign, "$g_round_ended", 0),
         
         (store_mission_timer_a, "$g_round_start_time"),
         (call_script, "script_initialize_all_scene_prop_slots"),

         #initialize round start time for clients
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, -9999),
         (try_end),         

         (assign, "$g_flag_is_not_ready", 0),
       ]),
           
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),
           (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),
           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),
           (player_get_agent_id, ":player_agent", ":player_no"), #new added for siege mod
         
           (assign, ":spawn_new", 0), 
           (assign, ":num_active_players_in_team_0", 0),
           (assign, ":num_active_players_in_team_1", 0),
           (try_begin),
             (assign, ":num_active_players", 0),
             (get_max_players, ":num_players"),
             (try_for_range, ":cur_player", 0, ":num_players"),
               (player_is_active, ":cur_player"),

               (player_get_team_no, ":cur_player_team", ":cur_player"),
               (try_begin),
                 (eq, ":cur_player_team", 0),
                 (val_add, ":num_active_players_in_team_0", 1),
               (else_try),
                 (eq, ":cur_player_team", 1),
                 (val_add, ":num_active_players_in_team_1", 1),
               (try_end),

               (val_add, ":num_active_players", 1),
             (try_end),
             (store_mission_timer_a, ":round_time"),
             (val_sub, ":round_time", "$g_round_start_time"),
                  
             (eq, "$g_round_ended", 0),
         
             (try_begin), #addition for siege mod to allow players spawn more than once (begin)
               (lt, ":player_agent", 0), 

               (try_begin), #new added begin, to avoid siege-crack (rejoining of defenders when they die)
                 (eq, ":player_team", 0), 
                 (player_get_slot, ":player_last_team_select_time", ":player_no", slot_player_last_team_select_time),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":elapsed_time", ":current_time", ":player_last_team_select_time"),
                 
                 (assign, ":player_team_respawn_period", "$g_multiplayer_respawn_period"), 
                 (val_add, ":player_team_respawn_period", multiplayer_siege_mod_defender_team_extra_respawn_time), #new added for siege mod
                 (lt, ":elapsed_time", ":player_team_respawn_period"),

                 (store_sub, ":round_time", ":current_time", "$g_round_start_time"),
                 (ge, ":round_time", multiplayer_new_agents_finish_spawning_time),
                 (gt, ":num_active_players", 2),
                 (store_mul, ":multipication_of_num_active_players_in_teams", ":num_active_players_in_team_0", ":num_active_players_in_team_1"),
                 (neq, ":multipication_of_num_active_players_in_teams", 0),
         
                 (assign, ":spawn_new", 0),
               (else_try), #new added end         
                 (assign, ":spawn_new", 1),
               (try_end),
             (else_try), 
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"), 
               (assign, ":player_team_respawn_period", "$g_multiplayer_respawn_period"), 
               (try_begin), 
                 (eq, ":player_team", 0), 
                 (val_add, ":player_team_respawn_period", multiplayer_siege_mod_defender_team_extra_respawn_time), 
               (try_end), 
               (this_or_next|gt, ":elapsed_time", ":player_team_respawn_period"), 
               (player_slot_eq, ":player_no", slot_player_spawned_at_siege_round, 0), 
               (assign, ":spawn_new", 1),
             (try_end), 
           (try_end), #addition for siege mod to allow players spawn more than once (end)

           (player_get_slot, ":spawn_count", ":player_no", slot_player_spawn_count),

           (try_begin),
             (gt, "$g_multiplayer_number_of_respawn_count", 0),
             (try_begin),
               (eq, ":spawn_new", 1),
               (eq, ":player_team", 0),
               (ge, ":spawn_count", "$g_multiplayer_number_of_respawn_count"),
               (assign, ":spawn_new", 0),
             (else_try),
               (eq, ":spawn_new", 1),
               (eq, ":player_team", 1),      
               (ge, ":spawn_count", 999),
               (assign, ":spawn_new", 0),
             (try_end),
           (try_end),

           (eq, ":spawn_new", 1),

           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (player_get_slot, ":spawn_count", ":player_no", slot_player_spawn_count),
           (val_add, ":spawn_count", 1),
           (player_set_slot, ":player_no", slot_player_spawn_count, ":spawn_count"),

           (try_begin),
             (ge, ":spawn_count", "$g_multiplayer_number_of_respawn_count"),
             (gt, "$g_multiplayer_number_of_respawn_count", 0),
             (eq, ":player_team", 0),
             (assign, ":spawn_count", 999),
             (player_set_slot, ":player_no", slot_player_spawn_count, ":spawn_count"),
           (try_end),

           (assign, ":player_is_horseman", 0),
           (player_get_item_id, ":item_id", ":player_no", ek_horse),
           (try_begin),
             (this_or_next|is_between, ":item_id", horses_begin, horses_end),
             (this_or_next|eq, ":item_id", "itm_warhorse_sarranid"),
             (eq, ":item_id", "itm_warhorse_steppe"),
             (assign, ":player_is_horseman", 1),
           (try_end),

           (try_begin),
             (lt, ":round_time", 20), #at start of game spawn at base entry point (only enemies)
             (try_begin),         
               (eq, ":player_team", 0), #defenders in siege mod at start of round
               (call_script, "script_multiplayer_find_spawn_point", ":player_team", 1, ":player_is_horseman"),
               (assign, ":entry_no", reg0),             
             (else_try),
               (eq, ":player_team", 1), #attackers in siege mod at start of round
               (assign, ":entry_no", multi_initial_spawn_point_team_2), #change later
             (try_end),
           (else_try),
             (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":player_is_horseman"),
             (assign, ":entry_no", reg0),             
           (try_end),
         
           (player_spawn_new_agent, ":player_no", ":entry_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
           (player_set_slot, ":player_no", slot_player_spawned_at_siege_round, 1),         
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), 
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      multiplayer_server_spawn_bots, 
      multiplayer_server_manage_bots, 

      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_round_time_counter"),
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ## CC
      
      ## CC
      ],
  ),

    (
    "multiplayer_bt",mtf_battle_mode,-1, #battle mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_battle),
         (call_script, "script_multiplayer_server_before_mission_start_common"),
         
         (assign, "$g_waiting_for_confirmation_to_terminate", 0),
         (assign, "$g_round_ended", 0),
         (assign, "$g_battle_death_mode_started", 0),
         (assign, "$g_reduced_waiting_seconds", 0),

         (try_begin),
           (multiplayer_is_server),
           (assign, "$server_mission_timer_while_player_joined", 0),
           (assign, "$g_round_start_time", 0),
         (try_end),
         (assign, "$my_team_at_start_of_round", -1),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),
         ]),

      (ti_after_mission_start, 0, 0, [], 
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (try_begin),
           (multiplayer_is_server),

           (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         
           (entry_point_get_position, pos0, multi_death_mode_point),
           (position_set_z_to_ground_level, pos0),
           (position_move_z, pos0, -2000),

           (position_move_x, pos0, 100), 
           (set_spawn_position, pos0),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),

           (position_move_x, pos0, -200), 
           (set_spawn_position, pos0),
           (spawn_scene_prop, "spr_headquarters_pole_code_only", 0),

           (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
           (prop_instance_get_position, pos0, ":pole_1_id"),
           (spawn_scene_prop, "$team_1_flag_scene_prop", 0),
           (position_move_z, pos0, multi_headquarters_flag_initial_height),
           (prop_instance_set_position, reg0, pos0),
         
           (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
           (prop_instance_get_position, pos0, ":pole_2_id"),
           (spawn_scene_prop, "$team_2_flag_scene_prop", 0),
           (position_move_z, pos0, multi_headquarters_flag_initial_height),
           (prop_instance_set_position, reg0, pos0),

           (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"), 
           (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"), 
         (try_end),

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         
         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),         
         
         (call_script, "script_calculate_new_death_waiting_time_at_death_mod"),
 
         (try_begin),
           (neg|multiplayer_is_server),
           (try_begin),
             (eq, "$g_round_ended", 1),
             (assign, "$g_round_ended", 0),

             #initialize scene object slots at start of new round at clients.
             (call_script, "script_initialize_all_scene_prop_slots"),

             #these lines are done in only clients at start of each new round.
             (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
             (call_script, "script_initialize_objects_clients"),
             #end of lines
             (try_begin),
               (eq, "$g_team_balance_next_round", 1),
               (assign, "$g_team_balance_next_round", 0),
             (try_end),
           (try_end),  
         (try_end),         
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),
         
         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),         
         
         (try_begin), #count players and if round ended understand this.
           (agent_is_human, ":dead_agent_no"),
           (assign, ":team1_living_players", 0),
           (assign, ":team2_living_players", 0),
           (try_for_agents, ":cur_agent"),
             (agent_is_human, ":cur_agent"),         
             (try_begin),
               (agent_is_alive, ":cur_agent"),  
               (agent_get_team, ":cur_agent_team", ":cur_agent"),
               (try_begin),
                 (eq, ":cur_agent_team", 0),
               (val_add, ":team1_living_players", 1),
               (else_try),
                 (eq, ":cur_agent_team", 1),
                 (val_add, ":team2_living_players", 1),
               (try_end),
             (try_end),
           (try_end),                    
           (try_begin),         
             (eq, "$g_round_ended", 0),
             (try_begin),
               (this_or_next|eq, ":team1_living_players", 0),
               (eq, ":team2_living_players", 0),                
               (assign, "$g_winner_team", -1),
               (assign, reg0, "$g_multiplayer_respawn_period"),
               (try_begin),
                 (eq, ":team1_living_players", 0),
                 (try_begin),
                   (neq, ":team2_living_players", 0),
                   (team_get_score, ":team_2_score", 1),
                   (val_add, ":team_2_score", 1),
                   (team_set_score, 1, ":team_2_score"),
                   (assign, "$g_winner_team", 1),
                 (try_end),

                 (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, "$g_winner_team"), #1 is winner team
                 (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),
               (else_try),
                 (try_begin),
                   (neq, ":team1_living_players", 0),
                   (team_get_score, ":team_1_score", 0),
                   (val_add, ":team_1_score", 1),
                   (team_set_score, 0, ":team_1_score"),
                   (assign, "$g_winner_team", 0),
                 (try_end),

                 (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, "$g_winner_team"), #0 is winner team         
                 (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),       
               (try_end),
               (store_mission_timer_a, "$g_round_finish_time"),
               (assign, "$g_round_ended", 1),
             (try_end),
           (try_end),
         (try_end),

         (try_begin),
           (multiplayer_is_server),
           (agent_is_human, ":dead_agent_no"),
           (neg|agent_is_non_player, ":dead_agent_no"),

           (ge, ":dead_agent_no", 0),
           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (ge, ":dead_agent_player_id", 0),

           (set_fixed_point_multiplier, 100),

           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (agent_get_position, pos0, ":dead_agent_no"),

           (position_get_x, ":x_coor", pos0),
           (position_get_y, ":y_coor", pos0),
           (position_get_z, ":z_coor", pos0),
         
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_x, ":x_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_y, ":y_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_z, ":z_coor"),
         (try_end),    
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),
      
      (1, 0, 0, [(multiplayer_is_server), 
                 (eq, "$g_round_ended", 0),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (ge, ":seconds_past_in_round", "$g_multiplayer_round_max_seconds"),

                 (assign, ":overtime_needed", 0), #checking for if overtime is needed. Overtime happens when lower heighted flag is going up
                 (try_begin),
                   (eq, "$g_battle_death_mode_started", 2), #if death mod is currently open
                    
                   (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
                   (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
                   (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
                   (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

                   (prop_instance_get_position, pos1, ":pole_1_id"),
                   (prop_instance_get_position, pos2, ":pole_2_id"),
                   (prop_instance_get_position, pos3, ":flag_1_id"),
                   (prop_instance_get_position, pos4, ":flag_2_id"),

                   (get_distance_between_positions, ":height_of_flag_1", pos1, pos3),
                   (get_distance_between_positions, ":height_of_flag_2", pos2, pos4),
                   (store_add, ":height_of_flag_1_plus", ":height_of_flag_1", min_allowed_flag_height_difference_to_make_score),
                   (store_add, ":height_of_flag_2_plus", ":height_of_flag_2", min_allowed_flag_height_difference_to_make_score),

                   (try_begin),
                     (le, ":height_of_flag_1", ":height_of_flag_2_plus"),
                     (prop_instance_is_animating, ":is_animating", ":flag_1_id"),
                     (eq, ":is_animating", 1),
                     (prop_instance_get_animation_target_position, pos5, ":flag_1_id"),
                     (position_get_z, ":flag_2_animation_target_z", pos5),
                     (position_get_z, ":flag_1_cur_z", pos3),
                     (ge, ":flag_2_animation_target_z", ":flag_1_cur_z"),
                     (assign, ":overtime_needed", 1),
                   (try_end),
                   
                   (try_begin),
                     (le, ":height_of_flag_2", ":height_of_flag_1_plus"),
                     (prop_instance_is_animating, ":is_animating", ":flag_2_id"),
                     (eq, ":is_animating", 1),
                     (prop_instance_get_animation_target_position, pos5, ":flag_2_id"),
                     (position_get_z, ":flag_2_animation_target_z", pos5),
                     (position_get_z, ":flag_2_cur_z", pos4),
                     (ge, ":flag_2_animation_target_z", ":flag_2_cur_z"),
                     (assign, ":overtime_needed", 1),
                   (try_end),
                 (try_end),
                 (eq, ":overtime_needed", 0),
                 ],
       [ #round time is up
         (store_mission_timer_a, "$g_round_finish_time"),                          
         (assign, "$g_round_ended", 1),
         (assign, "$g_winner_team", -1),
         
         (try_begin), #checking for winning by death mod
           (eq, "$g_battle_death_mode_started", 2), #if death mod is currently open

           (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
           (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
           (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
           (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

           (prop_instance_get_position, pos1, ":pole_1_id"),
           (prop_instance_get_position, pos2, ":pole_2_id"),
           (prop_instance_get_position, pos3, ":flag_1_id"),
           (prop_instance_get_position, pos4, ":flag_2_id"),

           (get_distance_between_positions, ":height_of_flag_1", pos1, pos3),
           (get_distance_between_positions, ":height_of_flag_2", pos2, pos4),

           (try_begin),
             (ge, ":height_of_flag_1", ":height_of_flag_2"), #if flag_1 is higher than flag_2
             (store_sub, ":difference_of_heights", ":height_of_flag_1", ":height_of_flag_2"), 
             (ge, ":difference_of_heights", min_allowed_flag_height_difference_to_make_score), #if difference between flag heights is greater than 
             (assign, "$g_winner_team", 0),                                                    #"min_allowed_flag_height_difference_to_make_score" const value
           (else_try), #if flag_2 is higher than flag_1
             (store_sub, ":difference_of_heights", ":height_of_flag_2", ":height_of_flag_1"),
             (ge, ":difference_of_heights", min_allowed_flag_height_difference_to_make_score), #if difference between flag heights is greater than 
             (assign, "$g_winner_team", 1),                                                    #"min_allowed_flag_height_difference_to_make_score" const value
           (try_end),
         (try_end),
    
         (multiplayer_get_my_player, ":my_player_no"), #send all players draw information of round.
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_draw_this_round", "$g_winner_team"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"), 
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (neq, ":player_no", ":my_player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
         (try_end),
        ]),          

      (10, 0, 0, [(multiplayer_is_server)],
       [
         #auto team balance control during the round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (try_end),          
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (eq, "$g_team_balance_next_round", 0),
         
             (assign, "$g_team_balance_next_round", 1),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
             #for only server itself-----------------------------------------------------------------------------------------------     
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next),
             (try_end),
             
             (call_script, "script_warn_player_about_auto_team_balance"),
           (try_end),
         (try_end),           
         #team balance check part finished
         ]),

      #checking for starting "death mode part 1"
      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_battle_death_mode_started", 0),
                 (store_mission_timer_a, ":seconds_past_till_round_started"),
                 (val_sub, ":seconds_past_till_round_started", "$g_round_start_time"),
                 (store_div, "$g_multiplayer_round_max_seconds_div_2", "$g_multiplayer_round_max_seconds", 2),
                 (ge, ":seconds_past_till_round_started", "$g_multiplayer_round_max_seconds_div_2")],
       [
         (call_script, "script_calculate_new_death_waiting_time_at_death_mod"),
         (assign, "$g_battle_death_mode_started", 1),
         ]),

      #checking during "death mode part 1" for entering "death mode part 2"
      (1, 0, 0, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_battle_death_mode_started", 1),
                 (store_mission_timer_a, ":seconds_past_till_death_mode_part_1_started"),
                 (val_sub, ":seconds_past_till_death_mode_part_1_started", "$g_death_mode_part_1_start_time"),
                 (store_add, ":g_battle_waiting_seconds_plus_reduced_waiting_seconds", "$g_battle_waiting_seconds", "$g_reduced_waiting_seconds"),
                 (ge, ":seconds_past_till_death_mode_part_1_started", ":g_battle_waiting_seconds_plus_reduced_waiting_seconds"), #death mod start if anybody did not dies in "$g_battle_waiting_seconds" seconds
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (store_sub, ":g_multiplayer_round_max_seconds_sub_15", "$g_multiplayer_round_max_seconds", 15),
                 (lt, ":seconds_past_in_round", ":g_multiplayer_round_max_seconds_sub_15")], #death mod cannot start at last 15 seconds
       [
         (assign, "$g_battle_death_mode_started", 2),
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_start_death_mode"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_start_death_mode),
         (try_end),

         (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
         (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
         (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
         (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

         #death mode started make 4 item related to death mode visible.
         (store_random_in_range, "$g_random_entry_point", 0, 3),
         (val_add, "$g_random_entry_point", multi_death_mode_point),

         (entry_point_get_position, pos0, "$g_random_entry_point"),
         (position_set_z_to_ground_level, pos0),
         
         (position_move_x, pos0, 100), 
         (prop_instance_set_position, ":pole_1_id", pos0),

         (position_move_x, pos0, -200), 
         (prop_instance_set_position, ":pole_2_id", pos0),

         (prop_instance_get_position, pos0, ":pole_1_id"),
         (position_move_z, pos0, multi_headquarters_flag_initial_height),
         (prop_instance_set_position, ":flag_1_id", pos0),
         
         (prop_instance_get_position, pos0, ":pole_2_id"),
         (position_move_z, pos0, multi_headquarters_flag_initial_height),
         (prop_instance_set_position, ":flag_2_id", pos0),

         (start_presentation, "prsnt_multiplayer_flag_projection_display_bt"),
         ]),

      (3, 0, 0, [(multiplayer_is_server),  #this trigger is to reduce "$g_battle_waiting_seconds" at between last 66th and last 24th seconds 1 per 3 seconds, total 14 seconds.
                 (eq, "$g_round_ended", 0),                 
                 (eq, "$g_battle_death_mode_started", 1),
                 
                 (store_mission_timer_a, ":seconds_past_till_death_mode_part_1_started"),
                 (val_sub, ":seconds_past_till_death_mode_part_1_started", "$g_death_mode_part_1_start_time"),
                 (store_add, ":g_battle_waiting_seconds_plus_reduced_waiting_seconds", "$g_battle_waiting_seconds", "$g_reduced_waiting_seconds"),
                 (val_sub, ":g_battle_waiting_seconds_plus_reduced_waiting_seconds", 20), #in last 20 seconds to master of field below code effects
                 (ge, ":seconds_past_till_death_mode_part_1_started", ":g_battle_waiting_seconds_plus_reduced_waiting_seconds"),], #death mod start if anybody did not dies in "$g_battle_waiting_seconds" seconds            
        [
                 (assign, ":there_are_fighting_agents", 0),

                 (try_for_agents, ":agent_no_1"),
                   (eq, ":there_are_fighting_agents", 0),
                   (agent_is_human, ":agent_no_1"),
                   (try_for_agents, ":agent_no_2"),
                     (agent_is_human, ":agent_no_2"),
                     (neq, ":agent_no_1", ":agent_no_2"),

                     (agent_get_team, ":agent_no_1_team", ":agent_no_1"),
                     (agent_get_team, ":agent_no_2_team", ":agent_no_2"),

                     (neq, ":agent_no_1_team", ":agent_no_2_team"),
                 
                     (agent_get_position, pos1, ":agent_no_1"),
                     (agent_get_position, pos2, ":agent_no_2"),

                     (get_sq_distance_between_positions_in_meters, ":sq_dist_in_meters", pos1, pos2),

                     (le, ":sq_dist_in_meters", multi_max_sq_dist_between_agents_to_longer_mof_time),

                     (assign, ":there_are_fighting_agents", 1),
                   (try_end),   
                 (try_end),

                 (try_begin),
                   (eq, ":there_are_fighting_agents", 1),
                   (val_add, "$g_reduced_waiting_seconds", 3),
                   #(display_message, "@{!}DEBUG : there are fighting agents"),
                 (try_end),
        ]),

      (3, 0, 0, [(multiplayer_is_server),  #this trigger is to reduce "$g_battle_waiting_seconds" at between last 66th and last 24th seconds 1 per 3 seconds, total 14 seconds.
                 (eq, "$g_round_ended", 0),                 
                 (eq, "$g_battle_death_mode_started", 1),
                 
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (store_sub, ":g_multiplayer_round_max_seconds_sub_60", "$g_multiplayer_round_max_seconds", 66),
                 (ge, ":seconds_past_in_round", ":g_multiplayer_round_max_seconds_sub_60"),

                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (store_sub, ":g_multiplayer_round_max_seconds_sub_20", "$g_multiplayer_round_max_seconds", 24),
                 (le, ":seconds_past_in_round", ":g_multiplayer_round_max_seconds_sub_20"),
                 ],
       [
         (val_add, "$g_reduced_waiting_seconds", 1),
         ]),

      (0, 0, 0, [(multiplayer_is_server),  
                 (eq, "$g_round_ended", 0),                 
                 (eq, "$g_battle_death_mode_started", 2)],
       [
         (set_fixed_point_multiplier, 100),
         (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
         (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
         (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
         (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

         (prop_instance_get_position, pos1, ":pole_1_id"),
         (prop_instance_get_position, pos2, ":pole_2_id"),
         (prop_instance_get_position, pos3, ":flag_1_id"),
         (prop_instance_get_position, pos4, ":flag_2_id"),

         (copy_position, pos7, pos1),
         (position_move_z, pos7, multi_headquarters_flag_initial_height),
         (copy_position, pos8, pos2),
         (position_move_z, pos8, multi_headquarters_flag_initial_height),

         (get_distance_between_positions, ":dist_1", pos1, pos3),
         (get_distance_between_positions, ":dist_2", pos2, pos4),

         (assign, ":there_are_agents_from_only_team_1_around_their_flag", 0),
         (assign, ":there_are_agents_from_only_team_2_around_their_flag", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_agent_id, ":agent_id", ":player_no"),
           (ge, ":agent_id", 0),
           (agent_is_human, ":agent_id"),
           (agent_is_alive, ":agent_id"),
           (agent_get_team, ":agent_team", ":agent_id"),
           (agent_get_position, pos0, ":agent_id"),

           (agent_get_horse, ":agent_horse", ":agent_id"),
           (eq, ":agent_horse", -1), #horseman cannot move flag
         
           (try_begin),
             (eq, ":agent_team", 0),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_1 area, so flag_1 situation can be 1 or -2
                 (this_or_next|eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", 1), #there are agents from only our team
               (else_try),                 
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_2 area, so flag_2 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (else_try),
             (eq, ":agent_team", 1),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag 2 area, so flag_2 situation can be 1 or -2
                 (this_or_next|eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", 1), #there are agents from only our team
               (else_try),                 
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag_1 area, so flag_1 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (try_end),
         (try_end),

         #controlling battle win by death mode conditions
         (try_begin),
           (ge, ":dist_1", multi_headquarters_flag_height_to_win),           
           (assign, "$g_winner_team", 0),

           (get_max_players, ":num_players"), 
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_1_score", 0),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 0, ":team_1_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 0, ":team_1_score"),             
           (try_end),

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (else_try),
           (ge, ":dist_2", multi_headquarters_flag_height_to_win),
           (assign, "$g_winner_team", 1),

           (get_max_players, ":num_players"), 
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_2_score", 1),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 1, ":team_2_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 1, ":team_2_score"),             
           (try_end),

           (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, 0), #0 is winner team         
           (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),     

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (try_end),

         (try_begin),
           (eq, "$g_round_ended", 0),

           (position_get_z, ":flag_1_cur_z", pos3),       
           (prop_instance_is_animating, ":is_animating", ":flag_1_id"),         
           (try_begin), #if flag_1 is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_1_id"), #stop flag_1
           (else_try), #if flag_1 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_1_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -1), #if there are agents from only team_2 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (gt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going up         
             (get_distance_between_positions, ":time_1", pos3, pos7),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 16),
             (prop_instance_animate_to_position, ":flag_1_id", pos7, ":time_1"), #move flag_1 down
           (else_try), #if flag_1 is going down or stopping
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1), #if there is agents from only team_1 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (lt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going down
             (copy_position, pos5, pos1),
             (position_move_z, pos5, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_1", pos3, pos5),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 8),
             (prop_instance_animate_to_position, ":flag_1_id", pos5, ":time_1"), #move flag_1 up
           (try_end),

           (position_get_z, ":flag_2_cur_z", pos4),       
           (prop_instance_is_animating, ":is_animating", ":flag_2_id"),         
           (try_begin), #if flag is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_2_id"), #stop flag_2
           (else_try), #if flag_2 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_2_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -1), #if there are agents from only team_1 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (gt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going up         
             (get_distance_between_positions, ":time_2", pos4, pos8),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 16),
             (prop_instance_animate_to_position, ":flag_2_id", pos8, ":time_2"), #move flag_2 down
           (else_try), #if flag_2 is going down or stopping
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1), #if there is agents from only team_2 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (lt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going down
             (copy_position, pos6, pos2),
             (position_move_z, pos6, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_2", pos4, pos6),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 8),
             (prop_instance_animate_to_position, ":flag_2_id", pos6, ":time_2"), #move flag_2 up
           (try_end),
         (try_end),
         ]),
                
      (1, 0, 3, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 1),
                 (store_mission_timer_a, ":seconds_past_till_round_ended"),
                 (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
                 (ge, ":seconds_past_till_round_ended", "$g_multiplayer_respawn_period")],
       [
         #auto team balance control at the end of round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
             (assign, ":team_with_more_players", 1),
             (assign, ":team_with_less_players", 0),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
             (assign, ":team_with_more_players", 0),
             (assign, ":team_with_less_players", 1),
           (try_end),
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             #(eq, "$g_team_balance_next_round", 1), #control if at pre round players are warned about team change.

             (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"), 
               (assign, ":max_player_join_time", 0),
               (assign, ":latest_joined_player_no", -1),
               (get_max_players, ":num_players"),                               
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (player_get_team_no, ":player_team", ":player_no"),
                 (eq, ":player_team", ":team_with_more_players"),
                 (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
                 (try_begin),
                   (gt, ":player_join_time", ":max_player_join_time"),
                   (assign, ":max_player_join_time", ":player_join_time"),
                   (assign, ":latest_joined_player_no", ":player_no"),
                 (try_end),
               (try_end),
               (try_begin),
                 (ge, ":latest_joined_player_no", 0),
                 (try_begin),
                   #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                   (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"), 
                   (ge, ":latest_joined_agent_id", 0),
                   (agent_is_alive, ":latest_joined_agent_id"),

                   (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                   (val_add, ":player_kill_count", 1),
                   (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                   (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                   (val_sub, ":player_death_count", 1),
                   (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                   (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                   (val_add, ":player_score", 1),
                   (player_set_score, ":latest_joined_player_no", ":player_score"),

                   (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                     (player_is_active, ":player_no"),
                     (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_player_score_kill_death, ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
                   (try_end),         

                   (player_get_value_of_original_items, ":old_items_value", ":latest_joined_player_no"),
                   (player_get_gold, ":player_gold", ":latest_joined_player_no"),
                   (val_add, ":player_gold", ":old_items_value"),
                   (player_set_gold, ":latest_joined_player_no", ":player_gold", multi_max_gold_that_can_be_stored),
                 (end_try),

                 (player_set_troop_id, ":latest_joined_player_no", -1),
                 (player_set_team_no, ":latest_joined_player_no", ":team_with_less_players"),
                 (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
               (try_end),
             (try_end),
             #tutorial message (after team balance)
             
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_auto_team_balance_done", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0), 

             #no need to send also server here
             (multiplayer_get_my_player, ":my_player_no"),
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done),
             (try_end),
             (assign, "$g_team_balance_next_round", 0),
           (try_end),
         (try_end),           
         #team balance check part finished
         (assign, "$g_team_balance_next_round", 0),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
           (player_get_agent_id, ":player_agent", ":player_no"),
           (ge, ":player_agent", 0),
           (agent_is_alive, ":player_agent"),
           (player_save_picked_up_items_for_next_spawn, ":player_no"),
           (player_get_value_of_original_items, ":old_items_value", ":player_no"),
           (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
         (try_end),

         #money management
         (assign, ":per_round_gold_addition", multi_battle_round_team_money_add),
         (val_mul, ":per_round_gold_addition", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":per_round_gold_addition", 100),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_gold, ":player_gold", ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),

           (try_begin),
             (this_or_next|eq, ":player_team", 0),
             (eq, ":player_team", 1),
             (val_add, ":player_gold", ":per_round_gold_addition"), 
           (try_end),

           #(below lines added new at 25.11.09 after Armagan decided new money system)
           (try_begin),
             (player_get_slot, ":old_items_value", ":player_no", slot_player_last_rounds_used_item_earnings),
             (store_add, ":player_total_potential_gold", ":player_gold", ":old_items_value"),
             (store_mul, ":minimum_gold", "$g_multiplayer_initial_gold_multiplier", 10),
             (lt, ":player_total_potential_gold", ":minimum_gold"),
             (store_sub, ":additional_gold", ":minimum_gold", ":player_total_potential_gold"),
             (val_add, ":player_gold", ":additional_gold"),
           (try_end),
           #new money system addition end
         
           (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
         (try_end),

         #initialize my team at start of round (it will be assigned again at next round's first death)
         (assign, "$my_team_at_start_of_round", -1),

         #clear scene and end round
         (multiplayer_clear_scene),

         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),

         (try_begin),
           (eq, "$g_battle_death_mode_started", 2),
           (call_script, "script_move_death_mode_flags_down"),
         (try_end),

         (assign, "$g_battle_death_mode_started", 0),
         (assign, "$g_reduced_waiting_seconds", 0),
         
         #initialize moveable object positions
         (call_script, "script_multiplayer_close_gate_if_it_is_open"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
                  
         (assign, "$g_round_ended", 0), 

         (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"), 
         (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"), 

         (store_mission_timer_a, "$g_round_start_time"),
         (call_script, "script_initialize_all_scene_prop_slots"),

         #initialize round start times for clients
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, -9999), #this will also initialize moveable object slots.
         (try_end),         
       ]),

      (0, 0, 0, [], #if there is nobody in any teams do not reduce round time.
       [
         #(multiplayer_is_server),
         (assign, ":human_agents_spawned_at_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, ":human_agents_spawned_at_team_2", "$g_multiplayer_num_bots_team_2"),
         
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"), 
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":human_agents_spawned_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":human_agents_spawned_at_team_2", 1),
           (try_end),
         (try_end),

         (try_begin),
           (this_or_next|eq, ":human_agents_spawned_at_team_1", 0),
           (eq, ":human_agents_spawned_at_team_2", 0),

           (store_mission_timer_a, ":seconds_past_since_round_started"),
           (val_sub, ":seconds_past_since_round_started", "$g_round_start_time"),
           (le, ":seconds_past_since_round_started", 2),
                  
           (store_mission_timer_a, "$g_round_start_time"),
         (try_end),
       ]),    
           
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),
           (try_begin),
             (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),

             (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
             (lt, ":player_team", multi_team_spectator),

             (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
             (ge, ":player_troop", 0),

             (assign, ":spawn_new", 0), 
             (assign, ":num_active_players_in_team_0", 0),
             (assign, ":num_active_players_in_team_1", 0),
             (try_begin),
               (assign, ":num_active_players", 0),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no_2", 0, ":num_players"),
                 (player_is_active, ":player_no_2"),
                 (val_add, ":num_active_players", 1),
                 (player_get_team_no, ":player_team_2", ":player_no_2"),
                 (try_begin),
                   (eq, ":player_team_2", 0),
                   (val_add, ":num_active_players_in_team_0", 1),
                 (else_try),
                   (eq, ":player_team_2", 1),
                   (val_add, ":num_active_players_in_team_1", 1),
                 (try_end),
               (try_end),

               (store_mul, ":multipication_of_num_active_players_in_teams", ":num_active_players_in_team_0", ":num_active_players_in_team_1"),

               (store_mission_timer_a, ":round_time"),
               (val_sub, ":round_time", "$g_round_start_time"),

               (this_or_next|lt, ":round_time", multiplayer_new_agents_finish_spawning_time),
               (this_or_next|le, ":num_active_players", 2),
               (eq, ":multipication_of_num_active_players_in_teams", 0),
         
               (eq, "$g_round_ended", 0),
               (assign, ":spawn_new", 1),
             (try_end),
             (eq, ":spawn_new", 1),
             (try_begin),
               (eq, ":player_team", 0),
               (assign, ":entry_no", multi_initial_spawn_point_team_1),
             (else_try),
               (eq, ":player_team", 1),
               (assign, ":entry_no", multi_initial_spawn_point_team_2),
             (try_end),
             (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),
             (player_spawn_new_agent, ":player_no", ":entry_no"),
             (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
           (else_try), #spawning as a bot (if option ($g_multiplayer_player_respawn_as_bot) is 1)
             (eq, "$g_multiplayer_player_respawn_as_bot", 1),
             (player_get_agent_id, ":player_agent", ":player_no"),
             (ge, ":player_agent", 0),
             (neg|agent_is_alive, ":player_agent"),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
             (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),

             (player_get_team_no, ":player_team", ":player_no"),
             (assign, ":is_found", 0),
             (try_for_agents, ":cur_agent"),
               (eq, ":is_found", 0),
               (agent_is_alive, ":cur_agent"),
               (agent_is_human, ":cur_agent"),
               (agent_is_non_player, ":cur_agent"),
               (agent_get_team ,":cur_team", ":cur_agent"),
               (eq, ":cur_team", ":player_team"),
               (assign, ":is_found", 1),
               #(player_control_agent, ":player_no", ":cur_agent"),
             (try_end),

             (try_begin),
               (eq, ":is_found", 1),
               (call_script, "script_find_most_suitable_bot_to_control", ":player_no"),
               (player_control_agent, ":player_no", reg0),

               (player_get_slot, ":num_spawns", ":player_no", slot_player_spawned_this_round),
               (val_add, ":num_spawns", 1),
               (player_set_slot, ":player_no", slot_player_spawned_this_round, ":num_spawns"),
             (try_end),
           (try_end),
         (try_end),
         ]),

      multiplayer_server_spawn_bots, 
      multiplayer_server_manage_bots, 

      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_round_time_counter"),
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        (try_begin),
          (eq, "$g_battle_death_mode_started", 2),
          (start_presentation, "prsnt_multiplayer_flag_projection_display_bt"),
        (try_end),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ## CC
      
      ## CC
      ],
  ),


    (
    "multiplayer_fd",mtf_battle_mode,-1, #fight and destroy mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_0|mtef_no_auto_reset,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      common_battle_init_banner,

      multiplayer_server_check_polls,
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_destroy),
         (call_script, "script_multiplayer_server_before_mission_start_common"),

         (assign, "$g_waiting_for_confirmation_to_terminate", 0),
         (assign, "$g_round_ended", 0),
         (assign, "$g_reduced_waiting_seconds", 0),

         (try_begin),
           (multiplayer_is_server),
           (assign, "$g_round_start_time", 0),
         (try_end),
         (assign, "$my_team_at_start_of_round", -1),

         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_headquarters_flags"),         
         ]),

      (ti_after_mission_start, 0, 0, [], 
       [
         (call_script, "script_determine_team_flags", 0),
         (call_script, "script_determine_team_flags", 1),
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)

         (call_script, "script_initialize_all_scene_prop_slots"),
         
         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),

         (assign, "$g_destructible_target_1", "spr_catapult_destructible"),
         (assign, "$g_destructible_target_2", "spr_trebuchet_destructible"),

         #assigning destructible object team nos to 0. (0 is also used for showing defender team in siege mode)
         (scene_prop_get_num_instances, ":num_destructible_target_1", "$g_destructible_target_1"),
         (try_for_range, ":destructible_target_1_no", 0, ":num_destructible_target_1"),
           (scene_prop_get_instance, ":destructible_target_1_id", "$g_destructible_target_1", ":destructible_target_1_no"),
           (ge, ":destructible_target_1_id", 0),
           (scene_prop_set_team, ":destructible_target_1_id", 0),
         (try_end),

         (scene_prop_get_num_instances, ":num_destructible_target_2", "$g_destructible_target_2"),
         (try_for_range, ":destructible_target_2_no", 0, ":num_destructible_target_2"),
           (scene_prop_get_instance, ":destructible_target_2_id", "$g_destructible_target_2", ":destructible_target_2_no"),
           (ge, ":destructible_target_2_id", 0),
           (scene_prop_set_team, ":destructible_target_2_id", 0),
         (try_end),

         (try_begin),
           (scene_prop_get_num_instances, ":num_catapults", "spr_catapult_destructible"),
           (ge, ":num_catapults", 1),
           (scene_prop_get_instance, ":catapult_scene_prop_id", "spr_catapult_destructible", 0),
           (scene_prop_get_team, "$g_defender_team", ":catapult_scene_prop_id"),
         (else_try),         
           (scene_prop_get_num_instances, ":num_trebuchets", "spr_trebuchet_destructible"),
           (ge, ":num_trebuchets", 1),
           (scene_prop_get_instance, ":trebuchet_scene_prop_id", "spr_trebuchet_destructible", 0),
           (scene_prop_get_team, "$g_defender_team", ":trebuchet_scene_prop_id"),
         (try_end),

         (assign, "$g_number_of_targets_destroyed", 0),

         (try_begin),
           (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"), 
           (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"), 
         (try_end),

         (start_presentation, "prsnt_multiplayer_destructible_targets_display"),

         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
        ]),

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         
         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (eq, ":my_agent_id", ":agent_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),         
          
         (try_begin),
           (neg|multiplayer_is_server),
           (try_begin),
             (eq, "$g_round_ended", 1),
             (assign, "$g_round_ended", 0),

             #initialize scene object slots at start of new round at clients.
             (call_script, "script_initialize_all_scene_prop_slots"),

             #these lines are done in only clients at start of each new round.
             (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
             (call_script, "script_initialize_objects_clients"),
             #end of lines
        
             (start_presentation, "prsnt_multiplayer_destructible_targets_display"),
             (try_begin),
               (eq, "$g_team_balance_next_round", 1),
               (assign, "$g_team_balance_next_round", 0),
             (try_end),
           (try_end),  
         (try_end),         
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"),
         (store_trigger_param_2, ":killer_agent_no"),

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),
         
         (try_begin), #if my initial team still not initialized, find and assign its value.
           (lt, "$my_team_at_start_of_round", 0),
           (multiplayer_get_my_player, ":my_player_no"),
           (ge, ":my_player_no", 0),
           (player_get_agent_id, ":my_agent_id", ":my_player_no"),
           (ge, ":my_agent_id", 0),
           (agent_get_team, "$my_team_at_start_of_round", ":my_agent_id"),
         (try_end),         
         
         (try_begin), #count players and if round ended understand this.
           (agent_is_human, ":dead_agent_no"),
           (assign, ":team1_living_players", 0),
           (assign, ":team2_living_players", 0),
           (try_for_agents, ":cur_agent"),
             (agent_is_human, ":cur_agent"),         
             (try_begin),
               (agent_is_alive, ":cur_agent"),  
               (agent_get_team, ":cur_agent_team", ":cur_agent"),
               (try_begin),
                 (eq, ":cur_agent_team", 0),
               (val_add, ":team1_living_players", 1),
               (else_try),
                 (eq, ":cur_agent_team", 1),
                 (val_add, ":team2_living_players", 1),
               (try_end),
             (try_end),
           (try_end),                    
           (try_begin),         
             (eq, "$g_round_ended", 0),
             (try_begin),
               (this_or_next|eq, ":team1_living_players", 0),
               (eq, ":team2_living_players", 0),                
               (assign, "$g_winner_team", -1),
               (assign, reg0, "$g_multiplayer_respawn_period"),
               (try_begin),
                 (eq, ":team1_living_players", 0),
                 (try_begin),
                   (neq, ":team2_living_players", 0),
                   (assign, "$g_winner_team", 1),
                 (try_end),

                 (try_begin),
                   (eq, "$g_winner_team", -1),
                 (else_try),
                   (eq, "$g_defender_team", 1), #if defender team killed all attackers
                   (try_begin),
                     (neg|multiplayer_is_server),
                     (call_script, "script_calculate_number_of_targets_destroyed"),
                   (try_end),
                   (store_sub, ":num_targets_saved", 2, "$g_number_of_targets_destroyed"),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"), #1 or -1 is winner team
                 (else_try),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_attackers_won_the_round, 0), #1 or -1 is winner team
                 (try_end),        
               (else_try),
                 (try_begin),
                   (neq, ":team1_living_players", 0),
                   (assign, "$g_winner_team", 0),
                 (try_end),

                 (try_begin),
                   (eq, "$g_winner_team", -1),         
                 (else_try),
                   (eq, "$g_defender_team", 0), #if defender team killed all attackers
                   (try_begin),
                     (neg|multiplayer_is_server),
                     (call_script, "script_calculate_number_of_targets_destroyed"),
                   (try_end),
                   (store_sub, ":num_targets_saved", 2, "$g_number_of_targets_destroyed"),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"), #0 or -1 is winner team
                 (else_try),
                   (call_script, "script_show_multiplayer_message", multiplayer_message_type_attackers_won_the_round, 0), #0 or -1 is winner team
                 (try_end),         
               (try_end),
               (store_mission_timer_a, "$g_round_finish_time"),
               (assign, "$g_round_ended", 1),


               (try_begin), #destroy score (condition : remained no one)
                 (multiplayer_is_server),
                 (ge, "$g_winner_team", 0),
                 (lt, "$g_winner_team", 2),
                 (neq, "$g_winner_team", -1),

                 (team_get_score, ":team_score", "$g_winner_team"),
                 (store_sub, ":num_targets_remained", 2, "$g_number_of_targets_destroyed"),
                 (val_add, ":team_score", ":num_targets_remained"),

                 #for only server itself-----------------------------------------------------------------------------------------------
                 (call_script, "script_team_set_score", "$g_winner_team", ":team_score"),
                 #for only server itself-----------------------------------------------------------------------------------------------
                 (get_max_players, ":num_players"),
                 (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                   (player_is_active, ":player_no"),
                   (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, "$g_winner_team", ":team_score"),
                 (try_end),
               (try_end), #destroy score end

         
               (try_begin),
                 (neq, "$g_defender_team", "$g_winner_team"),
                 (neq, "$g_winner_team", -1),
                 (assign, "$g_number_of_targets_destroyed", 2),              
               (try_end),
             (try_end),
           (try_end),
         (try_end),

         (try_begin),
           (multiplayer_is_server),
           (agent_is_human, ":dead_agent_no"),
           (neg|agent_is_non_player, ":dead_agent_no"),

           (ge, ":dead_agent_no", 0),
           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (ge, ":dead_agent_player_id", 0),

           (set_fixed_point_multiplier, 100),

           (agent_get_player_id, ":dead_agent_player_id", ":dead_agent_no"),
           (agent_get_position, pos0, ":dead_agent_no"),

           (position_get_x, ":x_coor", pos0),
           (position_get_y, ":y_coor", pos0),
           (position_get_z, ":z_coor", pos0),
         
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_x, ":x_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_y, ":y_coor"),
           (player_set_slot, ":dead_agent_player_id", slot_player_death_pos_z, ":z_coor"),
         (try_end),    
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart"),
         ]),

      
      (1, 0, 0, [(multiplayer_is_server), 
                 (eq, "$g_round_ended", 0),
                 (eq, "$g_number_of_targets_destroyed", 2),
                 ],
       [
         (store_mission_timer_a, "$g_round_finish_time"),
         (assign, "$g_round_ended", 1),         

         (multiplayer_get_my_player, ":my_player_no"), #send all players draw information of round.
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_draw_this_round", -9),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"), 
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (neq, ":player_no", ":my_player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, -9),
         (try_end),
         ]),
      
      (1, 0, 0, [(multiplayer_is_server), 
                 (eq, "$g_round_ended", 0),
                 (store_mission_timer_a, ":current_time"),
                 (store_sub, ":seconds_past_in_round", ":current_time", "$g_round_start_time"),
                 (ge, ":seconds_past_in_round", "$g_multiplayer_round_max_seconds"),
                 ],
       [ #round time is up
         (store_mission_timer_a, "$g_round_finish_time"),                          
         (assign, "$g_round_ended", 1),
         (assign, "$g_winner_team", -9),
         
         (multiplayer_get_my_player, ":my_player_no"), #send all players draw information of round.

         (store_sub, ":num_targets_saved", 2, "$g_number_of_targets_destroyed"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_show_multiplayer_message", multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"), 
         #for only server itself-----------------------------------------------------------------------------------------------     
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_defenders_saved_n_targets, ":num_targets_saved"),
         (try_end),

         #for only server itself-----------------------------------------------------------------------------------------------
         (call_script, "script_draw_this_round", "$g_winner_team"),
         #for only server itself-----------------------------------------------------------------------------------------------
         (get_max_players, ":num_players"), 
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (neq, ":player_no", ":my_player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
         (try_end),
                         
         (try_begin), #destroy score (condition : time is up)
           (multiplayer_is_server),
           (assign, "$g_winner_team", "$g_defender_team"),         
         
           (team_get_score, ":team_score", "$g_winner_team"),
           (store_sub, ":num_targets_remained", 2, "$g_number_of_targets_destroyed"),
           (val_add, ":team_score", ":num_targets_remained"),

           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", "$g_winner_team", ":team_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, "$g_winner_team", ":team_score"),
           (try_end),
         (try_end), #destroy score end        
        ]),          

      (10, 0, 0, [(multiplayer_is_server)],
       [
         #auto team balance control during the round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
           (try_end),          
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             (eq, "$g_team_balance_next_round", 0),
         
             (assign, "$g_team_balance_next_round", 1),

             #for only server itself-----------------------------------------------------------------------------------------------
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_next, 0), #0 is useless here
             #for only server itself-----------------------------------------------------------------------------------------------     
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
               (player_is_active, ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_next),
             (try_end),
             
             (call_script, "script_warn_player_about_auto_team_balance"),
           (try_end),
         (try_end),           
         #team balance check part finished
         ]),

      (0, 0, 0, [(multiplayer_is_server),  
                 (eq, "$g_round_ended", 0),                 
                 (eq, "$g_battle_death_mode_started", 2)],
       [
         (set_fixed_point_multiplier, 100),
         (scene_prop_get_instance, ":pole_1_id", "spr_headquarters_pole_code_only", 0),
         (scene_prop_get_instance, ":pole_2_id", "spr_headquarters_pole_code_only", 1),
         (scene_prop_get_instance, ":flag_1_id", "$team_1_flag_scene_prop", 0),
         (scene_prop_get_instance, ":flag_2_id", "$team_2_flag_scene_prop", 0),

         (prop_instance_get_position, pos1, ":pole_1_id"),
         (prop_instance_get_position, pos2, ":pole_2_id"),
         (prop_instance_get_position, pos3, ":flag_1_id"),
         (prop_instance_get_position, pos4, ":flag_2_id"),

         (copy_position, pos7, pos1),
         (position_move_z, pos7, multi_headquarters_flag_initial_height),
         (copy_position, pos8, pos2),
         (position_move_z, pos8, multi_headquarters_flag_initial_height),

         (get_distance_between_positions, ":dist_1", pos1, pos3),
         (get_distance_between_positions, ":dist_2", pos2, pos4),

         (assign, ":there_are_agents_from_only_team_1_around_their_flag", 0),
         (assign, ":there_are_agents_from_only_team_2_around_their_flag", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_agent_id, ":agent_id", ":player_no"),
           (ge, ":agent_id", 0),
           (agent_is_human, ":agent_id"),
           (agent_is_alive, ":agent_id"),
           (agent_get_team, ":agent_team", ":agent_id"),
           (agent_get_position, pos0, ":agent_id"),

           (agent_get_horse, ":agent_horse", ":agent_id"),
           (eq, ":agent_horse", -1), #horseman cannot move flag
         
           (try_begin),
             (eq, ":agent_team", 0),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_1 area, so flag_1 situation can be 1 or -2
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", 1), #there are agents from only our team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", -1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_1 agent in the flag_2 area, so flag_2 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (else_try),
             (eq, ":agent_team", 1),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos2),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag 2 area, so flag_2 situation can be 1 or -2
                 (eq, ":there_are_agents_from_only_team_2_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", 1), #there are agents from only our team
               (else_try),
                 (assign, ":there_are_agents_from_only_team_2_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
             (try_begin),
               (get_sq_distance_between_positions, ":squared_dist", pos0, pos1),
               (lt, ":squared_dist", multi_headquarters_max_distance_sq_to_raise_flags),
               (try_begin), #we found a team_2 agent in the flag_1 area, so flag_1 situation can be -1 or -2
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 0),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -1), #there are agents from only rival team
               (else_try),
                 (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1),
                 (assign, ":there_are_agents_from_only_team_1_around_their_flag", -2), #there are agents from both teams
               (try_end),
             (try_end),
           (try_end),
         (try_end),

         #controlling battle win by death mode conditions
         (try_begin),
           (ge, ":dist_1", multi_headquarters_flag_height_to_win),           
           (assign, "$g_winner_team", 0),

           (get_max_players, ":num_players"), 
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_1_score", 0),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 0, ":team_1_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 0, ":team_1_score"),             
           (try_end),

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (else_try),
           (ge, ":dist_2", multi_headquarters_flag_height_to_win),
           (assign, "$g_winner_team", 1),

           (get_max_players, ":num_players"), 
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_draw_this_round", "$g_winner_team"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_int_to_player, ":player_no", multiplayer_event_draw_this_round, "$g_winner_team"),
           (try_end),

           (team_get_score, ":team_2_score", 1),
           #for only server itself-----------------------------------------------------------------------------------------------
           (call_script, "script_team_set_score", 1, ":team_2_score"),
           #for only server itself-----------------------------------------------------------------------------------------------
           (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
             (player_is_active, ":player_no"),
             (multiplayer_send_2_int_to_player, ":player_no", multiplayer_event_set_team_score, 1, ":team_2_score"),             
           (try_end),

           (call_script, "script_show_multiplayer_message", multiplayer_message_type_round_result_in_battle_mode, 0), #0 is winner team         
           (call_script, "script_check_achievement_last_man_standing", "$g_winner_team"),    

           (store_mission_timer_a, "$g_round_finish_time"),
           (assign, "$g_round_ended", 1),
         (try_end),

         (try_begin),
           (eq, "$g_round_ended", 0),

           (position_get_z, ":flag_1_cur_z", pos3),       
           (prop_instance_is_animating, ":is_animating", ":flag_1_id"),         
           (try_begin), #if flag_1 is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_1_id"), #stop flag_1
           (else_try), #if flag_1 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_1_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", -1), #if there are agents from only team_2 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (gt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going up         
             (get_distance_between_positions, ":time_1", pos3, pos7),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 16),
             (prop_instance_animate_to_position, ":flag_1_id", pos7, ":time_1"), #move flag_1 down
           (else_try), #if flag_1 is going down or stopping
             (eq, ":there_are_agents_from_only_team_1_around_their_flag", 1), #if there is agents from only team_1 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_1_id"),
             (position_get_z, ":flag_1_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_1 is stopping
             (lt, ":flag_1_animation_target_z", ":flag_1_cur_z"), #if flag_1 is going down
             (copy_position, pos5, pos1),
             (position_move_z, pos5, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_1", pos3, pos5),
             (gt, ":time_1", 0),
             (val_mul, ":time_1", 8),
             (prop_instance_animate_to_position, ":flag_1_id", pos5, ":time_1"), #move flag_1 up
           (try_end),

           (position_get_z, ":flag_2_cur_z", pos4),       
           (prop_instance_is_animating, ":is_animating", ":flag_2_id"),         
           (try_begin), #if flag is going down or up and there are agents from both teams
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -2), #if there are agents from both teams
             (eq, ":is_animating", 1),
             (prop_instance_stop_animating, ":flag_2_id"), #stop flag_2
           (else_try), #if flag_2 is going down
             (this_or_next|eq, ":there_are_agents_from_only_team_2_around_their_flag", 0), #if there is no one
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", -1), #if there are agents from only team_1 (enemy of team_1)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (gt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going up         
             (get_distance_between_positions, ":time_2", pos4, pos8),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 16),
             (prop_instance_animate_to_position, ":flag_2_id", pos8, ":time_2"), #move flag_2 down
           (else_try), #if flag_2 is going down or stopping
             (eq, ":there_are_agents_from_only_team_2_around_their_flag", 1), #if there is agents from only team_2 (current team)
             (prop_instance_get_animation_target_position, pos9, ":flag_2_id"),
             (position_get_z, ":flag_2_animation_target_z", pos9),
             (this_or_next|eq, ":is_animating", 0), #if flag_2 is stopping
             (lt, ":flag_2_animation_target_z", ":flag_2_cur_z"), #if flag_2 is going down
             (copy_position, pos6, pos2),
             (position_move_z, pos6, multi_headquarters_flag_height_to_win),
             (get_distance_between_positions, ":time_2", pos4, pos6),
             (gt, ":time_2", 0),
             (val_mul, ":time_2", 8),
             (prop_instance_animate_to_position, ":flag_2_id", pos6, ":time_2"), #move flag_2 up
           (try_end),
         (try_end),
         ]),
                
      (1, 0, 3, [(multiplayer_is_server),
                 (eq, "$g_round_ended", 1),
                 (store_mission_timer_a, ":seconds_past_till_round_ended"),
                 (val_sub, ":seconds_past_till_round_ended", "$g_round_finish_time"),
                 (ge, ":seconds_past_till_round_ended", "$g_multiplayer_respawn_period")],
       [
         #auto team balance control at the end of round         
         (assign, ":number_of_players_at_team_1", 0),
         (assign, ":number_of_players_at_team_2", 0),
         (get_max_players, ":num_players"),
         (try_for_range, ":cur_player", 0, ":num_players"),
           (player_is_active, ":cur_player"),
           (player_get_team_no, ":player_team", ":cur_player"),
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":number_of_players_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":number_of_players_at_team_2", 1),
           (try_end),         
         (try_end),
         #end of counting active players per team.
         (store_sub, ":difference_of_number_of_players", ":number_of_players_at_team_1", ":number_of_players_at_team_2"),
         (assign, ":number_of_players_will_be_moved", 0),
         (try_begin),
           (try_begin),
             (store_mul, ":checked_value", "$g_multiplayer_auto_team_balance_limit", -1),
             (le, ":difference_of_number_of_players", ":checked_value"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", -2),
             (assign, ":team_with_more_players", 1),
             (assign, ":team_with_less_players", 0),
           (else_try),
             (ge, ":difference_of_number_of_players", "$g_multiplayer_auto_team_balance_limit"),
             (store_div, ":number_of_players_will_be_moved", ":difference_of_number_of_players", 2),
             (assign, ":team_with_more_players", 0),
             (assign, ":team_with_less_players", 1),
           (try_end),          
         (try_end),         
         #number of players will be moved calculated. (it is 0 if no need to make team balance)
         (try_begin),
           (gt, ":number_of_players_will_be_moved", 0),
           (try_begin),
             #(eq, "$g_team_balance_next_round", 1), #control if at pre round players are warned about team change.

             (try_for_range, ":unused", 0, ":number_of_players_will_be_moved"), 
               (assign, ":max_player_join_time", 0),
               (assign, ":latest_joined_player_no", -1),
               (get_max_players, ":num_players"),                               
               (try_for_range, ":player_no", 0, ":num_players"),
                 (player_is_active, ":player_no"),
                 (player_get_team_no, ":player_team", ":player_no"),
                 (eq, ":player_team", ":team_with_more_players"),
                 (player_get_slot, ":player_join_time", ":player_no", slot_player_join_time),
                 (try_begin),
                   (gt, ":player_join_time", ":max_player_join_time"),
                   (assign, ":max_player_join_time", ":player_join_time"),
                   (assign, ":latest_joined_player_no", ":player_no"),
                 (try_end),
               (try_end),
               (try_begin),
                 (ge, ":latest_joined_player_no", 0),
                 (try_begin),
                   #if player is living add +1 to his kill count because he will get -1 because of team change while living.
                   (player_get_agent_id, ":latest_joined_agent_id", ":latest_joined_player_no"), 
                   (ge, ":latest_joined_agent_id", 0),
                   (agent_is_alive, ":latest_joined_agent_id"),

                   (player_get_kill_count, ":player_kill_count", ":latest_joined_player_no"), #adding 1 to his kill count, because he will lose 1 undeserved kill count for dying during team change
                   (val_add, ":player_kill_count", 1),
                   (player_set_kill_count, ":latest_joined_player_no", ":player_kill_count"),

                   (player_get_death_count, ":player_death_count", ":latest_joined_player_no"), #subtracting 1 to his death count, because he will gain 1 undeserved death count for dying during team change
                   (val_sub, ":player_death_count", 1),
                   (player_set_death_count, ":latest_joined_player_no", ":player_death_count"),

                   (player_get_score, ":player_score", ":latest_joined_player_no"), #adding 1 to his score count, because he will lose 1 undeserved score for dying during team change
                   (val_add, ":player_score", 1),
                   (player_set_score, ":latest_joined_player_no", ":player_score"),

                   (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
                     (player_is_active, ":player_no"),
                     (multiplayer_send_4_int_to_player, ":player_no", multiplayer_event_set_player_score_kill_death, ":latest_joined_player_no", ":player_score", ":player_kill_count", ":player_death_count"),
                   (try_end),         

                   (player_get_value_of_original_items, ":old_items_value", ":latest_joined_player_no"),
                   (player_get_gold, ":player_gold", ":latest_joined_player_no"),
                   (val_add, ":player_gold", ":old_items_value"),
                   (player_set_gold, ":latest_joined_player_no", ":player_gold", multi_max_gold_that_can_be_stored),
                 (end_try),

                 (player_set_troop_id, ":latest_joined_player_no", -1),
                 (player_set_team_no, ":latest_joined_player_no", ":team_with_less_players"),
                 (multiplayer_send_message_to_player, ":latest_joined_player_no", multiplayer_event_force_start_team_selection),
               (try_end),
             (try_end),
             #tutorial message (after team balance)
             
             #(tutorial_message_set_position, 500, 500),
             #(tutorial_message_set_size, 30, 30),
             #(tutorial_message_set_center_justify, 1),
             #(tutorial_message, "str_auto_team_balance_done", 0xFFFFFFFF, 5),

             #for only server itself
             (call_script, "script_show_multiplayer_message", multiplayer_message_type_auto_team_balance_done, 0), 

             #no need to send also server here
             (multiplayer_get_my_player, ":my_player_no"),
             (get_max_players, ":num_players"),                               
             (try_for_range, ":player_no", 0, ":num_players"),
               (player_is_active, ":player_no"),
               (neq, ":my_player_no", ":player_no"),
               (multiplayer_send_int_to_player, ":player_no", multiplayer_event_show_multiplayer_message, multiplayer_message_type_auto_team_balance_done),
             (try_end),
             (assign, "$g_team_balance_next_round", 0),
           (try_end),
         (try_end),           
         #team balance check part finished
         (assign, "$g_team_balance_next_round", 0),

         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_spawned_this_round, 0),
           (player_get_agent_id, ":player_agent", ":player_no"),
           (ge, ":player_agent", 0),
           (agent_is_alive, ":player_agent"),
           (player_save_picked_up_items_for_next_spawn, ":player_no"),
           (player_get_value_of_original_items, ":old_items_value", ":player_no"),
           (player_set_slot, ":player_no", slot_player_last_rounds_used_item_earnings, ":old_items_value"),
         (try_end),

         #money management
         (assign, ":per_round_gold_addition", multi_battle_round_team_money_add),
         (val_mul, ":per_round_gold_addition", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":per_round_gold_addition", 100),
         
         (store_sub, ":num_targets_remained", 2, "$g_number_of_targets_destroyed"),
         (store_mul, ":defender_money_add", ":num_targets_remained", multi_destroy_save_or_destroy_target_money_add),
         (store_mul, ":attacker_money_add", "$g_number_of_targets_destroyed", multi_destroy_save_or_destroy_target_money_add),
         (val_add, ":defender_money_add", 100), #defenders cannot get money from destroying catapult thats why they get more money per round.
         (val_sub, ":attacker_money_add", 100), #attackers also get money from destroying catapult thats why they get less money per round.
         (get_max_players, ":num_players"),

         (val_mul, ":defender_money_add", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":defender_money_add", 100),
         (val_mul, ":attacker_money_add", "$g_multiplayer_round_earnings_multiplier"),
         (val_div, ":attacker_money_add", 100),

         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_gold, ":player_gold", ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"),           
           (val_add, ":player_gold", ":per_round_gold_addition"), #standard           
           (try_begin), 
             (eq, ":player_team", "$g_defender_team"),
             (val_add, ":player_gold", ":defender_money_add"),
           (else_try), 
             (val_add, ":player_gold", ":attacker_money_add"),
           (try_end),
         
           #(below lines added new at 25.11.09 after Armagan decided new money system)
           (try_begin),
             (player_get_slot, ":old_items_value", ":player_no", slot_player_last_rounds_used_item_earnings),
             (store_add, ":player_total_potential_gold", ":player_gold", ":old_items_value"),
             (store_mul, ":minimum_gold", "$g_multiplayer_initial_gold_multiplier", 10),
             (lt, ":player_total_potential_gold", ":minimum_gold"),
             (store_sub, ":additional_gold", ":minimum_gold", ":player_total_potential_gold"),
             (val_add, ":player_gold", ":additional_gold"),
           (try_end),
           #new money system addition end

           (player_set_gold, ":player_no", ":player_gold", multi_max_gold_that_can_be_stored),
         (try_end),

         #initialize my team at start of round (it will be assigned again at next round's first death)
         (assign, "$my_team_at_start_of_round", -1),

         #clear scene and end round
         (multiplayer_clear_scene),
         
         (get_max_players, ":num_players"),                               
         (try_for_range, ":player_no", 1, ":num_players"), #0 is server so starting from 1
           (player_is_active, ":player_no"),
           (player_set_slot, ":player_no", slot_player_damage_given_to_target_1, 0),
           (player_set_slot, ":player_no", slot_player_damage_given_to_target_2, 0),
         (try_end),
         
         #initialize moveable object positions
         (call_script, "script_multiplayer_initialize_belfry_wheel_rotations"),
         (call_script, "script_multiplayer_close_gate_if_it_is_open"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
                  
         (assign, "$g_round_ended", 0),

         (assign, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1"), 
         (assign, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2"), 

         (start_presentation, "prsnt_multiplayer_destructible_targets_display"),

         #initializing catapult & trebuchet positions and hit points for destroy mod.
         (call_script, "script_initialize_objects"),

         (store_mission_timer_a, "$g_round_start_time"),
         (call_script, "script_initialize_all_scene_prop_slots"),

         #initialize round start times for clients
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (multiplayer_send_int_to_player, ":player_no", multiplayer_event_set_round_start_time, -9999), #this will also initialize moveable object slots.
         (try_end),         
       ]),

      (0, 0, 0, [], #if there is nobody in any teams do not reduce round time.
       [
         #(multiplayer_is_server),
         (assign, ":human_agents_spawned_at_team_1", "$g_multiplayer_num_bots_team_1"),
         (assign, ":human_agents_spawned_at_team_2", "$g_multiplayer_num_bots_team_2"),
         
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (player_get_team_no, ":player_team", ":player_no"), 
           (try_begin),
             (eq, ":player_team", 0),
             (val_add, ":human_agents_spawned_at_team_1", 1),
           (else_try),
             (eq, ":player_team", 1),
             (val_add, ":human_agents_spawned_at_team_2", 1),
           (try_end),
         (try_end),

         (try_begin),
           (this_or_next|eq, ":human_agents_spawned_at_team_1", 0),
           (eq, ":human_agents_spawned_at_team_2", 0),

           (store_mission_timer_a, ":seconds_past_since_round_started"),
           (val_sub, ":seconds_past_since_round_started", "$g_round_start_time"),
           (le, ":seconds_past_since_round_started", 2),
                  
           (store_mission_timer_a, "$g_round_start_time"),
         (try_end),
       ]),    
           
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),
           (try_begin),
             (player_slot_eq, ":player_no", slot_player_spawned_this_round, 0),

             (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
             (lt, ":player_team", multi_team_spectator),

             (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
             (ge, ":player_troop", 0),

             (assign, ":spawn_new", 0), 
             (assign, ":num_active_players_in_team_0", 0),
             (assign, ":num_active_players_in_team_1", 0),
             (try_begin),
               (assign, ":num_active_players", 0),
               (get_max_players, ":num_players"),
               (try_for_range, ":player_no_2", 0, ":num_players"),
                 (player_is_active, ":player_no_2"),
                 (val_add, ":num_active_players", 1),
                 (player_get_team_no, ":player_team_2", ":player_no_2"),
                 (try_begin),
                   (eq, ":player_team_2", 0),
                   (val_add, ":num_active_players_in_team_0", 1),
                 (else_try),
                   (eq, ":player_team_2", 1),
                   (val_add, ":num_active_players_in_team_1", 1),
                 (try_end),
               (try_end),

               (store_mul, ":multipication_of_num_active_players_in_teams", ":num_active_players_in_team_0", ":num_active_players_in_team_1"),

               (store_mission_timer_a, ":round_time"),
               (val_sub, ":round_time", "$g_round_start_time"),

               (this_or_next|lt, ":round_time", multiplayer_new_agents_finish_spawning_time),
               (this_or_next|le, ":num_active_players", 2),
               (eq, ":multipication_of_num_active_players_in_teams", 0),
         
               (eq, "$g_round_ended", 0),
               (assign, ":spawn_new", 1),
             (try_end),
             (eq, ":spawn_new", 1),
             (try_begin),
               (eq, ":player_team", 0),
               (assign, ":entry_no", multi_initial_spawn_point_team_1),
             (else_try),
               (eq, ":player_team", 1),
               (assign, ":entry_no", multi_initial_spawn_point_team_2),
             (try_end),
             (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),
             (player_spawn_new_agent, ":player_no", ":entry_no"),
             (player_set_slot, ":player_no", slot_player_spawned_this_round, 1),
           (else_try), #spawning as a bot (if option ($g_multiplayer_player_respawn_as_bot) is 1)
             (eq, "$g_multiplayer_player_respawn_as_bot", 1),
             (player_get_agent_id, ":player_agent", ":player_no"),
             (ge, ":player_agent", 0),
             (neg|agent_is_alive, ":player_agent"),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
             (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),

             (player_get_team_no, ":player_team", ":player_no"),
             (assign, ":is_found", 0),
             (try_for_agents, ":cur_agent"),
               (eq, ":is_found", 0),
               (agent_is_alive, ":cur_agent"),
               (agent_is_human, ":cur_agent"),
               (agent_is_non_player, ":cur_agent"),
               (agent_get_team ,":cur_team", ":cur_agent"),
               (eq, ":cur_team", ":player_team"),
               (assign, ":is_found", 1),
             (try_end),

             (try_begin),
               (eq, ":is_found", 1),
               (call_script, "script_find_most_suitable_bot_to_control", ":player_no"),
               (player_control_agent, ":player_no", reg0),

               (player_get_slot, ":num_spawns", ":player_no", slot_player_spawned_this_round),
               (val_add, ":num_spawns", 1),
               (player_set_slot, ":player_no", slot_player_spawned_this_round, ":num_spawns"),
             (try_end),
           (try_end),
         (try_end),
         ]),

      multiplayer_server_spawn_bots, 
      multiplayer_server_manage_bots, 
      
      multiplayer_server_check_end_map,
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,

      (ti_battle_window_opened, 0, 0, [], [
        (start_presentation, "prsnt_multiplayer_round_time_counter"),
        (start_presentation, "prsnt_multiplayer_team_score_display"),
        ]),

      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),
      ## CC
      
      ## CC
      ],
  ),

  (
    "bandit_lair_2",mtf_battle_mode|mtf_synch_inventory,charge,
    "Ambushing a bandit lair",
    [
      (0,mtef_team_0|mtef_use_exact_number,af_override_horse, aif_start_alarmed, 10,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (2,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (3,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (4,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (5,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (6,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (7,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (8,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (9,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (10,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
    ],
    [
      common_battle_init_banner,
    
      common_inventory_not_available,
      
                
      (ti_tab_pressed, 0, 0,
       [
        (display_message, "str_cannot_leave_now"),
       ], []),
     
      (0, 0, ti_once, [],
       [
        (assign, "$defender_reinforcement_stage", 0),
        (assign, "$bandits_spawned_extra", 0),
        
        (assign, "$g_arena_training_max_opponents", 0),
        (assign, "$g_arena_training_num_agents_spawned", 0),
        (assign, "$g_arena_training_kills", 0),
        (assign, "$g_arena_training_won", 0),
        
          (assign, ":num_agents_spawned", 0),
        (store_character_level, ":player_level", "trp_player"),   
        (try_begin),
          (lt, ":player_level", 15),
          (assign, ":player_level", 15),
        (try_end),
        (store_add, ":num_agents_spawned", 10, ":player_level"),
        (val_div, ":num_agents_spawned", 2),#base_troop_max
        
        (assign, "$g_arena_training_num_agents_spawned", 0),#num_boss_spawned
        (assign, "$g_arena_training_kills", 0),#diffcult
        (store_random_in_range, ":diffcult", 0, 10),
        (try_begin),
          (is_between, ":diffcult", 0,3),
          (assign, "$g_arena_training_kills", 1),
          (assign, "$g_arena_training_num_agents_spawned", 5),
          (val_clamp, ":num_agents_spawned", 12, 101),
        (else_try),
          (is_between, ":diffcult", 3,6),
          (val_mul, ":num_agents_spawned", 3),
          (val_div, ":num_agents_spawned", 2),
          (assign, "$g_arena_training_kills", 2),
          (assign, "$g_arena_training_num_agents_spawned", 7),
          (val_clamp, ":num_agents_spawned", 18, 151),
        (else_try),
          (is_between, ":diffcult", 6,9),
          (val_mul, ":num_agents_spawned", 2),
          (assign, "$g_arena_training_kills", 3),
          (assign, "$g_arena_training_num_agents_spawned", 10),
          (val_clamp, ":num_agents_spawned", 24, 201),
        (else_try),
          #(eq, ":diffcult", 9),
          (val_mul, ":num_agents_spawned", 3),
          (assign, "$g_arena_training_kills", 4),
          (assign, "$g_arena_training_num_agents_spawned", 15),
          (val_clamp, ":num_agents_spawned", 36, 301),
        (try_end),
        (party_get_template_id, ":template", "$g_encountered_party"),
        (try_begin),
          (is_between, ":template", "pt_dwarf_cottage","pt_cathedral"),
          (val_mul, ":num_agents_spawned", 2),
          (val_div, ":num_agents_spawned", 3),
        (else_try),
          (is_between, ":template", "pt_cathedral","pt_bandit_lair_templates_end"),
          (val_div, ":num_agents_spawned", 2),
        (try_end),
          (val_clamp, ":num_agents_spawned", 12, 301),
          (val_div, ":num_agents_spawned", 2),
          (assign,"$g_arena_training_next_spawn_time",":num_agents_spawned"),
          (assign,"$bandits_spawned_extra",":num_agents_spawned"),
          (assign,"$g_arena_training_max_opponents",":num_agents_spawned"),
       ]),
              
      (1, 0, 0, [],
       [
        (try_for_agents, ":bandit_id"),
          (agent_is_alive, ":bandit_id"),          
          (agent_get_team, ":agent_team_1", ":bandit_id"),
          (eq, ":agent_team_1", 1),
          (agent_is_in_special_mode, ":bandit_id"),
          (agent_is_human, ":bandit_id"),
          
          (agent_get_position, pos0, ":bandit_id"),
          (try_for_agents, ":player_team_agent_id"),
            (agent_is_alive, ":player_team_agent_id"),
            (agent_get_team, ":agent_team_2", ":player_team_agent_id"),
            (eq, ":agent_team_2", 0),
            (agent_is_human, ":player_team_agent_id"),
                      
            (store_agent_hit_points, ":bandit_hit_points", ":bandit_id"),
            
            (assign, ":continue", 0),
            (try_begin),
              (lt, ":bandit_hit_points", 100),
                            
              (try_for_agents, ":bandit_2_id"),
                (agent_is_alive, ":bandit_2_id"),  
                (agent_get_team, ":bandit_2_team", ":bandit_2_id"),
                (eq, ":bandit_2_team", 1),
                (neq, ":bandit_id", ":bandit_2_id"),
                (agent_is_in_special_mode, ":bandit_2_id"),
                (agent_is_human, ":bandit_2_id"),
                
                (agent_get_position, pos1, ":bandit_id"),
                (agent_get_position, pos2, ":bandit_2_id"),                        
                (get_distance_between_positions, ":distance", pos1, pos2),
                (le, ":distance", 1000),

                (agent_clear_scripted_mode, ":bandit_2_id"),  
              (try_end),                             
              
              (assign, ":continue", 1),
            (else_try),  
              (agent_get_position, pos1, ":bandit_id"),
              (agent_get_position, pos2, ":player_team_agent_id"),                        
              (get_distance_between_positions, ":distance", pos1, pos2),                                                                        
              (le, ":distance", 4000),
              
              (try_for_agents, ":bandit_2_id"),
                (agent_is_alive, ":bandit_2_id"),  
                (agent_get_team, ":bandit_2_team", ":bandit_2_id"),
                (eq, ":bandit_2_team", 1),
                (neq, ":bandit_id", ":bandit_2_id"),
                (agent_is_in_special_mode, ":bandit_2_id"),
                (agent_is_human, ":bandit_2_id"),
                
                (agent_get_position, pos1, ":bandit_id"),
                (agent_get_position, pos2, ":bandit_2_id"),                        
                (get_distance_between_positions, ":distance", pos1, pos2),
                (le, ":distance", 1000),
                
                (agent_clear_scripted_mode, ":bandit_2_id"),  
              (try_end),                

              (assign, ":continue", 1),
            (try_end),  
            
            (eq, ":continue", 1),
            
            (agent_clear_scripted_mode, ":bandit_id"),            
          (try_end),
        (try_end),
       ]),
       
      (1, 0, 0, 
       [
         (ge, "$bandits_spawned_extra", 1),
         #(le, "$defender_reinforcement_stage", 3),
       ],
       [          
       

          (party_get_template_id, ":template", "$g_encountered_party"),
          (store_random_in_range, ":random_value", 0, 2),
          (eq, ":random_value", 0),

          (call_script,"script_get_village_type","$g_encountered_party"),
          (assign,":village_type",reg0),
          
          (assign, ":spawned_num", -1),
          (try_begin),
            (eq, "$defender_reinforcement_stage", 2),
            (assign, ":spawned_num", 1),
          (else_try),
            (eq, "$defender_reinforcement_stage", 3),
            (store_random_in_range, ":spawned_num", 1, 5),
          (else_try),
            (eq, "$defender_reinforcement_stage", 4),
            (assign, ":spawned_num", "$bandits_spawned_extra"),
          (try_end),
          (gt, ":spawned_num", -1),
          (gt, "$bandits_spawned_extra", 0),
          (store_current_scene, ":cur_scene"), 
          (modify_visitors_at_site, ":cur_scene"),
          (val_sub, "$bandits_spawned_extra", ":spawned_num"),                   
          (try_for_range, ":unused", 0, ":spawned_num"),
            (assign, ":bandit_troop", "trp_bandit"),
            (store_random_in_range, ":random_entry_point", 2, 10),
            (try_begin),
              (eq, ":template", "pt_farm"),
              (assign, ":bandit_troop", "trp_bandit"),
            (else_try),
              (eq, ":template", "pt_keep"),
              (assign, ":bandit_troop", "trp_bandit"),
            (else_try),
              (eq, ":template", "pt_nomad_tent"),
              (try_begin),
                (eq,":village_type",snow_village),
                (store_random_in_range, ":random_value", 0, 2),
                (try_begin),
                  (eq, ":random_value", 0),
                  (assign, ":bandit_troop", "trp_rus_cossack_3"),
                (else_try), 
                  (assign, ":bandit_troop", "trp_taiga_bandit_leader"),
                (try_end),
                #(store_random_in_range, ":bandit_troop", "trp_rus_cossack_1", "trp_balkan_cav_3"),
              (else_try),
                (eq,":village_type",desert_village),
                #(assign, ":bandit_troop", "trp_marinid_camel_2"),
                (store_random_in_range, ":bandit_troop", "trp_marinid_camel_2", "trp_welsh_longbowm_1"),
              (else_try),
                #(eq,":village_type",steppe_village),
                #(store_random_in_range, ":bandit_troop", "trp_steppe_horseman_1", "trp_black_khergit_guard"),
                (assign, ":bandit_troop", "trp_black_khergit_horseman"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_graveyard"),
              (store_random_in_range, ":bandit_troop", "trp_skeleton_spearman", "trp_mummy_1"),
            (else_try),
              (eq, ":template", "pt_gobin_slum"),
              (store_random_in_range, ":random_1", 0, 3),
              (try_begin),
                (eq, ":random_1", 1),
                (store_random_in_range, ":bandit_troop", "trp_goblin", "trp_goblin_crossbowman"),
              (else_try),
                (store_random_in_range, ":bandit_troop", "trp_goblin_crossbowman", "trp_goblin_guard"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_imp_cache"),

              (assign, ":bandit_troop", "trp_demon_1"),
              (store_random_in_range, ":bandit_troop", "trp_demon_1", "trp_demon_3"),
            (else_try),
              (eq, ":template", "pt_dwarf_cottage"),

              (assign, ":bandit_troop", "trp_dwarf_warrior"),
              (store_random_in_range, ":bandit_troop", "trp_dwarf_miner", "trp_dwarf_guard_1"),
            (else_try),
              (eq, ":template", "pt_elf_homestead"),

              (assign, ":bandit_troop", "trp_woodelf_scout"),
              (store_random_in_range, ":bandit_troop", "trp_woodelf_watchman", "trp_woodelf_sworddancer"),
            (else_try),
              (eq, ":template", "pt_monastery"),

              (store_random_in_range, ":bandit_troop", "trp_monk", "trp_manhunter"),
            (else_try),
              (eq, ":template", "pt_magic_guild"),

              (assign, ":bandit_troop", "trp_human_magic_3"),
              (store_random_in_range, ":random_1", 0, 3),
              (try_begin),
                (eq, ":random_1", 1),
                (store_random_in_range, ":bandit_troop", "trp_human_magic_2", "trp_sissofbattle"),
              (else_try),
                (store_random_in_range, ":bandit_troop", "trp_undead_magic_1", "trp_lich_1"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_cathedral"),
              (assign, ":bandit_troop", "trp_sissofbattle"),
            (else_try),
              (eq, ":template", "pt_clan_halls"),
              (assign, ":bandit_troop", "trp_giant_1"),
            (else_try),
              (eq, ":template", "pt_treant_alcove"),
              (try_begin),
                (eq,":village_type",plain_village),
                (assign, ":bandit_troop", "trp_ent_2"),
              (else_try),
                (assign, ":bandit_troop", "trp_ent_1"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_rogue_hideout"),
              (try_begin),
                (eq,":village_type",plain_village),
                (assign, ":bandit_troop", "trp_welsh_longbowm_1"),
              (else_try),
                (eq,":village_type",snow_village),
                (assign, ":bandit_troop", "trp_taiga_bandit"),
              (else_try),
                (assign, ":bandit_troop", "trp_strange_warrior"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_longhouse"),
              (store_random_in_range, ":random_1", 0, 4),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_mercenary_berserker"),
              (else_try),
                (eq, ":random_1", 2),
                (store_random_in_range, ":bandit_troop", "trp_draugr_2", "trp_draugr_lord"),
              (else_try),
                (store_random_in_range, ":bandit_troop", "trp_nord_footman", "trp_nord_veteran"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_demon_gate"),
              (assign, ":bandit_troop", "trp_demon_3"),
            (else_try),
              (eq, ":template", "pt_vampire_estate"),
              (assign, ":bandit_troop", "trp_vampire_2"),
            (else_try),
              (eq, ":template", "pt_ogre_fort"),
              (assign, ":bandit_troop", "trp_ogre"),
            (else_try),
              (eq, ":template", "pt_wolf_pen"),
              (store_random_in_range, ":bandit_troop", "trp_scottish_axeman", "trp_scottish_pikeman_2"),
            (else_try),
              (eq, ":template", "pt_labyrinth"),
              (assign, ":bandit_troop", "trp_minotaur_2"),
              (store_random_in_range, ":random_1", 1, 9),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_minotaur_2"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_rat_5_2"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_drowelf_assassin_1"),
              (else_try),
                (eq, ":random_1", 4),
                (assign, ":bandit_troop", "trp_rat_4"),
              (else_try),
                (eq, ":random_1", 5),
                (assign, ":bandit_troop", "trp_rat_3"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_tomb_of_curses"),
              (assign, ":bandit_troop", "trp_mummy_2"),
            (try_end),
            (add_visitors_to_current_scene, ":random_entry_point", ":bandit_troop", 1),
          (try_end),
       ]),              

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        #(store_trigger_param_1, ":dead_agent_no"),
        #(store_trigger_param_2, ":killer_agent_no"),
        #(store_trigger_param_3, ":is_wounded"),
        
        (assign, ":number_of_enemies", 0),
        (try_for_agents, ":cur_agent"),
          (agent_is_non_player, ":cur_agent"),
          (agent_is_human, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (neg|agent_is_ally, ":cur_agent"),
          (val_add, ":number_of_enemies", 1),
        (try_end),
        (assign, ":spawned_num", -1),
        (try_begin),
          (ge, "$g_arena_training_max_opponents", 1),
          (assign, ":spawned_num", "$g_arena_training_max_opponents"),
          (le, ":number_of_enemies", 2),
          (le, "$defender_reinforcement_stage", 1),
          (val_add, "$defender_reinforcement_stage", 1),
          (display_message, "@defender_reinforcement_stage 2."),
        (else_try),
          #(this_or_next|ge, "$bandits_spawned_extra", "g_arena_training_max_opponents"),
          #(ge, "$bandits_spawned_extra", "$g_arena_training_max_opponents"),
          (le, "$g_arena_training_max_opponents", 0),
          (le, ":number_of_enemies", 2),
          (ge, "$g_arena_training_num_agents_spawned", 1),
          (store_div,":spawned_num","$g_arena_training_num_agents_spawned",2),
          (try_begin),
            (eq, "$g_arena_training_kills", 1),
            (assign, ":spawned_num", 3),
          (else_try),
            (eq, "$g_arena_training_kills", 2),
            (assign, ":spawned_num", 3),
          (else_try),
            (eq, "$g_arena_training_kills", 3),
            (assign, ":spawned_num", 4),
          (else_try),
            (eq, "$g_arena_training_kills", 4),
            (assign, ":spawned_num", 6),
          (try_end),
          (le, "$defender_reinforcement_stage", 2),
          (val_add, "$defender_reinforcement_stage", 1),
          (display_message, "@defender_reinforcement_stage 3."),
        (else_try),
          (le, ":number_of_enemies", 2),
          (ge, "$g_arena_training_next_spawn_time", 1),
          (assign, "$g_arena_training_max_opponents","$g_arena_training_next_spawn_time"),
          (assign, "$g_arena_training_next_spawn_time", -1),    
          
          (assign, ":spawned_num", "$g_arena_training_max_opponents"),
          (le, "$defender_reinforcement_stage", 3),
          (val_add, "$defender_reinforcement_stage", 1),
          (display_message, "@defender_reinforcement_stage 4."),
        (else_try),
          (le, ":number_of_enemies", 2),
          #(le, "$bandits_spawned_extra", 0),
          #(le, "$g_arena_training_next_spawn_time", 0),
          (le, "$g_arena_training_max_opponents", 0),
          (ge, "$g_arena_training_num_agents_spawned", 1),
          (assign, ":spawned_num", "$g_arena_training_num_agents_spawned"),
          (try_begin),
            (eq, "$g_arena_training_kills", 1),
            (assign, ":spawned_num", 5),
          (else_try),
            (eq, "$g_arena_training_kills", 2),
            (assign, ":spawned_num", 7),
          (else_try),
            (eq, "$g_arena_training_kills", 3),
            (assign, ":spawned_num", 9),
          (else_try),
            (eq, "$g_arena_training_kills", 4),
            (assign, ":spawned_num", 13),
          (try_end),
          (le, "$defender_reinforcement_stage", 4),
          (val_add, "$defender_reinforcement_stage", 1),
          (display_message, "@defender_reinforcement_stage 5."),
        (try_end),
        (gt, ":spawned_num", -1),
        (try_begin),
          (this_or_next|eq, "$defender_reinforcement_stage", 4),
          (eq, "$defender_reinforcement_stage", 2),
          (ge, "$g_arena_training_max_opponents", 1),
          (val_sub, "$g_arena_training_max_opponents", ":spawned_num"),
          (try_begin),
            (eq, "$defender_reinforcement_stage", 4),
            (assign, "$g_arena_training_max_opponents", -1),    
          (try_end),
          (party_get_template_id, ":template", "$g_encountered_party"),          
          (call_script,"script_get_village_type","$g_encountered_party"),
          (assign,":village_type",reg0),
          (store_current_scene, ":cur_scene"), 
          (modify_visitors_at_site, ":cur_scene"),
          
          (try_for_range, ":unused", 0, ":spawned_num"),     
                 
            (store_random_in_range, ":random_entry_point", 2, 10),
            (try_begin),
              (eq, ":template", "pt_farm"),

              (assign, ":bandit_troop", "trp_bandit"),
            (else_try),
              (eq, ":template", "pt_keep"),

              (assign, ":bandit_troop", "trp_bandit"),
            (else_try),
              (eq, ":template", "pt_nomad_tent"),
              (try_begin),
                (eq,":village_type",snow_village),
                (store_random_in_range, ":random_value", 0, 2),
                (try_begin),
                  (eq, ":random_value", 0),
                  (store_random_in_range, ":bandit_troop", "trp_rus_cossack_1", "trp_balkan_cav_3"),
                (else_try),
                  (store_random_in_range, ":bandit_troop", "trp_taiga_brigand", "trp_mountain_bandit_leader"),
                (try_end),
              (else_try),
                (eq,":village_type",desert_village),
                (assign, ":bandit_troop", "trp_marinid_camel_2"),
                (store_random_in_range, ":bandit_troop", "trp_marinid_camel_2", "trp_welsh_longbowm_1"),
              (else_try),
                #(eq,":village_type",steppe_village),
                (store_random_in_range, ":bandit_troop", "trp_steppe_horseman_1", "trp_black_khergit_guard"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_graveyard"),

              (assign, ":bandit_troop", "trp_se_tribesman"),
              (store_random_in_range, ":bandit_troop", "trp_se_musketeer_1", "trp_se_pikeman_3"),
            (else_try),
              (eq, ":template", "pt_gobin_slum"),

              (assign, ":bandit_troop", "trp_goblin"),
              (store_random_in_range, ":bandit_troop", "trp_goblin_crossbowman", "trp_goblin_knight"),
            (else_try),
              (eq, ":template", "pt_imp_cache"),

              (assign, ":bandit_troop", "trp_demon_1"),
              (store_random_in_range, ":bandit_troop", "trp_demon_1", "trp_demon_4"),
            (else_try),
              (eq, ":template", "pt_dwarf_cottage"),

              (assign, ":bandit_troop", "trp_dwarf_warrior"),
              (store_random_in_range, ":bandit_troop", "trp_dwarf_miner", "trp_giant_1"),
            (else_try),
              (eq, ":template", "pt_elf_homestead"),

              (assign, ":bandit_troop", "trp_woodelf_scout"),
              (store_random_in_range, ":bandit_troop", "trp_woodelf_recruit", "trp_woodelf_stinger"),
            (else_try),
              (eq, ":template", "pt_monastery"),

              (assign, ":bandit_troop", "trp_monk"),
              (store_random_in_range, ":bandit_troop", "trp_monk", "trp_manhunter"),
            (else_try),
              (eq, ":template", "pt_magic_guild"),

              (store_random_in_range, ":random_1", 0, 2),
              (try_begin),
                (eq, ":random_1", 0),
                (store_random_in_range, ":bandit_troop", "trp_human_magic_1", "trp_golem_1"),
              (else_try),
                (eq, ":random_1", 1),
                (store_random_in_range, ":bandit_troop", "trp_golem_1", "trp_golem_3"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_cathedral"),

              (assign, ":bandit_troop", "trp_sissofbattle"),
            (else_try),
              (eq, ":template", "pt_clan_halls"),

              (assign, ":bandit_troop", "trp_giant_1"),
            (else_try),
              (eq, ":template", "pt_treant_alcove"),
              (store_random_in_range, ":random_1", 0, 2),
              (try_begin),
                (eq, ":random_1", 0),
                (store_random_in_range, ":bandit_troop", "trp_woodelf_hunter", "trp_woodelf_watchman"),
              (else_try),
                (eq, ":random_1", 1),
                (store_random_in_range, ":bandit_troop", "trp_woodelf_spearman", "trp_grandelf_recruit"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_rogue_hideout"),
              (try_begin),
                (eq,":village_type",plain_village),
                (assign, ":bandit_troop", "trp_forest_bandit"),
              (else_try),
                (eq,":village_type",snow_village),
                (assign, ":bandit_troop", "trp_taiga_bandit"),
              (else_try),
                (assign, ":bandit_troop", "trp_mountain_bandit"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_longhouse"),

              (store_random_in_range, ":random_1", 0, 4),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_mercenary_berserker"),
              (else_try),
                (eq, ":random_1", 2),
                (store_random_in_range, ":bandit_troop", "trp_draugr_1", "trp_draugr_lord"),
              (else_try),
                (store_random_in_range, ":bandit_troop", "trp_nord_footman", "trp_nord_valkyrie_3"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_demon_gate"),

              (assign, ":bandit_troop", "trp_demon_3"),
              (store_random_in_range, ":bandit_troop", "trp_demon_1_2", "trp_demon_5"),
            (else_try),
              (eq, ":template", "pt_vampire_estate"),

              (assign, ":bandit_troop", "trp_vampire_1"),
              (store_random_in_range, ":random_1", 1, 6),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_vampire_1"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_vampire_assassin"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_undead_magic_2"),
              (else_try),
                (eq, ":random_1", 4),
                (assign, ":bandit_troop", "trp_vampire_2"),
              (else_try),
                (eq, ":random_1", 5),
                (assign, ":bandit_troop", "trp_undead_horse_1"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_ogre_fort"),

              (assign, ":bandit_troop", "trp_ogre"),
              (store_random_in_range, ":bandit_troop", "trp_ogre_young", "trp_troll_1"),
            (else_try),
              (eq, ":template", "pt_wolf_pen"),
              (store_random_in_range, ":bandit_troop", "trp_dragonfly", "trp_scottish_swordman"),
            (else_try),
              (eq, ":template", "pt_labyrinth"),

              (assign, ":bandit_troop", "trp_minotaur_2"),
              (store_random_in_range, ":random_1", 0, 8),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_rat_4"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_rat_5_1"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_drowelf_assassin_1"),
              (else_try),
                (eq, ":random_1", 4),
                (assign, ":bandit_troop", "trp_rat_5_2"),
              (else_try),
                (eq, ":random_1", 5),
                (assign, ":bandit_troop", "trp_drowelf_raider_1"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_tomb_of_curses"),

              (assign, ":bandit_troop", "trp_mummy_1"),
              (store_random_in_range, ":random_1", 1, 6),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_mummy_2"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_mummy_2"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_mummy_2_1"),
              (else_try),
                (eq, ":random_1", 4),
                (assign, ":bandit_troop", "trp_mummy_2_2"),
              (else_try),
                (eq, ":random_1", 5),
                (assign, ":bandit_troop", "trp_mummy_3"),
              (try_end),
            (try_end),
            (add_visitors_to_current_scene, ":random_entry_point", ":bandit_troop", 1),
          (try_end),
        (else_try),
          (this_or_next|eq, "$defender_reinforcement_stage", 5),
          (eq, "$defender_reinforcement_stage", 3),
          (ge, "$g_arena_training_num_agents_spawned", 1),
          (call_script,"script_get_village_type","$g_encountered_party"),
          (party_get_template_id, ":template", "$g_encountered_party"),          
          (assign,":village_type",reg0),
          (val_sub, "$g_arena_training_num_agents_spawned", ":spawned_num"),    
          (try_begin),
            (eq, "$defender_reinforcement_stage", 5),
            (assign, "$g_arena_training_num_agents_spawned", -1),    
          (try_end),
          (store_random_in_range, ":random_entry_point", 1, 10),

          (store_current_scene, ":cur_scene"), 
          (modify_visitors_at_site, ":cur_scene"),
          (try_for_range, ":unused", 0, ":spawned_num"),            
            (try_begin),
              (eq, ":template", "pt_farm"),

              (assign, ":bandit_troop", "trp_bandit"),
            (else_try),
              (eq, ":template", "pt_keep"),

              (assign, ":bandit_troop", "trp_bandit"),
            (else_try),
              (eq, ":template", "pt_nomad_tent"),

              (try_begin),
                (eq,":village_type",snow_village),
                #(assign, ":bandit_troop", "trp_rus_cossack_3"),
                (store_random_in_range, ":bandit_troop", "trp_rus_dvor_cavalry", "trp_rus_boyar"),
              (else_try),
                (eq,":village_type",desert_village),
                #(assign, ":bandit_troop", "trp_marinid_camel_2"),
                (store_random_in_range, ":bandit_troop", "trp_marinid_camel_3_1", "trp_welsh_longbowm_1"),
              (else_try),
                #(eq,":village_type",steppe_village),
                (store_random_in_range, ":bandit_troop", "trp_black_khergit_guard", "trp_ninjia"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_graveyard"),

              (assign, ":bandit_troop", "trp_skeleton_lord"),
              (store_random_in_range, ":random_1", 0, 5),
              (try_begin),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_dullahan"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_wraith"),
              (else_try),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_bone_dragon"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_gobin_slum"),
              (assign, ":bandit_troop", "trp_goblin_knight"),
              (store_random_in_range, ":random_1", 0, 5),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_troll_1"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_cyclop"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_imp_cache"),

              (assign, ":bandit_troop", "trp_demon_3"),
              (store_random_in_range, ":random_1", 0, 6),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_demon_4_2"),
              (else_try),
                (eq, ":random_1", 4),
                (assign, ":bandit_troop", "trp_demon_human_5_2"),
              (else_try),
                (eq, ":random_1", 5),
                (assign, ":bandit_troop", "trp_demon_human_5_1"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_dwarf_cottage"),

              (assign, ":bandit_troop", "trp_dwarf_berserker"),
              (store_random_in_range, ":random_1", 0, 6),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_dwarf_musketeer_3"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_dwarf_guard_1"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_dwarf_guard_2"),
              (else_try),
                (eq, ":random_1", 4),
                (assign, ":bandit_troop", "trp_dwarf_musketeer_2_2"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_elf_homestead"),

              (assign, ":bandit_troop", "trp_woodelf_swordman"),
              (store_random_in_range, ":random_1", 1, 6),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_woodelf_sharpshooter"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_woodelf_sworddancer"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_ent_2"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_monastery"),

              (assign, ":bandit_troop", "trp_teutonic_dis_halbbruder"),
              (store_random_in_range, ":random_1", 0, 5),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_archangle"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_teutonic_dis_knight"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_magic_guild"),

              (assign, ":bandit_troop", "trp_golem_4"),
              (store_random_in_range, ":random_1", 0, 6),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_gargoyle"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_human_magic_4"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_demon_6"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_cathedral"),

              (assign, ":bandit_troop", "trp_sissofbattle_s"),
              (store_random_in_range, ":random_1", 0, 5),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_archangle"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_teutonic_dis_knight"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_sissofbattle_r"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_clan_halls"),

              (assign, ":bandit_troop", "trp_giant_1"),
              (store_random_in_range, ":random_1", 1, 3),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_giant_2"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_giant_3"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_treant_alcove"),

              (try_begin),
                (eq,":village_type",plain_village),
                (assign, ":bandit_troop", "trp_ent_2"),
              (else_try),
                #(eq,":village_type",desert_village),
                (assign, ":bandit_troop", "trp_ent_1"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_rogue_hideout"),

              
              (try_begin),
                (eq,":village_type",plain_village),
                (assign, ":bandit_troop", "trp_welsh_longbowm_3"),
              (else_try),
                (store_random_in_range, ":bandit_troop", "trp_ninjia", "trp_caravan_master"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_longhouse"),

              (store_random_in_range, ":random_1", 0, 6),
              (assign, ":bandit_troop", "trp_god_choosen_berserker"),
              (try_begin),
                (eq, ":random_1", 0),
                (assign, ":bandit_troop", "trp_nord_knight_3"),
              (else_try),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_draugr_lord"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_nord_knight_2"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_lich_3"),
              (try_end),
              
            (else_try),
              (eq, ":template", "pt_demon_gate"),

              (assign, ":bandit_troop", "trp_demon_4"),
              (store_random_in_range, ":random_1", 0, 6),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_demon_7"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_demon_4_2"),
              (else_try),
                (eq, ":random_1", 4),
                (assign, ":bandit_troop", "trp_demon_human_5_2"),
              (else_try),
                (eq, ":random_1", 5),
                (assign, ":bandit_troop", "trp_demon_human_5_1"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_vampire_estate"),
              (assign, ":bandit_troop", "trp_vampire_3"),
              (store_random_in_range, ":random_1", 0, 5),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_death"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_lich_2"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_ghost_dragon"),
              (else_try),
                (eq, ":random_1", 4),
                (assign, ":bandit_troop", "trp_bone_dragon"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_ogre_fort"),

              (assign, ":bandit_troop", "trp_ogre_war"),
              (store_random_in_range, ":random_1", 0, 6),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_troll_1"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_troll_2"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_ogre_mega"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_wolf_pen"),
              (store_random_in_range, ":random_1", 0, 6),
              (assign, ":bandit_troop", "trp_scottish_swordman"),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_lich_3"),
              (else_try),
                (eq, ":random_1", 2),
                (assign, ":bandit_troop", "trp_scottish_guard"),
              (else_try),
                (eq, ":random_1", 3),
                (assign, ":bandit_troop", "trp_lizard_dragon"),
              (else_try),
                (eq, ":random_1", 4),
                (assign, ":bandit_troop", "trp_lich_dragon"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_labyrinth"),

              (assign, ":bandit_troop", "trp_minotaur_3"),
              (store_random_in_range, ":random_1", 1, 6),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_red_dragon"),
              (else_try),
                (eq, ":random_1", 5),
                (assign, ":bandit_troop", "trp_black_dragon"),
              (try_end),
            (else_try),
              (eq, ":template", "pt_tomb_of_curses"),

              (assign, ":bandit_troop", "trp_mummy_2_3"),
              (store_random_in_range, ":random_1", 1, 6),
              (try_begin),
                (eq, ":random_1", 1),
                (assign, ":bandit_troop", "trp_mummy_4"),
              (try_end),
            (try_end),
            (try_begin),
              (eq, "$defender_reinforcement_stage", 5),
              (add_visitors_to_current_scene, ":random_entry_point", ":bandit_troop", 1),
            (else_try),

              (add_visitors_to_current_scene, 10, ":bandit_troop", 1),
            (try_end),
            #(add_visitors_to_current_scene, 10, ":bandit_troop", 1),
          (try_end),
        (try_end),

        #no need to adjust courage in bandit lair for now
        #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
       ]),


      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
        ]),


       common_battle_order_panel,
       common_battle_order_panel_tick,
       
       
       (1, 4, ti_once,
       [
         (assign, ":continue", 0),
         (store_mission_timer_a,":cur_time"),
         (ge, ":cur_time", 5),
         #(party_get_template_id, ":template", "$g_encountered_party"),
         (try_begin),       
           (main_hero_fallen),
           (assign, ":continue", 1),
          (else_try),
           (num_active_teams_le, 1),
           (ge, "$defender_reinforcement_stage", 5),
           (assign, ":continue", 1),
         #(try_begin),       
         #  (gt, "$g_arena_training_max_opponents", 0),
         #  (gt, "$g_arena_training_num_agents_spawned", 0),
         #  (assign, ":continue", 0),
         #(try_end),  
         (try_end),  
         (eq, ":continue", 1),
       ],
       [
         (try_begin),
           (main_hero_fallen),
         (else_try),
           (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 2),
         (try_end),
         
         (finish_mission),
         ]),
      ] + custom_commander_commom_triggers + battle_triggers + common_courage_triggers,
    ),

  (
    "bandit_lair",mtf_battle_mode|mtf_synch_inventory,charge,
    "Ambushing a bandit lair",
    [
      (0,mtef_team_0|mtef_use_exact_number,af_override_horse, aif_start_alarmed, 7,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (2,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (3,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (4,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (5,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (6,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (7,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (8,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (9,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
      (10,mtef_visitor_source|mtef_team_1,af_override_horse, aif_start_alarmed,20,[]),
    ],
    [
      common_battle_init_banner,
    
      common_inventory_not_available,
      
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        
        (assign, "$relative_of_merchant_is_found", 0),
              
        (try_begin),
          (agent_is_human, ":agent_no"),
          (agent_is_alive, ":agent_no"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (eq, ":agent_team", 1),

          (agent_get_position, pos4, ":agent_no"),
          (agent_set_scripted_destination, ":agent_no", pos4, 1),
        (try_end),  
        
        (try_begin),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_relative_of_merchant", "trp_relative_of_merchants_end"),
          (agent_set_team, ":agent_no", 7),
          (team_set_relation, 0, 7, 0),          
        (try_end),                
        ]),
        
       (0, 0, 0, 
       [         
         (party_get_template_id, ":template", "$g_encountered_party"),
         (eq, ":template", "pt_looter_lair"),
         (check_quest_active, "qst_save_relative_of_merchant"),       
         (eq, "$relative_of_merchant_is_found", 0),
       ],
       [
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),

        (try_for_agents, ":agent_no"),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_relative_of_merchant", "trp_relative_of_merchants_end"),    
          (agent_set_scripted_destination, ":agent_no", pos0),
          (agent_get_position, pos1, ":agent_no"),
          (get_distance_between_positions, ":dist", pos0, pos1),
          (le, ":dist", 200),
          #(assign, "$g_talk_troop", "trp_relative_of_merchant"),
          (start_mission_conversation, "trp_relative_of_merchant"),
        (try_end),
       ]),
        
      (ti_tab_pressed, 0, 0,
       [
        (display_message, "str_cannot_leave_now"),
       ], []),
     
      (1, 0, ti_once, [],
       [
        (assign, "$defender_reinforcement_stage", 0),
        (assign, "$bandits_spawned_extra", 0),
       ]),
       
       (1, 0, 0, [],
       [
        (try_for_agents, ":bandit_id"),
          (agent_is_alive, ":bandit_id"),          
          (agent_get_team, ":agent_team_1", ":bandit_id"),
          (eq, ":agent_team_1", 1),
          (agent_is_in_special_mode, ":bandit_id"),
          (agent_is_human, ":bandit_id"),
          
          (agent_get_position, pos0, ":bandit_id"),
          (try_for_agents, ":player_team_agent_id"),
            (agent_is_alive, ":player_team_agent_id"),
            (agent_get_team, ":agent_team_2", ":player_team_agent_id"),
            (eq, ":agent_team_2", 0),
            (agent_is_human, ":player_team_agent_id"),
                      
            (store_agent_hit_points, ":bandit_hit_points", ":bandit_id"),
            
            (assign, ":continue", 0),
            (try_begin),
              (lt, ":bandit_hit_points", 100),
                            
              (try_for_agents, ":bandit_2_id"),
                (agent_is_alive, ":bandit_2_id"),  
                (agent_get_team, ":bandit_2_team", ":bandit_2_id"),
                (eq, ":bandit_2_team", 1),
                (neq, ":bandit_id", ":bandit_2_id"),
                (agent_is_in_special_mode, ":bandit_2_id"),
                (agent_is_human, ":bandit_2_id"),
                
                (agent_get_position, pos1, ":bandit_id"),
                (agent_get_position, pos2, ":bandit_2_id"),                        
                (get_distance_between_positions, ":distance", pos1, pos2),
                (le, ":distance", 1000),

                (agent_clear_scripted_mode, ":bandit_2_id"),  
              (try_end),                             
              
              (assign, ":continue", 1),
            (else_try),  
              (agent_get_position, pos1, ":bandit_id"),
              (agent_get_position, pos2, ":player_team_agent_id"),                        
              (get_distance_between_positions, ":distance", pos1, pos2),                                                                        
              (le, ":distance", 4000),
              
              (try_for_agents, ":bandit_2_id"),
                (agent_is_alive, ":bandit_2_id"),  
                (agent_get_team, ":bandit_2_team", ":bandit_2_id"),
                (eq, ":bandit_2_team", 1),
                (neq, ":bandit_id", ":bandit_2_id"),
                (agent_is_in_special_mode, ":bandit_2_id"),
                (agent_is_human, ":bandit_2_id"),
                
                (agent_get_position, pos1, ":bandit_id"),
                (agent_get_position, pos2, ":bandit_2_id"),                        
                (get_distance_between_positions, ":distance", pos1, pos2),
                (le, ":distance", 1000),
                
                (agent_clear_scripted_mode, ":bandit_2_id"),  
              (try_end),                

              (assign, ":continue", 1),
            (try_end),  
            
            (eq, ":continue", 1),
            
            (agent_clear_scripted_mode, ":bandit_id"),            
          (try_end),
        (try_end),
       ]),
       
       (30, 0, 0, 
       [
         (le, "$defender_reinforcement_stage", 1),
       ],
       [          
          (store_character_level, ":player_level", "trp_player"),                   
          (store_add, ":number_of_bandits_will_be_spawned_at_each_period", 5, ":player_level"),
          (val_div, ":number_of_bandits_will_be_spawned_at_each_period", 3),

          (lt, "$bandits_spawned_extra", ":number_of_bandits_will_be_spawned_at_each_period"),
          (val_add, "$bandits_spawned_extra", 1),                   

          (party_get_template_id, ":template", "$g_encountered_party"),
          (store_random_in_range, ":random_value", 0, 2),
          
          (try_begin),
            (eq, ":template", "pt_sea_raider_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_nord_warrior"),
          (else_try),
            (eq, ":template", "pt_forest_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_forest_bandit"),
          (else_try),
            (eq, ":template", "pt_desert_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_desert_bandit"),
          (else_try),
            (eq, ":template", "pt_mountain_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_mountain_bandit"),
          (else_try),
            (eq, ":template", "pt_taiga_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_taiga_bandit"),
          (else_try),
            (eq, ":template", "pt_steppe_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_steppe_bandit"),
            
          (else_try),
            (eq, ":template", "pt_norman_cavalry_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_nord_raider"),
          (else_try),
            (eq, ":template", "pt_forest_ranger_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_welsh_longbowm_1"),
          (else_try),
            (eq, ":template", "pt_camel_cavalry_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_marinid_camel_2"),
          (else_try),
            (eq, ":template", "pt_cossack_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_rus_cossack"),
          (else_try),
            (eq, ":template", "pt_dark_knight_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_teutonic_sword"),
          (else_try),
            (this_or_next|eq, ":template", "pt_looter_lair"),
            (neq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_looter"),
          (try_end),

          (store_current_scene, ":cur_scene"), 
          (modify_visitors_at_site, ":cur_scene"),
          (store_random_in_range, ":random_entry_point", 2, 11),
          #(try_begin),
            #(eq, ":template", "pt_dark_knight_lair"),
            #(store_random_in_range, ":random_entry_point", 40, 47),
          #(try_end),
          (add_visitors_to_current_scene, ":random_entry_point", ":bandit_troop", 1),
       ]),              

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
        #(store_trigger_param_1, ":dead_agent_no"),
        #(store_trigger_param_2, ":killer_agent_no"),
        #(store_trigger_param_3, ":is_wounded"),
        
        (assign, ":number_of_enemies", 0),
        (try_for_agents, ":cur_agent"),
          (agent_is_non_player, ":cur_agent"),
          (agent_is_human, ":cur_agent"),
          (agent_is_alive, ":cur_agent"),
          (neg|agent_is_ally, ":cur_agent"),
          (val_add, ":number_of_enemies", 1),
        (try_end),
        
        (try_begin),
          (le, ":number_of_enemies", 2),
          (le, "$defender_reinforcement_stage", 1),
          (val_add, "$defender_reinforcement_stage", 1),

          (store_character_level, ":player_level", "trp_player"),                   
          (store_add, ":number_of_bandits_will_be_spawned_at_each_period", 5, ":player_level"),
          (val_div, ":number_of_bandits_will_be_spawned_at_each_period", 3),
          (try_begin),
            (ge, "$defender_reinforcement_stage", 2),
            (val_sub, ":number_of_bandits_will_be_spawned_at_each_period", "$bandits_spawned_extra"),
          (try_end),
          
          (party_get_template_id, ":template", "$g_encountered_party"),          
          (store_random_in_range, ":random_value", 0, 2),
          
          (try_begin),
            (eq, ":template", "pt_sea_raider_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_nord_veteran"),
          (else_try),
            (eq, ":template", "pt_forest_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_forest_bandit"),
          (else_try),
            (eq, ":template", "pt_desert_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_desert_bandit"),
          (else_try),
            (eq, ":template", "pt_mountain_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_mountain_bandit"),
          (else_try),
            (eq, ":template", "pt_taiga_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_taiga_bandit"),
          (else_try),
            (eq, ":template", "pt_steppe_bandit_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_steppe_bandit"),
            
          (else_try),
            (eq, ":template", "pt_norman_cavalry_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_nord_raider"),
          (else_try),
            (eq, ":template", "pt_forest_ranger_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_welsh_longbowm_1"),
          (else_try),
            (eq, ":template", "pt_camel_cavalry_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_marinid_camel_2"),
          (else_try),
            (eq, ":template", "pt_cossack_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_rus_cossack"),
          (else_try),
            (eq, ":template", "pt_dark_knight_lair"),
            (eq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_teutonic_dis_knight"),
            
          (else_try),
            (this_or_next|eq, ":template", "pt_looter_lair"),
            (neq, ":random_value", 0),
            (assign, ":bandit_troop", "trp_looter"),
          (try_end),
                                                                       
          (store_current_scene, ":cur_scene"), 
          (modify_visitors_at_site, ":cur_scene"),
          (try_for_range, ":unused", 0, ":number_of_bandits_will_be_spawned_at_each_period"),            
            (store_random_in_range, ":random_entry_point", 2, 11),
            #(try_begin),
              #(eq, ":template", "pt_dark_knight_lair"),
              #(store_random_in_range, ":random_entry_point", 40, 47),
            #(try_end),
            (add_visitors_to_current_scene, ":random_entry_point", ":bandit_troop", 1),
          (try_end),
        (try_end),

        #no need to adjust courage in bandit lair for now
        #(call_script, "script_apply_death_effect_on_courage_scores", ":dead_agent_no", ":killer_agent_no"),
       ]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
        ]),

      (2, 0, ti_once, 
       [
         (neg|main_hero_fallen),
         (num_active_teams_le, 1),         
       ],
       [
         (party_get_template_id, ":template", "$g_encountered_party"),
         (try_begin),
           (eq, ":template", "pt_looter_lair"),
           (check_quest_active, "qst_save_relative_of_merchant"),
                      
           (assign, ":troop_of_merchant", "trp_relative_of_merchant"),
           
           (get_player_agent_no, ":player_agent"),
           (agent_get_position, pos0, ":player_agent"),
           (assign, ":minimum_distance", 100000),
           (try_for_range, ":entry_no", 1, 10),
             (entry_point_get_position, pos1, ":entry_no"),
             (get_distance_between_positions, ":dist", pos0, pos1),
             (le, ":dist", ":minimum_distance"),
             (ge, ":dist", 1000),
             (assign, ":nearest_entry_point", ":entry_no"),
             (assign, ":minimum_distance", ":dist"),
           (try_end),                     
                          
           (add_visitors_to_current_scene, ":nearest_entry_point", ":troop_of_merchant", 1, 0),                      
         (try_end),
       ]),

       common_battle_order_panel,
       common_battle_order_panel_tick,
       
       
       (1, 4, ti_once,
       [
         (assign, ":continue", 0),
       
         (party_get_template_id, ":template", "$g_encountered_party"),
         (try_begin),       
           (eq, ":template", "pt_looter_lair"),
           (check_quest_active, "qst_save_relative_of_merchant"),
           
           (this_or_next|main_hero_fallen),
           (eq, "$relative_of_merchant_is_found", 1),
           
           (assign, ":continue", 1),
         (else_try),
           (this_or_next|neq|eq, ":template", "pt_looter_lair"),
           (neg|check_quest_active, "qst_save_relative_of_merchant"),

           (store_mission_timer_a,":cur_time"),
           (ge, ":cur_time", 5),
           
           (this_or_next|main_hero_fallen),
           (num_active_teams_le, 1),
           
           (assign, ":continue", 1),
         (try_end),  
         
         (eq, ":continue", 1),
       ],
       [
         (try_begin),
           (main_hero_fallen),
         (else_try),
           (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 2),
         (try_end),
         
         (finish_mission),
         ]),
      ] + custom_commander_commom_triggers + battle_triggers + common_courage_triggers,
    ),
        
  (
    "alley_fight", mtf_battle_mode,charge,
    "Alley fight",
    [    
      (0,mtef_team_0|mtef_use_exact_number,af_override_horse,aif_start_alarmed,7,[]),
      (1,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
      (2,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
      (3,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,20,[]),
    ],    
    [
      common_battle_init_banner,
    
      common_inventory_not_available,
      
      (ti_on_agent_spawn, 0, 0, [],
      [              
        (store_trigger_param_1, ":agent_no"),
        (get_player_agent_no, ":player_agent"),
        (neq, ":agent_no", ":player_agent"),
        (assign, "$g_main_attacker_agent", ":agent_no"),
        (agent_ai_set_aggressiveness, ":agent_no", 199),
        
        (try_begin),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_swadian_merchant", "trp_startup_merchants_end"),
          (agent_set_team, ":agent_no", 7),          
          (team_set_relation, 0, 7, 0), 
        (try_end),                
      ]),
              
       (0, 0, 0, 
       [
         (eq, "$talked_with_merchant", 0), 
       ],
       [
        (get_player_agent_no, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),

        (try_for_agents, ":agent_no"),
          (agent_get_troop_id, ":troop_no", ":agent_no"),
          (is_between, ":troop_no", "trp_swadian_merchant", "trp_startup_merchants_end"),
          (agent_set_scripted_destination, ":agent_no", pos0),
          (agent_get_position, pos1, ":agent_no"),
          (get_distance_between_positions, ":dist", pos0, pos1),
          (le, ":dist", 200),     
          (assign, "$talk_context", tc_back_alley),     
          (start_mission_conversation, ":troop_no"),
        (try_end),
       ]),
     
      (1, 0, 0, [], 
      [      
        (get_player_agent_no, ":player_agent"),       
        (ge, "$g_main_attacker_agent", 0),
        (ge, ":player_agent", 0),
        (agent_is_active, "$g_main_attacker_agent"),
        (agent_is_active, ":player_agent"),
        (agent_get_position, pos0, ":player_agent"),
        (agent_get_position, pos1, "$g_main_attacker_agent"),
        (get_distance_between_positions, ":dist", pos0, pos1),
        (ge, ":dist", 5),
        (agent_set_scripted_destination, "$g_main_attacker_agent", pos0),
      ]),

      (ti_tab_pressed, 0, 0, [], 
      [
        (display_message, "str_cannot_leave_now"),
      ]),

      (0, 0, ti_once, [],
       [
         (call_script, "script_music_set_situation_with_culture", mtf_sit_ambushed),
         (set_party_battle_mode),
        ]),

      (0, 0, ti_once, 
       [
         (neg|main_hero_fallen),
         (num_active_teams_le, 1),
       ],
       [
         #(store_faction_of_party, ":starting_town_faction", "$g_starting_town"),
                                 
         (assign, ":troop_of_merchant", "trp_swadian_merchant"),
                                                
         (add_visitors_to_current_scene, 3, ":troop_of_merchant", 1, 0),                      
       ]),
       
      (1, 0, ti_once,
       [        
         (eq, "$talked_with_merchant", 1),         
       ],
       [         
         (try_begin),
           (main_hero_fallen),
           (assign, "$g_killed_first_bandit", 0),
         (else_try),  
           (assign, "$g_killed_first_bandit", 1),
         (try_end),

         (finish_mission),
         (assign, "$g_main_attacker_agent", 0),
         (assign, "$talked_with_merchant", 1),  
         
         (assign, "$current_startup_quest_phase", 1),                  
                  
         (change_screen_return),
         (set_trigger_result, 1),
         
         (get_player_agent_no, ":player_agent"),
         (store_agent_hit_points, ":hit_points", ":player_agent"),
         
         (try_begin),
           (lt, ":hit_points", 90),
           (agent_set_hit_points, ":player_agent", 90),
         (try_end),  
       ]),

      (1, 3, ti_once,
       [        
         (main_hero_fallen),         
       ],
       [         
         (try_begin),
           (main_hero_fallen),
           (assign, "$g_killed_first_bandit", 0),
         (else_try),  
           (assign, "$g_killed_first_bandit", 1),
         (try_end),

         (finish_mission),
         (assign, "$g_main_attacker_agent", 0),
         (assign, "$talked_with_merchant", 1),  
         
         (assign, "$current_startup_quest_phase", 1),                  
                  
         (change_screen_return),
         (set_trigger_result, 1),    
         
         (get_player_agent_no, ":player_agent"),
         (store_agent_hit_points, ":hit_points", ":player_agent"),
         
         (try_begin),
           (lt, ":hit_points", 90),
           (agent_set_hit_points, ":player_agent", 90),
         (try_end),                
       ]),
     ] + custom_commander_commom_triggers + battle_triggers,
   ),
     
  (
    "meeting_merchant",0,-1,
    "Meeting with the merchant",
    [
      (0,mtef_leader_only|mtef_team_0,af_castle_lord,0,1,[]),
      (1,mtef_leader_only|mtef_visitor_source|mtef_team_0,af_castle_lord,0,1,[]),
      (2,mtef_leader_only|mtef_visitor_source|mtef_team_0,af_castle_lord,0,1,[]),
      (3,mtef_leader_only|mtef_visitor_source|mtef_team_0,af_castle_lord,0,1,[]),
      (4,mtef_leader_only|mtef_visitor_source|mtef_team_0,af_castle_lord,0,1,[]),
      (5,mtef_leader_only|mtef_visitor_source|mtef_team_0,af_castle_lord,0,1,[]),
      (6,mtef_leader_only|mtef_visitor_source|mtef_team_0,af_castle_lord,0,1,[]),
      (7,mtef_leader_only|mtef_visitor_source|mtef_team_0,af_castle_lord,0,1,[]),
      (8,mtef_leader_only|mtef_visitor_source|mtef_team_0,af_castle_lord,0,1,[]),
      (9,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
    ],
    [
      (ti_on_agent_spawn, 0, 0, [],
      [              
        (store_trigger_param_1, ":agent_no"),
        (agent_get_troop_id, ":troop_no", ":agent_no"),
        (try_begin),
          (is_between, ":troop_no", "trp_swadian_merchant", "trp_startup_merchants_end"),
          (agent_set_team, ":agent_no", 7),          
          (team_set_relation, 0, 7, 0), 
        (else_try),	#remove other troops that show up after
          (neq, ":troop_no", "trp_player"),
          (remove_agent, ":agent_no"),
        (try_end),                
      ]),

      (1, 0, ti_once, [], 
      [
        (assign, "$dialog_with_merchant_ended", 0),
        (store_current_scene, ":cur_scene"),
        (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
        (try_begin),
          (eq, "$sneaked_into_town", 1),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (eq, "$talk_context", tc_tavern_talk),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_tavern),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town),
        (try_end),
      ]),
      
      (1, 0, 0, 
      [        
        (assign, ":continue", 0),
        (try_begin),
          (ge, "$dialog_with_merchant_ended", 6),
          (assign, ":continue", 1),
        (else_try),
          (ge, "$dialog_with_merchant_ended", 1),
          (neg|conversation_screen_is_active),          

          (try_begin),
            (eq, "$dialog_with_merchant_ended", 1),
            (check_quest_active, "qst_collect_men"),
            (tutorial_box, "str_start_up_first_quest", "@Tutorial"),
          (try_end),  

          (val_add, "$dialog_with_merchant_ended", 1),
          (assign, ":continue", 0),
        (try_end),  
        
        (try_begin),
          (conversation_screen_is_active), 
          (tutorial_message, -1),
          (assign, ":continue", 0),
        (try_end),
        
        (eq, ":continue", 1),                        
      ],
      [
        (tutorial_message_set_size, 17, 17),
        (tutorial_message_set_position, 500, 650),
        (tutorial_message_set_center_justify, 0),
        (tutorial_message_set_background, 1),
        (tutorial_message, "str_press_tab_to_exit_from_town"),
      ]),
                
      (ti_before_mission_start, 0, 0, [], 
      [      
        #(call_script, "script_change_banners_and_chest"),
      ]),

      (ti_inventory_key_pressed, 0, 0,
       [
        (try_begin),
            (eq, "$g_player_troop", "trp_player"),
            (set_trigger_result, 1),
        (else_try),
            (display_message, "str_cant_use_inventory_now"),
        (try_end),
         ], []),
            
      (ti_tab_pressed, 0, 0, 
      [ 
        (try_begin),          
          (gt, "$dialog_with_merchant_ended", 0),          

          (assign, ":max_dist", 0),
          (party_get_position, pos1, "$current_town"),
          (try_for_range, ":unused", 0, 10),
            (map_get_random_position_around_position, pos0, pos1, 2),
            (get_distance_between_positions, ":dist", pos0, pos1),
            (ge, ":dist", ":max_dist"),
            (assign, ":max_dist", ":dist"),
            (copy_position, pos2, pos0),
          (try_end),  
    
          (party_set_position, "p_main_party", pos2),          
                            
          (finish_mission),
          
          (assign, "$current_startup_quest_phase", 2),
          
          (tutorial_message, -1),
          
          (tutorial_message_set_background, 0),
          
          (change_screen_map),
          
          (try_begin),
            (check_quest_finished, "qst_save_town_from_bandits"),
            (assign, "$g_do_one_more_meeting_with_merchant", 1),
          (else_try),  
            #will do this at first spawning in the map          
            (set_spawn_radius, 50),
            (try_for_range, ":unused", 0, 20),
              (spawn_around_party, "p_main_party", "pt_looters"),
            (try_end),          
          (try_end),  

          (set_trigger_result, 1),
        (else_try),
          (display_message, "str_cannot_leave_now"),
        (try_end),
      ], []),
    ] + custom_commander_commom_triggers, ## CC
   ),

   (
    "camp_explore",0,-1,
    "You start training.",
   [
    (0, mtef_team_0, 0, 0, 1, []),
    (2, mtef_team_0, af_override_horse, 0, 5, []),
    (3, mtef_team_0, af_override_horse, 0, 10, []),
    (4, mtef_team_0, af_override_horse, 0, 10, []),
    (5, mtef_team_0, af_override_horse, 0, 10, []),
    (6, mtef_team_0, af_override_horse, 0, 10, []),
    (7, mtef_team_0, af_override_horse, 0, 10, []),
    (8, mtef_team_0, af_override_horse, 0, 10, []),
    (9, mtef_team_0, af_override_horse, 0, 10, []),
    (10, mtef_team_0, af_override_horse, 0, 10, []),
    (11, mtef_team_0, af_override_horse, 0, 10, []),
    (12, mtef_visitor_source, 0, 0, 1, []),
    (20, mtef_visitor_source, af_override_weapons|af_override_horse, 0, 5, []),
    (21, mtef_visitor_source, af_override_weapons|af_override_horse, 0, 5, []),
    (22, mtef_visitor_source, af_override_weapons|af_override_horse, 0, 5, []),
    (23, mtef_visitor_source, af_override_weapons|af_override_horse, 0, 1, []),
    (24, mtef_visitor_source, af_override_horse, 0, 1, []),
    (25, mtef_visitor_source, af_override_horse, 0, 1, []),
    (26, mtef_visitor_source, af_override_horse, 0, 1, []),
    (27, mtef_visitor_source, af_override_horse, 0, 1, []),
    (28, mtef_visitor_source, af_override_horse, 0, 1, []),
    (29, mtef_visitor_source, af_override_horse, 0, 1, []),
    (30, mtef_visitor_source, af_override_horse, 0, 1, []),
   ],
    [
      (ti_before_mission_start, 0, 0, [], [(call_script, "script_change_banners_and_chest")]),
      
      (ti_tab_pressed, 0, 0, [],[(finish_mission,0)]),

      common_battle_order_panel,
      common_battle_order_panel_tick,
     
      (1, 0, ti_once, [(call_script, "script_init_town_walker_agents_2"),], []),

      (3, 0, 0, [(call_script, "script_tick_camp_walkers"),],[]),

    ],
  ),

  (
    "town_fight",0,-1,
    "Town Fight",
    [
      (0,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (1,mtef_scene_source|mtef_team_0,af_override_horse,0,1,[]),
      (2,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (3,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (4,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (5,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (6,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (7,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),          
      (8,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]),
      (9,mtef_visitor_source,af_override_horse,0,1,[]),
      (10,mtef_visitor_source,af_override_horse,0,1,[]),
      (11,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (12,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (13,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (14,mtef_visitor_source,af_override_horse,0,1,[]),
      (15,mtef_visitor_source,af_override_horse,0,1,[]),
      (16,mtef_visitor_source,af_override_horse,0,1,[]),
      (17,mtef_visitor_source,af_override_horse,0,1,[]),
      (18,mtef_visitor_source,af_override_horse,0,1,[]),
      (19,mtef_visitor_source,af_override_horse,0,1,[]),
      (20,mtef_visitor_source,af_override_horse,0,1,[]),
      (21,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (22,mtef_visitor_source|mtef_team_1,af_override_horse,0,1,[]),
      (23,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
      (24,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
      (25,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
      (26,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
      (27,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
      (28,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #guard
      (29,mtef_visitor_source,af_override_horse,0,1,[]),
      (30,mtef_visitor_source,af_override_horse,0,1,[]), 
      (31,mtef_visitor_source,af_override_horse,0,1,[]), 
      (32,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
      (33,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
      (34,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
      (35,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
      (36,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
      (37,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
      (38,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
      (39,mtef_visitor_source|mtef_team_0,af_override_horse,0,1,[]), #town walker point
      (40,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
      (41,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
      (42,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
      (43,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]), #in towns, can be used for guard reinforcements
      (44,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,af_override_horse,aif_start_alarmed,1,[]),
    ],
    [
      common_battle_init_banner,
    
    
      (ti_on_agent_spawn, 0, 0, [],
      [
        (store_trigger_param_1, ":agent_no"),
        
        (agent_set_team, ":agent_no", 0),
      ]),

      (ti_before_mission_start, 0, 0, [],
      [
        (mission_disable_talk),        
      
        (assign, "$g_main_attacker_agent", 0),
        (set_party_battle_mode),
        
        (assign, "$number_of_bandits_killed_by_player", 0),
        (assign, "$number_of_civilian_loses", 0),
        
        (set_fixed_point_multiplier, 100),
      ]),
         
      (1, 0, ti_once, 
      [
        (call_script, "script_init_town_walker_agents"),
      ], 
      []),
      
      (ti_on_agent_killed_or_wounded, 0, 0, [],
      [
        (store_trigger_param_1, ":dead_agent_no"),
        (store_trigger_param_2, ":killer_agent_no"),
        #(store_trigger_param_3, ":is_wounded"),
        
        (try_begin),
          (agent_get_team, ":dead_agent_team_no", ":dead_agent_no"),
          (eq, ":dead_agent_team_no", 1),

          (get_player_agent_no, ":player_agent"),
          (eq, ":player_agent", ":killer_agent_no"),
                
          (val_add, "$number_of_bandits_killed_by_player", 1),
        (else_try),
          (eq, ":dead_agent_team_no", 0),
          
          (val_add, "$number_of_civilian_loses", 1),
        (try_end),  
      ]),
            
      (1, 0, 0, 
      [
        (lt, "$merchant_sign_count", 8),
          (val_add, "$merchant_sign_count", 1),
          
          (try_begin),
            (eq, "$merchant_sign_count", 2),
          (get_player_agent_no, ":player_agent"),
            (try_for_agents, ":agent_no"),
              (agent_get_troop_id, ":agent_troop_id", ":agent_no"),
              (ge, ":agent_troop_id", "trp_swadian_merchant"),
              (lt, ":agent_troop_id", "trp_startup_merchants_end"),
              
              (assign, "$g_city_merchant_troop_id", ":agent_troop_id"),
              (assign, "$g_city_merchant_agent_id", ":agent_no"),
              
              (agent_get_position, pos0, ":player_agent"),
              (agent_get_position, pos1, ":agent_no"),
                          
              (assign, ":max_dif", -1000),
            (try_for_range, ":target_entry_point", 0, 64),
              #(neg|entry_point_is_auto_generated, ":target_entry_point"),
              (entry_point_get_position, pos6, ":target_entry_point"),
              (get_distance_between_positions, ":dist_to_player", pos0, pos6),
              (get_distance_between_positions, ":dist_to_merchant", pos1, pos6),
              (store_sub, ":dif", ":dist_to_merchant", ":dist_to_player"),
              (ge, ":dist_to_merchant", 15),
              (ge, ":dif", ":max_dif"),
              (copy_position, pos2, pos6),
              (assign, ":max_dif", ":dif"),
            (try_end),
                    
            (agent_set_scripted_destination, ":agent_no", pos2, 0),
            (agent_set_speed_limit, ":agent_no", 10),
          (try_end),
        (else_try),
            (eq, "$merchant_sign_count", 5),
                       
          (get_player_agent_no, ":player_agent"),
          (agent_get_position, pos0, ":player_agent"),

            (agent_set_scripted_destination, "$g_city_merchant_agent_id", pos0, 0),
          (agent_set_speed_limit, "$g_city_merchant_agent_id", 10),
        (else_try),
            (eq, "$merchant_sign_count", 7),
            
            (agent_clear_scripted_mode, "$g_city_merchant_agent_id"),
                       
            (assign, "$talk_context", tc_town_talk),
            (start_mission_conversation, "$g_city_merchant_troop_id"),                        
          (try_end),            
        ], 
      []),
      
      (1, 0, 0, [],
      [      
        (ge, "$merchant_sign_count", 8),
       
        (get_player_agent_no, ":player_agent"),
                
        (try_for_agents, ":agent_no"),
          (neq, ":agent_no", ":player_agent"),
          (agent_is_alive, ":agent_no"),
          (agent_get_team, ":agent_team", ":agent_no"),
          (eq, ":agent_team", 0),
          
          (agent_get_position, pos0, ":agent_no"),
        
          (assign, ":minimum_distance", 10000),  
          (try_for_agents, ":bandit_no"),
            (agent_is_alive, ":bandit_no"),
            (agent_get_team, ":bandit_team", ":bandit_no"),
            (eq, ":bandit_team", 1),
            
            (agent_get_position, pos1, ":bandit_no"),
  
            (get_distance_between_positions, ":dist", pos0, pos1),
            (le, ":dist", ":minimum_distance"),
            (assign, ":minimum_distance", ":dist"),
            (copy_position, pos2, pos1),
          (try_end),
         
          (assign, reg1, ":dist"),
          (try_begin),
            (le, ":minimum_distance", 500),
            (agent_clear_scripted_mode, ":agent_no"),
          (else_try),  
            (lt, ":minimum_distance", 10000),
            (agent_set_scripted_destination, ":agent_no", pos2, 0),
          (try_end),
        (try_end),                            
      ]),

      (3, 0, 0, 
      [
        (lt, "$merchant_sign_count", 8),
          (call_script, "script_tick_town_walkers")
        ], 
      []),            
    
      (2, 0, 0, 
      [
        (call_script, "script_center_ambiance_sounds")
      ], 
      []),
    
      (ti_before_mission_start, 0, 0, 
      [], 
      [
        (call_script, "script_change_banners_and_chest")
      ]),
        
      (1, 4, ti_once,
       [                  
         (this_or_next|main_hero_fallen),
         (num_active_teams_le, 1),
         
         (ge, "$merchant_sign_count", 8),
       ],
       [         
         (try_begin),
           (main_hero_fallen),
           (assign, "$g_killed_first_bandit", 0),
         (else_try),  
           (assign, "$g_killed_first_bandit", 1),
         (try_end),
         
         (assign, "$current_startup_quest_phase", 4),

         (mission_enable_talk),        

         (finish_mission),         
         
         (unlock_achievement, ACHIEVEMENT_GET_UP_STAND_UP),        
         (change_screen_return),
         (set_trigger_result, 1),         
       ]),

      (ti_inventory_key_pressed, 0, 0,
      [
        (try_begin),
          (eq, "$g_player_troop", "trp_player"),
          (eq, "$g_mt_mode", tcm_default),
          (set_trigger_result,1),
        (else_try),
          (eq, "$g_mt_mode", tcm_disguised),
          (display_message,"str_cant_use_inventory_disguised"),
        (else_try),
          (display_message, "str_cant_use_inventory_now"),
        (try_end),
      ], []),
       
       
      (ti_tab_pressed, 0, 0,
      [
        (display_message, "str_cannot_leave_now"),
      ], []),
  ] + custom_commander_commom_triggers + battle_triggers,
 ),
    
  (
    "arena_melee_fight_2",mtf_arena_fight,-1,
    "You enter a melee fight in the arena.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),
      (1,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword, itm_arena_tunic_red]),
      (2,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),
      (3,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),
      (4,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows, itm_practice_dagger, itm_arena_tunic_red]),
      (5,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_red]),
      (6,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_red]),
      (7,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_red, itm_red_tourney_helmet]),

      (8,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_blue]),
      (9,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_blue,itm_blue_tourney_helmet]),
      (10,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_blue]),
      (11,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_blue, itm_blue_tourney_helmet]),
      (12,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_blue]),
      (13,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_blue,itm_blue_tourney_helmet]),
      (14,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_blue]),
      (15,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_blue]),

      (16,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (17,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (18,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (19,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),
      (20,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_green, itm_green_tourney_helmet]),
      (21,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_green]),
      (22,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_green]),
      (23,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_green, itm_green_tourney_helmet]),

      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (25,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (26,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (27,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (28,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (29,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_yellow]),
      (30,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow]),
      (31,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
#32
      (32,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_throwing_daggers,itm_red_tourney_armor,itm_red_tourney_helmet]),
      (33,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_shield,itm_practice_javelin,itm_gold_tourney_armor,itm_gold_tourney_helmet]),
      (34,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_crossbow,itm_practice_bolts,itm_green_tourney_armor,itm_green_tourney_helmet]),
      (35,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_practice_axe,itm_practice_javelin,itm_gold_tourney_armor,itm_gold_tourney_helmet]),
      (36, mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows, itm_practice_dagger,itm_green_tourney_armor,itm_green_tourney_helmet]),
      (37,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_practice_sword, itm_practice_shield,itm_blue_tourney_armor,itm_blue_tourney_helmet]),
      (38,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_staff,itm_practice_shield,itm_practice_horse,itm_red_tourney_armor,itm_red_tourney_helmet]),
      (39,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_practice_axe, itm_practice_shield,itm_blue_tourney_armor,itm_blue_tourney_helmet]),
#40-49 not used yet
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_dagger, itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_sword,itm_practice_shield,itm_arena_tunic_yellow]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heavy_practice_sword,itm_practice_horse,itm_arena_tunic_yellow]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_lance,itm_practice_shield,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),
      (24,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_practice_bow,itm_practice_arrows,itm_practice_horse,itm_arena_tunic_yellow, itm_gold_tourney_helmet]),

      (50, mtef_scene_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),
      (51, mtef_visitor_source,af_override_horse|af_override_weapons|af_override_head,0,1,[]),
      (52, mtef_scene_source,af_override_horse,0,1,[]),
#not used yet:
      (53, mtef_scene_source,af_override_horse,0,1,[]),
      (54, mtef_scene_source,af_override_horse,0,1,[]),
      (55, mtef_scene_source,af_override_horse,0,1,[]),
#used for torunament master scene

      (56, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield, itm_padded_cloth, itm_sallet]),
      (57, mtef_visitor_source|mtef_team_0, af_override_all, aif_start_alarmed, 1, [itm_practice_sword, itm_practice_shield, itm_padded_cloth, itm_sallet]),
    ],
    [] + arena_triggers + arena_battle_triggers,
  ),
  

  (
    "arena_melee_fight_3",mtf_arena_fight,-1,
    "You enter a melee fight in the arena.",
    [
      (0,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_great_helmet,itm_early_transitional_e1,itm_hunter,itm_bastard_sword_e]),
      (1,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_iron_greaves2,itm_early_transitional_f1,itm_great_lance,itm_hunter,itm_tab_shield_heater_c,itm_longsword]),
      (2,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_bnw_armour_german,itm_sturmhaube_w4,itm_flamberge]),
      (3,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_brigandine_blue,itm_mail_mittens,itm_kettle_hat_3,itm_awlpike_long,itm_tab_shield_heater_d,itm_long_voulge,itm_war_darts]),
      (4,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_sniper_crossbow,itm_military_pick,itm_tab_shield_heater_c,itm_kettle_hat_3,itm_mail_shirt,itm_swadian_steel_bolts]), 
      (5,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_haubergeon,itm_guard_helmet,itm_bastard_sword_a,itm_tab_shield_heater_c]),
      (6,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_brigandine_red,itm_bascinet,itm_ashwood_pike,itm_military_cleaver_b,itm_tab_shield_heater_d,itm_war_darts]),          
      (7,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_rhod_sniper_crossbow,itm_sword_medieval_a,itm_tab_shield_heater_b,itm_brigandine_green,itm_guard_helmet,itm_steel_bolts]),   
      (8,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_corrazina_red,itm_open_sallet,itm_bastard_sword_e,itm_tab_shield_heater_c,itm_war_darts]),     
      (9,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_half_plates_red,itm_sallet_coif,itm_sword_claymore_02,itm_war_darts]),
      (10,mtef_visitor_source|mtef_team_0,af_override_all,aif_start_alarmed,1,[itm_heraldic_mail_with_surcoat,itm_guard_helmet,itm_one_handed_war_axe_b,itm_great_lance,itm_tab_shield_heater_c,itm_horse_euro]),
      (11,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_scimitar_b,itm_knightaxe,itm_rus_lamellar_b,itm_gnezdovo_helm,itm_tab_shield_kite_d,itm_courser]),
      (12,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_khergit_bow,itm_khergit_arrows,itm_scimitar_long,itm_rus_lamellar_a,itm_vaegir_lamellar_helmet]),
      (13,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_heavy_lance,itm_great_bardiche,itm_lamellar_vest,itm_vaegir_spiked_helmet,itm_tab_shield_kite_d,itm_hunter_steppe_good]),
      (14,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_scimitar_sulatn,itm_nord_javelin,itm_vaegir_noble_helmet,itm_lamellar_vest,itm_tab_shield_kite_d]),
      (15,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_great_bardiche,itm_nord_javelin,itm_lamellar_vest,itm_hunter_steppe_good]),
      (16,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_war_bow,itm_khergit_arrows,itm_scimitar_b,itm_studded_leather_coat,itm_vaegir_lamellar_helmet]),
      (17,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_scimitar_b,itm_vaegir_noble_helmet,itm_lamellar_vest,itm_tab_shield_kite_d]),
      
      (18,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_great_long_bardiche,itm_lamellar_vest,itm_vaegir_war_helmet,itm_javelin]),
      (19,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_pike_2,itm_vaegir_lamellar_helmet,itm_lamellar_vest,itm_tab_shield_kite_b,itm_war_darts]),
      (20,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_awlpike,itm_vaegir_lamellar_helmet,itm_lamellar_vest,itm_tab_shield_kite_b,itm_javelin]),
      (21,mtef_visitor_source|mtef_team_1,af_override_all,aif_start_alarmed,1,[itm_nomad_bow,itm_practice_arrows,itm_scimitar_b,itm_rus_scale,itm_vaegir_spiked_helmet,itm_tab_shield_kite_d,itm_courser]),
      (22,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_sword_khergit_3,itm_strong_bow,itm_practice_arrows,itm_tribal_warrior_outfit,itm_leather_steppe_cap_c,itm_tab_shield_small_round_b,itm_steppe_horse]),
      (23,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_strong_bow,itm_practice_arrows,itm_lamellar_armor,itm_leather_steppe_cap_c,itm_steppe_horse]),
      (24,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_sword_khergit_3,itm_strong_bow,itm_practice_arrows,itm_lamellar_armor,itm_leather_steppe_cap_c,itm_tab_shield_small_round_b]),
      (25,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_carbine_batarey,itm_sarranid_leather_armor,itm_desert_turban,itm_arabian_sword_b,itm_cartridges_thrust,itm_turk_musket_koleso]),
      (26,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_arabian_armor_b,itm_sarranid_mail_coif,itm_steel_bolts,itm_arabian_sword_b,itm_heavy_crossbow,itm_heavy_crossbow]),
      (27,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_ragged_outfit_mail,itm_nasal_helmet,itm_courser,itm_sword_claymore_02,itm_tab_shield_small_round_c,itm_javelin]),
      (28,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_tribal_warrior_outfit,itm_khergit_war_helmet,itm_courser,itm_hafted_blade_b]),
      (29,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_sword_khergit_4,itm_lamellar_armor,itm_khergit_guard_helmet,itm_tab_shield_small_round_c]),
      (30,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_sword_medieval_c_small,itm_long_pike,itm_german_armour_2,itm_open_sallet]),
      (31,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_khergit_sword_two_handed_a,itm_lamellar_armor,itm_khergit_guard_helmet,itm_javelin]),
      (32,mtef_visitor_source|mtef_team_2,af_override_all,aif_start_alarmed,1,[itm_hafted_blade_a,itm_lamellar_armor,itm_khergit_guard_helmet,itm_javelin]),
      (33,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_cartridges,itm_samopal,itm_tab_shield_round_d,itm_one_handed_battle_axe_c,itm_mail_hauberk,itm_nordic_huscarl_helmet]),
      (34,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_long_bow,itm_practice_arrows,itm_sword_viking_3_small,itm_mail_shirt,itm_nordic_fighter_helmet]),
      (35,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_one_handed_battle_axe_c,itm_practice_javelin,itm_mail_hauberk,itm_nordic_huscarl_helmet]),
      (36,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_long_bow,itm_bodkin_arrows,itm_one_handed_war_axe_b,itm_mail_shirt,itm_nordic_fighter_helmet]),
      (37,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_tab_shield_round_d,itm_javelin,itm_sword_viking_3_long,itm_mail_hauberk,itm_nordic_huscarl_helmet]),
      (38,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_long_axe_c,itm_mail_hauberk,itm_nordic_huscarl_helmet,itm_heavy_throwing_axes]),
      (39,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_tab_shield_round_d,itm_war_spear,itm_breastplate_blue,itm_nordic_huscarl_helmet,itm_practice_javelin]),
      (40,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_long_axe_c,itm_mail_hauberk,itm_nordic_huscarl_helmet]),
      (41,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_heraldic_mail_with_tabard,itm_blue_tourney_helmet,itm_hunter,itm_shortened_voulge,itm_nord_throwing_spears]),
      (42,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_mail_shirt,itm_nordic_fighter_helmet,itm_saddle_horse,itm_sword_viking_3_long,itm_tab_shield_small_round_c]),
      (43,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_mail_shirt,itm_blue_tourney_helmet,itm_tab_shield_small_round_c,itm_hunter,itm_lance,itm_javelin]),
      
      (44,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_sniper_crossbow,itm_practice_bolts,itm_morningstar,itm_tab_shield_pavise_d,itm_green_tourney_armor,itm_footman_helmet]),
            
      (45,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_light_crossbow,itm_swadian_steel_bolts,itm_great_mace,itm_tab_shield_pavise_d,itm_arena_armor_green,itm_kettle_hat_3]),
      (46,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_sniper_crossbow,itm_swadian_steel_bolts,itm_military_cleaver_b,itm_tab_shield_pavise_d,itm_green_tourney_armor,itm_footman_helmet]),
      (47,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_morningstar,itm_tab_shield_pavise_d,itm_bnw_armour_green,itm_milanese_sallet]),
      (48,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_military_cleaver_c,itm_long_glaive,itm_tab_shield_pavise_d,itm_bnw_armour_green,itm_milanese_sallet]),
      (49,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_war_spear,itm_tab_shield_pavise_d,itm_arena_armor_green,itm_kettle_hat_3,itm_war_darts]),
      
      (50,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_pike,itm_brigandine_green,itm_zitta_bascinet,itm_war_darts]),
      (51,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_two_handed_cleaver,itm_brigandine_green,itm_zitta_bascinet]),
      (52,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_swiss_halberd,itm_brigandine_green,itm_zitta_bascinet]),
      (53,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_warhammer,itm_brigandine_green,itm_zitta_bascinet,itm_war_darts]),
      (54,mtef_visitor_source|mtef_team_4,af_override_all,aif_start_alarmed,1,[itm_gothic_lance,itm_toumingdun,itm_milanese_plate,itm_milanese_sallet]),
      
      (55,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_nomad_bow,itm_flame_arrows,itm_arabian_sword_b,itm_sarranid_mail_shirt,itm_janissary_helmet_3]),
      (56,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_khergit_bow,itm_bodkin_arrows,itm_scimitar,itm_arabian_armor_b,itm_sarranid_mail_coif]),
      (57,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_scimitar_b,itm_guisarme,itm_shield_otto2,itm_turk_mail_heavy,itm_sarranid_veiled_helmet]),
      (58,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_sarranid_axe_b,itm_jarid,itm_tab_shield_kite_d,itm_sarranid_mail_shirt,itm_sarranid_warrior_cap]),
      (59,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_bamboo_spear,itm_tab_shield_kite_d,itm_arabian_armor_b,itm_sarranid_mail_coif,itm_war_darts]),
      (60,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_sarranid_two_handed_mace_1,itm_arabian_armor_b,itm_sarranid_mail_coif]),
      (61,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_practice_javelin,itm_scimitar_sulatn,itm_dec_steel_shield,itm_mamluke_mail_heavy,itm_sarranid_veiled_helmet]),
      (62,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_khergit_arrows,itm_khergit_bow,itm_heavy_lance,itm_shield_otto_wing,itm_courser_steppe,itm_lamellar_vest_khergit,itm_khergit_helmet]),
      (63,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_sarranid_cavalry_sword,itm_dec_steel_shield,itm_camel3,itm_mamluke_mail,itm_sarranid_mail_coif]),
      (64,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_heavy_lance,itm_tab_shield_small_round_c,itm_throwing_scimitar,itm_hunter_steppe,itm_sarranid_mail_shirt,itm_sarranid_mail_coif]),
      (65,mtef_visitor_source|mtef_team_5,af_override_all,aif_start_alarmed,1,[itm_morningstar,itm_tab_shield_heater_cav_b,itm_hunter,itm_arena_armor_green,itm_kettle_hat_3,itm_war_darts]),
      (66,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_reitern_pistol_4s,itm_cartridges_2,itm_tab_shield_heater_cav_b,itm_hunter,itm_half_plates_green,itm_hounskull,itm_sword_medieval_c]),
      (67,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_carbine_batarey_2shot,itm_cartridges_2,itm_sarranid_mace_1,itm_camel3,itm_lamellar_vest,itm_sarranid_horseman_helmet]),
      (68,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_reitern_pistol_4s,itm_cartridges_burst,itm_heavy_lance,itm_tab_shield_heater_c,itm_barded_horse_german,itm_corrazina_yellow,itm_sturmhaube_w3]),
      (69,mtef_visitor_source|mtef_team_3,af_override_all,aif_start_alarmed,1,[itm_carbine_batarey_2shot,itm_cartridges_burst,itm_espada_eslavona_b,itm_hunter,itm_corrazina_yellow,itm_sturmhaube_w1]),
    ],
    [] + arena_triggers + arena_battle_triggers,
  ),

  (
    "multiplayer_duel",mtf_battle_mode,-1, #duel mode
    "You lead your men to battle.",
    [
      (0,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (1,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (2,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (3,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (4,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (5,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (6,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (7,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (8,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (9,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (10,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (11,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (12,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (13,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (14,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (15,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (16,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (17,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (18,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (19,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (20,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (21,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (22,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (23,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (24,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (25,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (26,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (27,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (28,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (29,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (30,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),
      (31,mtef_visitor_source|mtef_team_0,0,aif_start_alarmed,1,[]),

      (32,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (33,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (34,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (35,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (36,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (37,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (38,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (39,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (40,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (41,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (42,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (43,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (44,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (45,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (46,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (47,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (48,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (49,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (50,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (51,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (52,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (53,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (54,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (55,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),

      (56,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (57,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (58,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (59,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (60,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (61,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (62,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
      (63,mtef_visitor_source|mtef_team_1,0,aif_start_alarmed,1,[]),
     ],
    [
      multiplayer_server_check_polls,

      (ti_on_agent_spawn, 0, 0, [],
       [
         (store_trigger_param_1, ":agent_no"),
         (call_script, "script_multiplayer_server_on_agent_spawn_common", ":agent_no"),
         ]),
      
      (ti_server_player_joined, 0, 0, [],
       [
         (store_trigger_param_1, ":player_no"),
         (call_script, "script_multiplayer_server_player_joined_common", ":player_no"),
         ]),

      (ti_before_mission_start, 0, 0, [],
       [
         (assign, "$g_multiplayer_game_type", multiplayer_game_type_duel),
         (call_script, "script_multiplayer_server_before_mission_start_common"),
         #make everyone see themselves as allies, no friendly fire
         (team_set_relation, 0, 0, 1),
         (team_set_relation, 0, 1, 1),
         (team_set_relation, 1, 1, 1),
         (mission_set_duel_mode, 1),
         (call_script, "script_multiplayer_init_mission_variables"),
         (call_script, "script_multiplayer_remove_destroy_mod_targets"),
         (call_script, "script_multiplayer_remove_headquarters_flags"), # close this line and open map in deathmatch mod and use all ladders firstly 
         ]),                                                            # to be able to edit maps without damaging any headquarters flags ext. 

      (ti_after_mission_start, 0, 0, [], 
       [
         (set_spawn_effector_scene_prop_kind, 0, -1), #during this mission, agents of "team 0" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (set_spawn_effector_scene_prop_kind, 1, -1), #during this mission, agents of "team 1" will try to spawn around scene props with kind equal to -1(no effector for this mod)
         (call_script, "script_initialize_all_scene_prop_slots"),
         (call_script, "script_multiplayer_move_moveable_objects_initial_positions"),
         (assign, "$g_multiplayer_ready_for_spawning_agent", 1),
         ]),

      (ti_on_multiplayer_mission_end, 0, 0, [],
       [
         (call_script, "script_multiplayer_event_mission_end"),
         (assign, "$g_multiplayer_stats_chart_opened_manually", 0),
         (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         ]),

      (ti_on_agent_killed_or_wounded, 0, 0, [],
       [
         (store_trigger_param_1, ":dead_agent_no"), 
         (store_trigger_param_2, ":killer_agent_no"), 

         (call_script, "script_multiplayer_server_on_agent_killed_or_wounded_common", ":dead_agent_no", ":killer_agent_no"),

         (try_begin),
           (get_player_agent_no, ":player_agent"),
           (agent_is_active, ":player_agent"),
           (agent_slot_ge, ":player_agent", slot_agent_in_duel_with, 0),
           (try_begin),
             (eq, ":dead_agent_no", ":player_agent"),
             (display_message, "str_you_have_lost_a_duel"),
           (else_try),
             (agent_slot_eq, ":player_agent", slot_agent_in_duel_with, ":dead_agent_no"),
             (display_message, "str_you_have_won_a_duel"),
           (try_end),
         (try_end),
         (try_begin),
           (agent_slot_ge, ":dead_agent_no", slot_agent_in_duel_with, 0),
           (agent_get_slot, ":duelist_agent_no", ":dead_agent_no", slot_agent_in_duel_with),
           (agent_set_slot, ":dead_agent_no", slot_agent_in_duel_with, -1),
           (try_begin),
             (agent_is_active, ":duelist_agent_no"),
             (agent_set_slot, ":duelist_agent_no", slot_agent_in_duel_with, -1),
             (agent_clear_relations_with_agents, ":duelist_agent_no"),
             (try_begin),
               (agent_get_player_id, ":duelist_player_no", ":duelist_agent_no"),
               (neg|player_is_active, ":duelist_player_no"), #might be AI
               (agent_force_rethink, ":duelist_agent_no"),
             (try_end),
           (try_end),
         (try_end),
         ]),
      
      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         (get_max_players, ":num_players"),
         (try_for_range, ":player_no", 0, ":num_players"),
           (player_is_active, ":player_no"),
           (neg|player_is_busy_with_menus, ":player_no"),

           (player_get_team_no, ":player_team", ":player_no"), #if player is currently spectator do not spawn his agent
           (lt, ":player_team", multi_team_spectator),

           (player_get_troop_id, ":player_troop", ":player_no"), #if troop is not selected do not spawn his agent
           (ge, ":player_troop", 0),

           (player_get_agent_id, ":player_agent", ":player_no"),
           (assign, ":spawn_new", 0),
           (try_begin),
             (player_get_slot, ":player_first_spawn", ":player_no", slot_player_first_spawn),
             (eq, ":player_first_spawn", 1),
             (assign, ":spawn_new", 1),
             (player_set_slot, ":player_no", slot_player_first_spawn, 0),
           (else_try),
             (try_begin),
               (lt, ":player_agent", 0),
               (assign, ":spawn_new", 1),
             (else_try),
               (neg|agent_is_alive, ":player_agent"),
               (agent_get_time_elapsed_since_removed, ":elapsed_time", ":player_agent"),
               (gt, ":elapsed_time", "$g_multiplayer_respawn_period"),
               (assign, ":spawn_new", 1),
             (try_end),             
           (try_end),
           (eq, ":spawn_new", 1),
           (call_script, "script_multiplayer_buy_agent_equipment", ":player_no"),

           (troop_get_inventory_slot, ":has_item", ":player_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),
         
           (call_script, "script_multiplayer_find_spawn_point", ":player_team", 0, ":is_horseman"), 
           (player_spawn_new_agent, ":player_no", reg0),
         (try_end),
         ]),

      (1, 0, 0, [], #do this in every new frame, but not at the same time
       [
         (multiplayer_is_server),
         (store_mission_timer_a, ":mission_timer"),
         (ge, ":mission_timer", 2),
         (assign, ":team_1_count", 0),
         (assign, ":team_2_count", 0),
         (try_for_agents, ":cur_agent"),
           (agent_is_non_player, ":cur_agent"),
           (agent_is_human, ":cur_agent"),
           (assign, ":will_be_counted", 0),
           (try_begin),
             (agent_is_alive, ":cur_agent"),
             (assign, ":will_be_counted", 1), #alive so will be counted
           (else_try),
             (agent_get_time_elapsed_since_removed, ":elapsed_time", ":cur_agent"),
             (le, ":elapsed_time", "$g_multiplayer_respawn_period"),
             (assign, ":will_be_counted", 1), 
           (try_end),
           (eq, ":will_be_counted", 1),
           (agent_get_team, ":cur_team", ":cur_agent"),
           (try_begin),
             (eq, ":cur_team", 0),
             (val_add, ":team_1_count", 1),
           (else_try),
             (eq, ":cur_team", 1),
             (val_add, ":team_2_count", 1),
           (try_end),
         (try_end),
         (store_sub, "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_team_1", ":team_1_count"),
         (store_sub, "$g_multiplayer_num_bots_required_team_2", "$g_multiplayer_num_bots_team_2", ":team_2_count"),
         (val_max, "$g_multiplayer_num_bots_required_team_1", 0),
         (val_max, "$g_multiplayer_num_bots_required_team_2", 0),
         ]),

      (0, 0, 0, [],
       [
         (multiplayer_is_server),
         (eq, "$g_multiplayer_ready_for_spawning_agent", 1),
         (store_add, ":total_req", "$g_multiplayer_num_bots_required_team_1", "$g_multiplayer_num_bots_required_team_2"),
         (try_begin),
           (gt, ":total_req", 0),
           (store_random_in_range, ":random_req", 0, ":total_req"),
           (val_sub, ":random_req", "$g_multiplayer_num_bots_required_team_1"),
           (try_begin),
             (lt, ":random_req", 0),
             #add to team 1
             (assign, ":selected_team", 0),
             (val_sub, "$g_multiplayer_num_bots_required_team_1", 1),
           (else_try),
             #add to team 2
             (assign, ":selected_team", 1),
             (val_sub, "$g_multiplayer_num_bots_required_team_2", 1),
           (try_end),

           (team_get_faction, ":team_faction_no", ":selected_team"),
           (assign, ":available_troops_in_faction", 0),

           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, multiplayer_ai_troops_end),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_add, ":available_troops_in_faction", 1),
           (try_end),

           (store_random_in_range, ":random_troop_index", 0, ":available_troops_in_faction"),
           (assign, ":end_cond", multiplayer_ai_troops_end),
           (try_for_range, ":troop_no", multiplayer_ai_troops_begin, ":end_cond"),
             (store_troop_faction, ":troop_faction", ":troop_no"),
             (eq, ":troop_faction", ":team_faction_no"),
             (val_sub, ":random_troop_index", 1),
             (lt, ":random_troop_index", 0),
             (assign, ":end_cond", 0),
             (assign, ":selected_troop", ":troop_no"),
           (try_end),
         
           (troop_get_inventory_slot, ":has_item", ":selected_troop", ek_horse),
           (try_begin),
             (ge, ":has_item", 0),
             (assign, ":is_horseman", 1),
           (else_try),
             (assign, ":is_horseman", 0),
           (try_end),

           (call_script, "script_multiplayer_find_spawn_point", ":selected_team", 0, ":is_horseman"), 
           (store_current_scene, ":cur_scene"),
           (modify_visitors_at_site, ":cur_scene"),
           (add_visitors_to_current_scene, reg0, ":selected_troop", 1, ":selected_team", -1),
           (assign, "$g_multiplayer_ready_for_spawning_agent", 0),
         (try_end),
         ]),

      (1, 0, 0, [],
       [
         (multiplayer_is_server),
         #checking for restarting the map
         (assign, ":end_map", 0),
         (try_begin),
           (store_mission_timer_a, ":mission_timer"),
           (store_mul, ":game_max_seconds", "$g_multiplayer_game_max_minutes", 60),
           (gt, ":mission_timer", ":game_max_seconds"),
           (assign, ":end_map", 1),
         (try_end),
         (try_begin),
           (eq, ":end_map", 1),
           (call_script, "script_game_multiplayer_get_game_type_mission_template", "$g_multiplayer_game_type"),
           (start_multiplayer_mission, reg0, "$g_multiplayer_selected_map", 0),
           (call_script, "script_game_set_multiplayer_mission_end"),
         (try_end),
         ]),
        
      (ti_tab_pressed, 0, 0, [],
       [
         (try_begin),
           (eq, "$g_multiplayer_mission_end_screen", 0),
           (assign, "$g_multiplayer_stats_chart_opened_manually", 1),
           (start_presentation, "prsnt_multiplayer_stats_chart_deathmatch"),
         (try_end),
         ]),

      multiplayer_once_at_the_first_frame,
      
      (ti_escape_pressed, 0, 0, [],
       [
         (neg|is_presentation_active, "prsnt_multiplayer_escape_menu"),
         (neg|is_presentation_active, "prsnt_multiplayer_stats_chart_deathmatch"),
         (eq, "$g_waiting_for_confirmation_to_terminate", 0),
         (start_presentation, "prsnt_multiplayer_escape_menu"),
         ]),

      (1, 0, 0, [],
       [
         (store_mission_timer_a, ":mission_timer"),
         (store_sub, ":duel_start_time", ":mission_timer", 3),
         (try_for_agents, ":cur_agent"),
           (agent_slot_ge, ":cur_agent", slot_agent_in_duel_with, 0),
           (agent_get_slot, ":duel_time", ":cur_agent", slot_agent_duel_start_time),
           (ge, ":duel_time", 0),
           (le, ":duel_time", ":duel_start_time"),
           (agent_set_slot, ":cur_agent", slot_agent_duel_start_time, -1),
           (agent_get_slot, ":opponent_agent", ":cur_agent", slot_agent_in_duel_with),
           (agent_is_active, ":opponent_agent"),
           (agent_add_relation_with_agent, ":cur_agent", ":opponent_agent", -1),
           (agent_force_rethink, ":cur_agent"),
         (try_end),
         ]),
      ],
  ),
  
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#-#-#-#Hunting Mod begin#-#-#-#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
 
  ("hunting", mtf_battle_mode, 0,
    "You go hunting.",
    [
      (0,mtef_leader_only,af_override_horse, 0,1,[]),
      
      
    ],  
    [
      (
  ti_before_mission_start, 0, 0,
  [
    (init_position, pos1),
    (position_move_z, pos1, -1000000),
    (try_begin),
      (scene_prop_get_instance, ":flag_object", banner_scene_props_begin, 0),
      (ge, ":flag_object", 0),
      (prop_instance_set_position, ":flag_object", pos1),
    (try_end),
    (try_begin),
      (scene_prop_get_instance, ":pole_object", "spr_banner_pole", 0),
      (ge, ":pole_object", 0),
      (prop_instance_set_position, ":pole_object", pos1),
    (try_end),
    ],[]),
      #cannot_spawn_commoners,
      #common_inventory_not_available,
      (ti_inventory_key_pressed, 0, 0,
       [
        (try_begin),
            (eq, "$g_player_troop", "trp_player"),
            (set_trigger_result, 1),
        (else_try),
            (display_message, "str_cant_use_inventory_now"),
        (try_end),
         ], []),
      
      #1. Spawn the animals
      (ti_on_agent_spawn, 0, ti_once, [],
        [
          (assign, "$animals_flee", 0),
          
          (store_trigger_param, ":agent_no", 1),
          (set_fixed_point_multiplier, 100),
          (agent_get_position, pos1, ":agent_no"),
          (store_random_in_range, ":rand", 6000, 9000),
          (position_move_y, pos1, ":rand"),
          (store_random_in_range, ":rand", -3000, 3000),
          (position_move_x, pos1, ":rand"),
          (store_random_in_range, ":rand", 0, 360),
          (position_rotate_z, pos1, ":rand"),
          #(get_player_agent_no, ":player_agent"),
          #(agent_get_position, pos1, ":player_agent"),
          (set_spawn_position, pos1),
          (assign, reg1, 0),
          (assign, reg2, 0),
          (shuffle_range, 1, 3),
          (party_get_slot, ":item", "p_main_party", slot_party_hunting_found),
          (spawn_horse, ":item", reg1),
          (assign, "$alpha_animal", reg0),
          (party_get_slot, ":herd_size", "p_main_party", slot_party_hunting_amount),
          #(party_get_num_companions, ":herd_size", "$g_encountered_party"),
          (gt, ":herd_size", 1),
          (try_for_range, ":unused", 1, ":herd_size"),
            (copy_position, pos2, pos1),
            (store_random_in_range, ":rand", -500, 500),
            (position_move_x, pos2, ":rand"),
            (store_random_in_range, ":rand", -500, 500),
            (position_move_y, pos2, ":rand"),
            (store_random_in_range, ":rand", -3000, 3000),
            (position_rotate_z, pos2, ":rand"),
            (set_spawn_position, pos2),
            (assign, reg1, 0),
            (assign, reg2, 0),
            (shuffle_range, 1, 3),
            (spawn_horse, ":item", reg1),
          (end_try),
      ]),
      
      #2. Animals wandering
      (5, 0, 0,
        [
          (eq, "$animals_flee", 0),
          (agent_is_alive, "$alpha_animal"),
          (store_random_in_range, ":rand", 0, 3),
          (eq, ":rand", 0),
        ],
        [
          #(display_message, "@Animals wander!"),
          (set_fixed_point_multiplier, 100),
          (agent_get_position, pos1, "$alpha_animal"),
          (store_random_in_range, ":rand", -3000, 3000),
          (position_move_x, pos1, ":rand"),
          (store_random_in_range, ":rand", -3000, 3000),
          (position_move_y, pos1, ":rand"),
          (store_random_in_range, ":rand", 0, 360),
          (position_rotate_z, pos1, ":rand"),
          (try_for_agents, ":agent"),
            (neg|agent_is_human, ":agent"),
            (agent_is_alive, ":agent"),
            #(agent_set_speed_modifier, ":agent", 10),
            #(agent_set_horse_speed_factor, ":agent", 25),
            (copy_position, pos2, pos1),
            (store_random_in_range, ":rand", -500, 500),
            (position_move_x, pos2, ":rand"),
            (store_random_in_range, ":rand", -500, 500),
            (position_move_y, pos2, ":rand"),
            (store_random_in_range, ":rand", -3000, 3000),
            (position_rotate_z, pos2, ":rand"),
            (set_spawn_position, pos2),
            (agent_set_speed_limit, ":agent", 1),
            (agent_set_scripted_destination, ":agent", pos2, 1),
          (end_try),
      ]),
      
      #3. Animals react on player
      (0.5, 0, 0,
        [
          (try_begin),
            (gt, "$animals_flee", 1),
            (val_sub, "$animals_flee", 1),
          (end_try),
          (agent_is_alive, "$alpha_animal"),
        ],
        [
          (set_fixed_point_multiplier, 100),
          (agent_get_position, pos1, "$alpha_animal"),
          (get_player_agent_no, ":player_agent"),
          (agent_get_position, pos2, ":player_agent"),
          (get_distance_between_positions, ":distance", pos1, pos2),
          (try_begin),
            (eq, "$animals_flee", 0),
            (lt, ":distance", 2500),
            (assign, reg1, 6),
            (assign, reg2, 4),
            (assign, reg3, -1),
            (shuffle_range, 1, 4),
            (assign, "$animals_flee", reg1),
            #(display_message, "@Animals react on low distance!"),
            (try_for_agents, ":agent"),
              (neg|agent_is_human, ":agent"),
              (agent_is_alive, ":agent"),
              #run:
              (agent_clear_scripted_mode, ":agent"),
              (agent_set_speed_limit, ":agent", 100),
              (agent_start_running_away, ":agent", 0),
            (end_try),
          (else_try),
            (eq, "$animals_flee", 1),
            (lt, ":distance", 5000),
            (assign, "$animals_flee", 0),
            (try_for_agents, ":agent"),
              (neg|agent_is_human, ":agent"),
              (agent_is_alive, ":agent"),
              #stop:
              (agent_set_speed_limit, ":agent", 1),
              (agent_stop_running_away, ":agent"),
            (end_try),
          (else_try),
            (eq, "$animals_flee", -1),	# =animals attack
            (try_for_agents, ":agent"),
              (neg|agent_is_human, ":agent"),
              (agent_is_alive, ":agent"),
              (agent_get_position, pos1, ":agent"),
              (copy_position, pos3, pos1),
              (position_move_y, pos3, -10),	#-10cm
              (get_distance_between_positions, ":back_distance", pos2, pos3),
              (position_move_y, pos3, 25),	#+15cm
              (get_distance_between_positions, ":front_distance", pos2, pos3),
              (this_or_next|lt, ":front_distance", ":back_distance"),
              (gt, ":distance", 1000),
              (call_script, "script_point_y_toward_position", pos1, pos2),
              (set_fixed_point_multiplier, 100),
              (position_move_y, pos1, 5000),	#50m
              (agent_start_running_away, ":agent", pos1),
            (end_try),
          (end_try),
      ]),
      
      # Aniamal striking...
      (1, 0, 0, [], [
      (set_fixed_point_multiplier, 100),
      (try_for_agents, ":agent"),
            (agent_is_alive, ":agent"),
            (neg|agent_is_human, ":agent"),
            (store_random_in_range, ":rnd", 0, 100),
            (lt, ":rnd", 25), # 33% chance
            
            (assign, ":enemy_in_front", 0),
            (try_begin),
              (agent_get_position, pos1, ":agent"),
              (try_for_agents, ":target"),
                (agent_is_human, ":target"),
                (agent_is_alive, ":target"),
                (agent_get_position, pos2, ":target"),
                (get_distance_between_positions, ":dist", pos1, pos2),
                (lt, ":dist", 300),
                (neg|position_is_behind_position, pos2, pos1),
                (val_add, ":enemy_in_front", 1),
              (try_end),
            (try_end),
            
            
            (eq, ":enemy_in_front", 1),
            (call_script, "script_horse_attack_agent", ":agent", ":target"),
            

      (try_end),
      ]),
      
      
      
      (ti_on_agent_hit, 0, 0, [],
        [
          # Animals react on hit
          (assign, reg1, -1),
          (assign, reg2, -1),
          (assign, reg3, 4),
          (shuffle_range, 1, 4),
          (assign, "$animals_flee", reg1),
          #(display_message, "@Animals react on hit!"),
          (try_for_agents, ":agent"),
            (neg|agent_is_human, ":agent"),
            (agent_is_alive, ":agent"),
            #run:
            (agent_clear_scripted_mode, ":agent"),
            (agent_set_speed_limit, ":agent", 100),
            (agent_start_running_away, ":agent", 0),
          (end_try),
          
          (store_trigger_param, ":inflicted_agent_id", 1),
          (agent_is_active, ":inflicted_agent_id"),
          (agent_is_alive, ":inflicted_agent_id"),
          (try_begin),
            # Wounded animals get slower
            (store_agent_hit_points, ":agent_hp", ":inflicted_agent_id", 0),
            #(agent_set_speed_modifier, ":inflicted_agent_id", ":agent_hp"),
            #(agent_set_horse_speed_factor, ":agent", ":agent_hp"),
            (agent_set_speed_limit, ":inflicted_agent_id", ":agent_hp"),
          (end_try),
      ]),
      
      # Kill count
      (ti_on_agent_killed_or_wounded, 0, 0, [],
        [
          (store_trigger_param, ":agent_no", 1),
          (neg|agent_is_human, ":agent_no"),
          (val_add, "$hunted_animals", 1),
          
          
          
          
          #(troop_add_items, "trp_temp_troop", "itm_venison", 1),
          
          (eq, "$alpha_animal", ":agent_no"),
          (try_for_agents, ":agent"),
            (neg|agent_is_human, ":agent"),
            (agent_is_alive, ":agent"),
            (assign, "$alpha_animal", ":agent"),
          (end_try),
          (eq, "$alpha_animal", ":agent_no"),
          #(finish_mission, 10),
          (assign,"$g_battle_won", 1),
          
      ]),
      
      # If alpha animal flee
      (1, 0, 2,
        [
          (this_or_next|neg|agent_is_alive, "$alpha_animal"),
          (neg|agent_is_active, "$alpha_animal"),
        ],
        [
          (try_for_agents, ":agent"),
            (neg|agent_is_human, ":agent"),
            (agent_is_alive, ":agent"),
            (agent_is_active, ":agent"),
            (assign, "$alpha_animal", ":agent"),
          (end_try),
          (this_or_next|neg|agent_is_alive, "$alpha_animal"),
          (neg|agent_is_active, "$alpha_animal"),
          #(finish_mission, 10),
          (assign,"$g_battle_won", 1),
          
      ]),
      
      
      
      # End
      (3, 0, ti_once,
        [
          (this_or_next|main_hero_fallen),
          (eq, "$g_battle_won", 1),
        ],
        [
          (try_begin),	#VC-2635
            (main_hero_fallen),
            (assign, "$hunted_animals", 0),
            (troop_clear_inventory, "trp_temp_troop"),
          (try_end),
          (finish_mission, 10),
      ]),
      
      (ti_tab_pressed, 0, 0, [],
        [
          (set_trigger_result, 1),
      ]),
      
      (0, 0, ti_once, [],
        [
          (assign, "$animals_flee", 0),
          (assign, "$hunted_animals", 0),
          
          (play_sound,"snd_end_day"),
          (assign,"$g_battle_won",0),
          #(call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
          (music_set_situation, 0),
      ]),
      
      (ti_before_mission_start, 0, 0, [],
        [
          (team_set_relation, 0, 2, 1),
          (team_set_relation, 1, 3, 1),
          
          (party_clear, "p_routed_enemies"),
          
          (assign, "$g_latest_order_1", 1),
          (assign, "$g_latest_order_2", 1),
          (assign, "$g_latest_order_3", 1),
          (assign, "$g_latest_order_4", 1),
      ]),
      
    ]
  ),
 
 
 
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#-#-#-#Hunting Mod end#-#-#-#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  
]
# modmerger_start version=201 type=4
try:
    component_name = "mission_templates"
    var_set = { "mission_templates":mission_templates,"multiplayer_server_check_belfry_movement":multiplayer_server_check_belfry_movement,"multiplayer_server_spawn_bots":multiplayer_server_spawn_bots,"multiplayer_server_manage_bots":multiplayer_server_manage_bots,"multiplayer_server_check_polls":multiplayer_server_check_polls,"multiplayer_server_check_end_map":multiplayer_server_check_end_map,"multiplayer_once_at_the_first_frame":multiplayer_once_at_the_first_frame,"multiplayer_battle_window_opened":multiplayer_battle_window_opened,"common_battle_mission_start":common_battle_mission_start,"common_battle_tab_press":common_battle_tab_press,"common_battle_init_banner":common_battle_init_banner,"common_arena_fight_tab_press":common_arena_fight_tab_press,"common_custom_battle_tab_press":common_custom_battle_tab_press,"custom_battle_check_victory_condition":custom_battle_check_victory_condition,"custom_battle_check_defeat_condition":custom_battle_check_defeat_condition,"common_battle_victory_display":common_battle_victory_display,"common_siege_question_answered":common_siege_question_answered,"common_custom_battle_question_answered":common_custom_battle_question_answered,"common_custom_siege_init":common_custom_siege_init,"common_siege_init":common_siege_init,"common_music_situation_update":common_music_situation_update,"common_siege_ai_trigger_init":common_siege_ai_trigger_init,"common_siege_ai_trigger_init_2":common_siege_ai_trigger_init_2,"common_siege_ai_trigger_init_after_2_secs":common_siege_ai_trigger_init_after_2_secs,"common_siege_defender_reinforcement_check":common_siege_defender_reinforcement_check,"common_siege_defender_reinforcement_archer_reposition":common_siege_defender_reinforcement_archer_reposition,"common_siege_attacker_reinforcement_check":common_siege_attacker_reinforcement_check,"common_siege_attacker_do_not_stall":common_siege_attacker_do_not_stall,"common_battle_check_friendly_kills":common_battle_check_friendly_kills,"common_battle_check_victory_condition":common_battle_check_victory_condition,"common_battle_victory_display":common_battle_victory_display,"common_siege_refill_ammo":common_siege_refill_ammo,"common_siege_check_defeat_condition":common_siege_check_defeat_condition,"common_battle_order_panel":common_battle_order_panel,"common_battle_order_panel_tick":common_battle_order_panel_tick,"common_battle_inventory":common_battle_inventory,"common_inventory_not_available":common_inventory_not_available,"common_siege_init_ai_and_belfry":common_siege_init_ai_and_belfry,"common_siege_move_belfry":common_siege_move_belfry,"common_siege_rotate_belfry":common_siege_rotate_belfry,"common_siege_assign_men_to_belfry":common_siege_assign_men_to_belfry,"tournament_triggers":tournament_triggers, }
    from modmerger import modmerge
    modmerge(var_set, component_name)
except:
    raise
# modmerger_end