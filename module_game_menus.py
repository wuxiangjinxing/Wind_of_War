from header_game_menus import *
from header_parties import *
from header_items import *
from header_mission_templates import *
from header_music import *
from header_terrain_types import *

from module_constants import *

####################################################################################################################
#  (menu-id, menu-flags, menu_text, mesh-name, [<operations>], [<options>]),
#
#   Each game menu is a tuple that contains the following fields:
#  
#  1) Game-menu id (string): used for referencing game-menus in other files.
#     The prefix menu_ is automatically added before each game-menu-id
#
#  2) Game-menu flags (int). See header_game_menus.py for a list off available flags.
#     You can also specify menu text color here, with the menu_text_color macro
#  3) Game-menu text (string).
#  4) mesh-name (string). Not currently used. Must be the string "none"
#  5) Operations block (list). A list of operations. See header_operations.py for reference.
#     The operations block is executed when the game menu is activated.
#  6) List of Menu options (List).
#     Each menu-option record is a tuple containing the following fields:
#   6.1) Menu-option-id (string) used for referencing game-menus in other files.
#        The prefix mno_ is automatically added before each menu-option.
#   6.2) Conditions block (list). This must be a valid operation block. See header_operations.py for reference. 
#        The conditions are executed for each menu option to decide whether the option will be shown to the player or not.
#   6.3) Menu-option text (string).
#   6.4) Consequences block (list). This must be a valid operation block. See header_operations.py for reference. 
#        The consequences are executed for the menu option that has been selected by the player.
#
#
# Note: The first Menu is the initial character creation menu.
####################################################################################################################

game_menus = [
## CC
#This needs to be the first window!!!
  ("start_game_options", 0, 
    "Welcome to Custom Commander, a mod for Mount and Blade: Warband.^^Please select your game options. These options cannot be changed after the game has begun.",
    "none", [], 
    [
      ("choose_options", [],
        "Continue...",
        [
          (jump_to_menu, "mnu_choose_options_1"),
          
      (try_for_range, ":original_faction", kingdoms_begin, npc_kingdoms_end),
        (neg|eq, ":original_faction", "fac_kingdom_1"),
        (neg|eq, ":original_faction", "fac_kingdom_3"),
        (neg|eq, ":original_faction", "fac_kingdom_4"),
        (neg|eq, ":original_faction", "fac_kingdom_5"),
        (neg|eq, ":original_faction", "fac_kingdom_7"),
        (neg|eq, ":original_faction", "fac_kingdom_8"),
        (neg|eq, ":original_faction", "fac_kingdom_9"),
        (neg|eq, ":original_faction", "fac_kingdom_10"),
        (faction_set_slot, ":original_faction", slot_faction_state, sfs_inactive),
        (faction_set_note_available, ":original_faction", 0),
      (try_end),
          
        ]),
      ("go_back", [],
        "Go back",
        [(change_screen_quit)]),
    ]),
## CC

  ("start_phase_2",mnf_disable_all_keys,
    "{s8}",
    "none",
    [
         (str_clear, s8),
         (try_begin),
           (eq, "$g_use_special_item", 0),
           (str_store_string, s8, "str_start_phase_2"),
         (else_try),
           (str_store_string, s8, "str_start_phase_3"),
         (try_end),
        

         (try_begin),
           (eq, "$g_start_faction", "fac_kingdom_1"),
           (assign, "$current_town", "p_town_1"),
         (else_try),
           (eq, "$g_start_faction", "fac_kingdom_3"),
           (assign, "$current_town", "p_town_17"),
         (else_try),
           (eq, "$g_start_faction", "fac_kingdom_4"),
           (assign, "$current_town", "p_town_3"),
         (else_try),
           (eq, "$g_start_faction", "fac_kingdom_5"),
           (assign, "$current_town", "p_town_5"),
         (else_try),
           (eq, "$g_start_faction", "fac_kingdom_7"),
           (assign, "$current_town", "p_town_23"),
         (else_try),
           (eq, "$g_start_faction", "fac_kingdom_8"),
           (assign, "$current_town", "p_town_19"),
         (else_try),
           (eq, "$g_start_faction", "fac_kingdom_9"),
           (assign, "$current_town", "p_town_24"),
         (else_try),
           (eq, "$g_start_faction", "fac_kingdom_10"),
           (assign, "$current_town", "p_town_11"),
         (else_try),
           (store_random_in_range, "$current_town", towns_begin, towns_end),
         (try_end),
         (try_begin),
           (eq, "$g_gether_npcs", 1),
           (try_for_range, ":troop_no", companions_begin, companions_end),
             (troop_set_slot, ":troop_no", slot_troop_cur_center, "$current_town"),
           (try_end),
         (try_end),        
         (assign, "$g_starting_town", "$current_town"),

    ],
    [
      ("town_quest",[(str_store_party_name, s1, "$g_starting_town"),(eq, "$current_startup_quest_phase", 0),],"join a merchant caravan to travel to {s1}.",
       [
         (faction_slot_eq, "$g_start_faction", slot_faction_state, sfs_active),
         (assign, "$g_journey_string", "str_journey_to_praven"),
         (jump_to_menu, "mnu_start_phase_2_5"),
       ]),
       
      ("begin_as_knight",[], "begin_as_knight",
       [
         (faction_slot_eq, "$g_start_faction", slot_faction_state, sfs_active),
         (jump_to_menu, "mnu_start_knight"),
       ]),
      ("begin_as_king",[], "begin_as_king",
       [
         (faction_slot_eq, "$g_start_faction", slot_faction_state, sfs_active),
         (jump_to_menu, "mnu_start_king"),
       ]),
       
      ("quick_star",[],"quick_star",
       [
         (change_screen_return),
         (party_relocate_near_party, "p_main_party", "$g_starting_town", 3),
         (call_script, "script_get_player_party_morale_values"),
         (party_set_morale, "p_main_party", reg0),
       ]
	   ),
	   
    ]
  ),
 


 
  (
    "start_game_3",mnf_disable_all_keys,
    "Choose your scenario:",
    "none",
    [
      (assign, "$g_custom_battle_scenario", 0),
      (assign, "$g_custom_battle_scenario", "$g_custom_battle_scenario"),
##      #Default banners
##      (troop_set_slot, "trp_banner_background_color_array", 126, 0xFF212221),
##      (troop_set_slot, "trp_banner_background_color_array", 127, 0xFF212221),
##      (troop_set_slot, "trp_banner_background_color_array", 128, 0xFF2E3B10),
##      (troop_set_slot, "trp_banner_background_color_array", 129, 0xFF425D7B),
##      (troop_set_slot, "trp_banner_background_color_array", 130, 0xFF394608),
      ],
    [
##      ("custom_battle_scenario_1",[], "Skirmish 1",
##       [
##           (assign, "$g_custom_battle_scenario", 0),
##           (jump_to_menu, "mnu_custom_battle_2"),
##
##        ]
##       ),
####      ("custom_battle_scenario_2",[],"Siege Attack 1",
####       [
####           (assign, "$g_custom_battle_scenario", 1),
####           (jump_to_menu, "mnu_custom_battle_2"),
####
####        ]
####       ),
##      ("custom_battle_scenario_3",[],"Skirmish 2",
##       [
##           (assign, "$g_custom_battle_scenario", 1),
##           (jump_to_menu, "mnu_custom_battle_2"),
##
##        ]
##       ),
##       ("custom_battle_scenario_4",[],"Siege Defense",
##       [
##           (assign, "$g_custom_battle_scenario", 2),
##           (jump_to_menu, "mnu_custom_battle_2"),
##        ]
##       ),
##       ("custom_battle_scenario_5",[],"Skirmish 3",
##       [
##           (assign, "$g_custom_battle_scenario", 3),
##           (jump_to_menu, "mnu_custom_battle_2"),
##        ]
##       ),
##      ("custom_battle_scenario_6",[],"Siege Attack",
##       [
##           (assign, "$g_custom_battle_scenario", 4),
##           (jump_to_menu, "mnu_custom_battle_2"),
##
##        ]
##       ),
      ("go_back",[],"Go back",
       [(change_screen_quit), 
        ]
        ),
    ]
  ),


  (
    "tutorial",mnf_disable_all_keys,
    "You approach a field where the locals are training with weapons. You can practice here to improve your combat skills.",
    "none",
    [
      (try_begin),
        (eq, "$g_tutorial_entered", 1),
        (change_screen_quit),
      (else_try),
        (set_passage_menu, "mnu_tutorial"),
##        (try_begin),
##          (eq, "$tutorial_1_finished", 1),
##          (str_store_string, s1, "str_finished"),
##        (else_try),
##          (str_store_string, s1, "str_empty_string"),
##        (try_end),
##        (try_begin),
##          (eq, "$tutorial_2_finished", 1),
##          (str_store_string, s2, "str_finished"),
##        (else_try),
##          (str_store_string, s2, "str_empty_string"),
##        (try_end),
##        (try_begin),
##          (eq, "$tutorial_3_finished", 1),
##          (str_store_string, s3, "str_finished"),
##        (else_try),
##          (str_store_string, s3, "str_empty_string"),
##        (try_end),
##        (try_begin),
##          (eq, "$tutorial_4_finished", 1),
##          (str_store_string, s4, "str_finished"),
##        (else_try),
##          (str_store_string, s4, "str_empty_string"),
##        (try_end),
##        (try_begin),
##          (eq, "$tutorial_5_finished", 1),
##          (str_store_string, s5, "str_finished"),
##        (else_try),
##          (str_store_string, s5, "str_empty_string"),
##        (try_end),
        (assign, "$g_tutorial_entered", 1),
      (try_end),
    ],
    [
##      ("tutorial_1",
##      [(eq,1,0),],
##      "Tutorial #1: Basic movement and weapon selection. {s1}",
##      [
##        #(modify_visitors_at_site,"scn_tutorial_1"),(reset_visitors,0),
####           (set_jump_mission,"mt_tutorial_1"),
####           (jump_to_scene,"scn_tutorial_1"),(change_screen_mission)]),
##      ]),
##      
##      ("tutorial_2",[(eq,1,0),],"Tutorial #2: Fighting with a shield. {s2}",[
####           (modify_visitors_at_site,"scn_tutorial_2"),(reset_visitors,0),
####           (set_visitor,1,"trp_tutorial_maceman"),
####           (set_visitor,2,"trp_tutorial_archer"),
####           (set_jump_mission,"mt_tutorial_2"),
####           (jump_to_scene,"scn_tutorial_2"),(change_screen_mission)]),
##           (modify_visitors_at_site,"scn_tutorial_training_ground"),
##           (reset_visitors, 0),
##           (set_player_troop, "trp_player"),
##           (set_visitor,0,"trp_player"),
##           (set_jump_mission,"mt_ai_training"),
##           (jump_to_scene,"scn_tutorial_training_ground"),
##           (change_screen_mission)]),
##
##      ("tutorial_3",[(eq,1,0),],"Tutorial #3: Fighting without a shield. {s3}",[
##           (modify_visitors_at_site,"scn_tutorial_3"),(reset_visitors,0),
##           (set_visitor,1,"trp_tutorial_maceman"),
##           (set_visitor,2,"trp_tutorial_swordsman"),
##           (set_jump_mission,"mt_tutorial_3"),
##           (jump_to_scene,"scn_tutorial_3"),(change_screen_mission)]),
##      ("tutorial_3b",[(eq,0,1)],"Tutorial 3 b",[(try_begin),
##                                                  (ge, "$tutorial_3_state", 12),
##                                                  (modify_visitors_at_site,"scn_tutorial_3"),(reset_visitors,0),
##                                                  (set_visitor,1,"trp_tutorial_maceman"),
##                                                  (set_visitor,2,"trp_tutorial_swordsman"),
##                                                  (set_jump_mission,"mt_tutorial_3_2"),
##                                                  (jump_to_scene,"scn_tutorial_3"),
##                                                  (change_screen_mission),
##                                                (else_try),
##                                                  (display_message,"str_door_locked",0xFFFFAAAA),
##                                                (try_end)], "Next level"),
##      ("tutorial_4",[(eq,1,0),],"Tutorial #4: Riding a horse. {s4}",[
##           (modify_visitors_at_site,"scn_tutorial_training_ground"),
##           (reset_visitors, 0),
##           (set_player_troop, "trp_player"),
##           (assign, "$g_player_troop", "trp_player"),
##           (troop_raise_attribute, "$g_player_troop", ca_strength, 12),
##           (troop_raise_attribute, "$g_player_troop", ca_agility, 9),
##           (troop_raise_attribute, "$g_player_troop", ca_charisma, 5),
##           (troop_raise_skill, "$g_player_troop", skl_shield, 3),
##           (troop_raise_skill, "$g_player_troop", skl_athletics, 2),
##           (troop_raise_skill, "$g_player_troop", skl_riding, 3),
##           (troop_raise_skill, "$g_player_troop", skl_power_strike, 1),
##           (troop_raise_skill, "$g_player_troop", skl_power_draw, 5),
##           (troop_raise_skill, "$g_player_troop", skl_weapon_master, 4),
##           (troop_raise_skill, "$g_player_troop", skl_ironflesh, 1),
##           (troop_raise_skill, "$g_player_troop", skl_horse_archery, 6),
##           (troop_raise_proficiency_linear, "$g_player_troop", wpt_one_handed_weapon, 70),
##           (troop_raise_proficiency_linear, "$g_player_troop", wpt_two_handed_weapon, 70),
##           (troop_raise_proficiency_linear, "$g_player_troop", wpt_polearm, 70),
##           (troop_raise_proficiency_linear, "$g_player_troop", wpt_crossbow, 70),
##           (troop_raise_proficiency_linear, "$g_player_troop", wpt_throwing, 70),
##     
##        (troop_clear_inventory, "$g_player_troop"),
##        (troop_add_item, "$g_player_troop","itm_leather_jerkin",0),
##        (troop_add_item, "$g_player_troop","itm_leather_boots",0),
##        (troop_add_item, "$g_player_troop","itm_practice_sword",0),
##        (troop_add_item, "$g_player_troop","itm_quarter_staff",0),
##        (troop_equip_items, "$g_player_troop"),
##        (set_visitor,0,"trp_player"),
##        (set_visitor,32,"trp_tutorial_fighter_1"),
##        (set_visitor,33,"trp_tutorial_fighter_2"),
##        (set_visitor,34,"trp_tutorial_fighter_3"),
##        (set_visitor,35,"trp_tutorial_fighter_4"),
##        (set_visitor,40,"trp_tutorial_master_archer"),
##        (set_visitor,41,"trp_tutorial_archer_1"),
##        (set_visitor,42,"trp_tutorial_archer_1"),
##        (set_visitor,60,"trp_tutorial_master_horseman"),
##        (set_visitor,61,"trp_tutorial_rider_1"),
##        (set_visitor,62,"trp_tutorial_rider_1"),
##        (set_visitor,63,"trp_tutorial_rider_2"),
##        (set_visitor,64,"trp_tutorial_rider_2"),
##        (set_jump_mission,"mt_tutorial_training_ground"),
##        (jump_to_scene,"scn_tutorial_training_ground"),
##        (change_screen_mission),
##      ]),
##      
##      ("tutorial_5",
##      [
##        (eq,1,0),
##      ],
##      "Tutorial #5: Commanding a band of soldiers. {s5}",
##      [
##        (modify_visitors_at_site,"scn_tutorial_5"),(reset_visitors,0),
##        (set_visitor,0,"trp_player"),
##        (set_visitor,1,"trp_vaegir_infantry"),
##        (set_visitor,2,"trp_vaegir_infantry"),
##        (set_visitor,3,"trp_vaegir_infantry"),
##        (set_visitor,4,"trp_vaegir_infantry"),
##        (set_jump_mission,"mt_tutorial_5"),
##        (jump_to_scene,"scn_tutorial_5"),
##        (change_screen_mission),
##      ]),
##      
##      ("tutorial_edit_custom_battle_scenes",
##      [(eq,1,0),],
##      "(NO TRANSLATE) tutorial_edit_custom_battle_scenes",
##      [
##        (jump_to_menu,"mnu_custom_battle_scene"),        
##      ]),

      ("continue",[],"Continue...",
      [
        (modify_visitors_at_site,"scn_tutorial_training_ground"),
        (reset_visitors, 0),
        (set_player_troop, "trp_player"),
        (assign, "$g_player_troop", "trp_player"),
        (troop_raise_attribute, "$g_player_troop", ca_strength, 12),
        (troop_raise_attribute, "$g_player_troop", ca_agility, 9),
        (troop_raise_attribute, "$g_player_troop", ca_charisma, 5),
        (troop_raise_skill, "$g_player_troop", skl_shield, 3),
        (troop_raise_skill, "$g_player_troop", skl_physique, 2),
        (troop_raise_skill, "$g_player_troop", skl_riding, 3),
        (troop_raise_skill, "$g_player_troop", skl_power_strike, 1),
        (troop_raise_skill, "$g_player_troop", skl_power_draw, 5),
        (troop_raise_skill, "$g_player_troop", skl_weapon_master, 4),
        (troop_raise_skill, "$g_player_troop", skl_ironflesh, 1),
        (troop_raise_skill, "$g_player_troop", skl_horse_archery, 6),
        (troop_raise_proficiency_linear, "$g_player_troop", wpt_one_handed_weapon, 70),
        (troop_raise_proficiency_linear, "$g_player_troop", wpt_two_handed_weapon, 70),
        (troop_raise_proficiency_linear, "$g_player_troop", wpt_polearm, 70),
        (troop_raise_proficiency_linear, "$g_player_troop", wpt_crossbow, 70),
        (troop_raise_proficiency_linear, "$g_player_troop", wpt_throwing, 70),
     
        (troop_clear_inventory, "$g_player_troop"),
        (troop_add_item, "$g_player_troop","itm_leather_jerkin",0),
        (troop_add_item, "$g_player_troop","itm_leather_boots",0),
        (troop_add_item, "$g_player_troop","itm_practice_sword",0),
        (troop_add_item, "$g_player_troop","itm_quarter_staff",0),
        (troop_equip_items, "$g_player_troop"),
        (set_visitor,0,"trp_player"),
        (set_visitor,32,"trp_tutorial_fighter_1"),
        (set_visitor,33,"trp_tutorial_fighter_2"),
        (set_visitor,34,"trp_tutorial_fighter_3"),
        (set_visitor,35,"trp_tutorial_fighter_4"),
        (set_visitor,40,"trp_tutorial_master_archer"),
        (set_visitor,41,"trp_tutorial_archer_1"),
        (set_visitor,42,"trp_tutorial_archer_1"),
        (set_visitor,60,"trp_tutorial_master_horseman"),
        (set_visitor,61,"trp_tutorial_rider_1"),
        (set_visitor,62,"trp_tutorial_rider_1"),
        (set_visitor,63,"trp_tutorial_rider_2"),
        (set_visitor,64,"trp_tutorial_rider_2"),
        (set_jump_mission,"mt_tutorial_training_ground"),
        (jump_to_scene,"scn_tutorial_training_ground"),
        (change_screen_mission),
        ]),

      ("action_view_upgrade_trees",[],"View troop trees.",
       [
        (call_script, "script_reload_custom_troops_2"),
        (call_script, "script_raf_init_troops"),
        (assign, ":selected_page", 0),
        (assign, "$g_prsnt_param_2", ":selected_page"),
        (start_presentation, "prsnt_faction_troop_trees"),
        ]
       ),
       
       
      ("action_view_upgrade_trees_fantasy",[],"View upgrade trees.",
       [
        (call_script, "script_raf_init_troops"),
        (start_presentation, "prsnt_upgrade_trees_fantasy"),
        ]
       ),

      ("action_special_view_troop_trees",[],"View upgrade trees.",
       [
        (call_script, "script_init_troop_upgrade_troops"),
        (call_script, "script_raf_init_troops"),
        (start_presentation, "prsnt_upgrade_trees_special"),
        ]
       ),

      ("action_view_upgrade_trees_heroes",[],"View faction heros.",
       [
        (call_script, "script_raf_init_troops"),
        (assign, ":selected_page", "fac_robber_knights"),
        (store_sub, "$g_prsnt_param_2", ":selected_page", "fac_kingdom_1"),
        (start_presentation, "prsnt_upgrade_trees_heroes"),
        ]
       ),

      ("action_view_all_items",[],"View all items.",
       [
        (assign, "$temp", 0),
        (start_presentation, "prsnt_all_items"),
        ]
       ),

      #("quick_battle",[],"quick battle.",
      # [
      #  (call_script, "script_game_quick_start"),
      #  (start_presentation, "prsnt_game_custom_battle_designer_2"),
      #  ]
      # ),

########################################
########################################
("choose_scene",[],"Scene Chooser",
   [(jump_to_menu, "mnu_choose_scenes_0"),
   ]
   ),
########################################
########################################
      ("go_back_dot",
      [],
      "Go back.",
       [
         (change_screen_quit),
       ]),
    ]
  ),

  ("reports",0,
   "Character Renown: {reg5}^Honor Rating: {reg6}^Party Morale: {reg8}^Party Size Limit: {reg7}^^{reg9?Next pay time:^{s1}:}",
   "none",
   [(call_script, "script_game_get_party_companion_limit"),
    (assign, ":party_size_limit", reg0),
    (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
    (assign, reg5, ":renown"),
    (assign, reg6, "$player_honor"),
    (assign, reg7, ":party_size_limit"),
    #(call_script, "script_get_player_party_morale_values"),
    #(party_set_morale, "p_main_party", reg0),
    (call_script, "script_get_player_rank_name"),
    (troop_get_slot, ":player_effect", "trp_player", slot_troop_player_effect),
    (assign, reg0, ":player_effect"),
    
    ## CC
    (assign, reg9, "$g_next_pay_time"),
    (str_store_party_name, s1, "p_test_scene"),
    ## CC
    (party_get_morale, reg8, "p_main_party"),
    (set_background_mesh, "mesh_pic_book_1"),
   ],
    [
	
      ("resume_travelling",[],"Resume travelling.",
       [(change_screen_return),
        ]
       ),
	
      ("cheat_faction_orders",[(ge,"$cheat_mode",1)],"{!}Cheat: Faction orders.",
       [(jump_to_menu, "mnu_faction_orders"),
        ]
       ),
      ## CC
      
      ("action_view_world_map",[],"View world map.",
       [
        (jump_to_menu, "mnu_world_map_precision"),
        ]
       ),      
       
      ("action_view_upgrade_trees",[],"View troop trees.",
       [
        (assign, ":selected_page", 0),
        (assign, "$g_prsnt_param_2", ":selected_page"),
        (start_presentation, "prsnt_faction_troop_trees"),
        ]
       ),
       
       
      ("action_view_upgrade_trees_fantasy",[],"View upgrade trees.",
       [
        (start_presentation, "prsnt_upgrade_trees_fantasy"),
        ]
       ),
       
      ("action_view_upgrade_trees_heroes",[],"View faction heros.",
       [
        (assign, ":selected_page", "fac_robber_knights"),
        (try_begin),
          (eq, "$game_mode", game_mode_heroes),
          (store_sub, "$g_prsnt_param_2", ":selected_page", "fac_kingdom_1"),
          (start_presentation, "prsnt_upgrade_trees_heroes"),
        (else_try), 
          (store_sub, "$g_prsnt_param_2", ":selected_page", kingdoms_begin),
          (start_presentation, "prsnt_upgrade_trees_heroes_2"),
        (try_end),
        ]
       ),
       
      ("view_party_size_and_morale_report",[],"View party morale and size report.",
       [
         (start_presentation, "prsnt_party_size_and_morale"),
        ]
       ),
       
      ("action_view_all_items",[],"View all items.",
       [
        (assign, "$temp", 0),
        (start_presentation, "prsnt_all_items"),
        ]
       ),
      ("view_relations_report",[],"View relations with factions and lords.",
       [(start_presentation, "prsnt_relations_with_factions"),
        ]
       ),	   
            
      ("view_relations_report_2",[],"View faction relations report.",
       [(jump_to_menu, "mnu_other_relations_report"),]
       ),
            
      ("view_character_report",[],"View character report.",
       [(jump_to_menu, "mnu_character_report"),
        ]
       ),
       
      ("view_player_class",[],"View Class Information.",
       [(jump_to_menu, "mnu_player_class"),
        ]
       ),
       
      #("view_party_size_report",[],"View party size report.",
      # [(jump_to_menu, "mnu_party_size_report"),
      #  ]
      # ),
	   
      ("view_npc_mission_report",[],"View companion mission report.",
       [(jump_to_menu, "mnu_companion_report"),
        ]
       ),

      ("view_weekly_budget_report",[],"View weekly budget report.",
       [
         (assign, "$g_apply_budget_report_to_gold", 0),
         (start_presentation, "prsnt_budget_report"),
        ]
       ),

      #("view_morale_report",[],"View party morale report.",
      # [(jump_to_menu, "mnu_morale_report"),
      #  ]
      # ),
      ("view_banking_reports",[],"View money reports.",
       [(jump_to_menu, "mnu_banks_report"),
        ]
       ),
#NPC companion changes begin
      #("lord_relations",[],"View list of known lords by relation.",
       #[
        #(jump_to_menu, "mnu_lord_relations"),
        #]
       #),
	   
      #("courtship_relations",[],"View courtship relations.",
       #[
        #(jump_to_menu, "mnu_courtship_relations"),
        #]
       #),

      ("status_check",[(eq,"$cheat_mode",1)],"{!}NPC status check.",
       [
        (try_for_range, ":npc", companions_begin, companions_end),
            (main_party_has_troop, ":npc"),
            (str_store_troop_name, 4, ":npc"),
            (troop_get_slot, reg3, ":npc", slot_troop_morality_state),
            (troop_get_slot, reg4, ":npc", slot_troop_2ary_morality_state),
            (troop_get_slot, reg5, ":npc", slot_troop_personalityclash_state),    
            (troop_get_slot, reg6, ":npc", slot_troop_personalityclash2_state),    
            (troop_get_slot, reg7, ":npc", slot_troop_personalitymatch_state),    
            (display_message, "@{!}{s4}: M{reg3}, 2M{reg4}, PC{reg5}, 2PC{reg6}, PM{reg7}"),
        (try_end),
        ]
       ),

#NPC companion changes end

      #("view_faction_relations_report",[],"View faction relations report.",
      # [
      #     (start_presentation, "prsnt_jrider_faction_relations_report"),
      #  ]
      # ),
      #("view_faction_relations_report_2",[],"View faction relations report.",
       #[
       #    (jump_to_menu, "mnu_faction_relations_report"),
       # ]
       #),
      ("resume_travelling",[],"Resume travelling.",
       [(change_screen_return),
        ]
       ),
      ]
  ),

  (
    "custom_battle_scene",menu_text_color(0xFF000000)|mnf_disable_all_keys,
    "(NO_TRANS)",
	
    "none",
    [],
    [

      ("quick_battle_scene_1",[],"{!}quick_battle_scene_1",
       [
           (set_jump_mission,"mt_ai_training"),
           (jump_to_scene,"scn_quick_battle_scene_1"),(change_screen_mission)        
        ]
       ),
      ("quick_battle_scene_2",[],"{!}quick_battle_scene_2",
       [
           (set_jump_mission,"mt_ai_training"),
           (jump_to_scene,"scn_quick_battle_scene_2"),(change_screen_mission)        
        ]
       ),
      ("quick_battle_scene_3",[],"{!}quick_battle_scene_3",
       [
           (set_jump_mission,"mt_ai_training"),
           (jump_to_scene,"scn_quick_battle_scene_3"),(change_screen_mission)        
        ]
       ),
      ("quick_battle_scene_4",[],"{!}quick_battle_scene_4",
       [
           (set_jump_mission,"mt_ai_training"),
           (jump_to_scene,"scn_quick_battle_scene_4"),(change_screen_mission)        
        ]
       ),
      ("quick_battle_scene_5",[],"{!}quick_battle_scene_5",
       [
           (set_jump_mission,"mt_ai_training"),
           (jump_to_scene,"scn_quick_battle_scene_5"),(change_screen_mission)        
        ]
       ),
	   
      ("go_back",[],"{!}Go back",
       [(change_screen_quit),
        ]
       ),
      ]
  ),
  

  (
    "custom_battle_end",mnf_disable_all_keys,
    "The battle is over. {s1} Your side killed {reg5} enemies and lost {reg6} troops over the battle. You personally slew {reg7} men in the fighting.",
    "none",
    [(music_set_situation, 0),
     (assign, reg5, "$g_custom_battle_team2_death_count"),
     (assign, reg6, "$g_custom_battle_team1_death_count"),
     (get_player_agent_kill_count, ":kill_count"),
     (get_player_agent_kill_count, ":wound_count", 1),
     (store_add, reg7, ":kill_count", ":wound_count"),
          
          
     (call_script, "script_print_custom_battle_casualties_to_s0", 1),
     (str_store_string_reg, s9, s0),
     (call_script, "script_print_custom_battle_kill_count_to_s0", 1),
     (str_store_string, s9, "@{!}{s9}^{s0}"),
     
     (call_script, "script_print_custom_battle_casualties_to_s0", 0),
     (str_store_string_reg, s10, s0),
     (call_script, "script_print_custom_battle_kill_count_to_s0", 0),
     (str_store_string, s10, "@{!}{s10}^{s0}"),
     
     (try_begin),
       (eq, "$g_battle_result", 1),
       (str_store_string, s1, "str_battle_won"),
       (set_background_mesh, "mesh_pic_victory"),
     (else_try),
       (get_player_agent_no, ":player_agent"),
       (agent_is_alive, ":player_agent"),
       (str_store_string, s1, "@You have retreated from the fight."),
       (set_background_mesh, "mesh_pic_camp"),
     (else_try),
       (str_store_string, s1, "str_battle_lost"),
       (set_background_mesh, "mesh_pic_defeat"),
     (try_end),
     
     (try_begin),
       (ge, "$g_custom_battle_team2_death_count", 100),
       (unlock_achievement, ACHIEVEMENT_LOOK_AT_THE_BONES),
     (try_end),
     ],
    [
      ("continue",[],"Continue.",
       [(change_screen_quit),
        ]
       ),

       ## Dunde's Restart Custom Battle BEGIN
       ("restart",[],"Restart.",	  
       [ 
         #Restoring Custom Battle Design
         (assign, "$g_is_quick_battle", 1),
         (assign, ":cur_scene", "$g_quick_battle_map"),
         (try_begin),
           (eq, "$g_quick_battle_game_type", 0), #battle
           (assign, ":cur_mission_template", "mt_quick_battle_battle"),
           (modify_visitors_at_site, ":cur_scene"),
           (call_script, "script_spawn_quick_battle_army", 0, "$g_quick_battle_team_1_faction", "$g_presentation_obj_custom_battle_designer_6_last_value", "$g_presentation_obj_custom_battle_designer_7_last_value", "$g_presentation_obj_custom_battle_designer_8_last_value", 0, 1),
           (call_script, "script_spawn_quick_battle_army", 16, "$g_quick_battle_team_2_faction", "$g_presentation_obj_custom_battle_designer_9_last_value", "$g_presentation_obj_custom_battle_designer_10_last_value", "$g_presentation_obj_custom_battle_designer_11_last_value", 0, 0),
         (else_try),
           (eq, "$g_quick_battle_game_type", 1), #siege offense
           (assign, ":cur_mission_template", "mt_quick_battle_siege"),
           (party_set_slot,"p_main_party", slot_party_is_in_siege, 1),
           (modify_visitors_at_site, ":cur_scene"),
           (call_script, "script_spawn_quick_battle_army", 16, "$g_quick_battle_team_1_faction", "$g_presentation_obj_custom_battle_designer_6_last_value", "$g_presentation_obj_custom_battle_designer_7_last_value", "$g_presentation_obj_custom_battle_designer_8_last_value", 0, 1),
           (call_script, "script_spawn_quick_battle_army", 0, "$g_quick_battle_team_2_faction", "$g_presentation_obj_custom_battle_designer_9_last_value", "$g_presentation_obj_custom_battle_designer_10_last_value", "$g_presentation_obj_custom_battle_designer_11_last_value", 1, 0),
         (else_try),
           #siege defense
           (assign, ":cur_mission_template", "mt_quick_battle_siege"),
           (party_set_slot,"p_main_party", slot_party_is_in_siege, 1),
           (modify_visitors_at_site, ":cur_scene"),
           (call_script, "script_spawn_quick_battle_army", 0, "$g_quick_battle_team_1_faction", "$g_presentation_obj_custom_battle_designer_6_last_value", "$g_presentation_obj_custom_battle_designer_7_last_value", "$g_presentation_obj_custom_battle_designer_8_last_value", 1, 1),
           (call_script, "script_spawn_quick_battle_army", 16, "$g_quick_battle_team_2_faction", "$g_presentation_obj_custom_battle_designer_9_last_value", "$g_presentation_obj_custom_battle_designer_10_last_value", "$g_presentation_obj_custom_battle_designer_11_last_value", 0, 0),
         (try_end),
        # Reset Battle Result
        (assign, "$g_battle_result", 0),
        (assign, "$g_battle_won", 0),
         (set_jump_mission,":cur_mission_template"),
         (jump_to_menu, "mnu_custom_battle_end"),
         (jump_to_scene, ":cur_scene"),
         (change_screen_mission),
        ]
       ),	  
      ## Dunde's Restart Custom Battle END

    ]
  ),
  ## CC
  ("start_game_0",menu_text_color(0xFF000000)|mnf_disable_all_keys,
    "Welcome, adventurer, to Mount and Blade: Warband. Before beginning the game you must create your character. Remember that in the traditional medieval society depicted in the game, war and politics are usually dominated by male members of the nobility. That does not however mean that you should not choose to play a female character, or one who is not of noble birth. Male nobles may have a somewhat easier start, but women and commoners can attain all of the same goals -- and in fact may have a much more interesting if more challenging early game.",
    "none",
    [],
    [
     ("continue",[],"Continue...",
      [
        #(jump_to_menu, "mnu_start_game_1"),
         (try_begin),
           (eq, "$g_gether_npcs", 1),
           (troop_add_gold, "trp_player", 5000),
         (try_end),        
        (assign, "$character_gender", tf_male),
        (assign,"$background_type",cb_noble),
        (assign,"$background_answer_2", cb2_page),
        (assign,"$background_answer_3",cb3_squire),
        (assign,"$background_answer_4", cb4_revenge),
        (start_presentation, "prsnt_character_creation"),
        ]
       ),
      ("go_back",[],"Go back",
       [
         (change_screen_quit),
       ]),
    ]
  ),
  ## CC
  
  ("start_game_1",menu_text_color(0xFF000000)|mnf_disable_all_keys,
    "Select your character's gender.",
    "none",
    [],
    [
      ("start_male",[],"Male",
       [
         (troop_set_type,"trp_player", 0),
         (assign,"$character_gender",tf_male),
         (jump_to_menu,"mnu_start_character_1"),
        ]
       ),
      ("start_female",[],"Female",
       [
         (troop_set_type, "trp_player", 1),
         (assign, "$character_gender", tf_female),
         (jump_to_menu, "mnu_start_character_1"),
       ]
       ),
	  ("go_back",[],"Go back",
       [
	     (jump_to_menu,"mnu_start_game_0"),
       ]),
    ]
  ),

  (
    "start_character_1",mnf_disable_all_keys,
    "You were born years ago, in a land far away. Your father was...",
    "none",
    [
    (str_clear,s10),
    (str_clear,s11),
    (str_clear,s12),
    (str_clear,s13),
    (str_clear,s14),
    (str_clear,s15),
    ],
    [
    ("start_noble",[],"An impoverished noble.",[
      (assign,"$background_type",cb_noble),
      (assign, reg3, "$character_gender"),
      (str_store_string,s10,"@You came into the world a {reg3?daughter:son} of declining nobility,\
 owning only the house in which they lived. However, despite your family's hardships,\
 they afforded you a good education and trained you from childhood for the rigors of aristocracy and life at court."),
	(jump_to_menu,"mnu_start_character_2"),
    ]),
    ("start_merchant",[],"A travelling merchant.",[
      (assign,"$background_type",cb_merchant),
      (assign, reg3, "$character_gender"),
      (str_store_string,s10,"@You were born the {reg3?daughter:son} of travelling merchants,\
 always moving from place to place in search of a profit. Although your parents were wealthier than most\
 and educated you as well as they could, you found little opportunity to make friends on the road,\
 living mostly for the moments when you could sell something to somebody."),
	(jump_to_menu,"mnu_start_character_2"),
    ]),
    ("start_guard",[],"A veteran warrior.",[
      (assign,"$background_type",cb_guard),
      (assign, reg3, "$character_gender"),
      (str_store_string,s10,"@As a child, your family scrabbled out a meagre living from your father's wages\
 as a guardsman to the local lord. It was not an easy existence, and you were too poor to get much of an\
 education. You learned mainly how to defend yourself on the streets, with or without a weapon in hand."),
	(jump_to_menu,"mnu_start_character_2"),
    ]),
    ("start_forester",[],"A hunter.",[
      (assign,"$background_type",cb_forester),
      (assign, reg3, "$character_gender"),
      # (str_store_string,s11,"@{reg3?daughter:son}"),
      (str_store_string,s10,"@You were the {reg3?daughter:son} of a family who lived off the woods,\
 doing whatever they needed to make ends meet. Hunting, woodcutting, making arrows,\
 even a spot of poaching whenever things got tight. Winter was never a good time for your family\
 as the cold took animals and people alike, but you always lived to see another dawn,\
 though your brothers and sisters might not be so fortunate."),
	(jump_to_menu,"mnu_start_character_2"),
    ]),
    ("start_nomad",[],"A steppe nomad.",[
      (assign,"$background_type",cb_nomad),
      (assign, reg3, "$character_gender"),
      # (str_store_string,s11,"@{reg3?daughter:son}"),
      (str_store_string,s10,"@You were a child of the steppe, born to a tribe of wandering nomads who lived\
 in great camps throughout the arid grasslands.\
 Like the other tribesmen, your family revered horses above almost everything else, and they taught you\
 how to ride almost before you learned how to walk. "),
	(jump_to_menu,"mnu_start_character_2"),
    ]),
    ("start_thief",[],"A thief.",[
      (assign,"$background_type",cb_thief),
      (assign, reg3, "$character_gender"),
      (str_store_string,s10,"@As the {reg3?daughter:son} of a thief, you had very little 'formal' education.\
 Instead you were out on the street, begging until you learned how to cut purses, cutting purses\
 until you learned how to pick locks, all the way through your childhood.\
 Still, these long years made you streetwise and sharp to the secrets of cities and shadowy backways."),
	(jump_to_menu,"mnu_start_character_2"),
    ]),
##    ("start_priest",[],"Priests.",[
##      (assign,"$background_type",cb_priest),
##      (assign, reg3, "$character_gender"),
##      (str_store_string,s10,"@A {reg3?daughter:son} that nobody wanted, you were left to the church as a baby,\
## a foundling raised by the priests and nuns to their own traditions.\
## You were only one of many other foundlings and orphans, but you nonetheless received a lot of attention\
## as well as many years of study in the church library and before the altar. They taught you many things.\
## Gradually, faith became such a part of your life that it was no different from the blood coursing through your veins."),
##	(jump_to_menu,"mnu_start_character_2"),
##    ]),
    ("go_back",[],"Go back",
     [(jump_to_menu,"mnu_start_game_1"),
    ]),
    ]
  ),
  (
    "start_character_2",0,
    "{s10}^^ You started to learn about the world almost as soon as you could walk and talk. You spent your early life as...",
    "none",
    [],
    [
      ("page",[
          ],"A page at a nobleman's court.",[
      (assign,"$background_answer_2", cb2_page),
      (assign, reg3, "$character_gender"),
      (str_store_string,s11,"@As a {reg3?girl:boy} growing out of childhood,\
 you were sent to live in the court of one of the nobles of the land.\
 There, your first lessons were in humility, as you waited upon the lords and ladies of the household.\
 But from their chess games, their gossip, even the poetry of great deeds and courtly love, you quickly began to learn about the adult world of conflict\
 and competition. You also learned from the rough games of the other children, who battered at each other with sticks in imitation of their elders' swords."),
	(jump_to_menu,"mnu_start_character_3"),
    ]),
      ("apprentice",[
          ],"A craftsman's apprentice.",[
      (assign,"$background_answer_2", cb2_apprentice),
      (assign, reg3, "$character_gender"),
      (str_store_string,s11,"@As a {reg3?girl:boy} growing out of childhood,\
 you apprenticed with a local craftsman to learn a trade. After years of hard work and study under your\
 new master, he promoted you to journeyman and employed you as a fully paid craftsman for as long as\
 you wished to stay."),
	(jump_to_menu,"mnu_start_character_3"),
    ]),
      ("stockboy",[
          ],"A shop assistant.",[
      (assign,"$background_answer_2",cb2_merchants_helper),
      (assign, reg3, "$character_gender"),
      (str_store_string,s11,"@As a {reg3?girl:boy} growing out of childhood,\
 you apprenticed to a wealthy merchant, picking up the trade over years of working shops and driving caravans.\
 You soon became adept at the art of buying low, selling high, and leaving the customer thinking they'd\
 got the better deal."),
	(jump_to_menu,"mnu_start_character_3"),
    ]),
      ("urchin",[
          ],"A street urchin.",[
      (assign,"$background_answer_2",cb2_urchin),
      (assign, reg3, "$character_gender"),
      (str_store_string,s11,"@As a {reg3?girl:boy} growing out of childhood,\
 you took to the streets, doing whatever you must to survive.\
 Begging, thieving and working for gangs to earn your bread, you lived from day to day in this violent world,\
 always one step ahead of the law and those who wished you ill."),
	(jump_to_menu,"mnu_start_character_3"),
    ]),
      ("nomad",[
          ],"A steppe child.",[
      (assign,"$background_answer_2",cb2_steppe_child),
      (assign, reg3, "$character_gender"),
      (str_store_string,s11,"@As a {reg3?girl:boy} growing out of childhood,\
 you rode the great steppes on a horse of your own, learning the ways of the grass and the desert.\
 Although you sometimes went hungry, you became a skillful hunter and pathfinder in this trackless country.\
 Your body too started to harden with muscle as you grew into the life of a nomad {reg3?woman:man}."),
	(jump_to_menu,"mnu_start_character_3"),
    ]),
      
##      ("mummer",[],"Mummer.",[
##      (assign,"$background_answer_2",5),
##      (assign, reg3, "$character_gender"),
##      (str_store_string,s13,"@{reg3?woman:man}"),
##      (str_store_string,s12,"@{reg3?girl:boy}"),
##      (str_store_string,s11,"@As a {s12} growing out of childhood,\
## you attached yourself to a troupe of wandering entertainers, going from town to town setting up mummer's\
## shows. It was a life of hard work, selling, begging and stealing your living from the punters who flocked\
## to watch your antics. Over time you became a performer well capable of attracting a crowd."),
##	(jump_to_menu,"mnu_start_character_3"),
##    ]),
##      ("courtier",[],"Courtier.",[
##      (assign,"$background_answer_2",6),
##      (assign, reg3, "$character_gender"),
##      (str_store_string,s13,"@{reg3?woman:man}"),
##      (str_store_string,s12,"@{reg3?girl:boy}"),
##      (str_store_string,s11,"@As a {s12} growing out of childhood,\
## you spent much of your life at court, inserting yourself into the tightly-knit circles of nobility.\
## With the years you became more and more involved with the politics and intrigue demanded of a high-born {s13}.\
## You could not afford to remain a stranger to backstabbing and political violence, even if you wanted to."),
##	(jump_to_menu,"mnu_start_character_3"),
##    ]),
##      ("noble",[],"Noble in training.",[
##      (assign,"$background_answer_2",7),
##      (assign, reg3, "$character_gender"),
##      (str_store_string,s13,"@{reg3?woman:man}"),
##      (str_store_string,s12,"@{reg3?girl:boy}"),
##      (try_begin),
##      (eq,"$character_gender",tf_male),
##      (str_store_string,s11,"@As a {s12} growing out of childhood,\
## you were trained and educated to perform the duties and wield the rights of a noble landowner.\
## The managing of taxes and rents were equally important in your education as diplomacy and even\
## personal defence. You learned everything you needed to become a lord of your own hall."),
##      (else_try),
##      (str_store_string,s11,"@As a {s12} growing out of childhood,\
## you were trained and educated to the duties of a noble {s13}. You learned much about the household arts,\
## but even more about diplomacy and decorum, and all the things that a future husband might choose to speak of.\
## Truly, you became every inch as shrewd as any lord, though it would be rude to admit it aloud."),
##      (try_end),
##	(jump_to_menu,"mnu_start_character_3"),
##    ]),
##      ("acolyte",[],"Cleric acolyte.",[
##    (assign,"$background_answer_2",8),
##      (assign, reg3, "$character_gender"),
##      (str_store_string,s13,"@{reg3?woman:man}"),
##      (str_store_string,s12,"@{reg3?girl:boy}"),
##      (str_store_string,s11,"@As a {s12} growing out of childhood,\
## you became an acolyte in the church, the lowest rank on the way to priesthood.\
## Years of rigorous learning and hard work followed. You were one of several acolytes,\
## performing most of the menial labour in the church in addition to being trained for more holy tasks.\
## On the night of your adulthood you were allowed to conduct your first service.\
## After that you were no longer an acolyte {s12}, but a {s13} waiting to take your vows into the service of God."),
##	(jump_to_menu,"mnu_start_character_3"),
##    ]),
      ("go_back",[],"Go back.",
     [(jump_to_menu,"mnu_start_character_1"),
    ]),
    ]
  ),
  (
    "start_character_3",mnf_disable_all_keys,
    "{s11}^^ Then, as a young adult, life changed as it always does. You became...",
    "none",
    [(assign, reg3, "$character_gender"),],
    [
##      ("bravo",[],"A travelling bravo.",[
##        (assign,"$background_answer_3",1),
##      (str_store_string,s14,"@{reg3?daughter:man}"),
##      (str_store_string,s13,"@{reg3?woman:man}"),
##      (str_store_string,s12,"@Though the distinction felt sudden to you,\
## somewhere along the way you had become a {s13}, and the whole world seemed to change around you.\
## You left your old life behind to travel the roads as a mercenary, a bravo, guarding caravans for coppers\
## or bashing in heads for silvers. You became a {s14} of the open road, working with bandits as often as against.\
## Going from fight to fight, you grew experienced at battle, and you learned what it was to kill."),
##	(jump_to_menu,"mnu_start_character_4"),
##        ]),
##      ("merc",[],"A sellsword in foreign lands.",[
##        (assign,"$background_answer_3",2),
##      (str_store_string,s14,"@{reg3?daughter:man}"),
##      (str_store_string,s13,"@{reg3?woman:man}"),
##      (str_store_string,s12,"@Though the distinction felt sudden to you,\
## somewhere along the way you had become a {s13}, and the whole world seemed to change around you.\
## You signed on with a mercenary company and travelled far from your home. The life you found was rough and\
## ready, marching to the beat of strange drums and learning unusual ways of fighting.\
## There were men who taught you how to wield any weapon you desired, and plenty of battles to hone your skills.\
## You were one of the charmed few who survived through every campaign in which you marched."),
##	(jump_to_menu,"mnu_start_character_4"),
##        ]),

      ("squire",[(eq,"$character_gender",tf_male)],"A squire.",[
        (assign,"$background_answer_3",cb3_squire),
      # (str_store_string,s14,"@{reg3?daughter:man}"),
      (str_store_string,s12,"@Though the distinction felt sudden to you,\
 somewhere along the way you had become a {reg3?woman:man}, and the whole world seemed to change around you.\
 When you were named squire to a noble at court, you practiced long hours with weapons,\
 learning how to deal out hard knocks and how to take them, too.\
 You were instructed in your obligations to your lord, and of your duties to those who might one day be your vassals.\
 But in addition to learning the chivalric ideal, you also learned about the less uplifting side\
 -- old warriors' stories of ruthless power politics, of betrayals and usurpations,\
 of men who used guile as well as valor to achieve their aims."),
	(jump_to_menu,"mnu_start_character_4"),
        ]),
      ("lady",[(eq,"$character_gender",tf_female)],"A lady-in-waiting.",[
        (assign,"$background_answer_3",cb3_lady_in_waiting),
      # (str_store_string,s14,"@{reg3?daughter:man}"),
      # (str_store_string,s13,"@{reg3?woman:man}"),
      (str_store_string,s12,"@Though the distinction felt sudden to you,\
 somewhere along the way you had become a {reg3?woman:man}, and the whole world seemed to change around you.\
 You joined the tightly-knit circle of women at court, ladies who all did proper ladylike things,\
 the wives and mistresses of noble men as well as maidens who had yet to find a husband.\
 However, even here you found politics at work as the ladies schemed for prominence and fought each other\
 bitterly to catch the eye of whatever unmarried man was in fashion at court.\
 You soon learned ways of turning these situations and goings-on to your advantage. With it came the\
 realisation that you yourself could wield great influence in the world, if only you applied yourself\
 with a little bit of subtlety."),
	(jump_to_menu,"mnu_start_character_4"),
        ]),
      ("troubadour",[],"A troubadour.",[
        (assign,"$background_answer_3",cb3_troubadour),
      # (str_store_string,s14,"@{reg3?daughter:man}"),
      # (str_store_string,s13,"@{reg3?woman:man}"),
      (str_store_string,s12,"@Though the distinction felt sudden to you,\
 somewhere along the way you had become a {reg3?woman:man}, and the whole world seemed to change around you.\
 You set out on your own with nothing except the instrument slung over your back and your own voice.\
 It was a poor existence, with many a hungry night when people failed to appreciate your play,\
 but you managed to survive on your music alone. As the years went by you became adept at playing the\
 drunken crowds in your taverns, and even better at talking anyone out of anything you wanted."),
	(jump_to_menu,"mnu_start_character_4"),
        ]),
      ("student",[],"A university student.",[
        (assign,"$background_answer_3",cb3_student),
      (str_store_string,s12,"@Though the distinction felt sudden to you,\
 somewhere along the way you had become a {reg3?woman:man}, and the whole world seemed to change around you.\
 You found yourself as a student in the university of one of the great cities,\
 where you studied theology, philosophy, and medicine.\
 But not all your lessons were learned in the lecture halls.\
 You may or may not have joined in with your fellows as they roamed the alleys in search of wine, women, and a good fight.\
 However, you certainly were able to observe how a broken jaw is set,\
 or how an angry townsman can be persuaded to set down his club and accept cash compensation for the destruction of his shop."),
	(jump_to_menu,"mnu_start_character_4"),
        ]),
      ("peddler",[],"A goods peddler.",[
        (assign,"$background_answer_3",cb3_peddler),
      # (str_store_string,s14,"@{reg3?daughter:man}"),
      # (str_store_string,s13,"@{reg3?woman:man}"),
      (str_store_string,s12,"@Though the distinction felt sudden to you,\
 somewhere along the way you had become a {reg3?woman:man}, and the whole world seemed to change around you.\
 Heeding the call of the open road, you travelled from village to village buying and selling what you could.\
 It was not a rich existence, but you became a master at haggling even the most miserly elders into\
 giving you a good price. Soon, you knew, you would be well-placed to start your own trading empire..."),
	(jump_to_menu,"mnu_start_character_4"),
        ]),
      ("craftsman",[],"A smith.",[
        (assign,"$background_answer_3", cb3_craftsman),
      # (str_store_string,s14,"@{reg3?daughter:man}"),
      # (str_store_string,s13,"@{reg3?woman:man}"),
      (str_store_string,s12,"@Though the distinction felt sudden to you,\
 somewhere along the way you had become a {reg3?woman:man}, and the whole world seemed to change around you.\
 You pursued a career as a smith, crafting items of function and beauty out of simple metal.\
 As time wore on you became a master of your trade, and fine work started to fetch fine prices.\
 With food in your belly and logs on your fire, you could take pride in your work and your growing reputation."),
	(jump_to_menu,"mnu_start_character_4"),
        ]),
      ("poacher",[],"A game poacher.",[
        (assign,"$background_answer_3", cb3_poacher),
      # (str_store_string,s14,"@{reg3?daughter:man}"),
      # (str_store_string,s13,"@{reg3?woman:man}"),
      (str_store_string,s12,"@Though the distinction felt sudden to you,\
 somewhere along the way you had become a {reg3?woman:man}, and the whole world seemed to change around you.\
 Dissatisfied with common men's desperate scrabble for coin, you took to your local lord's own forests\
 and decided to help yourself to its bounty, laws be damned. You hunted stags, boars and geese and sold\
 the precious meat under the table. You cut down trees right under the watchmen's noses and turned them into\
 firewood that warmed many freezing homes during winter. All for a few silvers, of course."),
	(jump_to_menu,"mnu_start_character_4"),
        ]),
##      ("preacher",[],"Itinerant preacher.",[
##        (assign,"$background_answer_3",6),
##      (str_store_string,s14,"@{reg3?daughter:man}"),
##      (str_store_string,s13,"@{reg3?woman:man}"),
##      (str_store_string,s12,"@Though the distinction felt sudden to you,\
## somewhere along the way you had become a {s13}, and the whole world seemed to change around you.\
## You packed your few belongings and went out into the world to spread the word of God. You preached to\
## anyone who would listen, and impressed many with the passion of your sermons. Though you had taken a vow\
## to remain in poverty through your itinerant years, you never lacked for food, drink or shelter; the\
## hospitality of the peasantry was always generous to a rising {s13} of God."),
##	(jump_to_menu,"mnu_start_character_4"),
##        ]),
      ("go_back",[],"Go back.",
       [(jump_to_menu,"mnu_start_character_2"),
        ]
       ),
    ]
  ),

  (
    "start_character_4",mnf_disable_all_keys,
    "{s12}^^But soon everything changed and you decided to strike out on your own as an adventurer. What made you take this decision was...",
    #Finally, what made you decide to strike out on your own as an adventurer?",
    "none",
    [],
    [
      ("revenge",[],"Personal revenge.",[
        (assign,"$background_answer_4", cb4_revenge),
      (str_store_string,s13,"@Only you know exactly what caused you to give up your old life and become an adventurer.\
 Still, it was not a difficult choice to leave, with the rage burning brightly in your heart.\
 You want vengeance. You want justice. What was done to you cannot be undone,\
 and these debts can only be paid in blood..."),
        (jump_to_menu,"mnu_choose_skill"),
        ]),
      ("death",[],"The loss of a loved one.",[
        (assign,"$background_answer_4",cb4_loss),
      (str_store_string,s13,"@Only you know exactly what caused you to give up your old life and become an adventurer.\
 All you can say is that you couldn't bear to stay, not with the memories of those you loved so close and so\
 painful. Perhaps your new life will let you forget,\
 or honour the name that you can no longer bear to speak..."),
        (jump_to_menu,"mnu_choose_skill"),
        ]),
      ("wanderlust",[],"Wanderlust.",[
        (assign,"$background_answer_4",cb4_wanderlust),
      (str_store_string,s13,"@Only you know exactly what caused you to give up your old life and become an adventurer.\
 You're not even sure when your home became a prison, when the familiar became mundane, but your dreams of\
 wandering have taken over your life. Whether you yearn for some faraway place or merely for the open road and the\
 freedom to travel, you could no longer bear to stay in the same place. You simply went and never looked back..."),
        (jump_to_menu,"mnu_choose_skill"),
        ]),
##      ("fervor",[],"Religious fervor.",[
##        (assign,"$background_answer_4",4),
##      (str_store_string,s13,"@Only you know exactly what caused you to give up your old life and become an adventurer.\
## Regardless, the intense faith burning in your soul would not let you find peace in any single place.\
## There were others in the world, souls to be washed in the light of God. Now you preach wherever you go,\
## seeking to bring salvation and revelation to the masses, be they faithful or pagan. They will all know the\
## glory of God by the time you're done..."),
##        (jump_to_menu,"mnu_choose_skill"),
##        ]),
      ("disown",[],"Being forced out of your home.",[
        (assign,"$background_answer_4",cb4_disown),
      (str_store_string,s13,"@Only you know exactly what caused you to give up your old life and become an adventurer.\
 However, you know you cannot go back. There's nothing to go back to. Whatever home you may have had is gone\
 now, and you must face the fact that you're out in the wide wide world. Alone to sink or swim..."),
        (jump_to_menu,"mnu_choose_skill"),
        ]),
     ("greed",[],"Lust for money and power.",[
        (assign,"$background_answer_4",cb4_greed),
      (str_store_string,s13,"@Only you know exactly what caused you to give up your old life and become an adventurer.\
 To everyone else, it's clear that you're now motivated solely by personal gain.\
 You want to be rich, powerful, respected, feared.\
 You want to be the one whom others hurry to obey.\
 You want people to know your name, and tremble whenever it is spoken.\
 You want everything, and you won't let anyone stop you from having it..."),
        (jump_to_menu,"mnu_choose_skill"),
        ]),
      ("go_back",[],"Go back.",
       [(jump_to_menu,"mnu_start_character_3"),
        ]
       ),
    ]
  ),


  (
    "choose_skill",mnf_disable_all_keys,
    "{s13}", 
    "none",
    [
   ## CC
   #(assign,"$current_string_reg",10),
	 #(assign, ":difficulty", 0),
	 
	 #(try_begin),
        #(eq, "$character_gender", tf_female),
        #(str_store_string, s14, "str_woman"),
        #(val_add, ":difficulty", 1),
	 #(else_try),	
        #(str_store_string, s14, "str_man"),
	 #(try_end),
	
	 #(try_begin),
        #(eq,"$background_type",cb_noble),
        #(str_store_string, s15, "str_noble"),
        #(val_sub, ":difficulty", 1),
	 #(else_try),
        #(str_store_string, s15, "str_common"),
	 #(try_end),
	 
	 #(try_begin),
        #(eq, ":difficulty", -1),
        #(str_store_string, s16, "str_may_find_that_you_are_able_to_take_your_place_among_calradias_great_lords_relatively_quickly"),
	 #(else_try),
        #(eq, ":difficulty", 0),
        #(str_store_string, s16, "str_may_face_some_difficulties_establishing_yourself_as_an_equal_among_calradias_great_lords"),
	 #(else_try),
        #(eq, ":difficulty", 1),
        #(str_store_string, s16, "str_may_face_great_difficulties_establishing_yourself_as_an_equal_among_calradias_great_lords"),
	 #(try_end),
	 ## CC
	],
    [
##      ("start_swordsman",[],"Swordsmanship.",[
##        (assign, "$starting_skill", 1),
##        (str_store_string, s14, "@You are particularly talented at swordsmanship."),
##        (jump_to_menu,"mnu_past_life_explanation"),
##        ]),
##      ("start_archer",[],"Archery.",[
##        (assign, "$starting_skill", 2),
##        (str_store_string, s14, "@You are particularly talented at archery."),
##        (jump_to_menu,"mnu_past_life_explanation"),
##        ]),
##      ("start_medicine",[],"Medicine.",[
##        (assign, "$starting_skill", 3),
##        (str_store_string, s14, "@You are particularly talented at medicine."),
##        (jump_to_menu,"mnu_past_life_explanation"),
##        ]),
      ("begin_adventuring",[],"Become an adventurer and ride to your destiny.",
        [
          ## CC
           #(call_script, "script_start_adventuring_raise_skills"), ## CC
           #(try_begin),
             #(eq, "$background_type", cb_noble),
             #(jump_to_menu, "mnu_auto_return"),
#normal_banner_begin
             #(start_presentation, "prsnt_banner_selection"),
#custom_banner_begin
#             (start_presentation, "prsnt_custom_banner"),
           #(else_try),
             #(change_screen_return, 0),
           #(try_end),
           (jump_to_menu,"mnu_banner_selection_for_noble"),
           ## CC
        ]),
      ("go_back_dot",[],"Go back.",[
        (jump_to_menu,"mnu_start_character_4"),
        ]),
    ]
  ),

## CC
  (
    "banner_selection_for_noble",mnf_disable_all_keys,
    "As a {s15} {s14}. You {s16}.", 
    "none", [
   (assign,"$current_string_reg",10),
	 (assign, ":difficulty", 0),
	 
	 (try_begin),
        (eq, "$character_gender", tf_female),
        (str_store_string, s14, "str_woman"),
        (val_add, ":difficulty", 1),
	 (else_try),	
        (str_store_string, s14, "str_man"),
	 (try_end),
	
	 (try_begin),
        (eq,"$background_type",cb_noble),
        (str_store_string, s15, "str_noble"),
        (val_sub, ":difficulty", 1),
	 (else_try),
        (str_store_string, s15, "str_common"),
	 (try_end),
	 
	 (try_begin),
        (eq, ":difficulty", -1),
        (str_store_string, s16, "str_may_find_that_you_are_able_to_take_your_place_among_calradias_great_lords_relatively_quickly"),
	 (else_try),
        (eq, ":difficulty", 0),
        (str_store_string, s16, "str_may_face_some_difficulties_establishing_yourself_as_an_equal_among_calradias_great_lords"),
	 (else_try),
        (eq, ":difficulty", 1),
        (str_store_string, s16, "str_may_face_great_difficulties_establishing_yourself_as_an_equal_among_calradias_great_lords"),
	 (try_end),
    ],
    [
    
      ("choosen_faction",[(neg|is_between, "$g_start_faction", npc_kingdoms_begin, npc_kingdoms_end)],"faction_selection...",
        [
          (start_presentation, "prsnt_faction_selection"),
        ]),
    
      ("continue",[(is_between, "$g_start_faction", npc_kingdoms_begin, npc_kingdoms_end)],"Continue...",
        [
           (call_script, "script_start_adventuring_raise_skills"), ## CC
           (try_begin),
             (eq, "$background_type", cb_noble),
             (jump_to_menu, "mnu_auto_return"),
#normal_banner_begin
             (start_presentation, "prsnt_banner_selection"),
#custom_banner_begin
#             (start_presentation, "prsnt_custom_banner"),
           (else_try),
             (change_screen_return, 0),
           (try_end),
        ]),
    ]
  ),
## CC

  (
    "past_life_explanation",mnf_disable_all_keys,
    "{s3}",
    "none",
    [
     (try_begin),
       (gt,"$current_string_reg",14),
       (assign,"$current_string_reg",10),
     (try_end),
     (str_store_string_reg,s3,"$current_string_reg"),
     (try_begin),
       (ge,"$current_string_reg",14),
       (str_store_string,s5,"@Back to the beginning..."),
     (else_try),
       (str_store_string,s5,"@View next segment..."),
     (try_end),
     ],
    [
      ("view_next",[],"{s5}",[
        (val_add,"$current_string_reg",1),
        (jump_to_menu, "mnu_past_life_explanation"),
        ]),
      ("continue",[],"Continue...",
       [
        ]),
      ("go_back_dot",[],"Go back.",[
        (jump_to_menu, "mnu_choose_skill"),
        ]),
    ]
  ),

  (
    "auto_return",0,
    "{!}This menu automatically returns to caller.",
    "none",
    [(change_screen_return, 0)],
    [
    ]
  ),
  ("morale_report",0,
   "{s1}",
   "none",
   [
     (call_script, "script_get_player_party_morale_values"),
     #(party_set_morale, "p_main_party", reg0),
     (assign, ":ideal_morale", reg1), ## CC

     (assign, ":target_morale", reg0),
     (assign, reg1, "$g_player_party_morale_modifier_party_size"),
     (try_begin),
       (gt, reg1, 0),
       (str_store_string, s2, "@{!} -"),
     (else_try),
       (str_store_string, s2, "str_space"),
     (try_end),

     (assign, reg2, "$g_player_party_morale_modifier_leadership"),
     (try_begin),
       (gt, reg2, 0),
       (str_store_string, s3, "@{!} +"),
     (else_try),
       (str_store_string, s3, "str_space"),
     (try_end),

     (try_begin),
       (gt, "$g_player_party_morale_modifier_no_food", 0),
       (assign, reg7, "$g_player_party_morale_modifier_no_food"),
       (str_store_string, s5, "@^No food:  -{reg7}"),
     (else_try),
       (str_store_string, s5, "str_space"),
     (try_end),
     (assign, reg3, "$g_player_party_morale_modifier_food"),
     (try_begin),
       (gt, reg3, 0),
       (str_store_string, s4, "@{!} +"),
     (else_try),
       (str_store_string, s4, "str_space"),
     (try_end),
 
     (try_begin),
       (gt, "$g_player_party_morale_modifier_debt", 0),
       (assign, reg6, "$g_player_party_morale_modifier_debt"),
       (str_store_string, s6, "@^Wage debt:  -{reg6}"),
     (else_try),
       (str_store_string, s6, "str_space"),
     (try_end),
##chenwz 
    (assign, reg11, "$g_player_party_morale_modifier_honor"),
    (try_begin),
      (ge, reg11, 0),
      (str_store_string, s9, "@{!} +"),
    (else_try),
      (str_store_string, s9, "str_space"),
    (try_end),
##chenwz
     (party_get_morale, reg5, "p_main_party"),
     (store_sub, reg4, reg5, ":target_morale"),
     (try_begin),
       (gt, reg4, 0),
       (str_store_string, s7, "@{!} +"),
     (else_try),
       (str_store_string, s7, "str_space"),
    (try_end),
    ## CC
    (store_sub, ":dif", ":ideal_morale", reg5),
    (store_skill_level, ":skill", "skl_leadership", "trp_player"),
    (try_begin),
      (gt, ":dif", 0),
      (store_add, ":morale_change_factor", 20, ":skill"),
    (else_try),
      (store_sub, ":morale_change_factor", 20, ":skill"),
    (try_end),
    (store_mul, ":dif_to_add", ":dif", ":morale_change_factor"),
    (val_div, ":dif_to_add", 100),
    (store_mul, ":dif_to_add_correction", ":dif_to_add", 100),
    (val_div, ":dif_to_add_correction", ":morale_change_factor"),
    (try_begin),#finding ceiling of the value
      (neq, ":dif_to_add_correction", ":dif"),
      (try_begin),
        (gt, ":dif", 0),
        (val_add, ":dif_to_add", 1),
      (else_try),
        (val_sub, ":dif_to_add", 1),
      (try_end),
    (try_end),
    (store_add, reg10, reg5, ":dif_to_add"),
    (val_clamp, reg10, 0, 100),
    (store_sub, reg8, reg10, reg5),
    (try_begin),
      (gt, reg8, 0),
      (str_store_string, s8, "@ +"),
    (else_try),
      (str_store_string, s8, "@ "),
    (try_end),
    (str_store_string, s1, "@Current party morale is {reg5}.^Current party morale modifiers are:^^Base morale:  +50^Party size: {s2}{reg1}^Leadership: {s3}{reg2}^Honor: {s9}{reg11}^Food variety: {s4}{reg3}{s5}{s6}^Recent events: {s7}{reg4}^TOTAL:  {reg5}^^Morale value to change: {s8}{reg8}^Prospective party morale: {reg10}^^^"),
    ## CC
     
        
     (try_for_range, ":kingdom_no", npc_kingdoms_begin, npc_kingdoms_end),
       (faction_get_slot, ":faction_morale", ":kingdom_no",  slot_faction_morale_of_player_troops),
       (val_div, ":faction_morale", 100),
       (neq, ":faction_morale", 0),
       (assign, reg6, ":faction_morale"),
       (str_store_faction_name, s9, ":kingdom_no"),
      (str_store_string, s1, "@{s1}Extra morale for {s9} troops : {reg6}^"),
     (try_end),        
    ],
    [
      ("continue",[],"Continue...",
      [
        (jump_to_menu, "mnu_reports"),
      ]),
    ]
  ),


  ("courtship_relations",0,
   "{s1}",
   "none",
   [(str_store_string, s1, "str_courtships_in_progress_"),
    (try_for_range, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
        (troop_slot_eq, ":lady", slot_troop_met, 2),
        (call_script, "script_troop_get_relation_with_troop", "trp_player", ":lady"),
        (gt, reg0, 0),
        (assign, reg3, reg0),
        
        (str_store_troop_name, s2, ":lady"),
        
        (store_current_hours, ":hours_since_last_visit"),
        (troop_get_slot, ":last_visit_hour", ":lady", slot_troop_last_talk_time),
        (val_sub, ":hours_since_last_visit", ":last_visit_hour"),
        (store_div, ":days_since_last_visit", ":hours_since_last_visit", 24),
        (assign, reg4, ":days_since_last_visit"),
        
        (str_store_string, s1, "str_s1_s2_relation_reg3_last_visit_reg4_days_ago"),
	(try_end),
	
	(str_store_string, s1, "str_s1__poems_known"),
	(try_begin),
         (gt, "$allegoric_poem_recitations", 0),
         (str_store_string, s1, "str_s1_storming_the_castle_of_love_allegoric"),
	(try_end),
	(try_begin),
         (gt, "$tragic_poem_recitations", 0),
         (str_store_string, s1, "str_s1_kais_and_layali_tragic"),
	(try_end),
	(try_begin),
         (gt, "$comic_poem_recitations", 0),
         (str_store_string, s1, "str_s1_a_conversation_in_the_garden_comic"),
	(try_end),
	(try_begin),
         (gt, "$heroic_poem_recitations", 0),
         (str_store_string, s1, "str_s1_helgered_and_kara_epic"),
	(try_end),
	(try_begin),
         (gt, "$mystic_poem_recitations", 0),
         (str_store_string, s1, "str_s1_a_hearts_desire_mystic"),
	(try_end),
	
    ],
    [
      ("continue",[],"Continue...",
       [(jump_to_menu, "mnu_reports"),
        ]
       ),
      ]
  ),


  ("lord_relations",0,
   "{s1}",
   "none",
   [   
    (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
        (troop_set_slot, ":active_npc", slot_troop_temp_slot, 0),
	(try_end),
	
	(str_clear, s1),
    (try_for_range, ":unused", active_npcs_begin, active_npcs_end),
        (assign, ":score_to_beat", -100),
        (assign, ":best_relation_remaining_npc", -1),
        (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
            (troop_slot_eq, ":active_npc", slot_troop_temp_slot, 0),
            (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (troop_slot_ge, ":active_npc", slot_troop_met, 1),
	
            (call_script, "script_troop_get_player_relation", ":active_npc"),
            (assign, ":relation_with_player", reg0),
            (ge, ":relation_with_player", ":score_to_beat"),
            
            (assign, ":score_to_beat", ":relation_with_player"),
            (assign, ":best_relation_remaining_npc", ":active_npc"),
        (try_end),
        (gt, ":best_relation_remaining_npc", -1),
        
        (str_store_troop_name_link, s4, ":best_relation_remaining_npc"),
        (assign, reg4, ":score_to_beat"),
        (str_store_string, s1, "@{!}{s1}^{s4}: {reg4}"),
        (troop_set_slot, ":best_relation_remaining_npc", slot_troop_temp_slot, 1),
	(try_end),
   
	
    ],
    [
      ("continue",[],"Continue...",
       [(jump_to_menu, "mnu_reports"),
        ]
       ),
      ]
  ),


  
  ("companion_report",0,
   "{s7}{s1}",
   "none",
   [
   (str_clear, s1),
   (str_store_string, s7, "str_no_companions_in_service"),
   (set_background_mesh, "mesh_pic_book_1"),
   (try_begin),
	(troop_get_slot, ":spouse_or_betrothed", "trp_player", slot_troop_spouse),
	(try_begin),
        (troop_get_type, ":is_female", "trp_player"),
        (this_or_next|eq, ":is_female", tf_female_elf),
        (eq, ":is_female", 1),
        (str_store_string, s8, "str_husband"),
	(else_try),
        (str_store_string, s8, "str_wife"),
	(try_end),
	
	(try_begin),
        (le, ":spouse_or_betrothed", 0),
        (troop_get_slot, ":spouse_or_betrothed", "trp_player", slot_troop_betrothed),
        (str_store_string, s8, "str_betrothed"),
	(try_end),	
	(gt, ":spouse_or_betrothed", 0),	
        
	(str_store_troop_name, s4, ":spouse_or_betrothed"),
	(troop_get_slot, ":cur_center", ":spouse_or_betrothed", slot_troop_cur_center),
	(try_begin),
        (is_between, ":cur_center", centers_begin, centers_end),
        (str_store_party_name, s5, ":cur_center"),
	(else_try),
        (troop_slot_eq, ":spouse_or_betrothed", slot_troop_occupation, slto_kingdom_hero),
        (str_store_string, s5, "str_leading_party"),
	(else_try),	
        (str_store_string, s5, "str_whereabouts_unknown"),
    (try_end),
	(str_store_string, s3, "str_s4_s8_s5"),
	(str_store_string, s2, s1),
	(str_store_string, s1, "str_s2_s3"),
	
   (try_end),
   
   
   (try_begin),
    (ge, "$cheat_mode", 1),
	(ge, "$npc_to_rejoin_party", 0),
    (str_store_troop_name, s5, "$npc_to_rejoin_party"),
	(str_store_string, s1, "@{!}DEBUG -- {s1}^NPC in rejoin queue: {s5}^"),
   (try_end),
   
   
   (try_for_range, ":companion", companions_begin, companions_end),
        (str_clear, s2),
        (str_clear, s3),

        (try_begin),
            (troop_get_slot, ":days_left", ":companion", slot_troop_days_on_mission),

            (troop_slot_eq, ":companion", slot_troop_occupation, slto_player_companion),

            	
            (str_store_troop_name, s4, ":companion"),

            (try_begin),
            	(troop_slot_eq, ":companion", slot_troop_current_mission, npc_mission_kingsupport),
            	(str_store_string, s8, "str_gathering_support"),
            	(try_begin),
                    (eq, ":days_left", 1),
                    (str_store_string, s5, "str_expected_back_imminently"),
            	(else_try),	
                    (assign, reg3, ":days_left"),
                    (str_store_string, s5, "str_expected_back_in_approximately_reg3_days"),
            	(try_end),
            (else_try),
            	(troop_slot_eq, ":companion", slot_troop_current_mission, npc_mission_gather_intel),
            	(troop_get_slot, ":town_with_contacts", ":companion", slot_troop_town_with_contacts),
            	(str_store_party_name, s11, ":town_with_contacts"),
            	
            	(str_store_string, s8, "str_gathering_intelligence"),
            	(try_begin),
                    (eq, ":days_left", 1),
                    (str_store_string, s5, "str_expected_back_imminently"),
            	(else_try),	
                    (assign, reg3, ":days_left"),
                    (str_store_string, s5, "str_expected_back_in_approximately_reg3_days"),
            	(try_end),
            (else_try),	#This covers most diplomatic missions
            	
            	(troop_slot_ge, ":companion", slot_troop_current_mission, npc_mission_peace_request),
            	(neg|troop_slot_ge, ":companion", slot_troop_current_mission, 8),

            	(troop_get_slot, ":faction", ":companion", slot_troop_mission_object),
            	(str_store_faction_name, s9, ":faction"),
            	(str_store_string, s8, "str_diplomatic_embassy_to_s9"),
            	(try_begin),
                    (eq, ":days_left", 1),
                    (str_store_string, s5, "str_expected_back_imminently"),
            	(else_try),	
                    (assign, reg3, ":days_left"),
                    (str_store_string, s5, "str_expected_back_in_approximately_reg3_days"),
            	(try_end),
            (else_try),
            	(eq, ":companion", "$g_player_minister"),
            	(str_store_string, s8, "str_serving_as_minister"),
            	(try_begin),
                    (is_between, "$g_player_court", centers_begin, centers_end),
                    (str_store_party_name, s9, "$g_player_court"),
                    (str_store_string, s5, "str_in_your_court_at_s9"),
            	(else_try),	
                    (str_store_string, s5, "str_whereabouts_unknown"),
            	(try_end),	
            (else_try),
            	(main_party_has_troop, ":companion"),
            	(str_store_string, s8, "str_under_arms"),
            	(str_store_string, s5, "str_in_your_party"),
            (else_try),	
            	(troop_slot_eq, ":companion", slot_troop_current_mission, npc_mission_rejoin_when_possible),
            	(str_store_string, s8, "str_attempting_to_rejoin_party"),
            	(str_store_string, s5, "str_whereabouts_unknown"),
            (else_try),	#Companions who are in a center
            	(troop_slot_ge, ":companion", slot_troop_cur_center, 1),

            	(str_store_string, s8, "str_separated_from_party"),
	        (else_try), #Excludes companions who have occupation = retirement
                (try_begin),
                  (check_quest_active, "qst_lend_companion"),
                  (quest_slot_eq, "qst_lend_companion", slot_quest_target_troop, ":companion"),
                  (str_store_string, s8, "@On loan,"), 
                (else_try),
                  (check_quest_active, "qst_lend_surgeon"),
                  (quest_slot_eq, "qst_lend_surgeon", slot_quest_target_troop, ":companion"),
                  (str_store_string, s8, "@On loan,"), 
                (else_try),
            	  (troop_set_slot, ":companion", slot_troop_current_mission, npc_mission_rejoin_when_possible),
                  (str_store_string, s8, "str_attempting_to_rejoin_party"),                  
                (try_end),
                
	        	(str_store_string, s5, "str_whereabouts_unknown"),            	

            	(try_begin),
                    (ge, "$cheat_mode", 1),
                    (troop_get_slot, reg2, ":companion", slot_troop_current_mission),
                    (troop_get_slot, reg3, ":companion", slot_troop_days_on_mission),
                    (troop_get_slot, reg4, ":companion", slot_troop_prisoner_of_party),
                    (troop_get_slot, reg4, ":companion", slot_troop_playerparty_history),
                    
                    (display_message, "@{!}DEBUG: {s4} current mission: {reg2}, days on mission: {reg3}, prisoner: {reg4}, pphistory: {reg5}"),
            	(try_end),
            (try_end),	
            
            (str_store_string, s3, "str_s4_s8_s5"),
            	
            (str_store_string, s2, s1),
            (str_store_string, s1, "str_s2_s3"),

            (str_clear, s7), #"no companions in service"
        (else_try),
            (neg|troop_slot_eq, ":companion", slot_troop_occupation, slto_kingdom_hero),
            (troop_slot_ge, ":companion", slot_troop_prisoner_of_party, centers_begin),

            (str_store_troop_name, s4, ":companion"),
            (str_store_string, s8, "str_missing_after_battle"),
            (str_store_string, s5, "str_whereabouts_unknown"),
            
            (str_store_string, s3, "str_s4_s8_s5"),
            (str_store_string, s2, s1),
            (str_store_string, s1, "str_s2_s3"),            
            (str_clear, s7), #"no companions in service"
            
        (try_end),
        
   (try_end),
   

    ],
    [
      ("continue",[],"Continue...",
       [(jump_to_menu, "mnu_reports"),
        ]
       ),
      ]
  ),
  
  
  
  
  
  ("faction_orders",0,
   "{!}{s9}",
   "none",
   [
    (str_clear, s9),
    (store_current_hours, ":cur_hours"),
    (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (neq, ":faction_no", "fac_player_supporters_faction"),
       
        (faction_get_slot, ":old_faction_ai_state", ":faction_no", slot_faction_ai_state),
       
	    (try_begin),
            (faction_get_slot, ":faction_marshal", ":faction_no", slot_faction_marshall),
            (gt, ":faction_marshal", -1),
            (assign, ":faction_ai_decider", ":faction_marshal"),
	    (else_try),
            (faction_get_slot, ":faction_ai_decider", ":faction_no", slot_faction_leader),
	    (try_end),
	 

        #(*1) these two lines moved to here from (*2)
        (call_script, "script_npc_decision_checklist_faction_ai_alt", ":faction_ai_decider"),
	    (assign, ":new_strategy", reg0),
	    (str_store_string, s26, s14),
	   
        #(3*) these three lines moved to here from (*4)
        (faction_get_slot, ":faction_ai_state", ":faction_no", slot_faction_ai_state),
        (faction_get_slot, ":faction_ai_object", ":faction_no", slot_faction_ai_object),
        (faction_get_slot, ":faction_marshall", ":faction_no", slot_faction_marshall),

        (faction_get_slot, ":faction_ai_offensive_max_followers", ":faction_no", slot_faction_ai_offensive_max_followers),
        (str_store_faction_name, s10, ":faction_no"),
	   
	   (try_begin),
            (faction_get_slot, ":faction_issue", ":faction_no", slot_faction_political_issue),
           
            (try_begin),
            	(eq, ":faction_issue", 1),
            	(str_store_string, s11, "@Appoint next marshal"),
            (else_try),
            	(is_between, ":faction_issue", centers_begin, centers_end),
            	(str_store_party_name, s12, ":faction_issue"),
            	(str_store_string, s11, "@Award {s12} as fief"),
            (else_try),	
            	(eq, ":faction_issue", 0),
            	(str_store_string, s11, "@None"),
            (else_try),	
            	(assign, reg3, ":faction_issue"),
            	(str_store_string, s11, "@{!}Error ({reg3})"),
            (try_end),
            
            (store_current_hours, reg4),
            (faction_get_slot, ":faction_issue_put_on_agenda", ":faction_no", slot_faction_political_issue_time),
            (val_sub, reg4, ":faction_issue_put_on_agenda"),

	        (str_store_string, s10, "@{!}{s10}^Faction political issue: {s11}"),
            (try_begin),
            	(faction_slot_ge, ":faction_no", slot_faction_political_issue, 1),
            	(str_store_string, s10, "@{!}{s10} (on agenda {reg4} hours)"),
            (try_end),	
	   (try_end),	   
	   
	   
       (assign, reg2, ":faction_ai_offensive_max_followers"),
       (try_begin),
         (eq, ":faction_ai_state", sfai_default),
         (str_store_string, s11, "@{!}Defending"),
       (else_try),
         (eq, ":faction_ai_state", sfai_gathering_army),
         (str_store_string, s11, "@{!}Gathering army"),
       (else_try),
         (eq, ":faction_ai_state", sfai_attacking_center),
         (str_store_party_name, s11, ":faction_ai_object"),
         (str_store_string, s11, "@{!}Besieging {s11}"),
       (else_try),
         (eq, ":faction_ai_state", sfai_raiding_village),
         (str_store_party_name, s11, ":faction_ai_object"),
         (str_store_string, s11, "@{!}Raiding {s11}"),
       (else_try),
         (eq, ":faction_ai_state", sfai_attacking_enemy_army),
         (str_store_party_name, s11, ":faction_ai_object"),
         (str_store_string, s11, "str_attacking_enemy_army_near_s11"),
       (else_try),
         (eq, ":faction_ai_state", sfai_feast),
         (str_store_party_name, s11, ":faction_ai_object"),
         (str_store_string, s11, "str_holding_feast_at_s11"),
	   (else_try), 
         (eq, ":faction_ai_state", sfai_attacking_enemies_around_center),
         (str_store_party_name, s11, ":faction_ai_object"),
         (str_store_string, s11, "@{!}Attacking enemies around {s11}"),
       (else_try),
	     (assign, reg4, ":faction_ai_state"),
         (str_store_string, s11, "str_sfai_reg4"),
	   (try_end),

       (try_begin),
         (lt, ":faction_marshall", 0),
         (str_store_string, s12, "@No one"),
       (else_try),
         (str_store_troop_name, s12, ":faction_marshall"),
         (troop_get_slot, reg21, ":faction_marshall", slot_troop_controversy),
         (str_store_string, s12, "@{!}{s12} (controversy: {reg21})"),
       (try_end),

	   (try_for_parties, ":screen_party"),
            (party_slot_eq, ":screen_party", slot_party_ai_state, spai_screening_army),
            (store_faction_of_party, ":screen_party_faction", ":screen_party"),
            (eq, ":screen_party_faction", ":faction_no"),
            
            (str_store_party_name, s38, ":screen_party"),
            (str_store_string, s12, "@{!}{s12}^Screening party: {s38}"),
	   (try_end),
	   
       #(*2) these two lines moved to up (look *1)
	   #(call_script, "script_npc_decision_checklist_faction_ai", ":faction_no"),
	   #(assign, ":new_strategy", reg0),

       #(try_begin),
       #  (this_or_next|eq, ":new_strategy", sfai_default),
       #  (eq, ":new_strategy", sfai_feast),
	   #        
	   #  (store_current_hours, ":hours"),
	   #  (faction_set_slot, ":faction_no", slot_faction_ai_last_rest_time, ":hours"),        
	   #(try_end),
      (try_begin),      
         #new condition to rest, (a faction's new strategy should be feast or default) and (":hours_at_current_state" > 20)
         (this_or_next|eq, ":new_strategy", sfai_default),
         (eq, ":new_strategy", sfai_feast),                            
              
         (store_current_hours, ":hours_at_current_state"),
         (faction_get_slot, ":current_state_started", ":faction_no", slot_faction_ai_current_state_started), 
         (val_sub, ":hours_at_current_state", ":current_state_started"),
         (ge, ":hours_at_current_state", 18),
              
         (store_current_hours, ":hours"),       
         (faction_set_slot, ":faction_no", slot_faction_ai_last_rest_time, ":hours"),        
       (try_end),     

        #Change of strategy
        (try_begin),
          (neq, ":new_strategy", ":old_faction_ai_state"),
            	
          (store_current_hours, ":hours"),
          (faction_set_slot, ":faction_no", slot_faction_ai_current_state_started, ":hours"),
        (try_end),

	   (call_script, "script_evaluate_realm_stability", ":faction_no"),
	   (assign, ":disgruntled_lords", reg0),
	   (assign, ":restless_lords", reg1),
	   
	   (faction_get_slot, ":last_feast_ended", ":faction_no", slot_faction_last_feast_start_time),
	   (store_sub, ":hours_since_last_feast", ":cur_hours", ":last_feast_ended"),
	   (val_sub, ":hours_since_last_feast", 72),

	   (faction_get_slot, ":current_state_started", ":faction_no", slot_faction_ai_current_state_started),
	   (store_sub, ":hours_at_current_state", ":cur_hours", ":current_state_started"),

       (faction_get_slot, ":faction_ai_last_offensive_time", ":faction_no", slot_faction_last_offensive_concluded),
       (store_sub, ":hours_since_last_offensive", ":cur_hours", ":faction_ai_last_offensive_time"),

       (faction_get_slot, ":faction_ai_last_rest", ":faction_no", slot_faction_ai_last_rest_time),
       (store_sub, ":hours_since_last_rest", ":cur_hours", ":faction_ai_last_rest"),

       (faction_get_slot, ":faction_ai_last_decisive_event", ":faction_no", slot_faction_ai_last_decisive_event),
       (store_sub, ":hours_since_last_decisive_event", ":cur_hours", ":faction_ai_last_decisive_event"),
	   
	   (assign, reg3, ":hours_at_current_state"),
	   (assign, reg4, ":hours_since_last_offensive"),
	   (assign, reg5, ":hours_since_last_feast"),
	   
	   (assign, reg7, ":disgruntled_lords"),
	   (assign, reg8, ":restless_lords"),
	   (assign, reg9, ":hours_since_last_rest"),
	   (assign, reg10, ":hours_since_last_decisive_event"),
	   (str_store_string, s14, s26),
	   
       (str_store_string, s9, "str_s9s10_current_state_s11_hours_at_current_state_reg3_current_strategic_thinking_s14_marshall_s12_since_the_last_offensive_ended_reg4_hours_since_the_decisive_event_reg10_hours_since_the_last_rest_reg9_hours_since_the_last_feast_ended_reg5_hours_percent_disgruntled_lords_reg7_percent_restless_lords_reg8__"),	   
     (try_end),
	 	 	 
     (try_begin),
       (neg|is_between, "$g_cheat_selected_faction", kingdoms_begin, kingdoms_end),
       (call_script, "script_get_next_active_kingdom", kingdoms_end),
       (assign, "$g_cheat_selected_faction", reg0),
     (try_end),
     (str_store_faction_name, s10, "$g_cheat_selected_faction"),
     (str_store_string, s9, "@Selected faction is: {s10}^^{s9}"),
    ],
    [
      ("faction_orders_next_faction", [],"{!}Select next faction.",
       [
         (call_script, "script_get_next_active_kingdom", "$g_cheat_selected_faction"),
         (assign, "$g_cheat_selected_faction", reg0),
         (jump_to_menu, "mnu_faction_orders"),
        ]
       ),
      ("faction_orders_political_collapse", [],"{!}CHEAT - Cause all lords in faction to fall out with their liege.",
       [
	   (try_for_range, ":lord", active_npcs_begin, active_npcs_end),
            (troop_slot_eq, ":lord", slot_troop_occupation, slto_kingdom_hero),
            (store_faction_of_troop, ":troop_faction", ":lord"),
            (eq, ":troop_faction", "$g_cheat_selected_faction"),
            (faction_get_slot, ":faction_liege", ":troop_faction", slot_faction_leader),
            (call_script, "script_troop_change_relation_with_troop", ":lord", ":faction_liege", -200),
	   (try_end),
	   ]
       ),
      ("faction_orders_defend", [],"{!}Force defend.",
       [
         (faction_set_slot, "$g_cheat_selected_faction", slot_faction_ai_state, sfai_default),
         (faction_set_slot, "$g_cheat_selected_faction", slot_faction_ai_object, -1),
         (jump_to_menu, "mnu_faction_orders"),
        ]
       ),
      ("faction_orders_feast", [],"{!}Force feast.",
       [

         (assign, ":location_high_score", 0),
         (try_for_range, ":location", walled_centers_begin, walled_centers_end),
            (neg|party_slot_ge, ":location", slot_center_is_besieged_by, 1),
            (store_faction_of_party, ":location_faction", ":location"),
            (eq, ":location_faction", "$g_cheat_selected_faction"),
            (party_get_slot, ":location_lord", ":location", slot_town_lord),
            (troop_get_slot, ":location_score", ":location_lord", slot_troop_renown),
            (store_random_in_range, ":random", 0, 1000), #will probably be king or senior lord
            (val_add, ":location_score", ":random"),
            (gt, ":location_score", ":location_high_score"),
            (assign, ":location_high_score", ":location_score"),
            (assign, ":location_feast", ":location"),
         (try_end),         

         (try_begin),
            (gt, ":location_feast", centers_begin),
            (faction_set_slot, "$g_cheat_selected_faction", slot_faction_ai_state, sfai_feast),
            (faction_set_slot, "$g_cheat_selected_faction", slot_faction_ai_object, ":location_feast"),
            (try_begin),
              (eq, "$g_player_eligible_feast_center_no", ":location_feast"),
              (assign, "$g_player_eligible_feast_center_no", -1),
            (try_end),
         
            (store_current_hours, ":hours"),
            (faction_set_slot, "$g_cheat_selected_faction", slot_faction_last_feast_start_time, ":hours"),
         (try_end),
            
	     (jump_to_menu, "mnu_faction_orders"),
        ]
       ),
	   
	   
      ("faction_orders_gather", [],"{!}Force gather army.",
       [
         (store_current_hours, ":cur_hours"),
         (faction_set_slot, "$g_cheat_selected_faction", slot_faction_ai_state, sfai_gathering_army),
         (faction_set_slot, "$g_cheat_selected_faction", slot_faction_last_offensive_concluded, ":cur_hours"),
         (faction_set_slot, "$g_cheat_selected_faction", slot_faction_ai_offensive_max_followers, 1),
         (faction_set_slot, "$g_cheat_selected_faction", slot_faction_ai_object, -1),
         (jump_to_menu, "mnu_faction_orders"),
        ]
       ),
      ("faction_orders_increase_time", [],"{!}Increase last offensive time by 24 hours.",
       [
         (faction_get_slot, ":faction_ai_last_offensive_time", "$g_cheat_selected_faction", slot_faction_last_offensive_concluded),
         (val_sub, ":faction_ai_last_offensive_time", 24),
         (faction_set_slot, "$g_cheat_selected_faction", slot_faction_last_offensive_concluded, ":faction_ai_last_offensive_time"),
         (jump_to_menu, "mnu_faction_orders"),
        ]
       ),
      ("faction_orders_rethink", [],"{!}Force rethink.",
       [
         (call_script, "script_init_ai_calculation"),
         (call_script, "script_decide_faction_ai", "$g_cheat_selected_faction"),
         (jump_to_menu, "mnu_faction_orders"),
        ]
       ),
      ("faction_orders_rethink_all", [],"{!}Force rethink for all factions.",
       [
         (call_script, "script_recalculate_ais"),
         (jump_to_menu, "mnu_faction_orders"),
        ]
       ),

	   ("enable_alt_ai",[(eq, "$g_use_alternative_ai", 2),],"{!}CHEAT! - enable alternative ai",
       [
	   (assign, "$g_use_alternative_ai", 1),
	   (jump_to_menu, "mnu_faction_orders"),
       ]
       ),	   

	   ("disable_alt_ai",[(eq, "$g_use_alternative_ai", 2)],"{!}CHEAT! - disable alternative ai",
       [
	   (assign, "$g_use_alternative_ai", 0),
	   (jump_to_menu, "mnu_faction_orders"),
       ]
       ),	   
	   
      ("faction_orders_init_econ", [],"{!}Initialize economic stats.",
       [
         (call_script, "script_initialize_economic_information"),
         (jump_to_menu, "mnu_faction_orders"),
        ]
       ),
	   
	   
	   
      ("go_back_dot",[],"{!}Go back.",
       [(jump_to_menu, "mnu_camp_cheat"),
        ]
       ),
      ]
  ),

  
  ("character_report",0,
   "{s9}",
   "none",
   [
    (set_background_mesh, "mesh_pic_book_1"),
   ## CC courtship_relations
    (str_store_string, s1, "str_courtships_in_progress_"),
    (try_for_range, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
        (troop_slot_eq, ":lady", slot_troop_met, 2),
        (call_script, "script_troop_get_relation_with_troop", "trp_player", ":lady"),
        (gt, reg0, 0),
        (assign, reg3, reg0),
        
        (str_store_troop_name, s2, ":lady"),
        
        (store_current_hours, ":hours_since_last_visit"),
        (troop_get_slot, ":last_visit_hour", ":lady", slot_troop_last_talk_time),
        (val_sub, ":hours_since_last_visit", ":last_visit_hour"),
        (store_div, ":days_since_last_visit", ":hours_since_last_visit", 24),
        (assign, reg4, ":days_since_last_visit"),
        
        (str_store_string, s1, "str_s1_s2_relation_reg3_last_visit_reg4_days_ago"),
	(try_end),
	
	(str_store_string, s1, "str_s1__poems_known"),
	(try_begin),
         (gt, "$allegoric_poem_recitations", 0),
         (str_store_string, s1, "str_s1_storming_the_castle_of_love_allegoric"),
	(try_end),
	(try_begin),
         (gt, "$tragic_poem_recitations", 0),
         (str_store_string, s1, "str_s1_kais_and_layali_tragic"),
	(try_end),
	(try_begin),
         (gt, "$comic_poem_recitations", 0),
         (str_store_string, s1, "str_s1_a_conversation_in_the_garden_comic"),
	(try_end),
	(try_begin),
         (gt, "$heroic_poem_recitations", 0),
         (str_store_string, s1, "str_s1_helgered_and_kara_epic"),
	(try_end),
	(try_begin),
         (gt, "$mystic_poem_recitations", 0),
         (str_store_string, s1, "str_s1_a_hearts_desire_mystic"),
	(try_end),
   ## CC courtship_relations
    ## CC
   
    (try_begin),
      # (gt, "$g_player_reading_book", 0),
      # (player_has_item, "$g_player_reading_book"),
      (troop_get_slot, "$g_player_reading_book", "trp_player", slot_troop_current_reading_book),
      (is_between, "$g_player_reading_book", readable_books_begin, readable_books_end), 
      (str_store_item_name, s8, "$g_player_reading_book"),
      (str_store_string, s9, "@You are currently reading {s8}."),
    (else_try),
      (str_store_string, s9, "@You are not reading any books."),
    (try_end),
    (assign, ":num_friends", 0),
    (assign, ":num_enemies", 0),
    (str_store_string, s6, "@none"),
    (str_store_string, s8, "@none"),
    (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
	  (this_or_next|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_inactive_pretender),
	  (call_script, "script_troop_get_player_relation", ":troop_no"),
      (assign, ":player_relation", reg0),
      #(troop_get_slot, ":player_relation", ":troop_no", slot_troop_player_relation),
      (try_begin),
        (gt, ":player_relation", 20),
        (try_begin),
          (eq, ":num_friends", 0),
          (str_store_troop_name, s8, ":troop_no"),
        (else_try),
          (eq, ":num_friends", 1),
          (str_store_troop_name, s7, ":troop_no"),
          (str_store_string, s8, "@{s7} and {s8}"),
        (else_try),
          (str_store_troop_name, s7, ":troop_no"),
          (str_store_string, s8, "@{!}{s7}, {s8}"),
        (try_end),
        (val_add, ":num_friends", 1),
      (else_try),
        (lt, ":player_relation", -20),
        (try_begin),
          (eq, ":num_enemies", 0),
          (str_store_troop_name, s6, ":troop_no"),
        (else_try),
          (eq, ":num_enemies", 1),
          (str_store_troop_name, s5, ":troop_no"),
          (str_store_string, s6, "@{s5} and {s6}"),
        (else_try),
          (str_store_troop_name, s5, ":troop_no"),
          (str_store_string, s6, "@{!}{s5}, {s6}"),
        (try_end),
        (val_add, ":num_enemies", 1),
      (try_end),
    (try_end),
	
	#lord recruitment changes begin
	(str_clear, s12),
	(try_begin),
        (gt, "$player_right_to_rule", 0),
        (assign, reg12, "$player_right_to_rule"),
        (str_store_string, s12, "str__right_to_rule_reg12"),
	(try_end),
	
	(str_clear, s15),
	(try_begin),
        (this_or_next|gt, "$claim_arguments_made", 0),
        (this_or_next|gt, "$ruler_arguments_made", 0),
        (this_or_next|gt, "$victory_arguments_made", 0),
        (this_or_next|gt, "$lords_arguments_made", 0),
        (eq, 1, 0),
        
        (assign, reg3, "$claim_arguments_made"),
        (assign, reg4, "$ruler_arguments_made"),
        (assign, reg5, "$victory_arguments_made"),
        (assign, reg6, "$lords_arguments_made"),
        (assign, reg7, "$benefit_arguments_made"),

        (str_store_string, s15, "str_political_arguments_made_legality_reg3_rights_of_lords_reg4_unificationpeace_reg5_rights_of_commons_reg6_fief_pledges_reg7"),
	(try_end),
	
	#lord recruitment changes begin
	
    (assign, reg3, "$player_honor"),
    (troop_get_slot, reg2, "trp_player", slot_troop_renown),

    (str_store_string, s9, "str_renown_reg2_honour_rating_reg3s12_friends_s8_enemies_s6_s9"),
	
    (call_script, "script_get_number_of_hero_centers", "trp_player"),
    (assign, ":no_centers", reg0),
    (try_begin),
      (gt, ":no_centers", 0),
      (try_for_range, ":i_center", 0, ":no_centers"),
        (call_script, "script_troop_get_leaded_center_with_index", "trp_player", ":i_center"),
        (assign, ":cur_center", reg0),
        (try_begin),
          (eq, ":i_center", 0),
          (str_store_party_name, s8, ":cur_center"),
        (else_try),
          (eq, ":i_center", 1),
          (str_store_party_name, s7, ":cur_center"),
          (str_store_string, s8, "@{s7} and {s8}"),
        (else_try),
          (str_store_party_name, s7, ":cur_center"),
          (str_store_string, s8, "@{!}{s7}, {s8}"),
        (try_end),
      (try_end),
      (str_store_string, s9, "@Your estates are: {s8}.^{s9}"),
    (try_end),
    (try_begin),
      (gt, "$players_kingdom", 0),
              
      (str_store_faction_name, s8, "$players_kingdom"),
      (try_begin),
        (this_or_next|is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
        (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
        #(str_store_string, s9, "@You are a lord of {s8}.^{s9}"),
        (str_store_string, s9, "str_you_are_a_lord_lady_of_s8_s9"),
      (else_try),  
        (str_store_string, s9, "str_you_are_king_queen_of_s8_s9"),      
      (try_end),
      
    (try_end),
    ],
    [

	#lord recruitment changes begin

	("continue",[(eq,"$cheat_mode",1)],"{!}CHEAT! - increase Right to Rule",
       [
	   (val_add, "$player_right_to_rule", 10),
	   (jump_to_menu, "mnu_character_report"),
       ]
       ),


	("continue",[(eq,"$cheat_mode",1),
        (str_store_troop_name, s14, "$g_talk_troop"),
	],"{!}CHEAT! - increase your relation with {s14}",
       [
	   (call_script, "script_change_player_relation_with_troop", "$g_talk_troop", 10),
	   (jump_to_menu, "mnu_character_report"),
       ]
       ),

	   
	("continue",[(eq,"$cheat_mode",1)],"{!}CHEAT! - increase honor",
       [
	   (val_add, "$player_honor", 10),
	   (jump_to_menu, "mnu_character_report"),
       ]
       ),

	("continue",[(eq,"$cheat_mode",1)],"{!}CHEAT! - increase renown",
       [
	   (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
	   (val_add, ":renown", 50),
	   (troop_set_slot, "trp_player", slot_troop_renown, ":renown"),
	   
	   (jump_to_menu, "mnu_character_report"),
       ]
       ),

	("continue",[(eq,"$cheat_mode",1)],"{!}CHEAT! - increase persuasion",
       [
	   (troop_raise_skill, "trp_player", "skl_persuasion", 1),
	   
	   (jump_to_menu, "mnu_character_report"),
       ]
       ),
	   


	("continue",[],"Continue...",
       [(jump_to_menu, "mnu_reports"),
        ]
       ),

	#lord recruitment changes end

	   ]
  ),

  ("party_size_report",0,
   "{s1}",
   "none",
   [(call_script, "script_game_get_party_companion_limit"),
    (assign, ":party_size_limit", reg0),
    (set_background_mesh, "mesh_pic_bookkeeping"),
    (store_skill_level, ":leadership", "skl_leadership", "trp_player"),
    (val_mul, ":leadership", 10), ## CC
      (try_begin),
        (eq,"$background_type",cb_noble),
        (store_skill_level, ":noble_bounc", "skl_leadership", "trp_player"),
        (val_mul, ":noble_bounc", 5),
        (val_add, ":leadership", ":noble_bounc"),
      (try_end),
      (try_begin),
        (eq,"$background_answer_3",cb3_lady_in_waiting),
        (store_skill_level, ":noble_bounc", "skl_leadership", "trp_player"),
        (val_mul, ":noble_bounc", 5),
        (val_add, ":leadership", ":noble_bounc"),
      (try_end),
    (store_attribute_level, ":charisma", "trp_player", ca_charisma),

    (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
    (val_div, ":renown", 25),
    
    ## CC
    (assign, ":center_score", 0),
    (try_for_range, ":cur_center", centers_begin, centers_end),
      (party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
      (try_begin),
        (party_slot_eq, ":cur_center", slot_party_type, spt_town),
        (val_add, ":center_score", 4),
      (else_try),
        (party_slot_eq, ":cur_center", slot_party_type, spt_castle),
        (val_add, ":center_score", 2),
      (else_try),
        (party_slot_eq, ":cur_center", slot_party_type, spt_village),
        (val_add, ":center_score", 1),
      (try_end),
    (try_end),
    (store_mul, ":center_bonus", ":center_score", 5),
    (try_begin),
      (gt, ":center_bonus", 0),
      (str_store_string, s6, "@{!} +"),
    (else_try),
      (str_store_string, s6, "str_space"),
    (try_end),
    (assign, reg6, ":center_bonus"),
    ## CC
    
    ## CC
    (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
    (assign, ":cav", 0),
    (try_for_range, ":i_stack", 1, ":num_stacks"),
      (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
      (try_begin),
        (call_script, "script_cf_troop_is_heavy_cav", ":stack_troop"),
        (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
        (val_add, ":cav", ":stack_size"),
      (try_end),
    (try_end),
    (try_begin),
      (gt, ":cav", 0),
      (str_store_string, s7, "@{!} -"),
    (else_try),
      (str_store_string, s7, "str_space"),
    (try_end),
    (assign, reg7, ":cav"),
    ## CC

    (assign, ":limit", 30),

    (try_begin),
      (eq, "$players_kingdom", "fac_player_supporters_faction"),
      (faction_get_slot, ":cur_faction_king", "$players_kingdom", slot_faction_leader),
      (eq, ":cur_faction_king", "trp_player"),
      (val_add, ":limit", 100),
    (else_try),  
      (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
      (val_add, ":limit", 100),
    (try_end),  

    (assign, ":diplomacy", ":party_size_limit"),
    (val_sub, ":diplomacy", ":leadership"),
    (val_sub, ":diplomacy", ":charisma"),
    (val_sub, ":diplomacy", ":renown"),
    (val_sub, ":diplomacy", ":limit"),
    (val_sub, ":diplomacy", ":center_bonus"),
    (val_sub, ":diplomacy", ":cav"),

    (try_begin),
      (gt, ":leadership", 0),
      (str_store_string, s2, "@{!} +"),
    (else_try),
      (str_store_string, s2, "str_space"),
    (try_end),
    (try_begin),
      (gt, ":charisma", 0),
      (str_store_string, s3, "@{!} +"),
    (else_try),
      (str_store_string, s3, "str_space"),
    (try_end),
    (try_begin),
      (gt, ":renown", 0),
      (str_store_string, s4, "@{!} +"),
    (else_try),
      (str_store_string, s4, "str_space"),
    (try_end),
    (try_begin),
      (gt, ":diplomacy", 0),
      (str_store_string, s8, "@{!} +"),
    (else_try),
      (lt, ":diplomacy", 0),
      (str_store_string, s8, "@{!} -"),
    (else_try),
      (str_store_string, s8, "str_space"),
    (try_end),
    (assign, reg8, ":diplomacy"),

    (assign, reg5, ":party_size_limit"),
    (assign, reg1, ":leadership"),
    (assign, reg2, ":charisma"),
    (assign, reg3, ":renown"),
    (assign, reg4, ":limit"),
    (str_store_string, s1, "@Current party size limit is {reg5}.^Current party size modifiers are:^^Base size:  +{reg4}^Leadership: {s2}{reg1}^Charisma: {s3}{reg2}^Renown: {s4}{reg3}^Fief: {s6}{reg6}^horsemen: {s7}{reg7}^diplomacy: {s8}{reg8}^TOTAL:  {reg5}"), ## CC
    ],
    [
      ("continue",[],"Continue...",
       [(jump_to_menu, "mnu_reports"),
        ]
       ),
      ]
  ),

  ("player_class",0,
   "You belong to the {s2} and are part of the {s7}.     ^^{s4}   ^^^^^^^{s5}   ^Current prestige: {reg0}",
   "none",
   [
   
    (set_background_mesh, "mesh_pic_soldier_rebel"),
    (call_script, "script_get_player_rank_name"),
    (troop_get_slot, ":player_effect", "trp_player", slot_troop_player_effect),
    (assign, reg0, ":player_effect"),
   ],
    [("continue",[],"Continue...",[(jump_to_menu, "mnu_reports"),]),]
  ),

  ("faction_relations_report",0,
   "{s1}",
   "none",
   [(str_clear, s2),
    (try_for_range, ":cur_kingdom", kingdoms_begin, kingdoms_end),
      (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
      (neq, ":cur_kingdom", "fac_player_supporters_faction"),
      (store_relation, ":cur_relation", "fac_player_supporters_faction", ":cur_kingdom"),
      (try_begin),
        (ge, ":cur_relation", 90),
        (str_store_string, s3, "@Loyal"),
      (else_try),
        (ge, ":cur_relation", 80),
        (str_store_string, s3, "@Devoted"),
      (else_try),
        (ge, ":cur_relation", 70),
        (str_store_string, s3, "@Fond"),
      (else_try),
        (ge, ":cur_relation", 60),
        (str_store_string, s3, "@Gracious"),
      (else_try),
        (ge, ":cur_relation", 50),
        (str_store_string, s3, "@Friendly"),
      (else_try),
        (ge, ":cur_relation", 40),
        (str_store_string, s3, "@Supportive"),
      (else_try),
        (ge, ":cur_relation", 30),
        (str_store_string, s3, "@Favorable"),
      (else_try),
        (ge, ":cur_relation", 20),
        (str_store_string, s3, "@Cooperative"),
      (else_try),
        (ge, ":cur_relation", 10),
        (str_store_string, s3, "@Accepting"),
      (else_try),
        (ge, ":cur_relation", 0),
        (str_store_string, s3, "@Indifferent"),
      (else_try),
        (ge, ":cur_relation", -10),
        (str_store_string, s3, "@Suspicious"),
      (else_try),
        (ge, ":cur_relation", -20),
        (str_store_string, s3, "@Grumbling"),
      (else_try),
        (ge, ":cur_relation", -30),
        (str_store_string, s3, "@Hostile"),
      (else_try),
        (ge, ":cur_relation", -40),
        (str_store_string, s3, "@Resentful"),
      (else_try),
        (ge, ":cur_relation", -50),
        (str_store_string, s3, "@Angry"),
      (else_try),
        (ge, ":cur_relation", -60),
        (str_store_string, s3, "@Hateful"),
      (else_try),
        (ge, ":cur_relation", -70),
        (str_store_string, s3, "@Revengeful"),
      (else_try),
        (str_store_string, s3, "@Vengeful"),
      (try_end),
      (str_store_faction_name, s4, ":cur_kingdom"),
      (assign, reg1, ":cur_relation"),
      (str_store_string, s2, "@{!}{s2}^{s4}: {reg1} ({s3})"),
    (try_end),
    (str_store_string, s1, "@Your relation with the factions are:^{s2}"),

	

    ],
    [
      ("continue",[],"Continue...",
       [(jump_to_menu, "mnu_reports"),
        ]
       ),
      ]
  ),

  ("other_relations_report",0,
   "{s1}",
   "none",
   [(str_clear, s2),
    (try_for_range, ":cur_kingdom", "fac_robber_knights", "fac_undeads"),
      (neg|eq, ":cur_kingdom", "fac_gaelic"),
      (neg|eq, ":cur_kingdom", "fac_hospitalier_knights"),
      #(neg|eq, ":cur_kingdom", "fac_mountain_tribe"),
      #(neg|eq, ":cur_kingdom", "fac_desert_bandits"),
      (try_begin),
        (eq, ":cur_kingdom", "fac_mountain_tribe"),
        (assign, ":cur_kingdom", "fac_merchants"),
      (else_try),
        (eq, ":cur_kingdom", "fac_desert_bandits"),
        (assign, ":cur_kingdom", "fac_outlaws"),
      (try_end),
      (store_relation, ":cur_relation", "fac_player_supporters_faction", ":cur_kingdom"),
      (try_begin),
        (ge, ":cur_relation", 90),
        (str_store_string, s3, "@Loyal"),
      (else_try),
        (ge, ":cur_relation", 80),
        (str_store_string, s3, "@Devoted"),
      (else_try),
        (ge, ":cur_relation", 70),
        (str_store_string, s3, "@Fond"),
      (else_try),
        (ge, ":cur_relation", 60),
        (str_store_string, s3, "@Gracious"),
      (else_try),
        (ge, ":cur_relation", 50),
        (str_store_string, s3, "@Friendly"),
      (else_try),
        (ge, ":cur_relation", 40),
        (str_store_string, s3, "@Supportive"),
      (else_try),
        (ge, ":cur_relation", 30),
        (str_store_string, s3, "@Favorable"),
      (else_try),
        (ge, ":cur_relation", 20),
        (str_store_string, s3, "@Cooperative"),
      (else_try),
        (ge, ":cur_relation", 10),
        (str_store_string, s3, "@Accepting"),
      (else_try),
        (ge, ":cur_relation", 0),
        (str_store_string, s3, "@Indifferent"),
      (else_try),
        (ge, ":cur_relation", -10),
        (str_store_string, s3, "@Suspicious"),
      (else_try),
        (ge, ":cur_relation", -20),
        (str_store_string, s3, "@Grumbling"),
      (else_try),
        (ge, ":cur_relation", -30),
        (str_store_string, s3, "@Hostile"),
      (else_try),
        (ge, ":cur_relation", -40),
        (str_store_string, s3, "@Resentful"),
      (else_try),
        (ge, ":cur_relation", -50),
        (str_store_string, s3, "@Angry"),
      (else_try),
        (ge, ":cur_relation", -60),
        (str_store_string, s3, "@Hateful"),
      (else_try),
        (ge, ":cur_relation", -70),
        (str_store_string, s3, "@Revengeful"),
      (else_try),
        (str_store_string, s3, "@Vengeful"),
      (try_end),
      (str_store_faction_name, s4, ":cur_kingdom"),
      (assign, reg1, ":cur_relation"),
      (str_store_string, s2, "@{!}{s2}^{s4}: {reg1} ({s3})"),
    (try_end),
    (str_store_string, s1, "@Your relation with the factions are:^{s2}"),

	

    ],
    [
      ("continue",[],"Continue...",
       [(jump_to_menu, "mnu_reports"),
        ]
       ),
      ]
  ),

  ("camp",mnf_scale_picture,
   "You set up camp. What do you want to do?", 
   "none",
   [
     (assign, "$g_player_icon_state", pis_normal),
     (set_background_mesh, "mesh_pic_camp"),
     (play_sound,"snd_camp"),
    ],
    [
    #("camp_mod_opition",[],"MOD option.", [(start_presentation, "prsnt_mod_option")]),
    
      #("camp_action_1",[(eq,"$cheat_mode",1)],"{!}Cheat: Walk around.",
       #[(set_jump_mission,"mt_ai_training"),
        #(call_script, "script_setup_random_scene"),
        #(change_screen_mission),
        #]
       #),
     ## CC
    ("camp_mod_opition",[],"MOD option.", [
     (start_presentation, "prsnt_mod_option")]),
 	("action_prebattle_mod_preferences",[],"PBOD Mod Preferences.",[(start_presentation, "prsnt_pbod_preferences")]), 
 	
    ("action_fix_bug",[],"fix_bug.",[
     (call_script, "script_raf_fixes"),
     (jump_to_menu, "mnu_camp"),
    ]), 
     
    ("action_inspect_camp", [],"Inspect your camp.",[(jump_to_menu, "mnu_inspect_camp"),], "."),
     
    ("camp_recruit_prisoners",
     [
     ## CC
      (troops_can_join, 1),
      (str_clear, s1),
	  (assign, "$g_prisoner_recruit_troop_id", 0),
	  (assign, "$g_prisoner_recruit_size", 0),	  
      #(try_begin),
      #  (store_current_hours, ":cur_time"),
      #  (val_sub, ":cur_time", 24),
      #  (ge, ":cur_time", "$g_prisoner_recruit_last_time"),
      #  (try_begin),
      #    (gt, "$g_prisoner_recruit_last_time", 0),
      #    (assign, "$g_prisoner_recruit_troop_id", 0),
      #    (assign, "$g_prisoner_recruit_size", 0),
      #    (assign, "$g_prisoner_recruit_last_time", 0),
      #  (try_end),
      #(else_try),
      #  (store_add, ":end_hour", "$g_prisoner_recruit_last_time", 24),
      #  (store_current_hours, ":cur_time"),
      #  (lt, ":cur_time", ":end_hour"),
      #  (store_sub, reg1, ":end_hour", ":cur_time"),
      #  (store_sub, reg2, reg1, 1),
      #  (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
      #  (disable_menu_option),
      #(try_end),
      ## CC
      ], "Recruit some of your prisoners{s1}.",
     [(jump_to_menu, "mnu_camp_recruit_prisoners"),
      ],
     ),
     
    #-#-#-#-#-#-#-#-#-#-#-#-#-#-#
    #-#-#-#Hunting Mod begin#-#-#
    #-#-#-#-#-#-#-#-#-#-#-#-#-#-#
      ("camp_go_hunting",
       [],
       "Go hunting in the local area.",
       [(jump_to_menu, "mnu_camp_hunting_or_poaching"),
        ],
       ),
    #-#-#-#-#-#-#-#-#-#-#-#-#-#-#
    #-#-#-#Hunting Mod end#-#-#-#
    #-#-#-#-#-#-#-#-#-#-#-#-#-#-#
     
    # autoloot
    ("camp_manage_inventory",
      [
        (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
        (assign, ":num_of_heroes", reg0),
        (gt, ":num_of_heroes", 1),
      ],
      "Manage your party's inventory.",
      [
        (troop_clear_inventory, "trp_temp_troop"),
        (assign, "$return_menu", "mnu_camp"),
        (assign, "$inventory_menu_offset", 0),
      ## CC
        (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end),
          (troop_clear_inventory, ":cur_troop"), # clear_inventory
        (try_end),
        
        (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":this_hero","p_main_party",":i_stack"),
          (troop_is_hero, ":this_hero"),
          (neq, ":this_hero", "trp_player"),
          (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end),
            (call_script, "script_transfer_inventory", ":this_hero", ":cur_troop", 0),
          (try_end),
        (try_end),
        
        (try_for_range, ":unused", 0, 86), # for 86 times
          # find the best item
          (assign, ":best_score", 0),
          (assign, ":best_troop", -1),
          (assign, ":best_slot", -1),
          (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end),
            (troop_get_inventory_capacity, ":inv_cap", ":cur_troop"),
            (try_for_range, ":i_slot", 10, ":inv_cap"),
              (troop_get_inventory_slot, ":item", ":cur_troop", ":i_slot"),
              (troop_get_inventory_slot_modifier, ":imod", ":cur_troop", ":i_slot"),
              (gt, ":item", -1),
              (call_script, "script_get_item_value_with_imod", ":item", ":imod"),
              (assign, ":score", reg0),
              (val_div, ":score", 100),
              (val_max, ":score",1),
              (gt, ":score", ":best_score"),
              (assign, ":best_score", ":score"),
              (assign, ":best_troop", ":cur_troop"),
              (assign, ":best_slot", ":i_slot"),
            (try_end),
          (try_end),
          (gt, ":best_score", 0),
          # already found
          (troop_get_inventory_slot, ":item", ":best_troop", ":best_slot"),
          (troop_get_inventory_slot_modifier, ":imod", ":best_troop", ":best_slot"),
          (troop_add_item, "trp_temp_troop", ":item", ":imod"), # add to trp_temp_troop
          (troop_set_inventory_slot, ":best_troop", ":best_slot", -1), # remove it 
        (try_end),
        
        # sort the rest items for  begin_troop - end_troop
        (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end_minus_one),
          (store_add, ":new_begin_troop", ":cur_troop", 1),
          (call_script, "script_transfer_best_items_to_dest_troop_by_price", ":cur_troop", ":new_begin_troop", pool_troops_end, 96),
        (try_end),
      ## CC
        (jump_to_menu, "mnu_manage_loot_pool"),
      ]
    ),
    
    ("camp_manage_item",[],"Manage your bookcase or chess.",[(jump_to_menu, "mnu_camp_manage_item"),]),
    
    # autoloot
      ("camp_action",[],"Take an action.",[(jump_to_menu, "mnu_camp_action"),]),

      ("camp_special_ability",[],"Choose your special_ability.",[(assign, "$return_menu", "mnu_camp"),(jump_to_menu, "mnu_camp_set_special_ability"),]),



      #("camp_set_magic", [],
      #  "Set all npcs magic.", 
      #  [
      #    (call_script, "script_refresh_bookcase"),
      #    (assign, "$g_cur_item_pool", 0),
      #    (assign, "$g_prsnt_param_1", "trp_player"),
      #    (assign, "$g_prsnt_param_2", 0),
      #    (start_presentation, "prsnt_set_npcs_magic"),
      #  ]
      #),

      ("camp_action_necromancy",
       [(store_skill_level,":local_0",skl_necromancy,"trp_player"),(gt,":local_0",0),],
        "Use_your_necromancy_skills.",
       [(jump_to_menu,"mnu_necromancy"),]),

      ("camp_wait_here",[],"Wait here for some time.",
       [
           (assign,"$g_camp_mode", 1),
           (assign, "$g_infinite_camping", 0),
           (assign, "$g_player_icon_state", pis_camping),
           
           (try_begin),
             (party_is_active, "p_main_party"),
             (party_get_current_terrain, ":cur_terrain", "p_main_party"),
             (try_begin),
               (eq, ":cur_terrain", rt_desert),
               (unlock_achievement, ACHIEVEMENT_SARRANIDIAN_NIGHTS),
             (try_end),  
           (try_end),  
           (rest_for_hours_interactive, 24 * 365, 5, 1), #rest while attackable
                      
           (change_screen_return),
        ]
       ),
      ("camp_cheat",
       [(ge, "$cheat_mode", 1)
        ], "CHEAT MENU!",
       [(jump_to_menu, "mnu_camp_cheat"),
        ],
       ),
      ("resume_travelling",[],"Resume travelling.",
       [
           (change_screen_return),
        ]
       ),
      ]
  ),

  ("camp_special_ability",0,
   "Choose your special_ability: ^your special: {s10} ^clicked {s8} use",
   "none",
   [
     (troop_get_slot, ":special","trp_player", slot_troop_special_ability),
     (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
     (call_script, "script_str_store_key_name", s8, "$key_special_2"), #F9
     ],
    [

      ("camp_action_4",[],"Back to camp menu.",[(jump_to_menu, "mnu_camp_set_special_ability"),]),

      ("prev_page", [
      (try_begin),
        (le, "$cur_page", 0),
        (disable_menu_option),
      (try_end),
    ], "Previous page.", [(val_sub, "$cur_page", 1),(jump_to_menu, "mnu_camp_special_ability")]),
      
      ("next_page", [
      (try_begin),
        (gt, "$cur_page", 4),
        (disable_menu_option),
      (try_end),
    ],  "Next page.", [(val_add, "$cur_page", 1),(jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_get_slot, ":special", "trp_player", slot_troop_special_ability),
         (neg|eq,":special", 0),
         #(assign,":special", 0),
         (str_store_string, s2, "@nothing"),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, 0),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         #(eq, "$background_answer_2",cb2_apprentice),
         #(eq,"$background_answer_3",cb3_student),
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 0),
         (assign,":special", call_storm),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, call_storm),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 0),
         (assign,":special", Khorne_blessing),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, Khorne_blessing),
        (jump_to_menu, "mnu_camp_special_ability")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 0),
         (assign,":special", Nurgle_blessing),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, Nurgle_blessing),
        (jump_to_menu, "mnu_camp_special_ability")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 0),
         (assign,":special", tzeentch_arcane),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, tzeentch_arcane),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 0),
         (assign,":special", windforce),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, windforce),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 0),
         (assign,":special", it_is_high_noon),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, it_is_high_noon),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 0),
         (assign,":special", avatar),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, avatar),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 0),
         (assign,":special", holy_light),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, holy_light),
        (jump_to_menu, "mnu_camp_special_ability")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", dragon_blade),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, dragon_blade),
        (jump_to_menu, "mnu_camp_special_ability")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 4),
         (assign,":special", summon_hallow),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, summon_hallow),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 4),
         (assign,":special", force_jump),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, force_jump),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", ground_stomp),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, ground_stomp),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", divine_strength),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, divine_strength),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", inspire),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, inspire),
        (jump_to_menu, "mnu_camp_special_ability")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", battlecry),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, battlecry),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", fright_aura),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, fright_aura),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", taunt),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, taunt),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", warcry),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, warcry),
        (jump_to_menu, "mnu_camp_special_ability")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", wrath),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, wrath),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", awaken),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, awaken),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 1),
         (assign,":special", insight),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, insight),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 2),
         (assign,":special", shadowstep),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, shadowstep),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 2),
         (assign,":special", flamestrike),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, flamestrike),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 2),
         (assign,":special", shadowking),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, shadowking),
        (jump_to_menu, "mnu_camp_special_ability")]),


      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 2),
         (assign,":special", summon_demon),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, summon_demon),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 2),
         (assign,":special", summon_neutral),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, summon_neutral),
        (jump_to_menu, "mnu_camp_special_ability")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 2),
         (assign,":special", dragons_fear),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, dragons_fear),
        (jump_to_menu, "mnu_camp_special_ability")]),
       
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 2),
         (assign,":special", multishot),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, multishot),
        (jump_to_menu, "mnu_camp_special_ability")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 4),
         (assign,":special", dive),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, dive),
        (jump_to_menu, "mnu_camp_special_ability")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 4),
         (assign,":special", dragron_flame_burst),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, dragron_flame_burst),
        (jump_to_menu, "mnu_camp_special_ability")]),
		
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 4),
         (assign,":special", hero_dreams),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, hero_dreams),
        (jump_to_menu, "mnu_camp_special_ability")]),		

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 4),
         (assign,":special", shadow_blade),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, shadow_blade),
        (jump_to_menu, "mnu_camp_special_ability")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 4),
         (assign,":special", luanwu),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, luanwu),
        (jump_to_menu, "mnu_camp_special_ability")]),
		
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 4),
         (assign,":special", power_blade),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, power_blade),
        (jump_to_menu, "mnu_camp_special_ability")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 3),
         (assign,":special", regeneration),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, regeneration),
        (jump_to_menu, "mnu_camp_special_ability")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 3),
         (assign,":special", stoneskin),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, stoneskin),
        (jump_to_menu, "mnu_camp_special_ability")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 3),
         (assign,":special", bloodlust),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, bloodlust),
        (jump_to_menu, "mnu_camp_special_ability")]),
       
       
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 3),
         (assign,":special", mummy_curse),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, mummy_curse),
        (jump_to_menu, "mnu_camp_special_ability")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 3),
         (assign,":special", mass_slow),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, mass_slow),
        (jump_to_menu, "mnu_camp_special_ability")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability, 0),
         (eq, "$cur_page", 3),
         (assign,":special", mass_haste),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability, mass_haste),
        (jump_to_menu, "mnu_camp_special_ability")]),
        
        
      ]
  ),

  ("camp_special_ability_extra",0,
   "Choose your special_ability: ^your special: {s10} ^clicked {s8} use",
   "none",
   [
     (troop_get_slot, ":special","trp_player", slot_troop_special_ability_extra),
     (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
     (call_script, "script_str_store_key_name", s8, "$key_special_4"), #F9
     ],
    [

      ("camp_action_4",[],"Back to camp menu.",[(jump_to_menu, "mnu_camp_set_special_ability"),]),
      ("prev_page", [
      (try_begin),
        (le, "$cur_page", 0),
        (disable_menu_option),
      (try_end),
    ], "Previous page.", [(val_sub, "$cur_page", 1),(jump_to_menu, "mnu_camp_special_ability_extra")]),
      
      ("next_page", [
      (try_begin),
        (gt, "$cur_page", 4),
        (disable_menu_option),
      (try_end),
    ],  "Next page.", [(val_add, "$cur_page", 1),(jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (troop_get_slot, ":special", "trp_player", slot_troop_special_ability_extra),
         (neg|eq,":special", 0),
         #(assign,":special", 0),
         (str_store_string, s2, "@nothing"),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, 0),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 0),
         (assign,":special", master_archer),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, master_archer),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 0),
         (assign,":special", sinper_shot),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, sinper_shot),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
               
      ("special_ability",
      [
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, focus),
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, skill_charge),
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, berserk),
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 0),
         (assign,":special", berserk),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, berserk),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, focus),
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, skill_charge),
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, berserk),
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 0),
         (assign,":special", skill_charge),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, skill_charge),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, focus),
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, skill_charge),
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, berserk),
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 0),
         (assign,":special", focus),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, focus),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 0),
         (assign,":special", rage_charge),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, rage_charge),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 0),
         (assign,":special", haste_reload),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, haste_reload),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
           
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 0),
         (assign,":special", power_strike),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, power_strike),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
         
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 0),
         (assign,":special", rend),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, rend),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
           
           
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 1),
         (assign,":special", smite_human),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, smite_human),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 1),
         (assign,":special", smite_outsider),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, smite_outsider),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
       
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 1),
         (assign,":special", smite_evil),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, smite_evil),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 1),
         (assign,":special", smite_undead),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, smite_undead),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 1),
         (assign,":special", smite_orc),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, smite_orc),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 1),
         (assign,":special", mana_burn),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, mana_burn),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, slow),
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 1),
         (assign,":special", slow),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, slow),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
      ("special_ability",
      [
         (neg|troop_slot_eq, "trp_player", slot_troop_special_ability, haste),
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 1),
         (assign,":special", haste),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, haste),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 2),
         (assign,":special", mana_burst),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, mana_burst),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 2),
         (assign,":special", curse_of_the_leper),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, curse_of_the_leper),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 2),
         (assign,":special", dragon_voice),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, dragon_voice),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 2),
         (assign,":special", swift_strike),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, swift_strike),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 2),
         (assign,":special", seismic_slam),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, seismic_slam),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),



      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 2),
         (assign,":special", forst_ring),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, forst_ring),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 2),
         (assign,":special", flame_burst),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, flame_burst),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 2),
         (assign,":special", earth_shock),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, earth_shock),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 3),
         (assign,":special", sidearm_1),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, sidearm_1),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 3),
         (assign,":special", summon_undead),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, summon_undead),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 3),
         (assign,":special", cleave),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, cleave),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 3),
         (assign,":special", call_lightning),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, call_lightning),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 3),
         (assign,":special", charm),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, charm),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
       
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 3),
         (assign,":special", spell_dispel),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, spell_dispel),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 3),
         (assign,":special", entangle),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, entangle),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 3),
         (assign,":special", grasp),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, grasp),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
       
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 4),
         (assign,":special", heal),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, heal),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
		
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 4),
         (assign,":special", wushuang),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, wushuang),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),		
       
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 4),
         (assign,":special", divine_ruling),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, divine_ruling),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
       
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 4),
         (assign,":special", mass_heal),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, mass_heal),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
		
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 4),
         (assign,":special", roll),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, roll),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),		
       
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 4),
         (assign,":special", powercharge),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, powercharge),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
       
       
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_extra, 0),
         (eq, "$cur_page", 4),
         (assign,":special", shadowstep),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_extra, shadowstep),
        (jump_to_menu, "mnu_camp_special_ability_extra")]),
      ]
  ),

  ("camp_special_ability_passive",0,
   "Choose your special_ability_passive: ^your special: {s10} ",
   "none",
   [
     (troop_get_slot, ":special","trp_player", slot_troop_special_ability_passive),
     (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
     ],
    [

      ("camp_action_4",[],"Back to camp menu.",[(jump_to_menu, "mnu_camp_set_special_ability"),]),

      ("prev_page", [
      (try_begin),
        (le, "$cur_page", 0),
        (disable_menu_option),
      (try_end),
    ], "Previous page.", [(val_sub, "$cur_page", 1),(jump_to_menu, "mnu_camp_special_ability_passive")]),
      
      ("next_page", [
      (try_begin),
        (gt, "$cur_page", 5),
        (disable_menu_option),
      (try_end),
    ],  "Next page.", [(val_add, "$cur_page", 1),(jump_to_menu, "mnu_camp_special_ability_passive")]),
      
      ("special_ability",
      [
         (troop_get_slot, ":special", "trp_player", slot_troop_special_ability_passive),
         (neg|eq,":special", 0),
         #(assign,":special", 0),
         (str_store_string, s2, "@nothing"),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, 0),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 0),
         (assign,":special", mark_of_khorne),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, mark_of_khorne),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 0),
         (assign,":special", poisoned_attacks),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, poisoned_attacks),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),


      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 0),
         (assign,":special", ironshield),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, ironshield),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (eq,"$background_type",cb_noble),
         (eq,"$background_answer_2",cb2_page),
         (this_or_next|eq,"$background_answer_3",cb3_troubadour),
         (this_or_next|eq,"$background_answer_3",cb3_squire),
         (eq,"$background_answer_3",cb3_lady_in_waiting),
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", revelation),
         (eq, "$cur_page", 0),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, revelation),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", power_cleave),
         (eq, "$cur_page", 0),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, power_cleave),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", frenzy),
         (eq, "$cur_page", 0),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, frenzy),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", battlerage),
         (eq, "$cur_page", 0),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, battlerage),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 0),
         (assign,":special", wound_strike),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, wound_strike),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 1),
         (assign,":special", arrow_of_slaying),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, arrow_of_slaying),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 1),
         (assign,":special", undead_horse),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, undead_horse),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 1),
         (assign,":special", deadly_strike),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, deadly_strike),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),


      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 1),
         (assign,":special", sidearm_2),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, sidearm_2),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),


      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 1),
         (assign,":special", block),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, block),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 1),
         (assign,":special", sinper_shot),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, sinper_shot),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 1),
         (assign,":special", ambush),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, ambush),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 1),
         (assign,":special", skeletal),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, skeletal),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", master_of_ice),
         (eq, "$cur_page", 2),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, master_of_ice),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", master_of_storms),
         (eq, "$cur_page", 2),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, master_of_storms),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", master_of_fire),
         (eq, "$cur_page", 2),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, master_of_fire),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", spirit_link),
         (eq, "$cur_page", 2),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, spirit_link),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", confession),
         (eq, "$cur_page", 2),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, confession),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", magic_mirror),
         (eq, "$cur_page", 2),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, magic_mirror),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", fire_shield),
         (eq, "$cur_page", 2),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, fire_shield),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
      
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", meditation),
         (eq, "$cur_page", 2),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, meditation),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", diffusal_blade),
         (eq, "$cur_page", 3),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, diffusal_blade),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 3),
         (assign,":special", power_strike),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, power_strike),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),
        
      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", retribution),
         (eq, "$cur_page", 3),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, retribution),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),


      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (assign,":special", life_drain),
         (eq, "$cur_page", 3),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, life_drain),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 3),
         (assign,":special", fear_attack),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, fear_attack),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),


      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 3),
         (assign,":special", powercharge),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, powercharge),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),


      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 3),
         (assign,":special", counterstrike),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, counterstrike),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 3),
         (assign,":special", counter),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, counter),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 3),
         (assign,":special", bubble_dreams),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, bubble_dreams),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 4),
         (assign,":special", deflect),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, deflect),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 4),
         (assign,":special", lightning_attack),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, lightning_attack),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 4),
         (assign,":special", mummy),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, mummy),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 4),
         (assign,":special", smite_human),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, smite_human),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 4),
         (assign,":special", smite_life),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, smite_life),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 4),
         (assign,":special", smite_outsider),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, smite_outsider),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),


      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 4),
         (assign,":special", smite_evil),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, smite_evil),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),


      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 4),
         (assign,":special", smite_orc),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, smite_orc),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ("special_ability",
      [
         (troop_slot_eq, "trp_player", slot_troop_special_ability_passive, 0),
         (eq, "$cur_page", 4),
         (assign,":special", smite_undead),
         (call_script, "script_cf_troop_can_use_special_ability", ":special"),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
       ],"Select {s2}.",
       [
        (troop_set_slot, "trp_player", slot_troop_special_ability_passive, smite_undead),
        (jump_to_menu, "mnu_camp_special_ability_passive")]),

      ]
  ),

  ("inspect_camp", 0,"Enter camp.","none", [],
   [
    ("enter", 
    [
        (assign, "$talk_context", 0),
        (call_script, "script_setup_my_camp"),
        (assign, ":my_camp", reg0),
        (modify_visitors_at_site, ":my_camp"),
        (reset_visitors),
        (assign, ":var_0", 20),
        (party_get_num_prisoner_stacks, ":var_1", "p_main_party"),
        (try_for_range, ":var_2", 0, ":var_1"),
            (party_prisoner_stack_get_troop_id, ":var_3", "p_main_party", ":var_2"),
            (neg|ge, ":var_0", 31),
            (set_visitor, ":var_0", ":var_3"),
            (val_add, ":var_0", 1),
        (try_end),
    ],
    "Enter.",
    [
        (set_jump_mission, "mt_camp_explore"),
        #(set_jump_mission, "mt_town_default"),
        (call_script, "script_setup_my_camp"),
        (assign, ":my_camp", reg0),
        (jump_to_scene, ":my_camp"),
        (change_screen_mission),
    ], "."),

    ("leave", [],"Leave.",[(leave_encounter),(change_screen_return),], ),
  ]),

  ("camp_cheat",0,
   "Select a cheat:",
   "none",
   [
     ],
    [
      ("camp_cheat_find_item",[], "Find an item...",
       [
         (jump_to_menu, "mnu_cheat_find_item"),	   ]
       ),	   

      ("camp_cheat_more",[(eq,"$cheat_mode",3)], "MORE CHEAT MENU, need password",
       [
         (start_presentation, "prsnt_record_password"),]
       ),	   
          
#      ("camp_cheat_change_weather",[], "Change weather..",
#       [
#         (jump_to_menu, "mnu_cheat_change_weather"),
#	   ]
#       ),
	   
      ("camp_cheat_1",[],"{!}Increase player renown.",
       [
           (str_store_string, s1, "@Player renown is increased by 100. "),
           (call_script, "script_change_troop_renown", "trp_player" ,100),
           (jump_to_menu, "mnu_camp_cheat"),
        ]
       ),
      ("camp_cheat_1_1",[],"{!}Increase player soul point.",
       [
           (call_script, "script_change_player_soul_point", 1000),
           (jump_to_menu, "mnu_camp_cheat"),
        ]
       ),
      ("camp_cheat_1_2",[
           (gt, "$g_player_reading_book", 0),
           (player_has_item, "$g_player_reading_book"),      
         ],"{!}quick Read books.",
       [
           (item_set_slot, "$g_player_reading_book", slot_item_book_reading_progress, 1000),
           (jump_to_menu, "mnu_camp_cheat"),
        ]
       ),
       
      ("camp_cheat_2",[],"Increase player honor.",
       [
         (assign, reg7, "$player_honor"),
         (val_add, reg7, 1),
         (display_message, "@Player honor is increased by 1 and it is now {reg7}."),
         (val_add, "$player_honor", 1),
         (jump_to_menu, "mnu_camp_cheat"),
        ]
       ),

      ("camp_cheat_3",[],"Update political notes.",
       [
         (try_for_range, ":hero", active_npcs_begin, active_npcs_end),
           (troop_slot_eq, ":hero", slot_troop_occupation, slto_kingdom_hero),
           (call_script, "script_update_troop_political_notes", ":hero"),
         (try_end),
         
         (try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
           (call_script, "script_update_faction_political_notes", ":kingdom"),
         (try_end),        
        ]
       ),	   
	   
      ("camp_cheat_4",[],"Update troop notes.",
       [
         (try_for_range, ":hero", active_npcs_begin, active_npcs_end),
           (troop_slot_eq, ":hero", slot_troop_occupation, slto_kingdom_hero),
           (call_script, "script_update_troop_notes", ":hero"),
         (try_end),
         
         (try_for_range, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
           (call_script, "script_update_troop_notes", ":lady"),
           (call_script, "script_update_troop_political_notes", ":lady"),
           (call_script, "script_update_troop_location_notes", ":lady", 0),
         (try_end),        
        ]
       ),	   
	   
      ("camp_cheat_5",[],"Scramble minstrels.",
       [
         (call_script, "script_update_tavern_minstrels"),
        ]
       ),	   
	   
      ("camp_cheat_6",[],"Infinite camp",
       [
         (assign,"$g_camp_mode", 1),
         (assign,"$cheat_mode",0),
         (assign, "$g_infinite_camping", 1),
         (assign, "$g_player_icon_state", pis_camping),
         (rest_for_hours_interactive, 10 * 24 * 365, 20), #10 year rest while not attackable with 20x speed
         (change_screen_return),
        ]
       ),	   
      ("camp_cheat_heal",[],"{!}Heal party.",
       [
         (heal_party, "p_main_party"),
         (jump_to_menu, "mnu_camp_cheat"),
        ]
       ),	   

      ("camp_cheat_gather",[],"Gather all NPCs.",
       [
          (try_for_range, ":troop_no", companions_begin, companions_end),
            (troop_slot_eq, ":troop_no", slot_troop_days_on_mission, 0),
            (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_inactive),
            (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
            (troop_set_slot, ":troop_no", slot_troop_cur_center, "$current_town"),
          (try_end),
          (jump_to_menu, "mnu_camp_cheat"),
        ]
       ),	   

      ("cheat_faction_orders_1",[(ge,"$cheat_mode",1)],
      "Cheat: Set Debug messages to All.",
       [(assign,"$cheat_mode",1),
         (jump_to_menu, "mnu_camp_cheat"),
        ]
       ),
      ("cheat_faction_orders_2",[
	  (ge, "$cheat_mode", 1),
      (neq,"$cheat_mode",3)],"Cheat: Set Debug messages to Econ Only.",
       [(assign,"$cheat_mode",3),
         (jump_to_menu, "mnu_camp_cheat"),
        ]
       ),
      ("cheat_faction_orders_3",[
	  (ge, "$cheat_mode", 1),
      (neq,"$cheat_mode",4)],"Cheat: Set Debug messages to Political Only.",
       [(assign,"$cheat_mode",4),
         (jump_to_menu, "mnu_camp_cheat"),
        ]
       ),
      #("cheat_faction_orders_4",[],"Cheat: Faction orders.",
       #[(jump_to_menu, "mnu_faction_orders"),
        #]
       #),
	   
      ("back_to_camp_menu",[],"Back to camp menu.",
       [
         (jump_to_menu, "mnu_camp"),
        ]
       ),
      ]
  ),
  
  ("camp_cheat_2",0,
   "{s18} Select a cheat:",
   "none",
   [
   
     (str_store_string, s18, "@ "),
     (try_begin),
      (eq, "$game_mode", game_mode_invasion),
      (assign, ":num_invasion", 0),
      (str_clear, s18),
      (try_for_range, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end), 
        (faction_get_slot, ":invasion_town", ":faction_no", slot_faction_invasion_town),
        (faction_get_slot, ":invasion_day", ":faction_no", slot_faction_invasion_day),
        (gt,":invasion_town", 0),
        (gt,":invasion_day", 0),
        (assign,reg11,":invasion_day"),
        (str_store_party_name_link, s13, ":invasion_town"),
        (str_store_faction_name, s12, ":faction_no"),
        (str_store_string, s11, "@{s12} invasion_town :{s13},invasion_day :{reg11}"),
        (val_add, ":num_invasion", 1),
        (try_begin),
          (eq,":num_invasion", 1),
          (str_store_string, s18, "@{!}{s11}"),
       (else_try),
          (str_store_string, s18, "@{!}{s18},^{s11}"),
        (try_end),
      (try_end),
     (try_end),
     ],
    [
      ("camp_cheat_find_item",[], "Find an item...",
       [
         (jump_to_menu, "mnu_cheat_find_item_2"),	   ]
       ),	   

      ("all_invasion",[(eq, "$game_mode", game_mode_invasion)],"All kingdom invasion.",
        [
        (try_for_range, ":faction_no", npc_kingdoms_begin, npc_kingdoms_end), 
          (faction_get_slot, ":invasion_town", ":faction_no", slot_faction_invasion_town),
          (faction_get_slot, ":invasion_day", ":faction_no", slot_faction_invasion_day),
          (gt,":invasion_town", 0),
          (gt,":invasion_day", 0),
          (faction_set_slot, ":faction_no", slot_faction_invasion_day, 7),
        (try_end),
          (jump_to_menu, "mnu_camp_cheat_2"),
        ]
       ),

      ("camp_cheat_buy_troop",[],"Find an item....",[(call_script, "script_setup_troop_meeting", "trp_find_item_cheat", -1),]),

      ("camp_cheat_11",[],"All NPC of my faction like me.",
        [
          (try_for_range, ":cur_hero", active_npcs_begin, active_npcs_end),
            (store_troop_faction, ":hero_faction", ":cur_hero"),
            (eq, ":hero_faction", "$players_kingdom"),
            (troop_get_slot, ":relation_with_player", ":cur_hero", slot_troop_player_relation),
            (store_sub, ":reln_dif", 20, ":relation_with_player"),
            (gt, ":reln_dif", 0),
            (call_script, "script_change_player_relation_with_troop", ":cur_hero", ":reln_dif"),
          (try_end),
          (jump_to_menu, "mnu_camp_cheat_2"),
        ]
       ),
      ("camp_cheat_12",[],"All kindoms like me.",
        [
          (try_for_range, ":cur_kindom", npc_kingdoms_begin, npc_kingdoms_end),
            (neq, ":cur_kindom", "fac_player_supporters_faction"),
            (store_relation, ":player_relation", ":cur_kindom", "fac_player_supporters_faction"),
            (lt, ":player_relation", 30),
            (call_script, "script_set_player_relation_with_faction",":cur_kindom", 30),
          (try_end),
          (jump_to_menu, "mnu_camp_cheat_2"),
        ]
       ),

      ("camp_cheat_13",[],"Initiate Tournaments in All Towns.",
        [
        (try_for_range, ":center_no", towns_begin, towns_end),
            (party_set_slot, ":center_no", slot_town_has_tournament, 14),
        (try_end),
        (jump_to_menu, "mnu_camp_cheat_2"),
        ]
       ),

      ("camp_cheat_7",[],"Add money to player.",
        [
          (try_begin),
            (key_is_down, key_left_control),
            (troop_add_gold, "trp_player", 100000),
          (else_try),
            (troop_add_gold, "trp_player", 10000),
          (try_end),
          (jump_to_menu, "mnu_camp_cheat_2"),
        ]
       ),
      ("camp_cheat_8",[],"Add experience to party.",
        [
          (try_begin),
            (key_is_down, key_left_control),
            (party_add_xp, "p_main_party", 1000000),
          (else_try),
            (party_add_xp, "p_main_party", 100000),
          (try_end),
          (jump_to_menu, "mnu_camp_cheat_2"),
        ]
       ),
      ("camp_cheat_9",[],"Force to recruit all prisoners.",
        [
          (assign, "$g_move_heroes", 0),
          (assign, "$add_1000", 1),
          (call_script, "script_party_add_party_prisoners", "p_main_party", "p_main_party"),
          (call_script, "script_party_remove_all_prisoners", "p_main_party"),
          (assign, "$add_1000", 0),
          (jump_to_menu, "mnu_camp_cheat_2"),
        ]
       ),
       
      ("camp_cheat_10",[        
      (store_troop_gold, ":cur_gold", "trp_player"),
       (try_begin),
            (le, ":cur_gold", 10000),
            (le, "$cheat_mode", 3),
            (disable_menu_option),
      (try_end),
      ],"add cheat_man.",
        [
          (call_script, "script_change_troop_renown", "trp_player" ,-100),
          (troop_remove_gold,"trp_player",10000),
          (party_add_members,"p_main_party","trp_cheat_man",1),
          (jump_to_menu, "mnu_camp_cheat_2"),
        ]
       ),
      ("camp_cheat_11",[],"All tropp upgrade.",
        [
          (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
          (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
            (neg|troop_is_hero, ":stack_troop"),
            (party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
            (call_script, "script_game_get_upgrade_xp", ":stack_troop"),
            (store_mul, ":xp_to_add", ":stack_size", reg0),
            (party_add_xp_to_stack, "p_main_party", ":i_stack", ":xp_to_add"),
          (try_end),
          (jump_to_menu, "mnu_camp_cheat_2"),
        ]
       ),
      ("cheat_faction_orders_4",[],"Cheat: Faction orders.",
       [(jump_to_menu, "mnu_faction_orders"),
        ]
       ),
	   
      ("back_to_camp_menu",[],"Back to camp menu.",
       [
         (jump_to_menu, "mnu_camp"),
        ]
       ),
      ]
  ),
  
  ("cheat_find_item",0,
   "{!}Current item range: {reg5} to {reg6}",
   "none",
   [
     (assign, reg5, "$cheat_find_item_range_begin"),
     (store_add, reg6, "$cheat_find_item_range_begin", max_inventory_items),
	 (val_min, reg6, "itm_items_end"),
	 (val_sub, reg6, 1),
     ],
    [

      ("cheat_find_item_prev_range",[], "{!}Move to previous range.",
       [
	    (val_sub, "$cheat_find_item_range_begin", max_inventory_items),
	    (try_begin),
	      (lt, "$cheat_find_item_range_begin", 0),
          (assign, "$cheat_find_item_range_begin", itm_items_end-max_inventory_items),
	    (try_end),
	    (jump_to_menu, "mnu_cheat_find_item"),
	   ]
       ),

      ("cheat_find_item_next_range",[], "{!}Move to next item range.",
       [
	    (val_add, "$cheat_find_item_range_begin", max_inventory_items),
	    (try_begin),
	      (ge, "$cheat_find_item_range_begin", "itm_items_end"),
          (assign, "$cheat_find_item_range_begin", 0),
	    (try_end),
	    (jump_to_menu, "mnu_cheat_find_item"),
	   ]
       ),	   

	   ("cheat_find_item_choose_this",[], "{!}Choose from this range.",
       [
        (troop_clear_inventory, "trp_find_item_cheat"),
        (store_add, ":max_item", "$cheat_find_item_range_begin", max_inventory_items),
        (val_min, ":max_item", "itm_items_end"),
        (store_sub, ":num_items_to_add", ":max_item", "$cheat_find_item_range_begin"),
        (try_for_range, ":i_slot", 0, ":num_items_to_add"),
          (store_add, ":item_id", "$cheat_find_item_range_begin", ":i_slot"),
          (this_or_next|player_has_item, ":item_id"),
          (this_or_next|troop_has_item_equipped, "trp_player", ":item_id"),
          (this_or_next|item_slot_eq, ":item_id", slot_item_special_given, 1),
          (neg|item_has_property, ":item_id", itp_unique),
          (troop_add_items, "trp_find_item_cheat", ":item_id", 1),
        (try_end),
        (change_screen_loot, "trp_find_item_cheat"),
	   ]
       ),	   
	   
      ("camp_action_4",[],"{!}Back to camp menu.",
       [(jump_to_menu, "mnu_camp"),
        ]
       ),
      ]
  ),

  
  ("cheat_find_item_2",0,
   "{!}Current item range: {reg5} to {reg6}",
   "none",
   [
     (assign, reg5, "$cheat_find_item_range_begin"),
     (store_add, reg6, "$cheat_find_item_range_begin", max_inventory_items),
	 (val_min, reg6, "itm_items_end"),
	 (val_sub, reg6, 1),
     ],
    [

      ("cheat_find_item_prev_range",[], "{!}Move to previous range.",
       [
	    (val_sub, "$cheat_find_item_range_begin", max_inventory_items),
	    (try_begin),
	      (lt, "$cheat_find_item_range_begin", 0),
          (assign, "$cheat_find_item_range_begin", itm_items_end-max_inventory_items),
	    (try_end),
	    (jump_to_menu, "mnu_cheat_find_item_2"),
	   ]
       ),

      ("cheat_find_item_next_range",[], "{!}Move to next item range.",
       [
	    (val_add, "$cheat_find_item_range_begin", max_inventory_items),
	    (try_begin),
	      (ge, "$cheat_find_item_range_begin", "itm_items_end"),
          (assign, "$cheat_find_item_range_begin", 0),
	    (try_end),
	    (jump_to_menu, "mnu_cheat_find_item_2"),
	   ]
       ),	   

	   ("cheat_find_item_choose_this",[], "{!}Choose from this range.",
       [
        (troop_clear_inventory, "trp_find_item_cheat"),
        (store_add, ":max_item", "$cheat_find_item_range_begin", max_inventory_items),
        (val_min, ":max_item", "itm_items_end"),
        (store_sub, ":num_items_to_add", ":max_item", "$cheat_find_item_range_begin"),
        (try_for_range, ":i_slot", 0, ":num_items_to_add"),
          (store_add, ":item_id", "$cheat_find_item_range_begin", ":i_slot"),
          (troop_add_items, "trp_find_item_cheat", ":item_id", 1),
        (try_end),
        (change_screen_loot, "trp_find_item_cheat"),
	   ]
       ),	   
	   
      ("camp_action_4",[],"{!}Back to camp menu.",
       [(jump_to_menu, "mnu_camp_cheat_2"),
        ]
       ),
      ]
  ),

#   ("cheat_change_weather",0,
#   "{!}Current cloud amount: {reg5}^Current Fog Strength: {reg6}",
#   "none",
#   [
#     (get_global_cloud_amount, reg5),
#     (get_global_haze_amount, reg6),
#     ],
#    [
#      ("cheat_increase_cloud",[], "{!}Increase Cloud Amount.",
#       [
#	    (get_global_cloud_amount, ":cur_cloud_amount"),
#        (val_add, ":cur_cloud_amount", 5),
#        (val_min, ":cur_cloud_amount", 100),
#	    (set_global_cloud_amount, ":cur_cloud_amount"),
#	   ]
#       ),
#      ("cheat_decrease_cloud",[], "{!}Decrease Cloud Amount.",
#       [
#	    (get_global_cloud_amount, ":cur_cloud_amount"),
#        (val_sub, ":cur_cloud_amount", 5),
#        (val_max, ":cur_cloud_amount", 0),
#	    (set_global_cloud_amount, ":cur_cloud_amount"),
#	   ]
#       ),
#      ("cheat_increase_fog",[], "{!}Increase Fog Amount.",
#       [
#	    (get_global_haze_amount, ":cur_fog_amount"),
#        (val_add, ":cur_fog_amount", 5),
#        (val_min, ":cur_fog_amount", 100),
#	    (set_global_haze_amount, ":cur_fog_amount"),
#	   ]
#       ),
#      ("cheat_decrease_fog",[], "{!}Decrease Fog Amount.",
#       [
#	    (get_global_haze_amount, ":cur_fog_amount"),
#        (val_sub, ":cur_fog_amount", 5),
#        (val_max, ":cur_fog_amount", 0),
#	    (set_global_haze_amount, ":cur_fog_amount"),
#	   ]
#       ),

#      ("camp_action_4",[],"{!}Back to camp menu.",
#       [(jump_to_menu, "mnu_camp"),
#        ]
#       ),
#      ]
#  ),

  ("camp_action",0,
   "Choose an action:",
   "none",
   [
     ],
    [
      #("action_read_book",[],"Select a book to read.",
      # [(jump_to_menu, "mnu_camp_action_read_book"),
      #  ]
      # ),
      ("gamble_gem",[(player_has_item,"itm_trophy_b")],
       "Gamble your war trophy.",
       [
        (troop_remove_item,"trp_player","itm_trophy_b"),
        (store_random_in_range, ":rand", 0, 5), 
        (store_random_in_range, ":rand_2", 0, 10), 
        (try_begin),
          (try_begin),
            (is_between, ":rand_2", 0, 4),
            (assign, ":item","itm_sg_human_small"),
          (else_try),
            (eq, ":rand_2", 4),
            (assign, ":item","itm_sg_purple_small"),
          (else_try),
            (eq, ":rand_2", 5),
            (assign, ":item","itm_sg_black_small"),
          (else_try),
            (eq, ":rand_2", 6),
            (assign, ":item","itm_sg_green_small"),
          (else_try),
            (eq, ":rand_2", 7),
            (assign, ":item","itm_sg_orange_small"),
          (else_try),
            (eq, ":rand_2", 8),
            (assign, ":item","itm_sg_yellow_small"),
          (else_try),
            (eq, ":rand_2", 9),
            (assign, ":item","itm_sg_blue_small"),
          (try_end),
          (try_begin),
            (is_between, ":rand", 1, 3),
            (call_script, "script_change_player_necro_item",":item",1),
          (else_try),
            (call_script, "script_change_player_necro_item",":item",1),
          (try_end),
        (else_try),
          (try_begin),
            (is_between, ":rand_2", 1, 4),
            (assign, ":item","itm_sg_human_big"),
          (else_try),
            (eq, ":rand_2", 4),
            (assign, ":item","itm_sg_purple_big"),
          (else_try),
            (eq, ":rand_2", 5),
            (assign, ":item","itm_sg_black_big"),
          (else_try),
            (eq, ":rand_2", 6),
            (assign, ":item","itm_sg_green_big"),
          (else_try),
            (eq, ":rand_2", 7),
            (assign, ":item","itm_sg_orange_big"),
          (else_try),
            (eq, ":rand_2", 8),
            (assign, ":item","itm_sg_yellow_big"),
          (else_try),
            (eq, ":rand_2", 9),
            (assign, ":item","itm_sg_blue_big"),
          (else_try),
            (assign, ":item","itm_sg_blood"),
            (troop_add_item, "trp_player", "itm_sg_blood", 0),
          (try_end),
          (call_script, "script_change_player_necro_item",":item",1),
        (try_end),
        (troop_add_gold, "trp_player", 1000),
        (jump_to_menu,"mnu_camp_action"),
        ]),        
      ("gamble",[(player_has_item,"itm_trophy_c")],
       "Gamble your epic trophy.",
       [
        (troop_remove_item,"trp_player","itm_trophy_c"),
        #(call_script,"script_change_troop_renown", "trp_player" ,50),
        #(call_script,"script_change_player_honor",5),
        (store_random_in_range, ":rand", 1, 11), 
        (val_mul, ":rand", 1000),
        #(store_random_in_range, ":rand_2", 1, 11), 
        #(val_mul, ":rand_2", 500),
        #(val_add, ":rand", ":rand_2"),
        (troop_add_gold, "trp_player", ":rand"),
        (assign, "$item_add", 1),
        (troop_clear_inventory, "trp_find_item_cheat"),
        (store_random_in_range, ":rand_3", 5, 10), 
        (call_script, "script_gamble", ":rand_3"),
        (call_script, "script_get_spawn_rate", 0),
        (assign, ":spawn_rate", reg20),
          (try_begin),
            (gt, ":spawn_rate", 5),
            (call_script, "script_give_special_loot_2"),
          (else_try),
            (troop_add_item, "trp_find_item_cheat", "itm_sg_blood", 0),
          (try_end),
        
        (jump_to_menu,"mnu_camp_action"),
        (change_screen_loot, "trp_find_item_cheat"),
        ]),        
	  ## PreBattle Orders & Deployment Begin
	  ("action_prebattle_custom_divisions",[],
        "Manage Split Troop Assignments.",
       [(start_presentation, "prsnt_prebattle_custom_divisions")]
      ), 
	   
 	  ("action_prebattle_mod_preferences",[],
        "PBOD Mod Preferences.",
       [(start_presentation, "prsnt_pbod_preferences")]
      ), 
      ## PreBattle Orders & Deployment End
      ("action_rename_kingdom",
       [
         (eq, "$players_kingdom_name_set", 1),
         (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
         (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
         ],"Rename your kingdom.",
       [(start_presentation, "prsnt_name_kingdom"),
        ]
       ),

      ("action_modify_banner",[],"Modify your banner.",
       [
           (start_presentation, "prsnt_banner_selection"),
           #(start_presentation, "prsnt_custom_banner"),
        ]
       ),
      ## CC
      ("action_redefine_keys",[],"Redefine keys for custom camera.",
       [
           (start_presentation, "prsnt_redefine_keys"),
        ]
       ),
      ("action_modify_factions_color",[],"Change the color of factions.",
       [
          (assign, "$temp", 8),
          (start_presentation, "prsnt_change_all_factions_color"),
        ]
       ),
      ("action_export_import",[],"Export/import NPCs.",
        [
          (assign, "$g_player_troop", "trp_player"),
          (jump_to_menu, "mnu_export_import_npcs"),
        ]
      ),
      ("remove_ships",[],"Remove all ships.",
        [
          (try_for_parties, ":cur_party"),
            (party_slot_eq, ":cur_party", slot_party_type, spt_ship),
            (disable_party, ":cur_party"),
          (try_end),
        ]
      ),
      ## CC
      ("action_retire",[],"Retire from adventuring.",
       [(jump_to_menu, "mnu_retirement_verify"),
        ]
       ),
      ("camp_action_4",[],"Back to camp menu.",
       [(jump_to_menu, "mnu_camp"),
        ]
       ),
      ]
  ),

#### export/import NPCs begin ####
  ("export_import_npcs", mnf_enable_hot_keys,
   "Please choose an NPC, then press key C to view and export/import this character.^^You choose {reg0?{s0}:none}.",
   "none", 
    [
      (assign, reg0, "$g_player_troop"),
      (str_store_troop_name, s0, "$g_player_troop"),
    ],
    [
      ("export_import_back",[],"Go back", 
        [
          (assign, "$g_player_troop", "trp_player"),
          (set_player_troop, "$g_player_troop"),
          (jump_to_menu, "mnu_camp_action"),
        ]
      ),
    ]+[("export_import_npc"+str(x+1), 
        [
          (store_add, ":dest_npc", "trp_npc1", x),
          (str_store_troop_name, s0, ":dest_npc"),
        ], "{s0}",
        [
          (store_add, ":dest_npc", "trp_npc1", x),
          (assign, "$g_player_troop", ":dest_npc"),
          (set_player_troop, "$g_player_troop"),
        ]) for x in range(0, 13)]+[
      ("export_import_next",[],"Next page", [(jump_to_menu, "mnu_export_import_npcs_2")]),
    ]
  ),
  
  ("export_import_npcs_2", mnf_enable_hot_keys,
    "Please choose an NPC, then press key C to view and export/import this character.^^You choose {reg0?{s0}:none}.",
    "none", 
     [
       (assign, reg0, "$g_player_troop"),
       (str_store_troop_name, s0, "$g_player_troop"),
     ],
    [
      ("export_import_prev",[],"Previous page", [(jump_to_menu, "mnu_export_import_npcs")]),
    ]+[("export_import_npc"+str(x+1), 
      [
        (store_add, ":dest_npc", "trp_npc1", x),
        (str_store_troop_name, s0, ":dest_npc"),
      ], "{s0}",
      [
        (store_add, ":dest_npc", "trp_npc1", x),
        (assign, "$g_player_troop", ":dest_npc"),
        (set_player_troop, "$g_player_troop"),
      ]) for x in range(13, 24)]
  ),
#### export/import NPCs end ####
  ("camp_recruit_prisoners",0,
   "You offer your prisoners freedom if they agree to join you as soldiers. {s18}",
   "none",
   [(assign, ":num_regular_prisoner_slots", 0),
    (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
    (try_for_range, ":cur_stack", 0, ":num_stacks"),
      (party_prisoner_stack_get_troop_id, ":cur_troop_id", "p_main_party", ":cur_stack"),
      #(store_character_level, ":level", ":cur_troop_id"),
      #(neg|ge, ":level", 41),
      (neg|troop_is_hero, ":cur_troop_id"),
      (val_add, ":num_regular_prisoner_slots", 1),
    (try_end),
    (try_begin),
      (eq, ":num_regular_prisoner_slots", 0),
      (jump_to_menu, "mnu_camp_no_prisoners"),
    (else_try),
      (eq, "$g_prisoner_recruit_troop_id", 0),
      #(store_current_hours, "$g_prisoner_recruit_last_time"),
    ## CC
        (store_random_in_range, ":random_prisoner_slot", 0, ":num_regular_prisoner_slots"),
        (try_for_range, ":cur_stack", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":cur_troop_id", "p_main_party", ":cur_stack"),
          (neg|troop_is_hero, ":cur_troop_id"),
          (val_sub, ":random_prisoner_slot", 1),
          (lt, ":random_prisoner_slot", 0),
          (assign, ":num_stacks", 0),
        (store_random_in_range, ":rand", 0, 100),
        (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
        (val_mul, ":persuasion_level", 4),
        (try_begin),
          (eq,"$background_answer_3",cb3_troubadour),
          (val_add, ":persuasion_level", 12),
          (val_mul, ":persuasion_level", 3),
          (val_div, ":persuasion_level", 2),
        (try_end),  
        (store_sub, ":reject_chance", 60, ":persuasion_level"),
        (store_troop_faction, ":troop_faction", ":cur_troop_id"),
        (store_relation, ":relation_effect", "fac_player_supporters_faction", ":troop_faction"),
        (val_sub, ":reject_chance", ":relation_effect"),
        (try_begin),
          (lt, ":rand", ":reject_chance"),
          (assign, "$g_prisoner_recruit_troop_id", -7),
        (else_try),
          (assign, "$g_prisoner_recruit_troop_id", ":cur_troop_id"),
          (party_prisoner_stack_get_size, "$g_prisoner_recruit_size", "p_main_party", ":cur_stack"),
        (try_end),
      (try_end),
    ## CC

      (try_begin),
        (gt, "$g_prisoner_recruit_troop_id", 0),
        (party_get_free_companions_capacity, ":capacity", "p_main_party"),
        (val_min, "$g_prisoner_recruit_size", ":capacity"),
        (assign, reg1, "$g_prisoner_recruit_size"),
        (gt, "$g_prisoner_recruit_size", 0),
        (try_begin),
          (gt, "$g_prisoner_recruit_size", 1),
          (assign, reg2, 1),
        (else_try),
          (assign, reg2, 0),
        (try_end),
        (str_store_troop_name_by_count, s1, "$g_prisoner_recruit_troop_id", "$g_prisoner_recruit_size"),
        (str_store_string, s18, "@{reg1} {s1} {reg2?accept:accepts} the offer."),
      (else_try),
        (str_store_string, s18, "@No one accepts the offer."),
      (try_end),
    (try_end),
    ],
    [
      ("camp_recruit_prisoners_accept",[(gt, "$g_prisoner_recruit_troop_id", 0)],"Take them.",
       [(remove_troops_from_prisoners, "$g_prisoner_recruit_troop_id", "$g_prisoner_recruit_size"),
        (party_add_members, "p_main_party", "$g_prisoner_recruit_troop_id", "$g_prisoner_recruit_size"),
        (store_mul, ":morale_change", -3, "$g_prisoner_recruit_size"),
        ## CC
        # success count
        #(val_add, "$g_persuasion_success_count", 1),
        #(assign, reg1, "$g_persuasion_success_count"),
        #(display_message, "@You have succeed to recruit prisoners for {reg1} times."),
        #(try_begin),
        #  (le, "$g_persuasion_success_count", 250),
        #  (ge, "$g_persuasion_success_count", "$g_persuasion_success_limit"),
          #(try_begin),
            #(party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
            #(lt, ":persuasion_level", 10),
            #(troop_raise_skill, "trp_player", "skl_persuasion", 1),
            #(display_message, "@Your persuasion skill has increased by 1."),
          #(try_end),
        #  (val_add, "$g_persuasion_success_limit", 50),
        #(try_end),
        ## CC
        (call_script, "script_change_player_party_morale", ":morale_change"),
        (jump_to_menu, "mnu_camp"),
        ]
       ),
      ("camp_recruit_prisoners_reject",[(gt, "$g_prisoner_recruit_troop_id", 0)],"Reject them.",
       [(jump_to_menu, "mnu_camp"),
        (assign, "$g_prisoner_recruit_troop_id", 0),
        (assign, "$g_prisoner_recruit_size", 0),
        ]
       ),
      ("continue",[(le, "$g_prisoner_recruit_troop_id", 0)],"Go back.",
       [(jump_to_menu, "mnu_camp"),
        ]
       ),
      ]
  ),
  
  ("camp_no_prisoners",0,
   "You have no prisoners to recruit from.",
   "none",
   [],
    [
      ("continue",[],"Continue...",
       [(jump_to_menu, "mnu_camp"),
        ]
       ),
      ]
  ),

  ("camp_action_read_book",0,
   "Choose a book to read:",
   "none",
   [],
      ## CC
    [
      ("action_read_book_"+str(x+1),
        [
          (store_add, ":dest_book", readable_books_begin, x),
          (player_has_item, ":dest_book"),
          (item_slot_eq, ":dest_book", slot_item_book_read, 0),
          (str_store_item_name, s1, ":dest_book"),
        ], "{s1}.",
        [
          (store_add, ":dest_book", readable_books_begin, x),
          (assign, "$temp", ":dest_book"),
          (jump_to_menu, "mnu_camp_action_read_book_start"),
        ]) for x in range(0, itm_book_wound_treatment_reference - itm_book_tactics)
    ]+[
        ("camp_action_4",[],"Back to camp menu.", [(jump_to_menu, "mnu_camp"),]),
      ]
      ## CC
  ),

  ("camp_action_read_book_start",0,
   "{s1}",
   "none",
   [(assign, ":new_book", "$temp"),
    (str_store_item_name, s2, ":new_book"),
    (try_begin),
      (store_attribute_level, ":int", "trp_player", ca_intelligence),
      (item_get_slot, ":int_req", ":new_book", slot_item_intelligence_requirement),
      (le, ":int_req", ":int"),
      (str_store_string, s1, "@You start reading {s2}. After a few pages,\
 you feel you could learn a lot from this book. You decide to keep it close by and read whenever you have the time."),
      (assign, "$g_player_reading_book", ":new_book"),
    (else_try),
      (str_store_string, s1, "@You flip through the pages of {s2}, but you find the text confusing and difficult to follow.\
 Try as you might, it soon gives you a headache, and you're forced to give up the attempt."),
    (try_end),],
    [
      ("continue",[],"Continue...",
       [(jump_to_menu, "mnu_camp"),
        ]
       ),
      ]
  ),


  ("retirement_verify",0,
   "You are at day {reg0}. Your current luck is {reg1}. Are you sure you want to retire?",
   "none",
   [
     (store_current_day, reg0),
     (assign, reg1, "$g_player_luck"),
     ],
    [
      ("retire_yes",[],"Yes.",
       [
         (start_presentation, "prsnt_retirement"),
        ]
       ),
      ("retire_no",[],"No.",
       [
         (jump_to_menu, "mnu_camp"),
        ]
       ),
      ]
  ),

  ("end_game",0,
   "The decision is made, and you resolve to give up your adventurer's\
 life and settle down. You sell off your weapons and armour, gather up\
 all your money, and ride off into the sunset....",
   "none",
   [],
    [
      ("end_game_bye",[],"Farewell.",
       [
         (change_screen_quit),
        ]
       ),
      ]
  ),

  ("cattle_herd",mnf_scale_picture,
   "You encounter a herd of cattle.",
   "none",
   [(play_sound, "snd_cow_moo"),
    (set_background_mesh, "mesh_pic_cattle"),
    (assign, "$encountered_party_friendly", 1),
    (try_begin),
      (check_quest_active, "qst_move_cattle_herd"),
      (quest_slot_eq, "qst_move_cattle_herd", slot_quest_target_party, "$g_encountered_party"),
      (assign, "$encountered_party_friendly", -1),
    (try_end),
   ],
    [       
       ("cattle_drive_away",[
        (call_script, "script_party_count_members_with_full_health", "p_main_party"),
        (assign, ":size", reg0),
        (party_stack_get_size, ":num_cattle", "$g_encountered_party", 0),
        (lt, ":size", ":num_cattle"),
       ],"Drive the cattle onward.",
       [
        (party_set_slot, "$g_encountered_party", slot_cattle_driven_by_player, 1),
        (party_set_ai_behavior, "$g_encountered_party", ai_bhvr_driven_by_party),
        (party_set_ai_object,"$g_encountered_party", "p_main_party"),
        (party_set_extra_text, "$g_encountered_party", "@Being Driven"),
        (change_screen_return),
        ]
       ),
      ("cattle_drag_with",[
       (call_script, "script_party_count_members_with_full_health", "p_main_party"),
       (assign, ":size", reg0),
       (party_stack_get_size, ":num_cattle", "$g_encountered_party", 0),
       (ge, ":size", ":num_cattle"),
      ],"Drag the cattle with you.",
       [
        (party_set_slot, "$g_encountered_party", slot_cattle_driven_by_player, 1),
        (party_set_ai_behavior, "$g_encountered_party", ai_bhvr_escort_party),
        (party_set_ai_object,"$g_encountered_party", "p_main_party"),
        (party_set_extra_text, "$g_encountered_party", "@Following"),
        (change_screen_return),
        ]
       ),
       
       
      ("cattle_stop",[],"Bring the herd to a stop.",
       [
        (party_set_slot, "$g_encountered_party", slot_cattle_driven_by_player, 0),
        (party_set_ai_behavior, "$g_encountered_party", ai_bhvr_hold),
        (change_screen_return),
        ]
       ),
       
      ("cattle_kill",[(eq, "$encountered_party_friendly", 1),],"Slaughter some of the animals.",
       [(jump_to_menu, "mnu_cattle_herd_kill"),
        (assign, "$temp", "itm_cattle_meat"),
        ]
       ),

      ("cattle_skin",[(eq, "$encountered_party_friendly", 1),],"Skin some animals and make some hides.",
       [(jump_to_menu, "mnu_cattle_herd_kill"),
        (assign, "$temp", "itm_raw_leather"),
        ]
       ),
       
      ("leave",[],"Leave.",
       [(change_screen_return),
        ]
       ),
      ]
  ),

  ("cattle_herd_kill",0,
   "How many animals do you want to slaughter?",
   "none",
   [(party_get_num_companions, reg5, "$g_encountered_party")],
     [ ("cattle_kill_"+str(x),[
        (ge, reg5, x),
        (assign, reg6, x),
        ], "{reg6}.",
        [(call_script, "script_kill_cattle_from_herd_item", "$g_encountered_party", x, "$temp"),
        (jump_to_menu, "mnu_cattle_herd_kill_end"),
        (change_screen_loot, "trp_cattle"),
        (play_sound, "snd_cow_slaughter"),])
       for x in range(1, 9)
      ]
     +[
       ("go_back_dot",[],"Go back.",[(jump_to_menu, "mnu_cattle_herd"),]),
      ]
  ),

  ("cattle_herd_kill_end",0,
   "{!}You shouldn't be reading this.",
   "none",
   [(change_screen_return)],
    [
      ]
  ),


  ("arena_duel_fight",0,
   "You and your opponent prepare to duel.",
   "none",
   [],
   [
     ("continue",[],"Continue...",
      [
        (assign, "$g_leave_encounter", 0),
        
        (try_begin),
          (is_between, "$g_encountered_party", towns_begin, towns_end),
          (party_get_slot, ":duel_scene", "$g_encountered_party", slot_town_arena),
        (else_try),
          (eq, "$g_start_arena_fight_at_nearest_town", 1),
          (assign, ":closest_town", -1),
          (assign, ":minimum_dist", 10000),
          (try_for_range, ":cur_town", towns_begin, towns_end),
            (store_distance_to_party_from_party, ":dist", ":cur_town", "$g_encountered_party"),
            (lt, ":dist", ":minimum_dist"),
            (assign, ":minimum_dist", ":dist"),
            (assign, ":closest_town", ":cur_town"),
          (try_end),           
          (try_begin),         
            (ge, ":closest_town", 0),
            (party_get_slot, ":duel_scene", ":closest_town", slot_town_arena),          
          (try_end),
          (assign, "$g_start_arena_fight_at_nearest_town", 0),
        (else_try),
          (party_get_current_terrain, ":terrain", "p_main_party"),
          (eq, ":terrain", 4),
          (assign, ":duel_scene", "scn_training_ground_ranged_melee_3"),
        (else_try),
          (eq, ":terrain", 5),
          (assign, ":duel_scene", "scn_training_ground_ranged_melee_4"),
        (else_try),
          (assign, ":duel_scene", "scn_training_ground_ranged_melee_1"),
        (try_end),
        
        (modify_visitors_at_site, ":duel_scene"),
        (reset_visitors),
        (set_visitor, 0, "trp_player"),
        (set_visitor, 1, "$g_duel_troop"),
        (set_jump_mission, "mt_duel_with_lord"),
        (jump_to_scene, ":duel_scene"),
        (jump_to_menu, "mnu_arena_duel_conclusion"),
        (change_screen_mission),        
      ]),
    ]
  ),

  
  ("arena_duel_conclusion",0,
   "{!}{s11}",
   "none",
   [
   
    (try_begin),
        (eq, "$g_leave_encounter", 1),
        (change_screen_return),
	(try_end),
	
	
    (str_store_troop_name, s10, "$g_duel_troop"),
    (try_begin),
        (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
        (check_quest_failed, "qst_duel_for_lady"),
        (str_store_string, s11, "str_you_lie_stunned_for_several_minutes_then_stagger_to_your_feet_to_find_your_s10_standing_over_you_you_have_lost_the_duel"),
    (else_try),
        (quest_slot_eq, "qst_duel_for_lady", slot_quest_target_troop, "$g_duel_troop"),
        (check_quest_succeeded, "qst_duel_for_lady"),
        (str_store_string, s11, "str_s10_lies_in_the_arenas_dust_for_several_minutes_then_staggers_to_his_feet_you_have_won_the_duel"),
	(else_try),
        (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
        (check_quest_failed, "qst_duel_courtship_rival"),
        (str_store_string, s11, "str_you_lie_stunned_for_several_minutes_then_stagger_to_your_feet_to_find_your_s10_standing_over_you_you_have_lost_the_duel"),
    (else_try),
        (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_target_troop, "$g_duel_troop"),
        (check_quest_succeeded, "qst_duel_courtship_rival"),
        (str_store_string, s11, "str_s10_lies_in_the_arenas_dust_for_several_minutes_then_staggers_to_his_feet_you_have_won_the_duel"),
	(else_try),
        (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
        (check_quest_succeeded, "qst_duel_avenge_insult"),
        (str_store_string, s11, "str_s10_lies_in_the_arenas_dust_for_several_minutes_then_staggers_to_his_feet_you_have_won_the_duel"),
	(else_try),
        (quest_slot_eq, "qst_duel_avenge_insult", slot_quest_target_troop, "$g_duel_troop"),
        (check_quest_failed, "qst_duel_avenge_insult"),
        (str_store_string, s11, "str_you_lie_stunned_for_several_minutes_then_stagger_to_your_feet_to_find_your_s10_standing_over_you_you_have_lost_the_duel"),
	(else_try),
        (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
        (check_quest_succeeded, "qst_denounce_lord"),
        (str_store_string, s11, "str_s10_lies_in_the_arenas_dust_for_several_minutes_then_staggers_to_his_feet_you_have_won_the_duel"),
	(else_try),
        (quest_slot_eq, "qst_denounce_lord", slot_quest_target_troop, "$g_duel_troop"),
        (check_quest_failed, "qst_denounce_lord"),
        (str_store_string, s11, "str_you_lie_stunned_for_several_minutes_then_stagger_to_your_feet_to_find_your_s10_standing_over_you_you_have_lost_the_duel"),
	(else_try),
        (str_store_troop_name, s10, "$g_duel_troop"),
	(try_end),
   ],
   [
     ("continue",[],"Continue...",
      [
        (call_script, "script_get_meeting_scene"), (assign, ":meeting_scene", reg0),
        (modify_visitors_at_site,":meeting_scene"),
        (reset_visitors),
        (set_visitor,0,"trp_player"),
        (set_visitor,17,"$g_duel_troop"),
        (set_jump_mission,"mt_conversation_encounter"),
        (jump_to_scene,":meeting_scene"),
        (assign, "$talk_context", tc_after_duel),
        (change_screen_map_conversation, "$g_duel_troop"),
        ]),
      ]
  ),
  
    
  (
    "simple_encounter",mnf_enable_hot_keys|mnf_scale_picture,
    "{s2} You have {reg10} troops fit for battle against their {reg11}.",
    "none",
    [      
        (assign, "$g_enemy_party", "$g_encountered_party"),
        (assign, "$g_ally_party", -1),
        (call_script, "script_encounter_calculate_fit"),
        (try_begin),
          (eq, "$new_encounter", 1),
          (assign, "$new_encounter", 0),
          (assign, "$g_encounter_is_in_village", 0),
          (assign, "$g_encounter_type", 0),
          (try_begin),
            (party_slot_eq, "$g_enemy_party", slot_party_ai_state, spai_raiding_around_center),        
            (party_get_slot, ":village_no", "$g_enemy_party", slot_party_ai_object),
        
            (store_distance_to_party_from_party, ":dist", ":village_no", "$g_enemy_party"),

            (try_begin),
              (lt, ":dist", raid_distance),
              (assign, "$g_encounter_is_in_village", ":village_no"),
              (assign, "$g_encounter_type", enctype_fighting_against_village_raid),
            (try_end),
          (try_end),
          (try_begin),
            (gt, "$g_player_raiding_village", 0),
            (assign, "$g_encounter_is_in_village", "$g_player_raiding_village"),
            (assign, "$g_encounter_type", enctype_catched_during_village_raid),
            (party_quick_attach_to_current_battle, "$g_encounter_is_in_village", 1), #attach as enemy
            (str_store_party_name, s1, "$g_encounter_is_in_village"),
            (str_store_string, s1, "@Villagers of {s1}"),
            (display_message, "str_s1_joined_battle_enemy"),
          (else_try),
            (eq, "$g_encounter_type", enctype_fighting_against_village_raid),
            (party_quick_attach_to_current_battle, "$g_encounter_is_in_village", 0), #attach as friend
            (str_store_party_name, s1, "$g_encounter_is_in_village"),
            (str_store_string, s1, "@Villagers of {s1}"),
            (display_message, "str_s1_joined_battle_friend"),
            # Let village party join battle at your side
          (try_end),
          
          ## CC
          (try_begin), # encounter bandits near village
            (party_get_template_id, ":template_id", "$g_enemy_party"),
            (this_or_next|eq, ":template_id", "pt_looters"),
            (this_or_next|eq, ":template_id", "pt_werewolf_1"),
            (this_or_next|eq, ":template_id", "pt_undead_1_3"),
            (this_or_next|eq, ":template_id", "pt_undead_1"),
            (this_or_next|is_between, ":template_id", "pt_goblin_looter", "pt_orc_warband"),
            (this_or_next|is_between, ":template_id", "pt_demon_1_weak", "pt_demon_2"),
            (this_or_next|is_between, ":template_id", "pt_wood_elven_1", "pt_giant_1"),
            (this_or_next|is_between, ":template_id", "pt_rat_tribe", "pt_minotaur_2"),
            (this_or_next|is_between, ":template_id", "pt_drow_elven_1", "pt_mage"),
            
            
            (this_or_next|is_between, ":template_id", "pt_welsh", "pt_troll"),
            (this_or_next|is_between, ":template_id", "pt_mercenary", "pt_scottish_2"),
            (this_or_next|is_between, ":template_id", "pt_rus_1", "pt_rus_deserters"),
            (is_between, ":template_id", bandit_party_template_begin, bandit_party_template_end),
            (call_script, "script_get_closest_center_of_type", "$g_enemy_party", spt_village),
            (assign, ":closest_village", reg0),
            (store_distance_to_party_from_party, ":dist", ":closest_village", "$g_enemy_party"),
            (le, ":dist", raid_distance),
            (assign, "$g_encounter_is_in_village", ":closest_village"),
          (try_end),
          
          
          ## CC
          (try_begin),
            (party_get_template_id, ":template_id", "$g_enemy_party"),
            (neq, ":template_id", "pt_routed_warriors"),
            (this_or_next|neg|check_quest_active, "qst_hunted_down_bandits"),
            (neg|quest_slot_eq, "qst_hunted_down_bandits", slot_quest_target_party, "$g_enemy_party"),
            (call_script, "script_let_nearby_parties_join_current_battle", 0, 0),
          (try_end),
          ## CC
          (call_script, "script_encounter_init_variables"),
          (assign, "$encountered_party_hostile", 0),
          (assign, "$encountered_party_friendly", 0),
          (try_begin),
            (gt, "$g_encountered_party_relation", 0),
            (assign, "$encountered_party_friendly", 1),
          (try_end),
          ## CC
          (try_begin),
            (party_get_template_id, ":template_id", "$g_enemy_party"),
            (eq, ":template_id", "pt_routed_warriors"),
            (assign, "$encountered_party_friendly", 0),
          (try_end),
          ## CC
          (try_begin),
            (lt, "$g_encountered_party_relation", 0),
            (assign, "$encountered_party_hostile", 1),
            (try_begin),
              (encountered_party_is_attacker),
              (assign, "$cant_leave_encounter", 1),
            (try_end),
          (try_end),
          (assign, "$talk_context", tc_party_encounter),
          (call_script, "script_setup_party_meeting", "$g_encountered_party"),
        (else_try), #second or more turn
#          (try_begin),
#            (call_script, "script_encounter_calculate_morale_change"),
#          (try_end),
          (try_begin),
            # We can leave battle only after some troops have been killed. 
            (eq, "$cant_leave_encounter", 1),
            (call_script, "script_party_count_members_with_full_health", "p_main_party_backup"),
            (assign, ":org_total_party_counts", reg0),
            (call_script, "script_party_count_members_with_full_health", "p_encountered_party_backup"),
            (val_add, ":org_total_party_counts", reg0),

            (call_script, "script_party_count_members_with_full_health", "p_main_party"),
            (assign, ":cur_total_party_counts", reg0),
            (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
            (val_add, ":cur_total_party_counts", reg0),

            (store_sub, ":leave_encounter_limit", ":org_total_party_counts", 10),
            (lt, ":cur_total_party_counts", ":leave_encounter_limit"),
            (assign, "$cant_leave_encounter", 0),
          (try_end),
          (eq, "$g_leave_encounter",1),
          (change_screen_return),
        (try_end),

        #setup s2
        (try_begin),
          (party_is_active, "$g_encountered_party"),
          (str_store_party_name, s1,"$g_encountered_party"),
          (store_relation, ":reln", "$g_encountered_party_faction", "fac_player_supporters_faction"),
          (assign, "$encountered_party_friendly", 0),
          (try_begin),
            (gt, ":reln", 0),
            (assign, "$encountered_party_friendly", 1),
          (try_end),
          
          (try_begin),
            (eq, "$g_encounter_type", 0),
            ## CC
            
            (try_begin),
              (eq, "$g_random_scene_size", -1),
              (call_script, "script_set_random_scene_size"),
            (try_end),
            (try_begin),
              (party_get_current_terrain, ":terrain_type", "p_main_party"),
              (is_between, ":terrain_type", rt_mountain_forest, rt_desert_forest+1),
              (val_min, "$g_random_scene_size", 2),
            (try_end),
            (store_add, ":dest_string", "str_battlefield_small", "$g_random_scene_size"),
            (str_store_string, s3, ":dest_string"),
            ## CC
            (str_store_string, s2,"@You have encountered {s1}. The battle is taking place in {s3}."),
          (else_try),
            (eq, "$g_encounter_type", enctype_fighting_against_village_raid),
            (str_store_party_name, s3, "$g_encounter_is_in_village"),
            (str_store_string, s2,"@You have engaged {s1} while they were raiding {s3}."),
          (else_try),
            (eq, "$g_encounter_type", enctype_catched_during_village_raid),
            (str_store_party_name, s3, "$g_encounter_is_in_village"),
            (str_store_string, s2,"@You were caught by {s1} while your forces were raiding {s3}."),
          (try_end),
        (try_end),
        (try_begin),
          (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
          (assign, ":num_enemy_regulars_remaining", reg0),
          (assign, ":enemy_finished", 0),
          (try_begin),
            (eq, "$g_battle_result", 1), #battle won
                        
            (this_or_next|le, ":num_enemy_regulars_remaining", 0), #battle won
            (le, ":num_enemy_regulars_remaining",  "$num_routed_enemies"), #replaced for above line because we do not want routed agents to spawn again in next turn of battle.

            (assign, ":enemy_finished",1),
          (else_try),
            (eq, "$g_engaged_enemy", 1), 
            
            (this_or_next|le, ":num_enemy_regulars_remaining", 0), 
            (le, "$g_enemy_fit_for_battle", "$num_routed_enemies"),  #replaced for above line because we do not want routed agents to spawn again in next turn of battle.
            
            (ge, "$g_friend_fit_for_battle",1),
            (assign, ":enemy_finished",1),
          (try_end),
                
          (this_or_next|eq, ":enemy_finished",1),
          (eq,"$g_enemy_surrenders",1),
          (assign, "$g_next_menu", -1),
          (jump_to_menu, "mnu_total_victory"),
        (else_try),       
          (call_script, "script_party_count_members_with_full_health", "p_main_party"),        
          (assign, ":num_our_regulars_remaining", reg0),
          (assign, ":friends_finished",0),
          (try_begin),
            (eq, "$g_battle_result", -1),

            #(eq, ":num_our_regulars_remaining", 0), #battle lost
            (le, ":num_our_regulars_remaining",  "$num_routed_us"), #replaced for above line because we do not want routed agents to spawn again in next turn of battle.

            (assign,  ":friends_finished", 1),
          (else_try),
            (eq, "$g_engaged_enemy", 1),
            (ge, "$g_enemy_fit_for_battle",1),
            (le, "$g_friend_fit_for_battle",0),
            (assign,  ":friends_finished",1),
          (try_end),
          
          (this_or_next|eq,  ":friends_finished",1),
          (eq,"$g_player_surrenders",1),
          (assign, "$g_next_menu", "mnu_captivity_start_wilderness"),
          (jump_to_menu, "mnu_total_defeat"),
        (try_end),
        (try_begin),
          (is_between, "$g_encountered_party_template", "pt_demon_1_weak", "pt_hospitalier_cultists"),
          (set_background_mesh, "mesh_pic_dark_warrior"),
        (else_try),
          (is_between, "$g_encountered_party_template", "pt_undead_1", "pt_undead_2"),
          (set_background_mesh, "mesh_pic_undead"),
        (else_try),
          (this_or_next|eq, "$g_encountered_party_template", "pt_undead_3_huge"),
          (eq, "$g_encountered_party_template", "pt_undead_3"),
          (set_background_mesh, "mesh_pic_lich"),
        (else_try),
          (this_or_next|eq, "$g_encountered_party_template", "pt_undead_2_huge"),
          (eq, "$g_encountered_party_template", "pt_undead_2"),
          (set_background_mesh, "mesh_pic_undead_horsemen"),
        (else_try),
          (this_or_next|eq, "$g_encountered_party_template", "pt_undead_4_huge"),
          (eq, "$g_encountered_party_template", "pt_undead_4"),
          (set_background_mesh, "mesh_pic_charge_undead"),
        (else_try),
          (this_or_next|is_between, "$g_encountered_party_template", "pt_mummy", "pt_werewolf_1"),
          (is_between, "$g_encountered_party_template", "pt_draugr_1", "pt_demon_1_weak"),
          (set_background_mesh, "mesh_pic_king_undead"),
        (else_try),
          (this_or_next|is_between, "$g_encountered_party_template", "pt_mummy", "pt_werewolf_1"),
          (is_between, "$g_encountered_party_template", "pt_undead_1", "pt_draugr_1"),
          (set_background_mesh, "mesh_pic_lich"),
        (else_try),
          (is_between, "$g_encountered_party_template", "pt_dwarf_1", "pt_rat_tribe"),
          (set_background_mesh, "mesh_pic_dwarf"),
        (else_try),
          (this_or_next|is_between, "$g_encountered_party_template", "pt_brigand", "pt_ninjia"),
          (this_or_next|eq, "$g_encountered_party_template", "pt_mountain_bandits"),
          (eq, "$g_encountered_party_template", "pt_looters"),
          (set_background_mesh, "mesh_pic_bandits"),
        (else_try),
          (eq, "$g_encountered_party_template", "pt_taiga_bandits"),
          (set_background_mesh, "mesh_pic_mountain_bandits"),
        (else_try),
          (this_or_next|eq, "$g_encountered_party_template", "pt_orc_huge_warband_1"),
          (eq, "$g_encountered_party_template", "pt_troll"),
          (set_background_mesh, "mesh_pic_wild_troll"),
        (else_try),
        
          (this_or_next|eq, "$g_encountered_party_template", "pt_rat_tribe"),
          (this_or_next|eq, "$g_encountered_party_template", "pt_rat_looter"),
          (is_between, "$g_encountered_party_template", "pt_goblin_looter", "pt_goblin_warrior"),
          (set_background_mesh, "mesh_pic_tribal_orcs"),
        (else_try),
          (this_or_next|eq, "$g_encountered_party_template", "pt_rat_brigand"),
          (this_or_next|eq, "$g_encountered_party_template", "pt_rat_huge"),
          (is_between, "$g_encountered_party_template", "pt_goblin_warrior", "pt_orc_bandits"),
          (set_background_mesh, "mesh_pic_orc_raider"),
        (else_try),
        
        
          (is_between, "$g_encountered_party_template", "pt_ogre_tribe", "pt_goblin_looter"),
          (set_background_mesh, "mesh_pic_orc_1"),
        (else_try),
          (is_between, "$g_encountered_party_template", "pt_orc_bandits", "pt_wood_elven_1"),
          (set_background_mesh, "mesh_pic_orc_2"),
        (else_try),
          (is_between, "$g_encountered_party_template", "pt_wood_elven_1", "pt_dwarf_1"),
          (set_background_mesh, "mesh_pic_elven_guard"),
        (else_try),
          (is_between, "$g_encountered_party_template", "pt_drow_elven_1", "pt_mage"),
          (set_background_mesh, "mesh_pic_drow"),
          
          
       (else_try),
          (this_or_next|eq, "$g_encountered_party_template", "pt_camel_cavalry"),
          (this_or_next|eq, "$g_encountered_party_template", "pt_desert_bandits"),
          (eq, "$g_encountered_party_template", "pt_steppe_bandits"),
          (set_background_mesh, "mesh_pic_steppe_bandits"),
          
        (else_try),
        
          (this_or_next|is_between, "$g_encountered_party_template", "pt_draugr_1", "pt_demon_1"),
          (this_or_next|eq, "$g_encountered_party_template", "pt_norman"),
          (eq, "$g_encountered_party_template", "pt_sea_raiders"),
          (set_background_mesh, "mesh_pic_sea_raiders"),
        (else_try),
          (this_or_next|is_between, "$g_encountered_party_template", "pt_welsh", "pt_swiss"),
          (this_or_next|is_between, "$g_encountered_party_template", "pt_forest_hunter", "pt_black_khergit_raiders"),
          (this_or_next|eq, "$g_encountered_party_template", "pt_forest_brotherhood"),
          (eq, "$g_encountered_party_template", "pt_forest_bandits"),
          (set_background_mesh, "mesh_pic_forest_bandits"),
        (else_try),
          (this_or_next|is_between, "$g_encountered_party_template", "pt_mercenary", "pt_brigand"),
        
          (this_or_next|is_between, "$g_encountered_party_template", "pt_swiss", "pt_forest_bandits"),
          (this_or_next|eq, "$g_encountered_party_template", "pt_peasant_rebels"),
          (eq, "$g_encountered_party_template", "pt_deserters"),
          (set_background_mesh, "mesh_pic_deserters"),
        (else_try),
          (this_or_next|eq, "$g_encountered_party_template", "pt_cossack"),
          (is_between, "$g_encountered_party_template", "pt_rus_1", "pt_welsh"),
          (set_background_mesh, "mesh_pic_vaegir"),
        (else_try),
          (is_between, "$g_encountered_party_template", "pt_black_khergit_raiders", "pt_peasant_rebels"),
          (set_background_mesh, "mesh_pic_khergit"),
        (else_try),
          (eq, "$g_encountered_party_template", "pt_kingdom_hero_party"),
          (party_stack_get_troop_id, ":leader_troop", "$g_encountered_party", 0),
          (ge, ":leader_troop", 1),
          (troop_get_slot, ":leader_troop_faction", ":leader_troop", slot_troop_original_faction),
          (try_begin),
            (eq, ":leader_troop_faction", fac_kingdom_1),
            (set_background_mesh, "mesh_pic_gondor"),
          (else_try),
            (this_or_next|eq, ":leader_troop_faction", fac_kingdom_13),
            (eq, ":leader_troop_faction", fac_kingdom_7),
            (set_background_mesh, "mesh_pic_swad"),
          (else_try),
            (eq, ":leader_troop_faction", fac_kingdom_4),
            (set_background_mesh, "mesh_pic_elven_guard"),
          (else_try),
            (this_or_next|eq, ":leader_troop_faction", fac_kingdom_14),
            (this_or_next|eq, ":leader_troop_faction", fac_kingdom_8),
            (eq, ":leader_troop_faction", fac_kingdom_2),
            (set_background_mesh, "mesh_pic_vaegir"),
          (else_try),
            (eq, ":leader_troop_faction", fac_kingdom_3),
            (set_background_mesh, "mesh_pic_orc_1"),
          (else_try),
            (eq, ":leader_troop_faction", fac_kingdom_10),
            (set_background_mesh, "mesh_pic_nord"),
          (else_try),
            (eq, ":leader_troop_faction", fac_kingdom_5),
            (set_background_mesh, "mesh_pic_charge_undead"),
          (else_try),
            (eq, ":leader_troop_faction", fac_kingdom_11),
            (set_background_mesh, "mesh_pic_rhodock"),
          (else_try),
            (this_or_next|eq, ":leader_troop_faction", fac_kingdom_12),
            (this_or_next|eq, ":leader_troop_faction", fac_kingdom_9),
            (eq, ":leader_troop_faction", fac_kingdom_6),
            (set_background_mesh, "mesh_pic_sarranid_encounter"),
          (try_end),
        (try_end),
          ## Pre-Battle Orders & Deployment Begin
          ## Pre-Battle Orders & Deployment End
    ],
    [
## PreBattle Orders & Deployment Begin
	  ("encounter_attack_deployment",
      [
        (eq, "$encountered_party_friendly", 0),
        (neg|troop_is_wounded, "$g_player_troop"),
        
        (call_script, "script_party_count_fit_for_battle", "p_collective_friends"),
        (assign, ":friend_count", reg0),
        (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
        (assign, ":enemy_count", reg0),
        (store_add, ":total_combatants", ":friend_count", ":enemy_count"),
        (party_get_slot, ":battle_size", "p_main_party", slot_party_prebattle_battle_size),
        (gt, ":total_combatants", ":battle_size"),
      ],
      "Choose who will join you in battle.",
      [
          (assign, "$g_next_menu", "mnu_simple_encounter"),
        (start_presentation, "prsnt_prebattle_custom_deployment"),
      ]),
	  
	  ("encounter_attack_plan",
      [
        (eq, "$encountered_party_friendly", 0),
        (neg|troop_is_wounded, "$g_player_troop"),
        (neq, "$g_encounter_type", enctype_fighting_against_village_raid),
        (neq, "$g_encounter_type", enctype_catched_during_village_raid),
      ],
      "Plan your battle with the enemy.",
      [
          (assign, "$g_next_menu", "mnu_simple_encounter"),        
        (start_presentation, "prsnt_prebattle_orders"),
      ]),
	  
	  
	  ("encounter_attack_do_plan",
      [
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 1),
      ],
      "Enough planning. To battle!",
      [
	    (party_set_slot, "p_main_party", slot_party_prebattle_plan, 0),
	  
        (assign, "$g_battle_result", 0),
        (assign, "$g_engaged_enemy", 1),
        
        (party_get_template_id, ":encountered_party_template", "$g_encountered_party"),        
        (try_begin),
          (eq, ":encountered_party_template", "pt_village_farmers"),
          (unlock_achievement, ACHIEVEMENT_HELP_HELP_IM_BEING_REPRESSED),
        (try_end),     
     
        (call_script, "script_calculate_renown_value"),
        (call_script, "script_calculate_battle_advantage"),
        (set_battle_advantage, reg0),
        
        (set_party_battle_mode),
        (try_begin),
          (eq, "$g_encounter_type", enctype_fighting_against_village_raid),
          (assign, "$g_village_raid_evil", 0),
          (set_jump_mission,"mt_village_raid"),
          (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
          (jump_to_scene, ":scene_to_use"),
        (else_try),
          (eq, "$g_encounter_type", enctype_catched_during_village_raid),
          (assign, "$g_village_raid_evil", 0),
          (set_jump_mission,"mt_village_raid"),
          (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
          (jump_to_scene, ":scene_to_use"),
        (else_try),
          (set_jump_mission,"mt_lead_charge"),
          (try_begin),
            (gt, "$g_encounter_is_in_village", 0),
            (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
            (jump_to_scene, ":scene_to_use"),
          (else_try),
            (call_script, "script_setup_random_scene"),
          (try_end),
        (try_end),
        (assign, "$g_next_menu", "mnu_simple_encounter"),
        (jump_to_menu, "mnu_battle_debrief"),
        (change_screen_mission),
      ]),
	  
	  ("encounter_attack_clear_plan",
      [
         (this_or_next|party_slot_eq, "p_main_party", slot_party_prebattle_customized_deployment, 1),
         (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 1),
      ],
      "Re-assess the situation.",
      [
        (try_begin),
            (party_slot_eq, "p_main_party", slot_party_prebattle_customized_deployment, 1),
            (party_set_slot, "p_main_party", slot_party_prebattle_customized_deployment, 0),
        (try_end),
	    (try_begin),
            (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 1),
            (party_set_slot, "p_main_party", slot_party_prebattle_plan, 0),
            (party_set_slot, "p_main_party", slot_party_prebattle_num_orders, 0),
        (try_end),
        
        (jump_to_menu, "mnu_simple_encounter"),
      ]),
	  
	  ("encounter_attack_hold",
      [
        (eq, "$encountered_party_friendly", 0),
        (neg|troop_is_wounded, "$g_player_troop"),
        (neq, "$g_encounter_type", enctype_fighting_against_village_raid),
        (neq, "$g_encounter_type", enctype_catched_during_village_raid),
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
      ],
      "Take the field.",
      [
        (assign, "$g_battle_result", 0),
        (assign, "$g_engaged_enemy", 1),
        
        (party_get_template_id, ":encountered_party_template", "$g_encountered_party"),        
        (try_begin),
          (eq, ":encountered_party_template", "pt_village_farmers"),
          (unlock_achievement, ACHIEVEMENT_HELP_HELP_IM_BEING_REPRESSED),
        (try_end),     
         
        (party_set_slot, "p_main_party", slot_party_prebattle_num_orders, 1),
	    (party_get_slot, ":first_order", "p_main_party", slot_party_prebattle_order_array_begin),
        (try_begin),
            (gt, ":first_order", 0),
            (party_set_slot, "p_main_party_backup", slot_party_prebattle_order_array_begin, ":first_order"),
        (try_end),
        (party_set_slot, "p_main_party", slot_party_prebattle_order_array_begin, 910),        
        
        (call_script, "script_calculate_renown_value"),
        (call_script, "script_calculate_battle_advantage"),
        (set_battle_advantage, reg0),
        (set_party_battle_mode),
        
        (set_jump_mission,"mt_lead_charge"),
        (try_begin),
          (eq, "$g_encounter_type", enctype_fighting_against_village_raid),
          (assign, "$g_village_raid_evil", 0),
          (set_jump_mission,"mt_village_raid"),
          (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
          (jump_to_scene, ":scene_to_use"),
        (else_try),
          (eq, "$g_encounter_type", enctype_catched_during_village_raid),
          (assign, "$g_village_raid_evil", 0),
          (set_jump_mission,"mt_village_raid"),
          (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
          (jump_to_scene, ":scene_to_use"),
        (else_try),
          (set_jump_mission,"mt_lead_charge"),
          (try_begin),
            (gt, "$g_encounter_is_in_village", 0),
            (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
            (jump_to_scene, ":scene_to_use"),
          (else_try),
            (call_script, "script_setup_random_scene"),
          (try_end),
        (try_end),
        (assign, "$g_next_menu", "mnu_simple_encounter"),
        (jump_to_menu, "mnu_battle_debrief"),
        (change_screen_mission),
      ]),
	  
	  ("encounter_attack_follow",
      [
        (eq, "$encountered_party_friendly", 0),
        (neg|troop_is_wounded, "$g_player_troop"),
        (neq, "$g_encounter_type", enctype_fighting_against_village_raid),
        (neq, "$g_encounter_type", enctype_catched_during_village_raid),
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
      ],
      "Lead your troops.",
      [
        (assign, "$g_battle_result", 0),
        (assign, "$g_engaged_enemy", 1),
        
        (party_get_template_id, ":encountered_party_template", "$g_encountered_party"),        
        (try_begin),
          (eq, ":encountered_party_template", "pt_village_farmers"),
          (unlock_achievement, ACHIEVEMENT_HELP_HELP_IM_BEING_REPRESSED),
        (try_end),     
         
        (party_set_slot, "p_main_party", slot_party_prebattle_num_orders, 1),
        (party_get_slot, ":first_order", "p_main_party", slot_party_prebattle_order_array_begin),
        (try_begin),
            (gt, ":first_order", 0),
            (party_set_slot, "p_main_party_backup", slot_party_prebattle_order_array_begin, ":first_order"),
        (try_end),
        (party_set_slot, "p_main_party", slot_party_prebattle_order_array_begin, 911),        
        
        (call_script, "script_calculate_renown_value"),
        (call_script, "script_calculate_battle_advantage"),
        (set_battle_advantage, reg0),
        (set_party_battle_mode),
        
        (set_jump_mission,"mt_lead_charge"),
        (try_begin),
          (eq, "$g_encounter_type", enctype_fighting_against_village_raid),
          (assign, "$g_village_raid_evil", 0),
          (set_jump_mission,"mt_village_raid"),
          (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
          (jump_to_scene, ":scene_to_use"),
        (else_try),
          (eq, "$g_encounter_type", enctype_catched_during_village_raid),
          (assign, "$g_village_raid_evil", 0),
          (set_jump_mission,"mt_village_raid"),
          (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
          (jump_to_scene, ":scene_to_use"),
        (else_try),
          (set_jump_mission,"mt_lead_charge"),
          (try_begin),
            (gt, "$g_encounter_is_in_village", 0),
            (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
            (jump_to_scene, ":scene_to_use"),
          (else_try),
            (call_script, "script_setup_random_scene"),
          (try_end),
        (try_end),
        (assign, "$g_next_menu", "mnu_simple_encounter"),
        (jump_to_menu, "mnu_battle_debrief"),
        (change_screen_mission),
      ]),
## PreBattle Orders & Deployment End
    
      ("choose_battlefield_size", 
        [
          (eq, "$g_encounter_type", 0),
          (eq, "$cant_leave_encounter", 0),
          (eq, "$encountered_party_friendly", 0),
          (neg|troop_is_wounded, "$g_player_troop"), ## CC
         ],
        "Choose the size of battlefield.",
        [
        (assign, "$g_next_menu", "mnu_simple_encounter"),
        (jump_to_menu, "mnu_battlefield_size"),]),
      
      ("camp_special_ability",[],"Choose your special_ability.",[(assign, "$return_menu", "mnu_simple_encounter"),(jump_to_menu, "mnu_camp_set_special_ability"),]),
      
      ("toggle_weapons",
        [
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (try_begin),
            (eq, "$g_weapons_set_no", 0),
            (assign, reg1, 2),
          (else_try),
            (assign, reg1, 1),
          (try_end),
        ],
        "Toggle weapons to set {reg1} for heroes.",
        [
          (val_add, "$g_weapons_set_no", 1),
          (val_mod, "$g_weapons_set_no", 2),
          (call_script, "script_all_toggle_weapons_set", 0),
        ]),
    
## CC
      ("change_commander_simple_encounter",
        [
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (str_store_troop_name,s7,"$g_player_troop"),
          (set_player_troop, "$g_player_troop"),
        ],
        "Change commander.(Current commander: {s7})",
        [
          (start_presentation, "prsnt_change_commander"),
        ]),
## CC
      ("encounter_attack",
      [
          (eq, "$encountered_party_friendly", 0),
          ## CC
          (neg|troop_is_wounded, "$g_player_troop"),
          ## CC
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
      ],
      "Charge the enemy.",
      [
        (assign, "$g_battle_result", 0),
        (assign, "$g_engaged_enemy", 1),
        (party_get_template_id, ":encountered_party_template", "$g_encountered_party"),        
        (try_begin),
          (eq, ":encountered_party_template", "pt_village_farmers"),
          (unlock_achievement, ACHIEVEMENT_HELP_HELP_IM_BEING_REPRESSED),
        (try_end),          
        
        (call_script, "script_calculate_renown_value"),
        (call_script, "script_calculate_battle_advantage"),
        (set_battle_advantage, reg0),
        (set_party_battle_mode),
        (try_begin),
          (eq, "$g_encounter_type", enctype_fighting_against_village_raid),
          (assign, "$g_village_raid_evil", 0),
          (set_jump_mission,"mt_village_raid"),
          (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
          (jump_to_scene, ":scene_to_use"),
        (else_try),
          (eq, "$g_encounter_type", enctype_catched_during_village_raid),
          (assign, "$g_village_raid_evil", 0),
          (set_jump_mission,"mt_village_raid"),
          (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
          (jump_to_scene, ":scene_to_use"),
#         (else_try),
#          (party_get_position,pos1,"p_main_party"),
#            (party_get_position,pos2,"p_bridge_15"),
#            (get_distance_between_positions,":cur_distance",pos1,pos2),
#            (lt,":cur_distance",100),
#            (assign, ":scene_to_use", "scn_bridge_15"),
#          (set_jump_mission,"mt_lead_charge"),
#          (jump_to_scene, ":scene_to_use"),
        (else_try),
          (set_jump_mission,"mt_lead_charge"),
          (try_begin),
            (gt, "$g_encounter_is_in_village", 0),
            (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
            (jump_to_scene, ":scene_to_use"),
          (else_try),
            (call_script, "script_setup_random_scene"),
          (try_end),
        (try_end),
        (assign, "$g_next_menu", "mnu_simple_encounter"),
        (jump_to_menu, "mnu_battle_debrief"),
        (change_screen_mission),
      ]),
      
      ("encounter_order_attack",
      [
        (eq, "$encountered_party_friendly", 0),
        (call_script, "script_party_count_members_with_full_health", "p_main_party"),
        (ge, reg0, 4),
        ## CC
        (call_script, "script_party_calculate_strength", "p_main_party", 0),
        (assign, ":main_party_strength", reg0),
        (call_script, "script_party_calculate_strength", "p_collective_friends", 0),
        (assign, ":friends_strength", reg0),
        (val_mul, ":main_party_strength", 4),
        (ge, ":main_party_strength", ":friends_strength"),
        ## CC
        ## PreBattle Orders & Deployment Begin
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
        ## PreBattle Orders & Deployment End
      ],
      "Order your troops to attack without you.",
      [
        (jump_to_menu, "mnu_order_attack_begin"),
        #(simulate_battle,3),
      ]),
      
      ("encounter_leave",[
          (eq,"$cant_leave_encounter", 0),
          ## PreBattle Orders & Deployment Begin
          (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
          ## PreBattle Orders & Deployment End
          ],"Leave.",[

###NPC companion changes begin
              (try_begin),
                  (eq, "$encountered_party_friendly", 0),
                  (encountered_party_is_attacker),
                  (call_script, "script_objectionable_action", tmt_aristocratic, "str_flee_battle"),
              (try_end),
###NPC companion changes end
#Troop commentary changes begin
              (try_begin),
                  (eq, "$encountered_party_friendly", 0),
#                  (encountered_party_is_attacker),
                  (party_get_num_companion_stacks, ":num_stacks", "p_encountered_party_backup"),
                  (try_for_range, ":stack_no", 0, ":num_stacks"),
                    (party_stack_get_troop_id,   ":stack_troop","p_encountered_party_backup",":stack_no"),
                    (is_between, ":stack_troop", active_npcs_begin, active_npcs_end),
                    (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
                    (store_troop_faction, ":victorious_faction", ":stack_troop"),
#                    (store_relation, ":relation_with_stack_troop", ":victorious_faction", "fac_player_faction"),
#                    (lt, ":relation_with_stack_troop", 0),
                    (call_script, "script_add_log_entry", logent_player_retreated_from_lord, "trp_player",  -1, ":stack_troop", ":victorious_faction"),
                  (try_end),
              (try_end),
#Troop commentary changes end
          	(leave_encounter),
          	(change_screen_return),
          	]),
      ("encounter_retreat",[
         (eq,"$cant_leave_encounter", 1),
         (call_script, "script_get_max_skill_of_player_party", "skl_tactics"),
         (assign, ":max_skill", reg0),
         (val_add, ":max_skill", 4),

         (call_script, "script_party_count_members_with_full_health", "p_collective_enemy", 0),
         (assign, ":enemy_party_strength", reg0),
         (val_div, ":enemy_party_strength", 2),

         (val_div, ":enemy_party_strength", ":max_skill"),
         (val_max, ":enemy_party_strength", 1),

         (call_script, "script_party_count_fit_regulars", "p_main_party"),
         (assign, ":player_count", reg0),
         (ge, ":player_count", ":enemy_party_strength"),
                 ## PreBattle Orders & Deployment Begin
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
        ## PreBattle Orders & Deployment End
         ],"Pull back, leaving some soldiers behind to cover your retreat.",[(jump_to_menu, "mnu_encounter_retreat_confirm"),]),
      ("encounter_surrender",[
         (eq,"$cant_leave_encounter", 1),
                 ## PreBattle Orders & Deployment Begin
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
        ## PreBattle Orders & Deployment End
          ],"Surrender.",[(assign,"$g_player_surrenders",1)]),
    ]
  ),
  (
    "encounter_retreat_confirm",0,
    "As the party member with the highest tactics skill,\
 ({reg2}), {reg3?you devise:{s3} devises} a plan that will allow you and your men to escape with your lives,\
 but you'll have to leave {reg4} soldiers behind to stop the enemy from giving chase.",
    "none",
    [(call_script, "script_get_max_skill_of_player_party", "skl_tactics"),
     (assign, ":max_skill", reg0),
     (assign, ":max_skill_owner", reg1),
     (assign, reg2, ":max_skill"),
     (val_add, ":max_skill", 4),

     (call_script, "script_party_count_members_with_full_health", "p_collective_enemy", 0),
     (assign, ":enemy_party_strength", reg0),
     (val_div, ":enemy_party_strength", 2),

     (store_div, reg4, ":enemy_party_strength", ":max_skill"),
     (val_max, reg4, 1),
     
     (try_begin),
       (eq, ":max_skill_owner", "trp_player"),
       (assign, reg3, 1),
     (else_try),
       (assign, reg3, 0),
       (str_store_troop_name, s3, ":max_skill_owner"),
     (try_end),
     ],
    [
      ("leave_behind",[],"Go on. The sacrifice of these men will save the rest.",[
          (assign, ":num_casualties", reg4),
          (try_for_range, ":unused", 0, ":num_casualties"),
            (call_script, "script_cf_party_remove_random_regular_troop", "p_main_party"),
            (assign, ":lost_troop", reg0),
            (store_random_in_range, ":random_no", 0, 100),
            (ge, ":random_no", 30),
            (party_add_prisoners, "$g_encountered_party", ":lost_troop", 1),
           (try_end),
           (call_script, "script_change_player_party_morale", -20),
           (jump_to_menu, "mnu_encounter_retreat"),
          ]),
      ("dont_leave_behind",[],"No. We leave no one behind.",[(jump_to_menu, "mnu_simple_encounter"),]),
    ]
  ),
  (
    "encounter_retreat",0,
    "You tell {reg4} of your troops to hold the enemy while you retreat with the rest of your party.",
    "none",
    [
     ],
    [
      ("continue",[],"Continue...",[
###Troop commentary changes begin
          (call_script, "script_objectionable_action", tmt_aristocratic, "str_flee_battle"),
          (party_get_num_companion_stacks, ":num_stacks", "p_encountered_party_backup"),
          (try_for_range, ":stack_no", 0, ":num_stacks"),
              (party_stack_get_troop_id,   ":stack_troop","p_encountered_party_backup",":stack_no"),
              (is_between, ":stack_troop", active_npcs_begin, active_npcs_end),
              (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),

              (store_troop_faction, ":victorious_faction", ":stack_troop"),
              (call_script, "script_add_log_entry", logent_player_retreated_from_lord_cowardly, "trp_player",  -1, ":stack_troop", ":victorious_faction"),
          (try_end),
###Troop commentary changes end          
          (party_ignore_player, "$g_encountered_party", 1),
          (leave_encounter),(change_screen_return)]),
    ]
  ),
  (
    "order_attack_begin",0,
    "Your troops prepare to attack the enemy.",
    "none",
    [(set_background_mesh, "mesh_pic_charge"),],
    [
      ("order_attack_begin",[],"Order the attack to begin.",
      [
        (party_get_template_id, ":encountered_party_template", "$g_encountered_party"),
        (try_begin),
          (eq, ":encountered_party_template", "pt_village_farmers"),
          (unlock_achievement, ACHIEVEMENT_HELP_HELP_IM_BEING_REPRESSED),
        (try_end),

        (assign, "$g_engaged_enemy", 1),
        (jump_to_menu,"mnu_order_attack_2"),
      ]),
      ("call_back",[],"Call them back.",[(jump_to_menu,"mnu_simple_encounter")]),
    ]
  ),
  (
      "order_attack_2",mnf_disable_all_keys,
    "{s4}^^Your casualties: {s8}^^Enemy casualties: {s9}",
      "none",
      [
      (set_background_mesh, "mesh_pic_charge"),
      (call_script, "script_party_calculate_strength", "p_main_party", 1), #exclude player
      (assign, ":player_party_strength", reg0),

      (call_script, "script_party_calculate_strength", "p_collective_enemy", 0),
      (assign, ":enemy_party_strength", reg0),

      (party_collect_attachments_to_party, "p_main_party", "p_collective_ally"),
      (call_script, "script_party_calculate_strength", "p_collective_ally", 1), #exclude player
      (assign, ":total_player_and_followers_strength", reg0),
      
      (assign,":friends_strength", ":total_player_and_followers_strength"),
      (assign,":enemy_strength", ":enemy_party_strength"),
      
      (store_add, ":total_strength", ":friends_strength", ":enemy_strength"),
            
      (val_mul,":total_player_and_followers_strength", ":friends_strength"),
      (val_div,":total_player_and_followers_strength", ":total_strength"),
      (val_mul,":total_player_and_followers_strength", ":friends_strength"),
      (val_div,":total_player_and_followers_strength", ":total_strength"),
      
      (val_mul,":enemy_party_strength", ":enemy_strength"),
      (val_div,":enemy_party_strength", ":total_strength"),
      (val_mul,":enemy_party_strength", ":enemy_strength"),
      (val_div,":enemy_party_strength", ":total_strength"),
      
      (party_get_skill_level, ":ally_tactics", "p_collective_ally", skl_tactics),
      (party_get_skill_level, ":enemy_tactics", "p_collective_enemy", skl_tactics),
          
      (val_add, ":enemy_tactics",10),
      (val_mul,":total_player_and_followers_strength", 10),
      (val_div,":total_player_and_followers_strength", ":enemy_tactics"),
                         
      (val_mul,":player_party_strength", 10),
      (val_div,":player_party_strength", ":enemy_tactics"),
                         
      (val_add, ":ally_tactics",10),
      (val_mul,":enemy_party_strength", 10),
      (val_div,":enemy_party_strength", ":ally_tactics"),
      (try_begin),
        (le, ":total_player_and_followers_strength", ":enemy_party_strength"),
        (assign, ":minimum_power", ":total_player_and_followers_strength"),
      (else_try),
        (assign, ":minimum_power", ":enemy_party_strength"),
      (try_end),

      (try_begin),
        (le, ":minimum_power", 25),
        (assign, ":division_constant", 1),
      (else_try),
        (le, ":minimum_power", 50),
        (assign, ":division_constant", 2),
      (else_try),
        (le, ":minimum_power", 75),
        (assign, ":division_constant", 3),
      (else_try),
        (le, ":minimum_power", 125),
        (assign, ":division_constant", 4),
      (else_try),
        (le, ":minimum_power", 200),
        (assign, ":division_constant", 5),
      (else_try),
        (le, ":minimum_power", 400),
        (assign, ":division_constant", 6),
      (else_try),
        (le, ":minimum_power", 800),
        (assign, ":division_constant", 7),
      (else_try),
        (le, ":minimum_power", 1600),
        (assign, ":division_constant", 8),
      (else_try),
        (le, ":minimum_power", 3200),
        (assign, ":division_constant", 9),
      (else_try),
        (le, ":minimum_power", 6400),
        (assign, ":division_constant", 10),
      (else_try),
        (le, ":minimum_power", 12800),
        (assign, ":division_constant", 11),
      (else_try),
        (le, ":minimum_power", 25600),
        (assign, ":division_constant", 12),
      (else_try),
        (le, ":minimum_power", 51200),
        (assign, ":division_constant", 13),
      (else_try),
        (le, ":minimum_power", 102400),
        (assign, ":division_constant", 14),
      (else_try),
        (assign, ":division_constant", 15),
      (try_end),

      (val_div, ":player_party_strength", ":division_constant"), #1.126, ":division_constant" was 5 before
      (val_max, ":player_party_strength", 1), #1.126
      (val_div, ":enemy_party_strength", ":division_constant"), #1.126, ":division_constant" was 5 before
      (val_max, ":enemy_party_strength", 1), #1.126
      (val_div, ":total_player_and_followers_strength", ":division_constant"), #1.126, ":division_constant" was 5 before
      (val_max, ":total_player_and_followers_strength", 1), #1.126

      (store_mul, "$g_strength_contribution_of_player", ":player_party_strength", 100),
      (val_div, "$g_strength_contribution_of_player", ":total_player_and_followers_strength"),

      ## CC
      (try_begin),
        (store_mul, ":enemy_party_strength_mult_10", ":enemy_party_strength", 10),
        (ge, ":total_player_and_followers_strength", ":enemy_party_strength_mult_10"),
        (assign, ":enemy_party_strength", 0),
      (try_end),
      ## CC
      
         (inflict_casualties_to_party_group, "p_main_party", ":enemy_party_strength", "p_temp_casualties"),
         (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
         (str_store_string_reg, s8, s0),

      (try_begin),
        (ge, "$g_ally_party", 0),
        (inflict_casualties_to_party_group, "$g_ally_party", ":enemy_party_strength", "p_temp_casualties"),
        (str_store_string_reg, s8, s0),
      (try_end),

      (inflict_casualties_to_party_group, "$g_encountered_party", ":total_player_and_followers_strength", "p_temp_casualties"),

      #ozan begin
      (party_get_num_companion_stacks, ":num_stacks", "p_temp_casualties"),
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", "p_temp_casualties", ":stack_no"),
        (try_begin),
          (party_stack_get_size, ":stack_size", "p_temp_casualties", ":stack_no"),
          (gt, ":stack_size", 0),
          (party_add_members, "p_total_enemy_casualties", ":stack_troop", ":stack_size"), #addition_to_p_total_enemy_casualties
          (party_stack_get_num_wounded, ":stack_wounded_size", "p_temp_casualties", ":stack_no"),
          (gt, ":stack_wounded_size", 0),
          (party_wound_members, "p_total_enemy_casualties", ":stack_troop", ":stack_wounded_size"),
        (try_end),
      (try_end),
      #ozan end

         (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
         (str_store_string_reg, s9, s0),

         (party_collect_attachments_to_party, "$g_encountered_party", "p_collective_enemy"),
         (assign, "$no_soldiers_left", 0),
         (try_begin),
        (call_script, "script_party_count_members_with_full_health", "p_main_party"),
        (assign, ":num_our_regulars_remaining", reg0),
        (store_add, ":num_routed_us_plus_one", "$num_routed_us", 1),
        (le, ":num_our_regulars_remaining", ":num_routed_us_plus_one"), #replaced for above line because we do not want routed agents to spawn again in next turn of battle.
            (assign, "$no_soldiers_left", 1),
            (str_store_string, s4, "str_order_attack_failure"),
         (else_try),
        (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
        (assign, ":num_enemy_regulars_remaining", reg0),
        (this_or_next|le, ":num_enemy_regulars_remaining", 0),
        (le, ":num_enemy_regulars_remaining", "$num_routed_enemies"), #replaced for above line because we do not want routed agents to spawn again in next turn of battle.
            (assign, ":continue", 0),
            (party_get_num_companion_stacks, ":party_num_stacks", "p_collective_enemy"),
            (try_begin),
               (eq, ":party_num_stacks", 0),
               (assign, ":continue", 1),
            (else_try),
               (party_stack_get_troop_id, ":party_leader", "p_collective_enemy", 0),
               (try_begin),
                  (neg|troop_is_hero, ":party_leader"),
                  (assign, ":continue", 1),
               (else_try),
                  (troop_is_wounded, ":party_leader"),
                  (assign, ":continue", 1),
               (try_end),
            (try_end),
            (eq, ":continue", 1),
            (assign, "$g_battle_result", 1),
            (assign, "$no_soldiers_left", 1),
            (str_store_string, s4, "str_order_attack_success"),
         (else_try),
            (str_store_string, s4, "str_order_attack_continue"),
         (try_end),
      ],
    [
      ("order_attack_continue",[(eq, "$no_soldiers_left", 0)],"Order your soldiers to continue the attack.",[
          (jump_to_menu,"mnu_order_attack_2"),
          ]),
      ("order_retreat",[(eq, "$no_soldiers_left", 0)],"Call your soldiers back.",[
          (jump_to_menu,"mnu_simple_encounter"),
          ]),
      ("continue",[(eq, "$no_soldiers_left", 1)],"Continue...",[
          (jump_to_menu,"mnu_simple_encounter"),
          ]),
    ]
  ),

  (
    "battle_debrief",mnf_scale_picture|mnf_disable_all_keys,
    "{s11}^^Your Casualties:{s8}{s10}^^Enemy Casualties:{s9}^^Kill count:{s12}",
    "none",
    [
     (try_begin),
       (eq, "$g_battle_result", 1),
       (call_script, "script_change_troop_renown", "trp_player", "$battle_renown_value"),
       (try_begin),  
         (ge, "$g_encountered_party", 0),
         (party_is_active, "$g_encountered_party"),
         (party_get_template_id, ":encountered_party_template", "$g_encountered_party"),
         (eq, ":encountered_party_template", "pt_kingdom_caravan_party"),                  
         (get_achievement_stat, ":number_of_village_raids", ACHIEVEMENT_THE_BANDIT, 0),
         (get_achievement_stat, ":number_of_caravan_raids", ACHIEVEMENT_THE_BANDIT, 1),
         (val_add, ":number_of_caravan_raids", 1),
         (set_achievement_stat, ACHIEVEMENT_THE_BANDIT, 1, ":number_of_caravan_raids"),
         (try_begin),
           (ge, ":number_of_village_raids", 3),
           (ge, ":number_of_caravan_raids", 3),
           (unlock_achievement, ACHIEVEMENT_THE_BANDIT),
         (try_end),
       (try_end),  
       (try_begin),
         (party_get_current_terrain, ":cur_terrain", "p_main_party"),
         (eq, ":cur_terrain", rt_snow),
         (get_achievement_stat, ":number_of_victories_at_snowy_lands", ACHIEVEMENT_BEST_SERVED_COLD, 0),
         (val_add, ":number_of_victories_at_snowy_lands", 1),
         (set_achievement_stat, ACHIEVEMENT_BEST_SERVED_COLD, 0, ":number_of_victories_at_snowy_lands"),
         (try_begin),
           (eq, ":number_of_victories_at_snowy_lands", 10),
           (unlock_achievement, ACHIEVEMENT_BEST_SERVED_COLD),
         (try_end),
       (try_end),              
       (try_begin),
         (ge, "$g_enemy_party", 0),
         (party_is_active, "$g_enemy_party"),
         (party_stack_get_troop_id, ":stack_troop", "$g_enemy_party", 0),          
         (eq, ":stack_troop", "trp_mountain_bandit"),
         (get_achievement_stat, ":number_of_victories_aganist_mountain_bandits", ACHIEVEMENT_MOUNTAIN_BLADE, 0),
         (val_add, ":number_of_victories_aganist_mountain_bandits", 1),
         (set_achievement_stat, ACHIEVEMENT_MOUNTAIN_BLADE, 0, ":number_of_victories_aganist_mountain_bandits"),
         (try_begin),
           (eq, ":number_of_victories_aganist_mountain_bandits", 10),
           (unlock_achievement, ACHIEVEMENT_MOUNTAIN_BLADE),
         (try_end),
       (try_end),  
       (try_begin),
         (is_between, "$g_ally_party", walled_centers_begin, walled_centers_end),
         (unlock_achievement, ACHIEVEMENT_NONE_SHALL_PASS),
       (try_end),
       (try_begin),  
         (eq, "$g_joined_battle_to_help", 1), 
         (unlock_achievement, ACHIEVEMENT_GOOD_SAMARITAN),
       (try_end),
     (try_end),
     (assign, "$g_joined_battle_to_help", 0), 
    ## CC
     (try_begin),
       (neq, "$g_player_troop", "trp_player"),
       (store_troop_health, ":player_end_hp", "trp_player"),
       (party_get_skill_level, ":first_aid_level", "p_main_party", skl_first_aid),
       (val_mul, ":first_aid_level", 6),
       (lt, ":player_end_hp", "$g_player_begin_hp"),
       (store_sub, ":result_hp", "$g_player_begin_hp", ":player_end_hp"),
       (val_mul, ":result_hp", ":first_aid_level"),
       (val_div, ":result_hp", 100),
       (val_add, ":result_hp", ":player_end_hp"),
       (troop_set_health, "trp_player", ":result_hp"),
     (try_end),
     (assign,"$g_player_troop","trp_player"),
     (set_player_troop, "trp_player"),
    ## CC
     (call_script, "script_count_casualties_and_adjust_morale"),#new
     (call_script, "script_encounter_calculate_fit"),               

     (call_script, "script_party_count_fit_regulars", "p_main_party"),
     (assign, "$playerparty_postbattle_regulars", reg0),
     
     (try_begin),
       (eq, "$g_battle_result", 1),
       (eq, "$g_enemy_fit_for_battle", 0),
       (str_store_string, s11, "@You were victorious!"),
#       (play_track, "track_bogus"), #clear current track.
#       (call_script, "script_music_set_situation_with_culture", mtf_sit_victorious),
       (try_begin),
         (gt, "$g_friend_fit_for_battle", 1),
         (set_background_mesh, "mesh_pic_victory"),
       (try_end),
       (try_for_range, ":troop_no", heroes_begin, heroes_end),
         (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
         (store_faction_of_troop, ":faction_no", ":troop_no"),
         (eq, ":faction_no", "$players_kingdom"),
         #(gt, "$battle_renown_value", 5),
         (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
         (party_is_active, ":party_no"),
        # (party_get_battle_opponent, ":opponent",":party_no"),
        # (lt, ":opponent", 0), #party is not itself involved in a battle
        # (party_get_attached_to, ":attached_to",":party_no"),
         #(lt, ":attached_to", 0), #party is not attached to another party
        # (get_party_ai_behavior, ":behavior", ":party_no"),
        # (neq, ":behavior", ai_bhvr_in_town),
         (assign, ":join_distance", 5), #day/not bandit
         (try_begin),
           (is_currently_night),
           (assign, ":join_distance", 3), #nigh/not bandit
         (try_end),
         (store_distance_to_party_from_party, ":distance", ":party_no", "p_main_party"),
         (lt, ":distance", ":join_distance"),
         (call_script, "script_troop_change_relation_with_troop", ":troop_no", "trp_player", 1),
       (try_end),	   
     (else_try),
       (eq, "$g_battle_result", -1),
       (ge, "$g_enemy_fit_for_battle",1),
       (this_or_next|le, "$g_friend_fit_for_battle",0),
       (le, "$playerparty_postbattle_regulars", 0),
       (str_store_string, s11, "@Battle was lost. Your forces were utterly crushed."),
       (set_background_mesh, "mesh_pic_defeat"),
       (try_begin),
         (eq, "$freelancer_state", 1),
         (assign,"$g_next_menu", "mnu_freelancer_escape"),
       (try_end),
     (else_try),
       (eq, "$g_battle_result", -1),
       (str_store_string, s11, "@Your companions carry you away from the fighting."),
       ## CC
       (troop_get_type, ":is_female", "$g_player_troop"),
       ## CC
       (try_begin),
        (this_or_next|eq, ":is_female", tf_female_elf),
        (eq, ":is_female", 1),
         (set_background_mesh, "mesh_pic_wounded_fem"),
       (else_try),
         (set_background_mesh, "mesh_pic_wounded"),
       (try_end),
     (else_try),
       (eq, "$g_battle_result", 1),
       (str_store_string, s11, "@You have defeated the enemy."),
       (try_begin),
         (gt, "$g_friend_fit_for_battle", 1),
         (set_background_mesh, "mesh_pic_victory"),
       (try_end),
     (else_try),
       (eq, "$g_battle_result", 0),
       (str_store_string, s11, "@You have retreated from the fight."),
     (try_end),
#NPC companion changes begin
##check for excessive casualties, more forgiving if battle result is good
     (try_begin),
        (gt, "$playerparty_prebattle_regulars", 9),
        (store_add, ":divisor", 3, "$g_battle_result"), 
        (store_div, ":half_of_prebattle_regulars", "$playerparty_prebattle_regulars", ":divisor"),
        (lt, "$playerparty_postbattle_regulars", ":half_of_prebattle_regulars"),
        (call_script, "script_objectionable_action", tmt_egalitarian, "str_excessive_casualties"),
     (try_end),
#NPC companion changes end

     (call_script, "script_print_casualties_to_s0", "p_player_casualties", 0),
     (str_store_string_reg, s8, s0),
     (call_script, "script_print_casualties_to_s0", "p_enemy_casualties", 0),
     (str_store_string_reg, s9, s0),
     ## CC
     (call_script, "script_print_kill_count_to_s0"),
     (str_store_string_reg, s12, s0),
     ## CC
     (str_clear, s10),
     (try_begin),
       (eq, "$any_allies_at_the_last_battle", 1),
       (call_script, "script_print_casualties_to_s0", "p_ally_casualties", 0),
       (str_store_string, s10, "@^^Ally Casualties:{s0}"),
     (try_end),
     ],
    [
      ("continue",[],"Continue...",[(jump_to_menu, "$g_next_menu"),]),
      
      #("continue_2",[
       #(eq, "$freelancer_state", 1),
       #(eq, "$g_next_menu", 1),
      
      #],"Continue...",[(jump_to_menu, "mnu_freelancer_escape"),]),
      
    ]
  ),

  (
    "freelancer_escape", mnf_scale_picture,
    "You find a chance and escape from your captors!",
    "none",
    [
        (play_cue_track, "track_escape"),
        (troop_get_type, ":is_female", "trp_player"),
        (try_begin),
          (this_or_next|eq, ":is_female", tf_female_elf),
          (eq, ":is_female", 1),
          (set_background_mesh, "mesh_pic_escape_1_fem"),
        (else_try),
          (set_background_mesh, "mesh_pic_escape_1"),
        (try_end),
    ],
    [
      ("continue",[],"Continue...",
       [

    (call_script, "script_party_restore"),
    (call_script, "script_event_player_discharge"),
           (change_screen_map),
        ]),
    ]
  ),
  
  (
    "total_victory", 0,
    "You shouldn't be reading this... {s9}",
    "none",
    [
        # We exploit the menu condition system below.
        # The conditions should make sure that always another screen or menu is called.
        (assign, ":break", 0),
        (try_begin),
          (eq, "$routed_party_added", 0), #new
          (assign, "$routed_party_added", 1),
          
           #add new party to map (routed_warriors)
          (call_script, "script_add_routed_party"),
        (end_try),
        (try_begin),
          (eq,"$freelancer_state",1), 
          (store_random_in_range,":contribution",25,61),
          (call_script,"script_change_player_contribution",":contribution"),
        (end_try),
                
        (try_begin),
            (check_quest_active, "qst_track_down_bandits"),
            (neg|check_quest_succeeded, "qst_track_down_bandits"),
            (neg|check_quest_failed, "qst_track_down_bandits"),
            
            (quest_get_slot, ":quest_party", "qst_track_down_bandits", slot_quest_target_party),
            (party_is_active, ":quest_party"),
            (party_get_attached_to, ":quest_party_attached", ":quest_party"), ## CC
            (this_or_next|eq, ":quest_party", "$g_enemy_party"),
            	(eq, ":quest_party_attached", "$g_enemy_party"),
            (call_script, "script_succeed_quest", "qst_track_down_bandits"),	
        (try_end),
            
        (try_begin),
            (check_quest_active, "qst_hunted_down_bandits"),
            (neg|check_quest_succeeded, "qst_hunted_down_bandits"),
            (neg|check_quest_failed, "qst_hunted_down_bandits"),
            
            (quest_get_slot, ":quest_party", "qst_hunted_down_bandits", slot_quest_target_party),
            (party_is_active, ":quest_party"),
            (party_get_attached_to, ":quest_party_attached", ":quest_party"), ## CC
            (this_or_next|eq, ":quest_party", "$g_enemy_party"),
            	(eq, ":quest_party_attached", "$g_enemy_party"),
            (call_script, "script_succeed_quest", "qst_hunted_down_bandits"),	
        (try_end),
            	
        ## CC
        (try_for_range, ":cur_quest", "qst_deal_with_forest_bandit", "qst_quests_end"),
          (check_quest_active, ":cur_quest"),
          (neg|check_quest_succeeded, ":cur_quest"),

          (quest_get_slot, ":quest_party", ":cur_quest", slot_quest_target_party),
          (party_is_active, ":quest_party"),
          (party_get_attached_to, ":quest_party_attached", ":quest_party"),
          (this_or_next|eq, ":quest_party", "$g_enemy_party"),
          (eq, ":quest_party_attached", "$g_enemy_party"),
          (call_script, "script_succeed_quest", ":cur_quest"),
          
          (party_get_template_id, ":dest_pt_no", ":quest_party"),
          (party_template_set_slot, ":dest_pt_no", slot_party_template_has_hero, 0),
          (party_template_set_slot, ":dest_pt_no", slot_party_template_hero_party_id, -1),
        (try_end),
        ## CC
        (try_begin),
            (gt, "$g_private_battle_with_troop", 0),
            (troop_slot_eq, "$g_private_battle_with_troop", slot_troop_leaded_party, "$g_encountered_party"),
            (assign, "$g_private_battle_with_troop", 0),
            (assign, "$g_disable_condescending_comments", 1),
        (try_end),
        
        #new - begin
        (party_get_num_companion_stacks, ":num_stacks", "p_collective_enemy"),          
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":stack_troop", "p_collective_enemy", ":i_stack"),
          (is_between, ":stack_troop", lords_begin, lords_end),
          (troop_is_wounded, ":stack_troop"),
          (party_add_members, "p_total_enemy_casualties", ":stack_troop", 1),
        (try_end),                      
        #new - end
          
        (try_begin),
          # Talk to ally leader          
          (eq, "$thanked_by_ally_leader", 0),
          (assign, "$thanked_by_ally_leader", 1),

          (gt, "$g_ally_party", 0),          
          #(store_add, ":total_str_without_player", "$g_starting_strength_ally_party", "$g_starting_strength_enemy_party"),                    
          
          (store_add, ":total_str_without_player", "$g_starting_strength_friends", "$g_starting_strength_enemy_party"),
          (val_sub, ":total_str_without_player", "$g_starting_strength_main_party"),

          (store_sub, ":ally_strength_without_player", "$g_starting_strength_friends", "$g_starting_strength_main_party"),
        
          (store_mul, ":ally_advantage", ":ally_strength_without_player", 100),
          (val_add, ":total_str_without_player", 1),
          (val_div, ":ally_advantage", ":total_str_without_player"),
          #Ally advantage=50  means battle was evenly matched

          (store_sub, ":enemy_advantage", 100, ":ally_advantage"),
        
          (store_mul, ":faction_reln_boost", ":enemy_advantage", "$g_starting_strength_enemy_party"),
          (val_div, ":faction_reln_boost", 9000),
          (val_min, ":faction_reln_boost", 4),

          (store_mul, "$g_relation_boost", ":enemy_advantage", ":enemy_advantage"),
          (val_div, "$g_relation_boost", 700),
          (val_clamp, "$g_relation_boost", 0, 20),
        
          (party_get_num_companion_stacks, ":num_ally_stacks", "$g_ally_party"),
          (gt, ":num_ally_stacks", 0),
          ## CC
          (party_get_template_id, ":template_id", "$g_ally_party"),
          (try_begin),
            (this_or_next|eq, ":template_id", "pt_kingdom_caravan_party"),
            (eq, ":template_id", "pt_village_farmers"),
            (party_get_slot, ":home_center", "$g_ally_party", slot_party_home_center),
            (try_begin),
              (gt, ":home_center", 0),
              (call_script, "script_change_player_relation_with_center", ":home_center", ":faction_reln_boost"),
            (try_end),
          (else_try),
            (store_faction_of_party, ":ally_faction","$g_ally_party"),
            (call_script, "script_change_player_relation_with_faction", ":ally_faction", ":faction_reln_boost"),
          (try_end),
          ## CC
          
          (try_begin),
            (gt, "$g_enemy_party", 0),
            (store_faction_of_party, ":enemy_faction","$g_enemy_party"),
            (store_mul, ":faction_reln_boost_2", ":faction_reln_boost", -1),
            (call_script, "script_change_player_relation_with_faction", ":enemy_faction", ":faction_reln_boost_2"),
          (try_end),
          
          
          
          (party_stack_get_troop_id, ":ally_leader", "$g_ally_party"),
          (party_stack_get_troop_dna, ":ally_leader_dna", "$g_ally_party", 0),
          (try_begin),
            (troop_is_hero, ":ally_leader"),
            (troop_get_slot, ":hero_relation", ":ally_leader", slot_troop_player_relation),
            (assign, ":rel_boost", "$g_relation_boost"),
            (try_begin),
              (lt, ":hero_relation", -5),
              (val_div, ":rel_boost", 3),
            (try_end),
            (call_script,"script_change_player_relation_with_troop", ":ally_leader", ":rel_boost"),
          (try_end),
          (neq, "$freelancer_state", 1), #+freelancer
          (assign, "$talk_context", tc_ally_thanks),
          (call_script, "script_setup_troop_meeting", ":ally_leader", ":ally_leader_dna"),
        (else_try),
          # Talk to enemy leaders
          (neq, "$freelancer_state", 1),	#+freelancer	  
          (assign, ":break", 0),
          
          (party_get_num_companion_stacks, ":num_stacks", "p_total_enemy_casualties"), #p_encountered changed to total_enemy_casualties                    
          (try_for_range, ":stack_no", "$last_defeated_hero", ":num_stacks"), #May 31 bug note -- this now returns some heroes in victorious party as well as in the other party
            (eq, ":break", 0),
            (party_stack_get_troop_id, ":stack_troop", "p_total_enemy_casualties", ":stack_no"),
            (party_stack_get_troop_dna, ":stack_troop_dna", "p_total_enemy_casualties", ":stack_no"),
            
            (troop_is_hero, ":stack_troop"),
                                    
            (store_troop_faction, ":defeated_faction", ":stack_troop"),
            #steve post 0912 changes begin - removed, this is duplicated elsewhere in game menus
            #(call_script, "script_add_log_entry", logent_lord_defeated_by_player, "trp_player",  -1, ":stack_troop", ":defeated_faction"),
            (try_begin),
                 (store_relation, ":relation", ":defeated_faction", "fac_player_faction"),
              (ge, ":relation", 0),
              (str_store_troop_name, s4, ":stack_troop"),

              (try_begin),
            	(eq, "$cheat_mode", 1),
            	(display_message, "@{!}{s4} skipped in p_total_enemy_casualties capture queue because is friendly"),
              (try_end),            
            (else_try),
              (try_begin),
                (party_stack_get_troop_id, ":party_leader", "$g_encountered_party", 0),
                (is_between, ":party_leader", active_npcs_begin, active_npcs_end),                
                (troop_slot_eq, ":party_leader", slot_troop_occupation, slto_kingdom_hero),
                (store_sub, ":kingdom_hero_id", ":party_leader", active_npcs_begin),
                (get_achievement_stat, ":was_he_defeated_player_before", ACHIEVEMENT_BARON_GOT_BACK, ":kingdom_hero_id"),                
                (eq, ":was_he_defeated_player_before", 1),
                (unlock_achievement, ACHIEVEMENT_BARON_GOT_BACK),
              (try_end),
              (store_add, "$last_defeated_hero", ":stack_no", 1),                    
              (call_script, "script_remove_troop_from_prison", ":stack_troop"),
              (troop_set_slot, ":stack_troop", slot_troop_leaded_party, -1),

              (call_script, "script_cf_check_hero_can_escape_from_player", ":stack_troop"),
                            
              (str_store_troop_name, s1, ":stack_troop"),
              (str_store_faction_name, s3, ":defeated_faction"),
              (str_store_string, s17, "@{s1} of {s3} managed to escape."),
              (display_log_message, "@{!}{s17}"),
              (jump_to_menu, "mnu_enemy_slipped_away"),
              (assign, ":break", 1),              
            (else_try),
              (store_add, "$last_defeated_hero", ":stack_no", 1),                    
              (call_script, "script_remove_troop_from_prison", ":stack_troop"),
              (troop_set_slot, ":stack_troop", slot_troop_leaded_party, -1),

              (assign, "$talk_context", tc_hero_defeated),
              
              (call_script, "script_setup_troop_meeting", ":stack_troop", ":stack_troop_dna"),
              (assign, ":break", 1),
            (try_end),
          (try_end),          
                  
          (eq, ":break", 1),          
        (else_try),
          # Talk to freed heroes
          (neq, "$freelancer_state", 1),	#+freelancer
          (assign, ":break", 0),
          (party_get_num_prisoner_stacks, ":num_prisoner_stacks", "p_collective_enemy"),
          (try_for_range, ":stack_no", "$last_freed_hero", ":num_prisoner_stacks"),
            (eq, ":break", 0),
            (party_prisoner_stack_get_troop_id, ":stack_troop", "p_collective_enemy", ":stack_no"),
            (troop_is_hero, ":stack_troop"),
            (party_prisoner_stack_get_troop_dna, ":stack_troop_dna", "p_collective_enemy", ":stack_no"),
            (store_add, "$last_freed_hero", ":stack_no", 1),
            (assign, "$talk_context", tc_hero_freed),
            (call_script, "script_setup_troop_meeting", ":stack_troop", ":stack_troop_dna"),
            (assign, ":break", 1),
          (try_end),          
          (eq, ":break", 1),          
        (else_try),                 
          (eq, "$capture_screen_shown", 0),
          (assign, "$capture_screen_shown", 1),
          (party_clear, "p_temp_party"),
          (assign, "$g_move_heroes", 0),          
          #(call_script, "script_party_prisoners_add_party_companions", "p_temp_party", "p_collective_enemy"),
        
          ## CC
          (try_begin),
            (eq, "$g_next_menu", "mnu_castle_taken"), 
            (call_script, "script_party_prisoners_add_party_companions", "p_temp_party", "p_collective_enemy"),
          (else_try),
            #p_total_enemy_casualties deki yarali askerler p_temp_party'e prisoner olarak eklenecek.
            (call_script, "script_party_add_wounded_members_as_prisoners", "p_temp_party", "p_total_enemy_casualties"),
          (try_end),
          ## CC
        
          (call_script, "script_party_add_party_prisoners", "p_temp_party", "p_collective_enemy"),          
          (try_begin),
            (call_script, "script_party_calculate_strength", "p_collective_friends_backup",0),
            (assign,":total_initial_strength", reg(0)),
            (gt, ":total_initial_strength", 0),
            #(gt, "$g_ally_party", 0),
            (call_script, "script_party_calculate_strength", "p_main_party_backup",0),
            (assign,":player_party_initial_strength", reg(0)),
            # move ally_party_initial_strength/(player_party_initial_strength + ally_party_initial_strength) prisoners to ally party.
            # First we collect the share of prisoners of the ally party and distribute those among the allies.
            (store_sub, ":ally_party_initial_strength", ":total_initial_strength", ":player_party_initial_strength"),

            #(call_script, "script_party_calculate_strength", "p_ally_party_backup"),
            #(assign,":ally_party_initial_strength", reg(0)),
            #(store_add, ":total_initial_strength", ":player_party_initial_strength", ":ally_party_initial_strength"),
            (store_mul, ":ally_share", ":ally_party_initial_strength", 1000),
            (val_div, ":ally_share", ":total_initial_strength"),
            (assign, "$pin_number", ":ally_share"), #we send this as a parameter to the script.
            (party_clear, "p_temp_party_2"),
            (call_script, "script_move_members_with_ratio", "p_temp_party", "p_temp_party_2"),
        
            #TODO: This doesn't handle prisoners if our allies joined battle after us.
            ## CC
            # (try_begin),
              # (gt, "$g_ally_party", 0),
              # (distribute_party_among_party_group, "p_temp_party_2", "$g_ally_party"),
            # (try_end),
            ## CC
            #next if there's anything left, we'll open up the party exchange screen and offer them to the player.
          (try_end),
          (party_get_num_companions, ":num_rescued_prisoners", "p_temp_party"),
          (party_get_num_prisoners,  ":num_captured_enemies", "p_temp_party"),

          (store_add, ":total_capture_size", ":num_rescued_prisoners", ":num_captured_enemies"),
          
          (neq, "$freelancer_state", 1), #+freelancer - makes it so player can not have prisoners while in commanders party
          (gt, ":total_capture_size", 0),    
          ## CC
          # kidnapped_girl
          (party_count_members_of_type, ":num_kidnapped_girl", "p_temp_party", "trp_kidnapped_girl"),
          (try_begin),
            (gt, ":num_kidnapped_girl", 0),
            (party_remove_members, "p_temp_party", "trp_kidnapped_girl", ":num_kidnapped_girl"),
            (set_spawn_radius, 1),
            (spawn_around_party, "p_main_party", "pt_kidnapped_girl"),
          (try_end),
          #(party_set_flags, "p_main_party", pf_limit_members, 0),
                
          #(call_script, "script_party_add_follower", "p_temp_party",-1),
          #(change_screen_exchange_with_party, "p_temp_party"),
          (try_begin),       
            (assign, ":total_gain", 0),
            (party_get_num_companion_stacks, ":num_stacks","p_temp_party"),
            (try_for_range_backwards, ":stack_no", 0, ":num_stacks"),
              (party_stack_get_troop_id,":troop_no","p_temp_party",":stack_no"),
              (store_character_level, ":troop_level", ":troop_no"),
              (store_troop_faction,":faction_no",":troop_no"),
              #(store_relation, ":talk_faction", "fac_player_faction", ":faction_no"),
              (faction_get_slot, ":actor_religion", ":faction_no", slot_faction_religion),
              (faction_get_slot, ":target_religion", "fac_player_faction", slot_faction_religion),
              (assign, ":pass", 0),
              (try_begin),  
                (eq,":actor_religion", ":target_religion"),
                (assign, ":pass", 1),
              (else_try),
                (eq,":actor_religion", 0),
                (le,":troop_level", 35),
                (assign, ":pass", 1),
              (else_try),
                (eq,"$players_kingdom", ":faction_no"),
                (le,":troop_level", 50),
                (assign, ":pass", 1),
              (else_try),
                (le,":troop_level", 35),
                (assign, ":pass", 1),
              (try_end),
              (try_begin),  
                (eq, ":pass", 0),
                (party_stack_get_size,    ":stack_size","p_temp_party",":stack_no"),
                (party_remove_members, "p_temp_party", ":troop_no", ":stack_size"),
                (store_mul, ":cur_wage", ":troop_level", 20),
                (store_mul, ":stack_gain", ":cur_wage", ":stack_size"),
                (val_add, ":total_gain", ":stack_gain"),
              (try_end),
            (try_end),
            (gt, ":total_gain", 0),
            (troop_add_gold, "trp_player", ":total_gain"),  
            (assign, reg1, ":total_gain"),
            (display_message, "@some troop give you {reg1} money and leave."),
          (try_end),


          (assign, "$add_1000", 1),
          (try_begin),
            (eq, "$g_auto_take_captured_enemies", 1),
            (party_get_num_prisoner_stacks, ":num_stacks", "p_temp_party"),
            (try_for_range_backwards, ":stack_no", 0, ":num_stacks"),
              (party_prisoner_stack_get_troop_id, ":stack_troop","p_temp_party",":stack_no"),
              (this_or_next|neg|troop_is_hero, ":stack_troop"),
              (eq, "$g_move_heroes", 1),
              (party_prisoner_stack_get_size, ":stack_size","p_temp_party",":stack_no"),
              (party_remove_prisoners, "p_temp_party", ":stack_troop", ":stack_size"),
              (party_add_prisoners, "p_main_party", ":stack_troop", ":stack_size"),
            (try_end),
          (try_end),
          (try_begin),
            (eq, "$g_auto_take_rescued_prisoners", 1),
            (party_get_num_companion_stacks, ":num_stacks","p_temp_party"),
            (try_for_range_backwards, ":stack_no", 0, ":num_stacks"),
              (party_stack_get_troop_id, ":stack_troop","p_temp_party",":stack_no"),
              (this_or_next|neg|troop_is_hero, ":stack_troop"),
              (eq, "$g_move_heroes", 1),
              (party_stack_get_size, ":stack_size","p_temp_party",":stack_no"),
              (party_remove_members, "p_temp_party", ":stack_troop", ":stack_size"),
              (party_add_members, "p_main_party", ":stack_troop", ":stack_size"),
            (try_end),
          (try_end),
          
          (assign, ":prisoner_party", "p_temp_party"),
          (try_begin),
            (gt, ":num_rescued_prisoners", 0),
            (try_begin), #castle - try to retain garrison
              (spawn_around_party, "p_main_party", "pt_rescued_prisoners"),
              (assign, ":prisoner_party", reg0),
              (party_set_faction, ":prisoner_party", "$players_kingdom"),
              (party_set_ai_behavior, ":prisoner_party", ai_bhvr_travel_to_party),
              (party_set_slot, ":prisoner_party", slot_party_commander_party, -1), #we need this because 0 is player's party!
              (assign, ":minimum_distance", 1000000),
              (try_for_range, ":party_no", walled_centers_begin, walled_centers_end),
              (store_faction_of_party, ":cur_faction", ":party_no"),
              (eq, ":cur_faction", "$players_kingdom"),
              (party_get_position, pos1, ":party_no"),
              (store_distance_to_party_from_party, ":dist", ":party_no", "p_main_party"),
              (try_begin),
                (lt, ":dist", ":minimum_distance"),
                (assign, ":minimum_distance", ":dist"),
                (assign, ":nearest_ally_city", ":party_no"),
              (try_end),
            (try_end),
            (try_begin),
              (neg|is_between, ":nearest_ally_city", walled_centers_begin, walled_centers_end),
              (store_random_in_range, ":nearest_ally_city", training_grounds_begin, training_grounds_end),
            (try_end),
            
            (try_begin),
              (eq, "$g_next_menu", "mnu_castle_taken"),
              (assign, ":nearest_ally_city", "$g_encountered_party"),
            (try_end),
            
            (party_set_ai_object, ":prisoner_party", ":nearest_ally_city"),
            (party_set_slot, ":prisoner_party", slot_party_ai_object, ":nearest_ally_city"),
            (party_set_flags, ":prisoner_party", pf_default_behavior, 1),
            (call_script, "script_party_add_party", ":prisoner_party", "p_temp_party"),
            (party_set_slot, ":prisoner_party", slot_party_type, spt_reinforcement),
           (try_end),
          (try_end),
          (change_screen_exchange_with_party, ":prisoner_party"),
        (else_try),          
          (eq, "$loot_screen_shown", 0),
          (assign, "$loot_screen_shown", 1),
          ## CC
          (call_script, "script_party_add_party", "p_temp_party", "p_temp_party_2"),
          (try_begin),
            (gt, "$g_ally_party", 0),
            # (call_script, "script_party_add_party", "$g_ally_party", "p_temp_party"), #Add remaining prisoners to ally TODO: FIX it.
            (try_begin),
              (party_get_num_attached_parties, ":num_quick_attachments", "p_main_party"),
              (gt, ":num_quick_attachments", 0),
              (try_for_range_backwards, ":attached_party_rank", 0, ":num_quick_attachments"),
                (party_get_attached_party_with_rank, ":attached_party", "p_main_party", ":attached_party_rank"),
                (gt, ":attached_party", -1),
                (party_detach, ":attached_party"),
                (party_attach_to_party, ":attached_party", "$g_ally_party"),
              (try_end),
            (try_end),
            (distribute_party_among_party_group, "p_temp_party", "$g_ally_party"),
            (call_script, "script_dismiss_party_group", "$g_ally_party"),
          (else_try),
            (party_get_num_attached_parties, ":num_quick_attachments", "p_main_party"),
            (gt, ":num_quick_attachments", 0),
            (party_get_attached_party_with_rank, ":root_helper_party", "p_main_party", 0),
            (party_detach, ":root_helper_party"),
            (try_begin),
              (party_get_num_attached_parties, ":num_quick_attachments", "p_main_party"),
              (gt, ":num_quick_attachments", 0),
              (try_for_range_backwards, ":attached_party_rank", 0, ":num_quick_attachments"),
                (party_get_attached_party_with_rank, ":attached_party", "p_main_party", ":attached_party_rank"),
                (gt, ":attached_party", -1),
                (party_detach, ":attached_party"),
                (party_attach_to_party, ":attached_party", ":root_helper_party"),
              (try_end),
            (try_end),
            (distribute_party_among_party_group, "p_temp_party", ":root_helper_party"),
            (call_script, "script_dismiss_party_group", ":root_helper_party"),
            #(call_script, "script_party_add_party", ":helper_party", "p_temp_party"), #Add remaining prisoners to our reinforcements
          #(else_try),
            #(assign, "$add_1000", 1),
            #(call_script, "script_party_prisoners_add_party_prisoners", "p_main_party", "p_temp_party"),
            #(assign, "$add_1000", 0),
          ## CC
          (try_end),          
          (troop_clear_inventory, "trp_temp_troop"),
          (call_script, "script_party_calculate_loot", "p_total_enemy_casualties"), #p_encountered_party_backup changed to total_enemy_casualties
          ##(gt, reg0, 0),          
          (troop_sort_inventory, "trp_temp_troop"),
          ## CC
          # Autoloot: Instead of just displaying the loot screen, we display a loot management menu instead

          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_companions", reg0),
          (try_begin),
            (gt, ":num_companions", 1),
            (assign, "$return_menu", "mnu_total_victory"),
            (jump_to_menu, "mnu_manage_loot_pool"),
          (else_try),
            (change_screen_loot, "trp_temp_troop"),
          (try_end),
          #end Autoloot
          ## CC
        (else_try),
          #finished all
          (try_begin),
            (le, "$g_ally_party", 0),
            (end_current_battle),
          (try_end),
          (call_script, "script_party_give_xp_and_gold", "p_total_enemy_casualties"), #p_encountered_party_backup changed to total_enemy_casualties
          (try_begin),
            (eq, "$g_enemy_party", 0),
            (display_message,"str_error_string"),
          (try_end),

          (try_begin),
            (party_is_active, "$g_ally_party"),
            (call_script, "script_battle_political_consequences", "$g_enemy_party", "$g_ally_party"),
          (else_try),
            (call_script, "script_battle_political_consequences", "$g_enemy_party", "p_main_party"),
          (try_end),
          
          (call_script, "script_event_player_defeated_enemy_party", "$g_enemy_party"),
          (call_script, "script_clear_party_group", "$g_enemy_party"),
          (try_begin),
            (eq, "$g_next_menu", -1),

            #NPC companion changes begin
            (call_script, "script_post_battle_personality_clash_check"),
            #NPC companion changes end

            #Post 0907 changes begin
            (party_stack_get_troop_id, ":enemy_leader", "p_encountered_party_backup",0),
            (try_begin),
              (is_between, ":enemy_leader", active_npcs_begin, active_npcs_end),
              (neg|is_between, "$g_encountered_party", centers_begin, centers_end),
              (store_troop_faction, ":enemy_leader_faction", ":enemy_leader"),

              (try_begin),
                (eq, "$g_ally_party", 0),
                (call_script, "script_add_log_entry", logent_lord_defeated_by_player, "trp_player",  -1, ":enemy_leader", ":enemy_leader_faction"),
                (try_begin),
                  (eq, "$cheat_mode", 1),
                  (display_message, "@{!}Victory comment. Player was alone"),
                (try_end),
              (else_try),
                (ge, "$g_strength_contribution_of_player", 40), 
                (call_script, "script_add_log_entry", logent_lord_defeated_by_player, "trp_player",  -1, ":enemy_leader", ":enemy_leader_faction"),
                (try_begin),
                  (eq, "$cheat_mode", 1),
                  (display_message, "@{!}Ordinary victory comment. The player provided at least 40 percent forces."),
                (try_end),
              (else_try),
                (gt, "$g_starting_strength_enemy_party", 1000),
                (call_script, "script_get_closest_center", "p_main_party"),
                (assign, ":battle_of_where", reg0),
                (call_script, "script_add_log_entry", logent_player_participated_in_major_battle, "trp_player",  ":battle_of_where", -1, ":enemy_leader_faction"),
				(call_script, "script_change_player_relation_with_lords_after_battle"),
                (try_begin),
                  (eq, "$cheat_mode", 1),
                  (display_message, "@{!}Player participation comment. The enemy had at least 1k starting strength."),
                (try_end),
              (else_try),
                (eq, "$cheat_mode", 1),
                (display_message, "@{!}No victory comment. The battle was small, and the player provided less than 40 percent of allied strength"),
              (try_end),
            (try_end),
            #Post 0907 changes end
            (val_add, "$g_total_victories", 1),
            (leave_encounter),
            (change_screen_return),
          (else_try), 
            (neq, "$freelancer_state", 1),  #+freelancer
            (try_begin), #my kingdom
            ##diplomacy begin
              (eq, "$g_next_menu", "mnu_dplmc_town_riot_removed"),
              (jump_to_menu, "$g_next_menu"),
            (else_try),
            ##diplomacy end
              #(change_screen_return),              
              (eq, "$g_next_menu", "mnu_castle_taken"),
              
              (call_script, "script_add_log_entry", logent_castle_captured_by_player, "trp_player", "$g_encountered_party", -1, "$g_encountered_party_faction"),
			  (call_script, "script_change_player_relation_with_lords_after_battle"),
              (store_current_hours, ":hours"),
              (faction_set_slot, "$players_kingdom", slot_faction_ai_last_decisive_event, ":hours"),
              
              (try_begin), #player took a walled center while he is a vassal of npc kingdom.
                (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
                (jump_to_menu, "$g_next_menu"),
              (else_try), #player took a walled center while he is a vassal of rebels.
                (eq, "$players_kingdom", "fac_player_supporters_faction"), 
                (assign, "$g_center_taken_by_player_faction", "$g_encountered_party"),                
                (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
                (faction_get_slot, ":faction_leader", "fac_player_supporters_faction", slot_faction_leader),
                (change_screen_return),              
                (start_map_conversation, ":faction_leader", -1),
              (else_try), #player took a walled center for player's kingdom
                (neg|is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),                
                (assign, "$g_center_taken_by_player_faction", "$g_encountered_party"),
                (assign, "$talk_context", tc_give_center_to_fief),
                (change_screen_return),              
                
                (assign, ":best_troop", "trp_custom_sergeant"),
                (assign, ":maximum_troop_score", 0),
                
                (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
                (try_for_range, ":stack_no", 0, ":num_stacks"),
                  (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":stack_no"),
                  (neq, ":stack_troop", "trp_player"),

                  (party_stack_get_size, ":stack_size", "p_main_party", ":stack_no"),
                  (party_stack_get_num_wounded, ":num_wounded", "p_main_party", ":stack_no"),
                  (troop_get_slot, ":num_routed", "p_main_party", slot_troop_player_routed_agents),
                                    
                  (assign, ":continue", 0),                  
                  (try_begin),
                    (neg|troop_is_hero, ":stack_troop"),
                    (store_add, ":agents_which_cannot_speak", ":num_wounded", ":num_routed"),
                    (gt, ":stack_size", ":agents_which_cannot_speak"),
                    (assign, ":continue", 1),
                  (else_try),
                    (troop_is_hero, ":stack_troop"),
                    (neg|troop_is_wounded, ":stack_troop"),
                    (assign, ":continue", 1),
                  (try_end),                  
                  (eq, ":continue", 1),

                  (try_begin),
                    (troop_is_hero, ":stack_troop"),
                    (troop_get_slot, ":troop_renown", ":stack_troop", slot_troop_renown),
                    (store_mul, ":troop_score", ":troop_renown", 100),
                    (val_add, ":troop_score", 1000),
                  (else_try),                  
                    (store_character_level, ":troop_level", ":stack_troop"),
                    (assign, ":troop_score", ":troop_level"),
                  (try_end),
                                    
                  (try_begin),
                    (gt, ":troop_score", ":maximum_troop_score"),
                    (assign, ":maximum_troop_score", ":troop_score"),
                    (assign, ":best_troop", ":stack_troop"),                    
                    (party_stack_get_troop_dna, ":best_troop_dna", "p_main_party", ":stack_no"),
                  (try_end),
                (try_end),                                                                
                                
                (start_map_conversation, ":best_troop", ":best_troop_dna"),
              (try_end),
            (try_end),
          (try_end),
        (try_end),
        
      #(try_begin),
        #(gt, "$g_next_menu", 0),
        #(jump_to_menu, "$g_next_menu"),
      #(else_try),  
        #(leave_encounter),(change_screen_return),
      #(try_end),  
      
      ],
    [
      ("continue",[],"Continue...",[
      #(try_begin),
        #(gt, "$g_next_menu", 0),
        #(jump_to_menu, "$g_next_menu"),
      #(else_try),  
        (leave_encounter),(change_screen_return),
      #(try_end),  
      ]),
        ]
  ),

  (
    "enemy_slipped_away",0,
    "{s17}",
    "none",
    [],
    [
      ("continue",[],"Continue...",[(jump_to_menu,"mnu_total_victory")]),
    ]
  ),

  (
    "total_defeat",0,
    "{!}You shouldn't be reading this...",
    "none",
    [
        (play_track, "track_captured", 1),
           # Free prisoners
          (party_get_num_prisoner_stacks, ":num_prisoner_stacks","p_main_party"),
          (try_for_range, ":stack_no", 0, ":num_prisoner_stacks"),
            (party_prisoner_stack_get_troop_id, ":stack_troop","p_main_party",":stack_no"),
            (troop_is_hero, ":stack_troop"),
            (call_script, "script_remove_troop_from_prison", ":stack_troop"),
          (try_end),

          (try_begin),
            (party_is_active, "$g_ally_party"),
            (call_script, "script_battle_political_consequences", "$g_ally_party", "$g_enemy_party"),
          (else_try),
            (call_script, "script_battle_political_consequences", "p_main_party", "$g_enemy_party"),
          (try_end),
          
          (call_script, "script_loot_player_items", "$g_enemy_party"),

          (assign, "$g_move_heroes", 0),
          (party_clear, "p_temp_party"),
          (call_script, "script_party_add_party_prisoners", "p_temp_party", "p_main_party"),
          (call_script, "script_party_prisoners_add_party_companions", "p_temp_party", "p_main_party"),
          (distribute_party_among_party_group, "p_temp_party", "$g_enemy_party"),
        
          (assign, "$g_prison_heroes", 1),
          (call_script, "script_party_remove_all_companions", "p_main_party"),
          (assign, "$g_prison_heroes", 0),
          (assign, "$g_move_heroes", 1),
          (call_script, "script_party_remove_all_prisoners", "p_main_party"),

          (val_add, "$g_total_defeats", 1),

          (try_begin),
            (neq, "$g_player_surrenders", 1),
            (store_random_in_range, ":random_no", 0, 100),
            (ge, ":random_no", "$g_player_luck"),
            (jump_to_menu, "mnu_permanent_damage"),
          (else_try),
            (try_begin),
              (eq, "$g_next_menu", -1),
              (leave_encounter),
              (change_screen_return),
            (else_try),
              (jump_to_menu, "$g_next_menu"),
            (try_end),
          (try_end),
          (try_begin),
            (gt, "$g_ally_party", 0),
            (call_script, "script_party_wound_all_members", "$g_ally_party"),
          (try_end),

#Troop commentary changes begin
          (party_get_num_companion_stacks, ":num_stacks", "p_encountered_party_backup"),
          (try_for_range, ":stack_no", 0, ":num_stacks"),
            (party_stack_get_troop_id,   ":stack_troop","p_encountered_party_backup",":stack_no"),
            (is_between, ":stack_troop", active_npcs_begin, active_npcs_end),
            (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
            (store_troop_faction, ":victorious_faction", ":stack_troop"),
            (call_script, "script_add_log_entry", logent_player_defeated_by_lord, "trp_player",  -1, ":stack_troop", ":victorious_faction"),
          (try_end),
#Troop commentary changes end

      ],
    []
  ),

  (
    "permanent_damage",mnf_disable_all_keys,
    "{s0}",
    "none",
    [
      (assign, ":end_cond", 1),
      (try_for_range, ":unused", 0, ":end_cond"),
        (store_random_in_range, ":random_attribute", 0, 4),
        (store_attribute_level, ":attr_level", "trp_player", ":random_attribute"),
        (try_begin),
          (gt, ":attr_level", 3),
          (neq, ":random_attribute", ca_charisma),
          (try_begin),
            (eq, ":random_attribute", ca_strength),
            (str_store_string, s0, "@Some of your tendons have been damaged in the battle. You lose 1 strength."),
          (else_try),
            (eq, ":random_attribute", ca_agility),
            (str_store_string, s0, "@You took a nasty wound which will cause you to limp slightly even after it heals. You lose 1 agility."),
##          (else_try),
##            (eq, ":random_attribute", ca_charisma),
##            (str_store_string, s0, "@After the battle you are aghast to find that one of the terrible blows you suffered has left a deep, disfiguring scar on your face, horrifying those around you. Your charisma is reduced by 1."),
          (else_try),
##            (eq, ":random_attribute", ca_intelligence),
            (str_store_string, s0, "@You have trouble thinking straight after the battle, perhaps from a particularly hard hit to your head, and frequent headaches now plague your existence. Your intelligence is reduced by 1."),
          (try_end),
        (else_try),
          (lt, ":end_cond", 200),
          (val_add, ":end_cond", 1),
        (try_end),
      (try_end),
      (try_begin),
        (eq, ":end_cond", 200),
        (try_begin),
          (eq, "$g_next_menu", -1),
          (leave_encounter),
          (change_screen_return),
        (else_try),
          (jump_to_menu, "$g_next_menu"),
        (try_end),
      (else_try),
        (troop_raise_attribute, "trp_player", ":random_attribute", -1),
      (try_end),
      ],
    [
      ("s0",
       [
         (store_random_in_range, ":random_no", 0, 4),
         (try_begin),
           (eq, ":random_no", 0),
           (str_store_string, s0, "@Perhaps I'm getting unlucky..."),
         (else_try),
           (eq, ":random_no", 1),
           (str_store_string, s0, "@Retirement is starting to sound better and better."),
         (else_try),
           (eq, ":random_no", 2),
           (str_store_string, s0, "@No matter! I will persevere!"),
         (else_try),
           (eq, ":random_no", 3),
           (troop_get_type, ":is_female", "trp_player"),
           (try_begin),
             (this_or_next|eq, ":is_female", tf_female_elf),
             (eq, ":is_female", 1),
             (str_store_string, s0, "@What did I do to deserve this?"),
           (else_try),
             (str_store_string, s0, "@I suppose it'll make for a good story, at least..."),
           (try_end),
         (try_end),
         ],
       "{s0}",
       [
         (try_begin),
           (eq, "$g_next_menu", -1),
           (leave_encounter),
           (change_screen_return),
         (else_try),
           (jump_to_menu, "$g_next_menu"),
         (try_end),
         ]),
      ]
  ),
  
  (
    "pre_join",0,
    "You come across a battle between {s4}{s2} and {s3}{s1}. You decide to...",
    "none",
    [
       (set_background_mesh, "mesh_pic_charge"),
    
       (str_store_party_name, s1,"$g_encountered_party"),
       (str_store_party_name, s2,"$g_encountered_party_2"),
       (store_faction_of_party, ":faction", "$g_encountered_party"),
       (str_store_faction_name,s3,":faction"),
       (store_faction_of_party, ":faction", "$g_encountered_party_2"),
       (str_store_faction_name,s4,":faction"),
       (try_begin), 
         (eq, "$freelancer_state", 1),
         (try_begin),
           (party_get_attached_to, ":attached", "$enlisted_party"),
           (this_or_next|eq, "$enlisted_party", "$g_encountered_party_2"), #added in order to automatically skip this menu
           (eq, ":attached", "$g_encountered_party_2"),
           (select_enemy, 0),
           (assign,"$g_enemy_party","$g_encountered_party"),
           (assign,"$g_ally_party","$g_encountered_party_2"),
         (else_try),
           (select_enemy, 1),
           (assign,"$g_enemy_party","$g_encountered_party_2"),
           (assign,"$g_ally_party","$g_encountered_party"),
         (try_end),
         (jump_to_menu,"mnu_join_battle"),
       (try_end),
      ],
    [
    
      ("pre_join_help_attackers",[
          (store_faction_of_party, ":attacker_faction", "$g_encountered_party_2"),
          (store_relation, ":attacker_relation", ":attacker_faction", "fac_player_supporters_faction"),
          (store_faction_of_party, ":defender_faction", "$g_encountered_party"),
          (store_relation, ":defender_relation", ":defender_faction", "fac_player_supporters_faction"),
          
       (assign, ":attacker", 0),
       (try_begin),
          (ge, ":attacker_relation", 0),
          (le, ":defender_relation", 0),
          (assign, ":attacker", 1),
	   (else_try),
          (eq, ":attacker_faction", "$players_kingdom"),
          (assign, ":attacker", 1),
	   (else_try),
          (is_between, ":attacker_faction", npc_kingdoms_begin, npc_kingdoms_end),
          (is_between, ":defender_faction", npc_kingdoms_begin, npc_kingdoms_end),
          (ge, ":attacker_relation", ":defender_relation"),
          (ge, ":attacker_relation", 0),
          (assign, ":attacker", 1),
	   (else_try),
          (this_or_next|neg|is_between, ":attacker_faction", kingdoms_begin, kingdoms_end),
          (neg|is_between, ":defender_faction", kingdoms_begin, kingdoms_end),
          #(this_or_next|ge, ":attacker_relation", 0),
          #(lt, ":defender_relation", 0),
          (assign, ":attacker", 1),
       (try_end),
       
	   (store_troop_faction, ":commander_faction", "$enlisted_lord"),	
       (store_relation, ":attacker_relation_2", ":attacker_faction", ":commander_faction"),
       (store_relation, ":defender_relation_2", ":defender_faction", ":commander_faction"),
       (try_begin),
         (eq,"$freelancer_state",1), 
         (eq, ":attacker_relation", ":commander_faction"),
         (assign, ":attacker", 1),
	   (else_try),
         (eq,"$freelancer_state",1), 
         (eq, ":defender_relation", ":commander_faction"),
         (assign, ":attacker", 0),
	   (else_try),
         (eq,"$freelancer_state",1), 
         (ge, ":attacker_relation_2", 0),
         (le, ":defender_relation_2", 0),
         (assign, ":attacker", 1),
	   (else_try),
         (eq,"$freelancer_state",1), 
         (ge, ":attacker_relation", 0),
         (le, ":defender_relation", 0),
         (assign, ":attacker", 1),
       (try_end),
       (eq, ":attacker", 1),
          ],
          "Move in to help the {s4}{s2}.",[
              (select_enemy,0),
              (assign,"$g_enemy_party","$g_encountered_party"),
              (assign,"$g_ally_party","$g_encountered_party_2"),
              (jump_to_menu,"mnu_join_battle")]),
              
      ("pre_join_help_defenders",[
          (store_faction_of_party, ":attacker_faction", "$g_encountered_party_2"),
          (store_relation, ":attacker_relation", ":attacker_faction", "fac_player_supporters_faction"),
          (store_faction_of_party, ":defender_faction", "$g_encountered_party"),
          (store_relation, ":defender_relation", ":defender_faction", "fac_player_supporters_faction"),
       (assign, ":defender", 0),
       (try_begin),
          (ge, ":defender_relation", 0),
          (le, ":attacker_relation", 0),
          (assign, ":defender", 1),
	   (else_try),
          (eq, ":defender_relation", "$players_kingdom"),
	   (else_try),
          (is_between, ":attacker_faction", npc_kingdoms_begin, npc_kingdoms_end),
          (is_between, ":defender_faction", npc_kingdoms_begin, npc_kingdoms_end),
          (ge, ":defender_relation", ":attacker_relation"),
          (ge, ":defender_relation", 0),
          (assign, ":defender", 1),
	   (else_try),
          (this_or_next|neg|is_between, ":attacker_faction", kingdoms_begin, kingdoms_end),
          (neg|is_between, ":defender_faction", kingdoms_begin, kingdoms_end),
          #(this_or_next|ge, ":defender_relation", 0),
          #(lt, ":attacker_relation", 0),
          (assign, ":defender", 1),
       (try_end),
       
	   (store_troop_faction, ":commander_faction", "$enlisted_lord"),	
       (store_relation, ":attacker_relation_2", ":attacker_faction", ":commander_faction"),
       (store_relation, ":defender_relation_2", ":defender_faction", ":commander_faction"),
       (try_begin),
         (eq,"$freelancer_state",1), 
         (eq, ":attacker_relation", ":commander_faction"),
         (assign, ":defender", 0),
	   (else_try),
         (eq,"$freelancer_state",1), 
         (eq, ":defender_relation", ":commander_faction"),
         (assign, ":defender", 1),
	   (else_try),
         (eq,"$freelancer_state",1), 
         (le, ":attacker_relation_2", 0),
         (ge, ":defender_relation_2", 0),
         (assign, ":defender", 1),
	   (else_try),
         (eq,"$freelancer_state",1), 
         (le, ":attacker_relation", 0),
         (ge, ":defender_relation", 0),
         (assign, ":defender", 1),
       (try_end),
       
       (eq, ":defender", 1),
          ],
          "Rush to the aid of the {s3}{s1}.",[
              (select_enemy,1),
              (assign,"$g_enemy_party","$g_encountered_party_2"),
              (assign,"$g_ally_party","$g_encountered_party"),
              (jump_to_menu,"mnu_join_battle")]),
              
              
              
      ("pre_join_leave",[],"Don't get involved.",[(leave_encounter),(change_screen_return)]),
    ]
  ),
  
  (
    ## CC
    "join_battle",mnf_enable_hot_keys,
    ## CC
    "You are helping the {s2} against the {s1}. The battle is taking place in {s3}.  You have {reg10} troops fit for battle against the enemy's {reg11}.",
    "none",
    [                
        (str_store_party_name, 1,"$g_enemy_party"),
        (str_store_party_name, 2,"$g_ally_party"),
        (set_background_mesh, "mesh_pic_charge"),
        (call_script, "script_encounter_calculate_fit"),                

        ## CC
        
            (try_begin),
              (eq, "$g_random_scene_size", -1),
              (call_script, "script_set_random_scene_size"),
            (try_end),
        (try_begin),
          (party_get_current_terrain, ":terrain_type", "p_main_party"),
          (is_between, ":terrain_type", rt_mountain_forest, rt_desert_forest+1),
          (val_min, "$g_random_scene_size", 2),
        (try_end),
        (store_add, ":dest_string", "str_battlefield_small", "$g_random_scene_size"),
        (str_store_string, s3, ":dest_string"),
        ## CC

        (try_begin),
          (eq, "$new_encounter", 1),
          (assign, "$new_encounter", 0),
          ## CC
          (try_begin),
            (party_get_template_id, ":template_id", "$g_enemy_party"),
            (neq, ":template_id", "pt_routed_warriors"),
            (call_script, "script_let_nearby_parties_join_current_battle", 0, 0),
          (try_end),
          ## CC
          #(try_begin),
          #  (eq, "$freelancer_state", 1),
          #  (call_script, "script_let_nearby_parties_join_current_battle", 0, 0),
          #(try_end),
          (call_script, "script_encounter_init_variables"),
        (else_try), #second or more turn
          (eq, "$g_leave_encounter",1),
          (change_screen_return),
        (try_end),

        (try_begin),
          (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
          (assign, ":num_enemy_regulars_remaining", reg0),
          (assign, ":enemy_finished",0),
          (try_begin),
            (eq, "$g_battle_result", 1), 
            
            (this_or_next|le, ":num_enemy_regulars_remaining", 0), #battle won
            (le, ":num_enemy_regulars_remaining",  "$num_routed_enemies"), #replaced for above line because we do not want routed agents to spawn again in next turn of battle.
            
            (assign, ":enemy_finished",1),
          (else_try),
            (eq, "$g_engaged_enemy", 1),
            (le, "$g_enemy_fit_for_battle",0),
            (ge, "$g_friend_fit_for_battle",1),
            (assign, ":enemy_finished",1),
          (try_end),
          
          (this_or_next|eq, ":enemy_finished",1),
          (eq,"$g_enemy_surrenders",1),
          (assign, "$g_next_menu", -1),
          (jump_to_menu, "mnu_total_victory"),
        (else_try),
          (call_script, "script_party_count_members_with_full_health", "p_collective_friends"),
          (assign, ":num_ally_regulars_remaining", reg0),
          (assign, ":battle_lost", 0),
          (try_begin),
            (eq, "$g_battle_result", -1),
            
            #(eq, ":num_ally_regulars_remaining", 0), #battle lost
            (le, ":num_ally_regulars_remaining",  "$num_routed_allies"), #replaced for above line because we do not want routed agents to spawn again in next turn of battle.
            
            (assign, ":battle_lost",1),
          (try_end),
          
          (this_or_next|eq, ":battle_lost",1),
          (eq,"$g_player_surrenders",1),
          (leave_encounter),
          (change_screen_return),
        (try_end),
## PreBattle Orders & Deployment Begin
## PreBattle Orders & Deployment End
        
        
      ],
      
    [
## PreBattle Orders & Deployment Begin
	  ("join_attack_deployment",
      [
        (neg|eq, "$freelancer_state", 1),
        (neg|troop_is_wounded, "$g_player_troop"),
        
        (call_script, "script_party_count_fit_for_battle", "p_collective_friends"),
        (assign, ":friend_count", reg0),
        (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
        (assign, ":enemy_count", reg0),
        (store_add, ":total_combatants", ":friend_count", ":enemy_count"),
        (party_get_slot, ":battle_size", "p_main_party", slot_party_prebattle_battle_size),
        (gt, ":total_combatants", ":battle_size"),
        
      ],
	   "Choose who will join you in battle.",
      [
          (assign, "$g_next_menu", "mnu_join_battle"),	
        (start_presentation, "prsnt_prebattle_custom_deployment"),
      ]),
	  
	  ("join_attack_plan",
      [
        (neg|eq, "$freelancer_state", 1),
        (neg|troop_is_wounded, "$g_player_troop"),
      ],
	   "Plan your attack on the enemy.",
      [
          (assign, "$g_next_menu", "mnu_join_battle"),	
        (start_presentation, "prsnt_prebattle_orders"),
      ]),
	  
	  ("join_attack_do_plan",
      [
        (neg|eq, "$freelancer_state", 1),
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 1),
      ],
      "Enough planning. To battle!",
      [
	    (party_set_slot, "p_main_party", slot_party_prebattle_plan, 0),
	  
        (assign, "$g_joined_battle_to_help", 1),
        (party_set_next_battle_simulation_time, "$g_encountered_party", -1),
        (assign, "$g_battle_result", 0),
        (call_script, "script_calculate_renown_value"),
        (call_script, "script_calculate_battle_advantage"),
        (set_battle_advantage, reg0),
        (set_party_battle_mode),
        (set_jump_mission,"mt_lead_charge"),
        (call_script, "script_setup_random_scene"),
        (assign, "$g_next_menu", "mnu_join_battle"),
        (jump_to_menu, "mnu_battle_debrief"),
        (change_screen_mission),
      ]),
	  
	  ("join_attack_clear_plan",
      [
        (this_or_next|party_slot_eq, "p_main_party", slot_party_prebattle_customized_deployment, 1),
      	(party_slot_eq, "p_main_party", slot_party_prebattle_plan, 1),
      ],
      "Re-assess the situation.",
      [
        (try_begin),
            (party_slot_eq, "p_main_party", slot_party_prebattle_customized_deployment, 1),
            (party_set_slot, "p_main_party", slot_party_prebattle_customized_deployment, 0),
        (try_end),
	    (try_begin),
            (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 1),
            (party_set_slot, "p_main_party", slot_party_prebattle_plan, 0),
            (party_set_slot, "p_main_party", slot_party_prebattle_num_orders, 0),
        (try_end),
        
        (jump_to_menu, "mnu_join_battle"),
      ]),
	  	  
	  ("join_attack_hold",
      [
        (neg|eq, "$freelancer_state", 1),
        (neg|troop_is_wounded, "$g_player_troop"),
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
      ],
      "Take the field.",
      [
        (party_set_slot, "p_main_party", slot_party_prebattle_num_orders, 1),
        (party_get_slot, ":first_order", "p_main_party", slot_party_prebattle_order_array_begin),
        (try_begin),
            (gt, ":first_order", 0),
            (party_set_slot, "p_main_party_backup", slot_party_prebattle_order_array_begin, ":first_order"),
        (try_end),
        (party_set_slot, "p_main_party", slot_party_prebattle_order_array_begin, 910),	
	  
        (assign, "$g_joined_battle_to_help", 1),
        (party_set_next_battle_simulation_time, "$g_encountered_party", -1),
        (assign, "$g_battle_result", 0),
        (call_script, "script_calculate_renown_value"),
        (call_script, "script_calculate_battle_advantage"),
        (set_battle_advantage, reg0),
        (set_party_battle_mode),
        (set_jump_mission,"mt_lead_charge"),
        (call_script, "script_setup_random_scene"),
        (assign, "$g_next_menu", "mnu_join_battle"),
        (jump_to_menu, "mnu_battle_debrief"),
        (change_screen_mission),
      ]),
	  
	  ("join_attack_follow",
      [
        (neg|eq, "$freelancer_state", 1),
        (neg|troop_is_wounded, "$g_player_troop"),
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
      ],
      "Lead your troops.",
      [
        (party_set_slot, "p_main_party", slot_party_prebattle_num_orders, 1),
        (party_get_slot, ":first_order", "p_main_party", slot_party_prebattle_order_array_begin),
        (try_begin),
            (gt, ":first_order", 0),
            (party_set_slot, "p_main_party_backup", slot_party_prebattle_order_array_begin, ":first_order"),
        (try_end),
        (party_set_slot, "p_main_party", slot_party_prebattle_order_array_begin, 911),	
	  
        (assign, "$g_joined_battle_to_help", 1),
        (party_set_next_battle_simulation_time, "$g_encountered_party", -1),
        (assign, "$g_battle_result", 0),
        (call_script, "script_calculate_renown_value"),
        (call_script, "script_calculate_battle_advantage"),
        (set_battle_advantage, reg0),
        (set_party_battle_mode),
        (set_jump_mission,"mt_lead_charge"),
        (call_script, "script_setup_random_scene"),
        (assign, "$g_next_menu", "mnu_join_battle"),
        (jump_to_menu, "mnu_battle_debrief"),
        (change_screen_mission),
      ]),
    
      ("choose_battlefield_size", 
        [
          (neg|troop_is_wounded, "$g_player_troop"), ## CC
         ],
        "Choose the size of battlefield.",
        [
        (assign, "$g_next_menu", "mnu_join_battle"),
        (jump_to_menu, "mnu_battlefield_size"),]),
    
      ("camp_special_ability",[],"Choose your special_ability.",[(assign, "$return_menu", "mnu_join_battle"),(jump_to_menu, "mnu_camp_set_special_ability"),]),
          
      ("toggle_weapons",
        [
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (try_begin),
            (eq, "$g_weapons_set_no", 0),
            (assign, reg1, 2),
          (else_try),
            (assign, reg1, 1),
          (try_end),
        ],
        "Toggle weapons to set {reg1} for heroes.",
        [
          (val_add, "$g_weapons_set_no", 1),
          (val_mod, "$g_weapons_set_no", 2),
          (call_script, "script_all_toggle_weapons_set", 0),
        ]),
    
## CC
      ("change_commander_join_battle",
        [
          (neg|eq, "$freelancer_state", 1),
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (str_store_troop_name,s7,"$g_player_troop"),
          (set_player_troop, "$g_player_troop"),
        ],
        "Change commander.(Current commander: {s7})",
        [
          (start_presentation, "prsnt_change_commander"),
        ]),
## CC
      ("join_attack",
      [
          ## CC
          (neg|troop_is_wounded, "$g_player_troop"),
          ## CC
          (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
##          (store_troop_health,reg(5),"trp_player"),
##          (ge,reg(5),20),
          ],
      "Charge the enemy.",
      [
        (assign, "$g_joined_battle_to_help", 1),
        (party_set_next_battle_simulation_time, "$g_encountered_party", -1),
        (assign, "$g_battle_result", 0),
        (call_script, "script_calculate_renown_value"),
        (call_script, "script_calculate_battle_advantage"),
        (set_battle_advantage, reg0),
        (set_party_battle_mode),
        (set_jump_mission,"mt_lead_charge"),
        (call_script, "script_setup_random_scene"),
        (assign, "$g_next_menu", "mnu_join_battle"),
        (jump_to_menu, "mnu_battle_debrief"),
        (change_screen_mission),
      ]),

      ("join_order_attack",
      [
        (call_script, "script_party_count_members_with_full_health", "p_main_party"),
        (ge, reg0, 3),
            	## PreBattle Orders & Deployment Begin
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
        ## PreBattle Orders & Deployment End
      ],
      "Order your troops to attack with your allies while you stay back.",
      [
        (assign, "$g_joined_battle_to_help", 1),
        (party_set_next_battle_simulation_time, "$g_encountered_party", -1),
        (jump_to_menu,"mnu_join_order_attack"),
      ]),
      
	  ("join_wounded",[
	    (eq, "$freelancer_state", 1),
	    (troop_is_wounded, "trp_player"),
	    ],
	   "You are too wounded to fight.",[(leave_encounter),(change_screen_map)]),
      
      ("join_leave",[
	          ## PreBattle Orders & Deployment Begin
        (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 0),
        ## PreBattle Orders & Deployment End
        ],"Leave.",
      [
        (try_begin),
           (neg|troop_is_wounded, "trp_player"),
           (call_script, "script_objectionable_action", tmt_aristocratic, "str_flee_battle"),
           (party_stack_get_troop_id, ":enemy_leader","$g_enemy_party",0),
           (is_between, ":enemy_leader", active_npcs_begin, active_npcs_end),
           (call_script, "script_add_log_entry", logent_player_retreated_from_lord, "trp_player",  -1, ":enemy_leader", -1),
        (try_end),
        
        (call_script, "script_dismiss_party_group", "p_main_party"),
        (leave_encounter),(change_screen_return)]),
      ]),

  (
    "join_order_attack",mnf_disable_all_keys,
    "{s4}^^Your casualties: {s8}^^Allies' casualties: {s9}^^Enemy casualties: {s10}",
    "none",
    [
    
      (set_background_mesh, "mesh_pic_charge"),
      (call_script, "script_party_calculate_strength", "p_main_party", 1), #exclude player
      (assign, ":player_party_strength", reg0),
      (val_div, ":player_party_strength", 5),
      (call_script, "script_party_calculate_strength", "p_collective_friends", 0),
      (assign, ":friend_party_strength", reg0),
      (val_div, ":friend_party_strength", 5),
                                    
      (call_script, "script_party_calculate_strength", "p_collective_enemy", 0),
      (assign, ":enemy_party_strength", reg0),
      (val_div, ":enemy_party_strength", 5),

      (try_begin),
        (eq, ":friend_party_strength", 0),
        (store_div, ":enemy_party_strength_for_p", ":enemy_party_strength", 2),
      (else_try),
        (assign, ":enemy_party_strength_for_p", ":enemy_party_strength"),
        (val_mul, ":enemy_party_strength_for_p", ":player_party_strength"),
        (val_div, ":enemy_party_strength_for_p", ":friend_party_strength"),
      (try_end),
      (store_add, ":friends_strength", ":friend_party_strength", ":player_party_strength"),
            
      (party_get_skill_level, ":ally_tactics", "p_collective_friends", skl_tactics),
      (party_get_skill_level, ":main_party_tactics", "p_main_party", skl_tactics),
      (party_get_skill_level, ":enemy_tactics", "p_collective_enemy", skl_tactics),
          
      (val_add, ":enemy_tactics",10),
      (val_mul,":friends_strength", 10),
      (val_div,":friends_strength", ":enemy_tactics"),
                         
      (val_mul,":player_party_strength", 10),
      (val_div,":player_party_strength", ":enemy_tactics"),
                         
      (val_add, ":ally_tactics",10),
      (val_add, ":ally_tactics",":main_party_tactics"),
      (val_mul,":enemy_party_strength", 10),
      (val_div,":enemy_party_strength", ":ally_tactics"),

      (val_sub, ":enemy_party_strength", ":enemy_party_strength_for_p"),
      
      ## CC
      (try_begin),
        (store_mul, ":enemy_party_strength_mult_10", ":enemy_party_strength", 10),
        (ge, ":friend_party_strength", ":enemy_party_strength_mult_10"),
        (assign, ":enemy_party_strength", 0),
      (try_end),
      ## CC
      
      (inflict_casualties_to_party_group, "p_main_party", ":enemy_party_strength_for_p", "p_temp_casualties"),
      (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
      (str_store_string_reg, s8, s0),
                                    
      (inflict_casualties_to_party_group, "$g_enemy_party", ":friend_party_strength", "p_temp_casualties"),
                                    
      #ozan begin
      (party_get_num_companion_stacks, ":num_stacks", "p_temp_casualties"), 
      (try_for_range, ":stack_no", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop", "p_temp_casualties", ":stack_no"), 
        (try_begin),
          (party_stack_get_size, ":stack_size", "p_temp_casualties", ":stack_no"),
          (gt, ":stack_size", 0),
          (party_add_members, "p_total_enemy_casualties", ":stack_troop", ":stack_size"), #addition_to_p_total_enemy_casualties
          (party_stack_get_num_wounded, ":stack_wounded_size", "p_temp_casualties", ":stack_no"),                                    
          (gt, ":stack_wounded_size", 0),
          (party_wound_members, "p_total_enemy_casualties", ":stack_troop", ":stack_wounded_size"),
        (try_end),
      (try_end),
      #ozan end

      (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
      (str_store_string_reg, s10, s0),
                                    
      (call_script, "script_collect_friendly_parties"),
      #(party_collect_attachments_to_party, "$g_ally_party", "p_collective_ally"),

      (inflict_casualties_to_party_group, "$g_ally_party", ":enemy_party_strength", "p_temp_casualties"),
      (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
      (str_store_string_reg, s9, s0),
      (party_collect_attachments_to_party, "$g_enemy_party", "p_collective_enemy"),

       #(assign, "$cant_leave_encounter", 0),
       (assign, "$no_soldiers_left", 0),
       (try_begin),
         (call_script, "script_party_count_members_with_full_health","p_main_party"),
         (assign, ":num_our_regulars_remaining", reg0),
                                      
         #(le, ":num_our_regulars_remaining", 0),
         (le, ":num_our_regulars_remaining", "$num_routed_us"), #replaced for above line because we do not want routed agents to spawn again in next turn of battle.
                                      
         (assign, "$no_soldiers_left", 1),
         (str_store_string, s4, "str_join_order_attack_failure"),
       (else_try),
         (call_script, "script_party_count_members_with_full_health","p_collective_enemy"),
         (assign, ":num_enemy_regulars_remaining", reg0),

         (this_or_next|le, ":num_enemy_regulars_remaining", 0),
         (le, ":num_enemy_regulars_remaining", "$num_routed_enemies"), #replaced for above line because we do not want routed agents to spawn again in next turn of battle.

         (assign, "$g_battle_result", 1),
         (assign, "$no_soldiers_left", 1),
         (str_store_string, s4, "str_join_order_attack_success"),
       (else_try),
         (str_store_string, s4, "str_join_order_attack_continue"),
       (try_end),
    ],
    [
      ("continue",[],"Continue...",
      [
        (jump_to_menu,"mnu_join_battle"),
      ]),
    ]
  ),

  
# Towns
  (
    "zendar",mnf_auto_enter,
    "You enter the town of Zendar.",
    "none",
    [(reset_price_rates,0),(set_price_rate_for_item,"itm_tools",70),(set_price_rate_for_item,"itm_salt",140)],
    [
      ("zendar_enter",[],"_",[(set_jump_mission,"mt_town_default"),(jump_to_scene,"scn_zendar_center"),(change_screen_mission)],"Door to the town center."),
      ("zendar_tavern",[],"_",[(set_jump_mission,"mt_town_default"),
                                                   (jump_to_scene,"scn_the_happy_boar"),
                                                   (change_screen_mission)],"Door to the tavern."),
      ("zendar_merchant",[],"_",[(set_jump_mission,"mt_town_default"),
                                                   (jump_to_scene,"scn_zendar_merchant"),
                                                   (change_screen_mission)],"Door to the merchant."),
      ("zendar_arena",[],"_",[(set_jump_mission,"mt_town_default"),
                                                   (jump_to_scene,"scn_zendar_arena"),
                                                   (change_screen_mission)],"Door to the arena."),
#      ("zendar_leave",[],"Leave town.",[[leave_encounter],[change_screen_return]]),
      ("town_1_leave",[],"_",[(leave_encounter),(change_screen_return)]),
    ]
  ),
  (
    "salt_mine",mnf_auto_enter,
    "You enter the salt mine.",
    "none",
    [(reset_price_rates,0),(set_price_rate_for_item,"itm_salt",55)],
    [
      ("enter",[],"Enter.",[(set_jump_mission,"mt_town_center"),(jump_to_scene,"scn_salt_mine"),(change_screen_mission)]),
      ("leave",[],"Leave.",[(leave_encounter),(change_screen_return)]),
    ]
  ),
  (
    "four_ways_inn",mnf_auto_enter,
    "You arrive at the Four Ways Inn.",
    "none",
    [],
    [

#      ("enter",[],"Enter.",[[set_jump_mission,"mt_town_default"],[jump_to_scene,"scn_conversation_scene"],[change_screen_mission]]),
      ("enter",[],"Enter.",[(set_jump_mission,"mt_ai_training"),(jump_to_scene,"scn_four_ways_inn"),(change_screen_mission)]),
      ("leave",[],"Leave.",[(leave_encounter),(change_screen_return)]),
    ]
  ),
  (
    "test_scene",0,
    "You enter the test scene.",
    "none",
    [],
    [

      ("enter",[],"Enter 1.",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_multi_scene_1"],[change_screen_mission]]),
      ("enter",[],"Enter 2.",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_multi_scene_2"],[change_screen_mission]]),
      ("enter",[],"Enter 3.",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_multi_scene_3"],[change_screen_mission]]),
      ("enter",[],"Enter 4.",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_multi_scene_4"],[change_screen_mission]]),
      ("enter",[],"Enter 5.",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_multi_scene_5"],[change_screen_mission]]),
      ("enter",[],"Enter 6.",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_multi_scene_6"],[change_screen_mission]]),
      ("enter",[],"Enter 7.",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_test2"],[change_screen_mission]]),
      ("enter",[],"Enter 8.",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_test3"],[change_screen_mission]]),
      ("enter",[],"Enter 9.",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_multi_scene_13"],[change_screen_mission]]),
      ("leave",[],"Leave.",[(leave_encounter),(change_screen_return)]),
    ]
  ),
  (
    "battlefields",0,
    "{!}Select a field...",
    "none",
    [],
    [

      ("enter_f1",[],"{!}Field 1",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_field_1"],[change_screen_mission]]),
      ("enter_f2",[],"{!}Field 2",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_field_2"],[change_screen_mission]]),
      ("enter_f3",[],"{!}Field 3",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_field_3"],[change_screen_mission]]),
      ("enter_f4",[],"{!}Field 4",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_field_4"],[change_screen_mission]]),
      ("enter_f5",[],"{!}Field 5",[[set_jump_mission,"mt_ai_training"],[jump_to_scene,"scn_field_5"],[change_screen_mission]]),
      ("leave",[],"Leave.",[(leave_encounter),(change_screen_return)]),
    ]
  ),
  (
    "dhorak_keep",0,
#    "Dhorak Keep, the stronghold of the bandits stands overlooking the barren wilderness.",
    "You enter the Dhorak Keep",
    "none",
    [],
    [
      ("enter",[],"Enter.",[(set_jump_mission,"mt_town_center"),(jump_to_scene,"scn_dhorak_keep"),(change_screen_mission)]),
      ("leave",[],"Leave.",[(leave_encounter),(change_screen_return)]),
    ]
  ),
  
##  (
##    "center_under_attack_while_resting",0,
##    "{s1} has been besieged by {s2}, and the enemy seems to be preparing for an assault!\
## What will you do?",
##    "none",
##    [
##        (party_get_battle_opponent, ":besieger_party", "$auto_enter_town"),
##        (str_store_party_name, s1, "$auto_enter_town"),
##        (str_store_party_name, s2, ":besieger_party"),
##    ],
##    [
##      ("defend_against_siege", [],"Help the defenders of {s1}!",
##       [
##           (assign, "$g_last_player_do_nothing_against_siege_next_check", 0),
##           (rest_for_hours, 0, 0, 0),
##           (change_screen_return),
##           (start_encounter, "$auto_enter_town"),
##           ]),
##      ("do_not_defend_against_siege",[],"Find a secure place and wait there.",
##       [
##           (change_screen_return),
##           ]),
##    ]
##  ),

  (
    "join_siege_outside",mnf_scale_picture,
    "{s1} has come under siege by {s2}.",
    "none",
    [
        (str_store_party_name, s1, "$g_encountered_party"),
        (str_store_party_name, s2, "$g_encountered_party_2"),
        ## CC
        (troop_get_type, ":is_female", "$g_player_troop"),
        ## CC
        (try_begin),
          (this_or_next|eq, ":is_female", tf_female_elf),
          (eq, ":is_female", 1),
          (set_background_mesh, "mesh_pic_siege_sighted_fem"),
        (else_try),
          (set_background_mesh, "mesh_pic_siege_sighted"),
        (try_end),
        (try_begin),
          (eq, "$freelancer_state", 1),
          
          (try_begin),
            (store_troop_faction, ":commanders_faction", "$enlisted_lord"),
            (store_relation, ":relation", ":commanders_faction", "$g_encountered_party_faction"),
            (this_or_next|eq, ":commanders_faction", "$g_encountered_party_faction"), #encountered party is always the castle/town sieged
            (ge, ":relation", 0),
            (jump_to_menu, "mnu_siege_started_defender"),
          (else_try),
            (jump_to_menu, "mnu_besiegers_camp_with_allies"),
          (try_end),
        (try_end),
                
    ],
    [
      ("approach_besiegers",[(store_faction_of_party, ":faction_no", "$g_encountered_party_2"),
                             (store_relation, ":relation_1", ":faction_no", "fac_player_supporters_faction"),
                             (ge, ":relation_1", 0),
                             (store_faction_of_party, ":faction_no_2", "$g_encountered_party"),
                             (store_relation, ":relation", ":faction_no_2", "fac_player_supporters_faction"),
                             (store_faction_of_party, ":enlisted_faction", "$enlisted_party"),
                             (this_or_next|eq, ":faction_no", ":enlisted_faction"),  
                             (this_or_next|gt, ":relation_1", 0),
                             (le, ":relation", 0),
                             ],"Approach the siege camp.",[
          (jump_to_menu, "mnu_besiegers_camp_with_allies"),
                                ]),
      ("pass_through_siege",[(store_faction_of_party, ":faction_no", "$g_encountered_party"),
                             (store_relation, ":relation_1", ":faction_no", "fac_player_supporters_faction"),
                             (ge, ":relation_1", 0),
                             (store_faction_of_party, ":faction_no_2", "$g_encountered_party_2"),
                             (store_faction_of_party, ":enlisted_faction", "$enlisted_party"),
                             (store_relation, ":relation", ":faction_no_2", "fac_player_supporters_faction"),
                             (this_or_next|eq, ":faction_no", "fac_player_supporters_faction"),
                             (this_or_next|eq, ":faction_no", "$players_kingdom"),  
                             (this_or_next|eq, ":faction_no_2", ":enlisted_faction"),  
                             (ge, ":relation", 0),
                             ],"Pass through the siege lines and enter {s1}.",
       [
            (jump_to_menu,"mnu_cut_siege_without_fight"),
          ]),
      ("leave",[],"Leave.",[(leave_encounter),
                            (change_screen_return)]),
    ]
  ),
  (
    "cut_siege_without_fight",0,
    "The besiegers let you approach the gates without challenge.",
    "none",
    [],
    [
      ("continue",[],"Continue...",[(try_begin),
                                   (this_or_next|eq, "$g_encountered_party_faction", "fac_player_supporters_faction"),
                                   (eq, "$g_encountered_party_faction", "$players_kingdom"),
                                   (jump_to_menu, "mnu_town"),
                                 (else_try),
                                   (jump_to_menu, "mnu_castle_outside"),
                                 (try_end)]),
                                 
      ("join_for_help",[
                        (store_faction_of_party, ":faction_no", "$g_encountered_party"),
                        (store_relation, ":relation_1", ":faction_no", "fac_player_supporters_faction"),
                        (this_or_next|eq, ":faction_no", "fac_player_supporters_faction"),
                        (this_or_next|eq, ":faction_no", "$players_kingdom"),  
                        (ge, ":relation_1", 0),     
                        ],"Continue...",[(jump_to_menu, "mnu_siege_started_defender"),]),
                                 
      ]
  ),
  (
    ## CC
    "besiegers_camp_with_allies",mnf_enable_hot_keys,
    ## CC
    "{s1} remains under siege. The banners of {s2} fly above the camp of the besiegers,\
 where you and your men are welcomed.",
    "none",
    [        
        (str_store_party_name, s1, "$g_encountered_party"),
        (str_store_party_name, s2, "$g_encountered_party_2"),
        (assign, "$g_enemy_party", "$g_encountered_party"),
        (assign, "$g_ally_party", "$g_encountered_party_2"),
        (select_enemy, 0),
        (call_script, "script_encounter_calculate_fit"),
        (try_begin),
          (eq, "$new_encounter", 1),
          (assign, "$new_encounter", 0),
          (call_script, "script_encounter_init_variables"),
        (try_end),

        (try_begin),
          (eq, "$g_leave_encounter",1),
          (change_screen_return),
        (else_try),
          (assign, ":enemy_finished", 0),
          (try_begin),
            (eq, "$g_battle_result", 1),
            (assign, ":enemy_finished", 1),
          (else_try),
            (le, "$g_enemy_fit_for_battle", 0),
            (ge, "$g_friend_fit_for_battle", 1),
            (assign, ":enemy_finished", 1),
          (try_end),
          (this_or_next|eq, ":enemy_finished", 1),
          (eq, "$g_enemy_surrenders", 1),
##          (assign, "$g_next_menu", -1),#"mnu_castle_taken_by_friends"),
##          (jump_to_menu, "mnu_total_victory"),
          (call_script, "script_party_wound_all_members", "$g_enemy_party"),
          (leave_encounter),
          (change_screen_return),
        (else_try),
          (call_script, "script_party_count_members_with_full_health", "p_collective_friends"),          
          (assign, ":ally_num_soldiers", reg0),
          (eq, "$g_battle_result", -1),
          (eq, ":ally_num_soldiers", 0), #battle lost (sdsd = TODO : also compare this with routed allies too like in other parts)
          (leave_encounter),
          (change_screen_return),
        (try_end),
        (party_set_slot,"p_main_party", slot_party_is_in_siege, 1),
        ## Pre-Battle Orders & Deployment Begin
        ## Pre-Battle Orders & Deployment End
        
        ],
    [
      ("talk_to_siege_commander",[(neg|eq, "$freelancer_state", 1),]," Request a meeting with the commander.",[
                                (call_script, "script_get_meeting_scene"), (assign, ":meeting_scene", reg0),
                                (modify_visitors_at_site,":meeting_scene"),(reset_visitors),
                                (set_visitor,0,"trp_player"),
                                (party_stack_get_troop_id, ":siege_leader_id","$g_encountered_party_2",0),
                                (party_stack_get_troop_dna,":siege_leader_dna","$g_encountered_party_2",0),
                                (set_visitor,17,":siege_leader_id",":siege_leader_dna"),
                                (set_jump_mission,"mt_conversation_encounter"),
                                (jump_to_scene,":meeting_scene"),
                                (assign, "$talk_context", tc_siege_commander),
                                (change_screen_map_conversation, ":siege_leader_id")]),
      
	## Pre-Battle Orders & Deployment Begin	
	
     ("siege_attack_deployment",
      [
        (neg|eq, "$freelancer_state", 1),
        (neg|troop_is_wounded, "$g_player_troop"),
        #(party_get_skill_level, ":tactics", "p_main_party", skl_tactics),
        #(ge, ":tactics", 2),
        
        (call_script, "script_party_count_fit_for_battle", "p_collective_friends"),
        (assign, ":friend_count", reg0),
        (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
        (assign, ":enemy_count", reg0),
        (store_add, ":total_combatants", ":friend_count", ":enemy_count"),
        (party_get_slot, ":battle_size", "p_main_party", slot_party_prebattle_battle_size),
        (gt, ":total_combatants", ":battle_size"),
      ],
      "Choose who will join you in battle.",
      [
          (assign, "$g_next_menu", "mnu_besiegers_camp_with_allies"),
        (start_presentation, "prsnt_prebattle_custom_deployment"),
      ]),
                        	
     ("siege_attack_plan",
      [
        (neg|eq, "$freelancer_state", 1),
        (neg|troop_is_wounded, "$g_player_troop"),
      ],
      "Plan your assault.",
      [
          (assign, "$g_next_menu", "mnu_besiegers_camp_with_allies"),        
        (start_presentation, "prsnt_prebattle_orders"),
      ]),
     ## Pre-Battle Orders & Deployment End
	  
	  ## CC
	  
      ("camp_special_ability",[],"Choose your special_ability.",[(assign, "$return_menu", "mnu_besiegers_camp_with_allies"),(jump_to_menu, "mnu_camp_set_special_ability"),]),
	  
      ("toggle_weapons",
        [
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (try_begin),
            (eq, "$g_weapons_set_no", 0),
            (assign, reg1, 2),
          (else_try),
            (assign, reg1, 1),
          (try_end),
        ],
        "Toggle weapons to set {reg1} for heroes.",
        [
          (val_add, "$g_weapons_set_no", 1),
          (val_mod, "$g_weapons_set_no", 2),
          (call_script, "script_all_toggle_weapons_set", 0),
        ]),
	  
      ("change_commander_besiegers_camp_with_allies",
        [
          (neg|eq, "$freelancer_state", 1),
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (str_store_troop_name,s7,"$g_player_troop"),
          (set_player_troop, "$g_player_troop"),
        ],
        "Change commander(Current commander: {s7}).",
        [
          (start_presentation, "prsnt_change_commander"),
        ]),
      ## CC
      ("join_siege_with_allies",[(neg|troop_is_wounded, "$g_player_troop")], "Join the next assault.", ## CC
        [
	       ## Pre-Battle Orders & Deployment Begin
           (try_begin),
            (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 1),
            (party_set_slot, "p_main_party", slot_party_prebattle_plan, 0),
           (try_end),
           ## Pre-Battle Orders & Deployment End
          ## CC
           (assign, "$g_joined_battle_to_help", 1), 
          ## CC
           (party_set_next_battle_simulation_time, "$g_encountered_party", -1),
           (try_begin),
             (check_quest_active, "qst_join_siege_with_army"),
             (quest_slot_eq, "qst_join_siege_with_army", slot_quest_target_center, "$g_encountered_party"),
             (add_xp_as_reward, 250),
             (call_script, "script_end_quest", "qst_join_siege_with_army"),
             #Reactivating follow army quest
             (faction_get_slot, ":faction_marshall", "$players_kingdom", slot_faction_marshall),
             (str_store_troop_name_link, s9, ":faction_marshall"),
             (setup_quest_text, "qst_follow_army"),
             (str_store_string, s2, "@{s9} wants you to follow his army until further notice."),
             (call_script, "script_start_quest", "qst_follow_army", ":faction_marshall"),
             (assign, "$g_player_follow_army_warnings", 0),
           (try_end),
           (try_begin),
             (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
             (party_get_slot, ":battle_scene", "$g_encountered_party", slot_town_walls),
           (else_try),
             (party_get_slot, ":battle_scene", "$g_encountered_party", slot_castle_exterior),
           (try_end),
           (call_script, "script_calculate_battle_advantage"),
           (val_mul, reg0, 2),
           (val_div, reg0, 3), #scale down the advantage a bit in sieges.
           (set_battle_advantage, reg0),
           (set_party_battle_mode),
           (try_begin),
             (party_slot_eq, "$g_encountered_party", slot_center_siege_with_belfry, 1),
             (set_jump_mission,"mt_castle_attack_walls_belfry"),
           (else_try),
             (set_jump_mission,"mt_castle_attack_walls_ladder"),
           (try_end),
           (jump_to_scene,":battle_scene"),
           (assign, "$g_siege_final_menu", "mnu_besiegers_camp_with_allies"),
           (assign, "$g_siege_battle_state", 1),
           (assign, "$g_next_menu", "mnu_castle_besiege_inner_battle"),
##           (assign, "$g_next_menu", "mnu_besiegers_camp_with_allies"),
           (jump_to_menu, "mnu_battle_debrief"),
           (change_screen_mission),
          ]),
      ("join_siege_stay_back", [(call_script, "script_party_count_members_with_full_health", "p_main_party"),
                                (ge, reg0, 3),
                                ],
       "Order your soldiers to join the next assault without you.",
       [
         (assign, "$g_joined_battle_to_help", 1), 
         (party_set_next_battle_simulation_time, "$g_encountered_party", -1),
         (try_begin),
           (check_quest_active, "qst_join_siege_with_army"),
           (quest_slot_eq, "qst_join_siege_with_army", slot_quest_target_center, "$g_encountered_party"),
           (add_xp_as_reward, 100),
           (call_script, "script_end_quest", "qst_join_siege_with_army"),
           #Reactivating follow army quest
           (faction_get_slot, ":faction_marshall", "$players_kingdom", slot_faction_marshall),
           (str_store_troop_name_link, s9, ":faction_marshall"),
           (setup_quest_text, "qst_follow_army"),
           (str_store_string, s2, "@{s9} wants you to follow his army until further notice."),
           (call_script, "script_start_quest", "qst_follow_army", ":faction_marshall"),
           (assign, "$g_player_follow_army_warnings", 0),
         (try_end),
         (jump_to_menu,"mnu_castle_attack_walls_with_allies_simulate")]),
         
	  ("join_wounded",[
	    (eq, "$freelancer_state", 1),
	    (troop_is_wounded, "trp_player"),
	    ],
	  "You are too wounded to fight.",[(leave_encounter),(change_screen_map)]),
         
      ("leave",[],"Leave.",[(leave_encounter),(change_screen_return)]),
    ]
  ),

  (
    "castle_outside",mnf_scale_picture,
    "You are outside {s2}.{s11} {s3} {s4}",
    "none",
    [
        (assign, "$g_enemy_party", "$g_encountered_party"),
        (assign, "$g_ally_party", -1),
        (str_store_party_name, s2,"$g_encountered_party"),
        (call_script, "script_encounter_calculate_fit"),
        (assign,"$all_doors_locked",1),
        (assign, "$current_town","$g_encountered_party"),
                
        (try_begin),
          (eq, "$new_encounter", 1),
          (assign, "$new_encounter", 0),
          (call_script, "script_let_nearby_parties_join_current_battle", 1, 0),
          (call_script, "script_encounter_init_variables"),
          (assign, "$entry_to_town_forbidden",0),
          (assign, "$sneaked_into_town",0),
          (assign, "$town_entered", 0),
#          (assign, "$waiting_for_arena_fight_result", 0),
          (assign, "$encountered_party_hostile", 0),
          (assign, "$encountered_party_friendly", 0),
          (try_begin),
            (gt, "$g_player_besiege_town", 0),
            (neq,"$g_player_besiege_town","$g_encountered_party"),
            (party_slot_eq, "$g_player_besiege_town", slot_center_is_besieged_by, "p_main_party"),
            (call_script, "script_lift_siege", "$g_player_besiege_town", 0),
            (assign,"$g_player_besiege_town",-1),
          (try_end),
          (try_begin),
            (lt, "$g_encountered_party_relation", 0),
            (assign, "$encountered_party_hostile", 1),
            (assign,"$entry_to_town_forbidden",1),
          (try_end),

          ##diplomacy begin
          (try_begin),
            (party_slot_eq, "$g_encountered_party", slot_village_infested_by_bandits, "trp_peasant_woman"),
            (assign, "$encountered_party_hostile", 1),
            (assign,"$entry_to_town_forbidden",1),            
          (try_end),
          ##diplomacy end

          (assign,"$cant_sneak_into_town",0),
          (try_begin),
            (eq,"$current_town","$last_sneak_attempt_town"),
            (store_current_hours,reg(2)),
            (val_sub,reg(2),"$last_sneak_attempt_time"),
            (lt,reg(2),12),
            (assign,"$cant_sneak_into_town",1),
          (try_end),
        (else_try), #second or more turn
          (eq, "$g_leave_encounter",1),
          (change_screen_return),
        (try_end),

        (str_clear,s4),
        (try_begin), 
          (eq,"$entry_to_town_forbidden",1),
          (try_begin),
            (eq,"$cant_sneak_into_town",1),
            (str_store_string,s4,"str_sneaking_to_town_impossible"),
          (else_try),
            (str_store_string,s4,"str_entrance_to_town_forbidden"),
          (try_end),
        (try_end),

        (party_get_slot, ":center_lord", "$current_town", slot_town_lord),
        (store_faction_of_party, ":center_faction", "$current_town"),
        (str_store_faction_name,s9,":center_faction"),
        (try_begin),
          (ge, ":center_lord", 0),
          (str_store_troop_name,s8,":center_lord"),
          (str_store_string,s7,"@{s8} of {s9}"),
        (try_end),

        (try_begin), # same mnu_town
          (party_slot_eq,"$current_town",slot_party_type, spt_castle),
          (try_begin),
            (eq, ":center_lord", "trp_player"),
            (str_store_string,s11,"@ Your own banner flies over the castle gate."),
          (else_try),
            (ge, ":center_lord", 0),
            (str_store_string,s11,"@ You see the banner of {s7} over the castle gate."),
          (else_try),
            (is_between, ":center_faction", kingdoms_begin, kingdoms_end),
            (str_store_string,s11,"str__this_castle_is_temporarily_under_royal_control"),
          (else_try),
            (str_store_string,s11,"str__this_castle_does_not_seem_to_be_under_anyones_control"),
          (try_end),
        (else_try),
          (try_begin),
            (eq, ":center_lord", "trp_player"),
            (str_store_string,s11,"@ Your own banner flies over the town gates."),
          (else_try),
            (ge, ":center_lord", 0),
            (str_store_string,s11,"@ You see the banner of {s7} over the town gates."),
          (else_try),
            (is_between, ":center_faction", kingdoms_begin, kingdoms_end),
            (str_store_string,s11,"str__this_town_is_temporarily_under_royal_control"),
          (else_try),	
            (str_store_string,s11,"str__the_townspeople_seem_to_have_declared_their_independence"),
          (try_end),
        (try_end),

        (party_get_num_companions, reg(7),"p_collective_enemy"),
        (assign,"$castle_undefended",0),
        (str_clear, s3),
        (try_begin),
          (eq,reg(7),0),
          (assign,"$castle_undefended",1),
#          (party_set_faction,"$g_encountered_party","fac_neutral"),
#          (party_set_slot, "$g_encountered_party", slot_town_lord, stl_unassigned),
          (str_store_string, s3, "str_castle_is_abondened"),
        (else_try),
        ##diplomacy begin
          (party_slot_eq, "$g_encountered_party", slot_village_infested_by_bandits, "trp_peasant_woman"),
          (str_store_string, s3, "str_dplmc_place_is_occupied_by_insurgents"),
        (else_try),
        ##diplomacy end
          (eq,"$g_encountered_party_faction","fac_player_supporters_faction"),
          (str_store_string, s3, "str_place_is_occupied_by_player"),
        (else_try),
          (lt, "$g_encountered_party_relation", 0),
          (str_store_string, s3, "str_place_is_occupied_by_enemy"),
        (else_try),
#          (str_store_string, s3, "str_place_is_occupied_by_friendly"),
        (try_end),

        (try_begin),
          (eq, "$g_leave_town_outside",1),
          (assign, "$g_leave_town_outside",0),
          (assign, "$g_permitted_to_center", 0),
          (change_screen_return),
        (else_try),
          (check_quest_active, "qst_escort_lady"),
          (quest_slot_eq, "qst_escort_lady", slot_quest_target_center, "$g_encountered_party"),
          (quest_get_slot, ":quest_object_troop", "qst_escort_lady", slot_quest_object_troop),
          (call_script, "script_get_meeting_scene"), (assign, ":meeting_scene", reg0),
          (modify_visitors_at_site,":meeting_scene"),
          (reset_visitors),
          (set_visitor,0, "trp_player"),
          (set_visitor,17, ":quest_object_troop"),
          (set_jump_mission, "mt_conversation_encounter"),
          (jump_to_scene, ":meeting_scene"),
          (assign, "$talk_context", tc_entering_center_quest_talk),
          (change_screen_map_conversation, ":quest_object_troop"),
        (else_try),
          (check_quest_active, "qst_kidnapped_girl"),
          (quest_slot_eq, "qst_kidnapped_girl", slot_quest_giver_center, "$g_encountered_party"),
          (quest_slot_eq, "qst_kidnapped_girl", slot_quest_current_state, 3),
          (call_script, "script_get_meeting_scene"), (assign, ":meeting_scene", reg0),
          (modify_visitors_at_site,":meeting_scene"),
          (reset_visitors),
          (set_visitor,0, "trp_player"),
          (set_visitor,17, "trp_kidnapped_girl"),
          (set_jump_mission, "mt_conversation_encounter"),
          (jump_to_scene, ":meeting_scene"),
          (assign, "$talk_context", tc_entering_center_quest_talk),
          (change_screen_map_conversation, "trp_kidnapped_girl"),
##        (else_try),
##          (gt, "$lord_requested_to_talk_to", 0),
##          (store_current_hours, ":cur_hours"),
##          (neq, ":cur_hours", "$quest_given_time"),
##          (modify_visitors_at_site,"scn_conversation_scene"),
##          (reset_visitors),
##          (assign, ":cur_lord", "$lord_requested_to_talk_to"),
##          (assign, "$lord_requested_to_talk_to", 0),
##          (set_visitor,0,"trp_player"),
##          (set_visitor,17,":cur_lord"),
##          (set_jump_mission,"mt_conversation_encounter"),
##          (jump_to_scene,"scn_conversation_scene"),
##          (assign, "$talk_context", tc_castle_gate_lord),
##          (change_screen_map_conversation, ":cur_lord"),
        (else_try),
          (eq, "$g_town_visit_after_rest", 1),
          (assign, "$g_town_visit_after_rest", 0),
          (jump_to_menu,"mnu_town"),
        ##diplomacy begin
        (else_try),
          (neg|is_between, "$g_encountered_party_faction", kingdoms_begin, kingdoms_end),
          (party_slot_eq, "$g_encountered_party", slot_village_infested_by_bandits, "trp_peasant_woman"),
          (try_begin),
            (eq, "$g_player_besiege_town", "$g_encountered_party"),
            (jump_to_menu, "mnu_castle_besiege"),
          (try_end),
        ##diplomacy end             
        (else_try),
          (is_between, "$g_encountered_party_faction", kingdoms_begin, kingdoms_end),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle), 
          (this_or_next|party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
          (faction_slot_eq, "$g_encountered_party_faction", slot_faction_leader, "trp_player"),          
          (jump_to_menu, "mnu_enter_your_own_castle"),
        (else_try),
          (party_slot_eq,"$g_encountered_party", slot_party_type,spt_castle),
          (ge, "$g_encountered_party_relation", 0),
          (this_or_next|eq,"$castle_undefended", 1),
          (this_or_next|eq, "$g_permitted_to_center", 1),
          (eq, "$g_encountered_party_faction", "$players_kingdom"),          
          (jump_to_menu, "mnu_town"),
        (else_try),
          (party_slot_eq,"$g_encountered_party", slot_party_type,spt_town),
          (ge, "$g_encountered_party_relation", 0),
          (jump_to_menu, "mnu_town"),
        (else_try),
          (eq, "$g_player_besiege_town", "$g_encountered_party"),
          (jump_to_menu, "mnu_castle_besiege"),
        (try_end),
	    
          ##diplomacy begin
          (try_begin),
            (party_slot_eq, "$g_encountered_party", slot_village_infested_by_bandits, "trp_peasant_woman"),
            (set_background_mesh, "mesh_pic_townriot"),
          (else_try),
          ##diplomacy end
        (call_script, "script_set_town_picture"),
              ##diplomacy begin
          (try_end),
          ##diplomacy end
        ],
    [
#        ("talk_to_castle_commander",[
#            (party_get_num_companions, ":no_companions", "$g_encountered_party"),
#            (ge, ":no_companions", 1),
#            (eq,"$ruler_meeting_denied",0), #this variable is removed
#            ],
#         "Request a meeting with the lord of the castle.",[
#             (modify_visitors_at_site,"scn_conversation_scene"),(reset_visitors),
#             (set_visitor,0,"trp_player"),
#             (party_stack_get_troop_id, reg(6),"$g_encountered_party",0),
#             (party_stack_get_troop_dna,reg(7),"$g_encountered_party",0),
#             (set_visitor,17,reg(6),reg(7)),
#             (set_jump_mission,"mt_conversation_encounter"),
#             (jump_to_scene,"scn_conversation_scene"),
#             (assign, "$talk_context", tc_castle_commander),
#             (change_screen_map_conversation, reg(6))
#             ]),
      ("approach_gates",[(this_or_next|eq,"$entry_to_town_forbidden",1),
                          (party_slot_eq,"$g_encountered_party", slot_party_type,spt_castle)],
       "Approach the gates and hail the guard.",[
                                                  (jump_to_menu, "mnu_castle_guard"),
##                                                   (modify_visitors_at_site,"scn_conversation_scene"),(reset_visitors),
##                                                   (set_visitor,0,"trp_player"),
##                                                   (store_faction_of_party, ":cur_faction", "$g_encountered_party"),
##                                                   (faction_get_slot, ":cur_guard", ":cur_faction", slot_faction_guard_troop),
##                                                   (set_visitor,17,":cur_guard"),
##                                                   (set_jump_mission,"mt_conversation_encounter"),
##                                                   (jump_to_scene,"scn_conversation_scene"),
##                                                   (assign, "$talk_context", tc_castle_gate),
##                                                   (change_screen_map_conversation, ":cur_guard")
                                                   ]),
      
      ("town_sneak",
        [
          (try_begin),
            (party_slot_eq, "$g_encountered_party", slot_party_type,spt_town),
            (str_store_string, s7, "str_town"),
          (else_try),  
            (str_store_string, s7, "str_castle"),
          (try_end),  
          
          (eq, "$entry_to_town_forbidden", 1),
          (eq, "$cant_sneak_into_town", 0)
        ],
       "Disguise yourself and try to sneak into the {s7}",
       [
         (faction_get_slot, ":player_alarm", "$g_encountered_party_faction", slot_faction_player_alarm),
         (party_get_num_companions, ":num_men", "p_main_party"),
         (party_get_num_prisoners, ":num_prisoners", "p_main_party"),
         (val_add, ":num_men", ":num_prisoners"),
         (val_mul, ":num_men", 2),
         (val_div, ":num_men", 3),
         (store_add, ":get_caught_chance", ":player_alarm", ":num_men"),
         (store_skill_level, ":stealth", skl_stealth),
         (val_sub, ":get_caught_chance", ":stealth"),
         (store_random_in_range, ":random_chance", 0, 100),
         (try_begin),
           (this_or_next|ge, ":random_chance", ":get_caught_chance"),
           (eq, "$g_last_defeated_bandits_town", "$g_encountered_party"),
           (assign, "$g_last_defeated_bandits_town", 0),
           (assign, "$sneaked_into_town",1),
           (assign, "$town_entered", 1),
           (jump_to_menu,"mnu_sneak_into_town_suceeded"),
           (assign, "$g_mt_mode", tcm_disguised),
           (val_add,"$g_sneaak_time", 3),
         (else_try),
           (jump_to_menu,"mnu_sneak_into_town_caught"),
           (val_add,"$g_sneaak_time", 1),
         (try_end)
         ]),
      ##diplomacy begin
      ("dplmc_riot_start_siege",
       [
           (party_slot_eq, "$g_encountered_party", slot_center_is_besieged_by, -1),
           (party_slot_eq, "$g_encountered_party", slot_village_infested_by_bandits, "trp_peasant_woman"),
           (lt, "$g_encountered_party_2", 1),
           (call_script, "script_party_count_fit_for_battle","p_main_party"),
           (gt, reg(0), 5),
           (try_begin),
             (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
             (assign, reg6, 1),
           (else_try),
             (assign, reg6, 0),
           (try_end),
           ],
       "Besiege the {reg6?town:castle} to counter the insurgency.",
       [
         (assign,"$g_player_besiege_town","$g_encountered_party"),
         (jump_to_menu, "mnu_castle_besiege"),
         ]),
       ("dplmc_riot_negotiate",
       [
           (party_slot_eq, "$g_encountered_party", slot_center_is_besieged_by, -1),
           (party_slot_eq, "$g_encountered_party", slot_village_infested_by_bandits, "trp_peasant_woman"),
           (lt, "$g_encountered_party_2", 1),
           (call_script, "script_party_count_fit_for_battle","p_main_party"),
           (gt, reg(0), 5),
           (try_begin),
             (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
             (assign, reg6, 1),
           (else_try),
             (assign, reg6, 0),
           (try_end),
           ],
       "Begin negotiations.",
       [
          (jump_to_menu, "mnu_dplmc_riot_negotiate"),
        ]),       

     ##diplomacy end          
      ("castle_start_siege",
       [
           ##diplomacy begin
           (neg|party_slot_eq, "$g_encountered_party", slot_village_infested_by_bandits, "trp_peasant_woman"),
           ##diplomacy end 
           (this_or_next|party_slot_eq, "$g_encountered_party", slot_center_is_besieged_by, -1),
           (             party_slot_eq, "$g_encountered_party", slot_center_is_besieged_by, "p_main_party"),
           (store_relation, ":reln", "$g_encountered_party_faction", "fac_player_supporters_faction"),
           (lt, ":reln", 0),
           (lt, "$g_encountered_party_2", 1),
           (call_script, "script_party_count_fit_for_battle","p_main_party"),
           (gt, reg(0), 5),
           (try_begin),
             (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
             (assign, reg6, 1),
           (else_try),
             (assign, reg6, 0),
           (try_end),
           ],
       "Besiege the {reg6?town:castle}.",
       [
         (assign,"$g_player_besiege_town","$g_encountered_party"),
         (store_relation, ":relation", "fac_player_supporters_faction", "$g_encountered_party_faction"),
         (val_min, ":relation", -40),
         (call_script, "script_set_player_relation_with_faction", "$g_encountered_party_faction", ":relation"),
         (call_script, "script_update_all_notes"),
         (jump_to_menu, "mnu_castle_besiege"),
         ]),

      ("cheat_castle_start_siege",
       [
         (eq, "$cheat_mode", 1),
         (this_or_next|party_slot_eq, "$g_encountered_party", slot_center_is_besieged_by, -1),
         (             party_slot_eq, "$g_encountered_party", slot_center_is_besieged_by, "p_main_party"),
         (store_relation, ":reln", "$g_encountered_party_faction", "fac_player_supporters_faction"),
         (ge, ":reln", 0),
         (lt, "$g_encountered_party_2", 1),
         (call_script, "script_party_count_fit_for_battle","p_main_party"),
         (gt, reg(0), 1),
         (try_begin),
           (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
           (assign, reg6, 1),
         (else_try),
           (assign, reg6, 0),
         (try_end),
           ],
       "{!}CHEAT: Besiege the {reg6?town:castle}...",
       [
           (assign,"$g_player_besiege_town","$g_encountered_party"),
           (jump_to_menu, "mnu_castle_besiege"),
           ]),

      ("castle_leave",[],"Leave.",[(change_screen_return,0)]),
      ("castle_cheat_interior",[(eq, "$cheat_mode", 1)], "{!}CHEAT! Interior.",[(set_jump_mission,"mt_ai_training"),
                                                       (party_get_slot, ":castle_scene", "$current_town", slot_town_castle),
                                                       (jump_to_scene,":castle_scene"),
                                                       (change_screen_mission)]),
      ("castle_cheat_exterior",[(eq, "$cheat_mode", 1)], "{!}CHEAT! Exterior.",[
#                                                       (set_jump_mission,"mt_town_default"),
                                                       (set_jump_mission,"mt_ai_training"),
                                                       (party_get_slot, ":castle_scene", "$current_town", slot_castle_exterior),
                                                       (jump_to_scene,":castle_scene"),
                                                       (change_screen_mission)]),
      ("castle_cheat_town_walls",[(eq, "$cheat_mode", 1),(party_slot_eq,"$current_town",slot_party_type, spt_town),], "{!}CHEAT! Town Walls.",
       [
         (party_get_slot, ":scene", "$current_town", slot_town_walls),
         (set_jump_mission,"mt_ai_training"),
         (jump_to_scene,":scene"),
         (change_screen_mission)]),

    ]
  ),
   (
    "castle_guard",mnf_scale_picture,
    "You approach the gate. The men on the walls watch you closely.",
    "none",
    [
        (call_script, "script_set_town_picture"),
    ],
    [
      ("request_shelter",[(party_slot_eq, "$g_encountered_party",slot_party_type, spt_castle),
                          (ge, "$g_encountered_party_relation", 0)],
       "Request entry to the castle.",
       [(party_get_slot, ":castle_lord", "$g_encountered_party", slot_town_lord),
        (try_begin),
          (lt, ":castle_lord", 0),
          (jump_to_menu, "mnu_castle_entry_granted"),
        (else_try),
          (call_script, "script_troop_get_player_relation", ":castle_lord"),
          (assign, ":castle_lord_relation", reg0),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":castle_lord_relation", ":persuasion_level"),
          #(troop_get_slot, ":castle_lord_relation", ":castle_lord", slot_troop_player_relation),
          (try_begin),
            (this_or_next|eq, "$freelancer_state", 1),             
            (this_or_next|eq, "$g_player_eligible_feast_center_no", "$current_town"),             
            (gt, ":castle_lord_relation", 0),
            (jump_to_menu, "mnu_castle_entry_granted"),
          (else_try),
            (jump_to_menu, "mnu_castle_entry_denied"),
          (try_end),
        (try_end),
       ]),
      ("request_meeting_commander",[],
       "Request a meeting with someone.",
       [
          (jump_to_menu, "mnu_castle_meeting"),
       ]),
      ("guard_leave",[],
       "Leave.",
       [(change_screen_return,0)]),
    ]
  ),
  (
    "castle_entry_granted",mnf_scale_picture,
    "After a brief wait, the guards open the gates for you and allow your party inside.",
    "none",
    [
        (call_script, "script_set_town_picture"),
    ],
    [
      ("continue",[],
       "Continue...",
       [(jump_to_menu,"mnu_town")]),
    ]
  ),
  (
    "castle_entry_denied",mnf_scale_picture,
    "The lord of this castle has forbidden you from coming inside these walls,\
 and the guard sergeant informs you that his men will fire if you attempt to come any closer.",
    "none",
    [
        (call_script, "script_set_town_picture"),
    ],
    [
      ("continue",[],
       "Continue...",
       [(jump_to_menu,"mnu_castle_guard")]),
    ]
  ),
  (
    "castle_meeting",mnf_scale_picture,
    "With whom do you want to meet?",
    "none",
    [
        (assign, "$num_castle_meeting_troops", 0),
        (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
          (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
          (call_script, "script_get_troop_attached_party", ":troop_no"),
          (eq, "$g_encountered_party", reg0),
          (troop_set_slot, "trp_temp_array_a", "$num_castle_meeting_troops", ":troop_no"),
          (val_add, "$num_castle_meeting_troops", 1),
        (try_end),
        (call_script, "script_set_town_picture"),
    ],
    [
      ("guard_meet_s5",[(gt, "$num_castle_meeting_troops", 0),(troop_get_slot, ":troop_no", "trp_temp_array_a", 0),(str_store_troop_name, s5, ":troop_no")],
       "{s5}.",[(troop_get_slot, "$castle_meeting_selected_troop", "trp_temp_array_a", 0),(jump_to_menu,"mnu_castle_meeting_selected")]),
      ("guard_meet_s5",[(gt, "$num_castle_meeting_troops", 1),(troop_get_slot, ":troop_no", "trp_temp_array_a", 1),(str_store_troop_name, s5, ":troop_no")],
       "{s5}.",[(troop_get_slot, "$castle_meeting_selected_troop", "trp_temp_array_a", 1),(jump_to_menu,"mnu_castle_meeting_selected")]),
      ("guard_meet_s5",[(gt, "$num_castle_meeting_troops", 2),(troop_get_slot, ":troop_no", "trp_temp_array_a", 2),(str_store_troop_name, s5, ":troop_no")],
       "{s5}.",[(troop_get_slot, "$castle_meeting_selected_troop", "trp_temp_array_a", 2),(jump_to_menu,"mnu_castle_meeting_selected")]),
      ("guard_meet_s5",[(gt, "$num_castle_meeting_troops", 3),(troop_get_slot, ":troop_no", "trp_temp_array_a", 3),(str_store_troop_name, s5, ":troop_no")],
       "{s5}.",[(troop_get_slot, "$castle_meeting_selected_troop", "trp_temp_array_a", 3),(jump_to_menu,"mnu_castle_meeting_selected")]),
      ("guard_meet_s5",[(gt, "$num_castle_meeting_troops", 4),(troop_get_slot, ":troop_no", "trp_temp_array_a", 4),(str_store_troop_name, s5, ":troop_no")],
       "{s5}.",[(troop_get_slot, "$castle_meeting_selected_troop", "trp_temp_array_a", 4),(jump_to_menu,"mnu_castle_meeting_selected")]),
      ("guard_meet_s5",[(gt, "$num_castle_meeting_troops", 5),(troop_get_slot, ":troop_no", "trp_temp_array_a", 5),(str_store_troop_name, s5, ":troop_no")],
       "{s5}.",[(troop_get_slot, "$castle_meeting_selected_troop", "trp_temp_array_a", 5),(jump_to_menu,"mnu_castle_meeting_selected")]),
      ("guard_meet_s5",[(gt, "$num_castle_meeting_troops", 6),(troop_get_slot, ":troop_no", "trp_temp_array_a", 6),(str_store_troop_name, s5, ":troop_no")],
       "{s5}.",[(troop_get_slot, "$castle_meeting_selected_troop", "trp_temp_array_a", 6),(jump_to_menu,"mnu_castle_meeting_selected")]),
      ("guard_meet_s5",[(gt, "$num_castle_meeting_troops", 7),(troop_get_slot, ":troop_no", "trp_temp_array_a", 7),(str_store_troop_name, s5, ":troop_no")],
       "{s5}.",[(troop_get_slot, "$castle_meeting_selected_troop", "trp_temp_array_a", 7),(jump_to_menu,"mnu_castle_meeting_selected")]),
      ("guard_meet_s5",[(gt, "$num_castle_meeting_troops", 8),(troop_get_slot, ":troop_no", "trp_temp_array_a", 8),(str_store_troop_name, s5, ":troop_no")],
       "{s5}.",[(troop_get_slot, "$castle_meeting_selected_troop", "trp_temp_array_a", 8),(jump_to_menu,"mnu_castle_meeting_selected")]),
      ("guard_meet_s5",[(gt, "$num_castle_meeting_troops", 9),(troop_get_slot, ":troop_no", "trp_temp_array_a", 9),(str_store_troop_name, s5, ":troop_no")],
       "{s5}.",[(troop_get_slot, "$castle_meeting_selected_troop", "trp_temp_array_a", 9),(jump_to_menu,"mnu_castle_meeting_selected")]),
      
      ("forget_it",[],
       "Forget it.",
       [(jump_to_menu,"mnu_castle_guard")]),
    ]
  ),
  (
    "castle_meeting_selected",0,
    "Your request for a meeting is relayed inside, and finally {s6} appears in the courtyard to speak with you.",
    "none",
    [(str_store_troop_name, s6, "$castle_meeting_selected_troop"),
     (try_begin),
        (store_faction_of_party, ":current_town_faction", "$current_town"),
        (neg|eq, ":current_town_faction", "$players_kingdom"),
        (neg|troop_slot_ge,"trp_player", slot_troop_player_class,5),
        (str_store_string, s1, "@Your request for a meeting is denied. The lord does not want to spend his time to insignificant citizens."),
        (display_message, "@You need to be atleast from the higher class (Gentry or higher) to speak with lords."),
     (else_try),
        (str_store_string, s1, "@Your request for a meeting is relayed inside, and finally {s6} appears in the courtyard to speak with you."),
     (try_end),
     (set_background_mesh, "mesh_set_vassal_title"),

    ],
    [
      ("continue",[],
       "Continue...",
       [
        (try_begin),
          (store_faction_of_party, ":current_town_faction", "$current_town"),
          (this_or_next|eq, ":current_town_faction", "$players_kingdom"),
          (troop_slot_ge,"trp_player", slot_troop_player_class,6),
          (jump_to_menu, "mnu_castle_outside"),
          (modify_visitors_at_site, "scn_conversation_scene"),(reset_visitors),
          (set_visitor, 0, "trp_player"),
          (set_visitor, 17, "$castle_meeting_selected_troop"),
          (set_jump_mission, "mt_conversation_encounter"),
          (jump_to_scene, "scn_conversation_scene"),
          (assign, "$talk_context", tc_castle_gate),
          (change_screen_map_conversation, "$castle_meeting_selected_troop"),
        (else_try),
          (jump_to_menu, "mnu_castle_outside"),
        (try_end),
        
        
        ]),
    ]
  ),

  ("castle_entry_refused", 0,
  "At the moment you make attempts to enter the castle, the guards immediately block the entrance. Access to the hall of the lord is denied. ^^One of these heavily armoured soldiers throws insults to you, referring to your low origin. ^Another guardsman tells - or rather mumbles to you why access is denied. ^^People of low origin are simply not allowed to enter the hall of the lord.",
  "none", 
  [
    (display_message, "@You need to be atleast from the class of knight."),
    (set_background_mesh, "mesh_set_vassal_title"),
  ],
  [

    ("give_money", 
    [
        (party_get_slot, reg1, "$current_town", slot_town_prosperity),
        (val_mul, reg1, 10),
        (store_troop_gold, ":var_0", "trp_player"),
        (ge, ":var_0", reg1),
    ],
    "Offer {reg1} Florins in return for shutting eyes.",
    [
        (jump_to_menu, "mnu_castle_entry_refused_accepted"),
        (troop_remove_gold, "trp_player", reg1),
    ], "."),

      ("go_back_dot",[],"Go back.",[(jump_to_menu, "mnu_town"),]),

  ]),

  ("castle_entry_refused_accepted", 0,
  "The guard accepts your offer and grants access to the hall of the lord.","none", 
  [
    (set_background_mesh, "mesh_set_vassal_title"),
  ],
  [
    ("continue", [],
    "Continue...",
    [
        (assign, "$town_entered", 1),
        (jump_to_menu, "mnu_town"),
        (call_script, "script_enter_court", "$current_town"),
    ], "."),

  ]),

   (
    ## CC
    "castle_besiege",mnf_enable_hot_keys|mnf_scale_picture,
    ## CC
    "You are laying siege to {s1}. {s2} {s3}",
    "none",
    [
        ## CC
        (troop_get_type, ":is_female", "$g_player_troop"),
        ## CC
        (try_begin),
          (this_or_next|eq, ":is_female", tf_female_elf),
          (eq, ":is_female", 1),
          (set_background_mesh, "mesh_pic_siege_sighted_fem"),
        (else_try),
          (set_background_mesh, "mesh_pic_siege_sighted"),
        (try_end),
        (assign, "$g_siege_force_wait", 0),
        (try_begin),
          (party_slot_eq, "$g_encountered_party", slot_center_is_besieged_by, -1),
          (party_set_slot, "$g_encountered_party", slot_center_is_besieged_by, "p_main_party"),
          #(party_set_extra_icon, "$g_encountered_party", "icon_castle_besieged", 0, 0, 0, 0),
          (store_current_hours, ":cur_hours"),
          (party_set_slot, "$g_encountered_party", slot_center_siege_begin_hours, ":cur_hours"),
          (assign, "$g_siege_method", 0),
          (assign, "$g_siege_sallied_out_once", 0),
        (try_end),

        (party_get_slot, ":town_food_store", "$g_encountered_party", slot_party_food_store),
        (call_script, "script_center_get_food_consumption", "$g_encountered_party"),
        (assign, ":food_consumption", reg0),
        (assign, reg7, ":food_consumption"),
        (assign, reg8, ":town_food_store"),
        (store_div, reg3, ":town_food_store", ":food_consumption"),

        (try_begin),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (assign, reg6, 1),
        (else_try),
          (assign, reg6, 0),
        (try_end),
        
        (try_begin),
          (gt, reg3, 0),
          (str_store_string, s2, "@The {reg6?town's:castle's} food stores should last for {reg3} more days."),
        (else_try),
          (str_store_string, s2, "@The {reg6?town's:castle's} food stores have run out and the defenders are starving."),
        (try_end),

        (str_store_string, s3, "str_empty_string"),
        (try_begin),
          (ge, "$g_siege_method", 1),
          (store_current_hours, ":cur_hours"),
          (try_begin),
            (lt, ":cur_hours",  "$g_siege_method_finish_hours"),
            (store_sub, reg9, "$g_siege_method_finish_hours", ":cur_hours"),
            (try_begin),
              (eq, "$g_siege_method", 1),
              (str_store_string, s3, "@You're preparing to attack the walls, the work should finish in {reg9} hours."),
            (else_try),
              (eq, "$g_siege_method", 2),
              (str_store_string, s3, "@Your forces are building a siege tower. They estimate another {reg9} hours to complete the build."),
            (try_end),
          (else_try),
            (try_begin),
              (eq, "$g_siege_method", 1),
              (str_store_string, s3, "@You are ready to attack the walls at any time."),
            (else_try),
              (eq, "$g_siege_method", 2),
              (str_store_string, s3, "@The siege tower is built and ready to make an assault."),
            (try_end),
          (try_end),
        (try_end),
        
        #Check if enemy leaves the castle to us...
        (try_begin),
          (eq, "$g_castle_left_to_player",1), #we come here after dialog. Empty the castle and send parties away.
          (assign, "$g_castle_left_to_player",0),
          (store_faction_of_party, ":castle_faction", "$g_encountered_party"),
          (party_set_faction,"$g_encountered_party","fac_neutral"), #temporarily erase faction so that it is not the closest town
          (party_get_num_attached_parties, ":num_attached_parties_to_castle","$g_encountered_party"),
          (try_for_range_backwards, ":iap", 0, ":num_attached_parties_to_castle"),
            (party_get_attached_party_with_rank, ":attached_party", "$g_encountered_party", ":iap"),
            (party_detach, ":attached_party"),
            (party_get_slot, ":attached_party_type", ":attached_party", slot_party_type),
            (eq, ":attached_party_type", spt_kingdom_hero_party),
            (store_faction_of_party, ":attached_party_faction", ":attached_party"),
            (call_script, "script_get_closest_walled_center_of_faction", ":attached_party", ":attached_party_faction"),
            (try_begin),
              (gt, reg0, 0),
              (call_script, "script_party_set_ai_state", ":attached_party", spai_holding_center, reg0),
            (else_try),
              (call_script, "script_party_set_ai_state", ":attached_party", spai_patrolling_around_center, "$g_encountered_party"),
            (try_end),
          (try_end),
          (call_script, "script_party_remove_all_companions", "$g_encountered_party"),
          (change_screen_return),
          (party_collect_attachments_to_party, "$g_encountered_party", "p_collective_enemy"), #recalculate so that
          (call_script, "script_party_copy", "p_encountered_party_backup", "p_collective_enemy"), #leaving troops will not be considered as captured
          (party_set_faction,"$g_encountered_party",":castle_faction"), 
        (try_end),

        #Check for victory or defeat....
        (assign, "$g_enemy_party", "$g_encountered_party"),
        (assign, "$g_ally_party", -1),
        (str_store_party_name, 1,"$g_encountered_party"),
        (call_script, "script_encounter_calculate_fit"),
        
        (assign, reg11, "$g_enemy_fit_for_battle"),
        (assign, reg10, "$g_friend_fit_for_battle"),


        (try_begin),
          (eq, "$g_leave_encounter",1),
          (change_screen_return),
        ##diplomacy begin
        (else_try),
          (party_slot_eq, "$g_encountered_party", slot_village_infested_by_bandits, "trp_peasant_woman"),
          (call_script, "script_party_count_fit_regulars","p_collective_enemy"),
          (assign, ":enemy_finished", 0),
          (try_begin),
            (eq, "$g_battle_result", 1),
            (assign, ":enemy_finished", 1),
          (else_try),
            (le, "$g_enemy_fit_for_battle", 0),
            (ge, "$g_friend_fit_for_battle", 1),
            (assign, ":enemy_finished", 1),
          (try_end),           
          (this_or_next|eq, ":enemy_finished", 1),
          (eq, "$g_enemy_surrenders", 1),     
          (assign, "$g_next_menu", "mnu_dplmc_town_riot_removed"), 
          (jump_to_menu, "mnu_total_victory"),
        ##diplomacy end
        (else_try),
          (call_script, "script_party_count_fit_regulars","p_collective_enemy"),
          (assign, ":enemy_finished", 0),
          (try_begin),
            (eq, "$g_battle_result", 1),
            (assign, ":enemy_finished", 1),
          (else_try),
            (le, "$g_enemy_fit_for_battle", 0),
            (ge, "$g_friend_fit_for_battle", 1),
            (assign, ":enemy_finished", 1),
          (try_end),
          (this_or_next|eq, ":enemy_finished", 1),
          (eq, "$g_enemy_surrenders", 1),

          (assign, "$g_next_menu", "mnu_castle_taken"), 
          (jump_to_menu, "mnu_total_victory"),
        (else_try),
          (call_script, "script_party_count_members_with_full_health", "p_main_party"),
          (assign, ":main_party_fit_regulars", reg0),
          (eq, "$g_battle_result", -1),
          (eq, ":main_party_fit_regulars", 0), #all lost (sdsd = TODO : )
          (assign, "$g_next_menu", "mnu_captivity_start_castle_defeat"),
          (jump_to_menu, "mnu_total_defeat"),
        (try_end),
        ## Pre-Battle Orders & Deployment Begin
        ## Pre-Battle Orders & Deployment End
        (party_set_slot,"p_main_party", slot_party_is_in_siege, 1),
    ],
    [
      ("siege_request_meeting",[(eq, "$cant_talk_to_enemy", 0)],"Call for a meeting with the castle commander.", [
          (assign, "$cant_talk_to_enemy", 1),
          (assign, "$g_enemy_surrenders",0),
          (assign, "$g_castle_left_to_player",0),
          (assign, "$talk_context", tc_castle_commander),
          (party_get_num_attached_parties, ":num_attached_parties_to_castle","$g_encountered_party"),
          (try_begin),
            (gt, ":num_attached_parties_to_castle", 0),
            (party_get_attached_party_with_rank, ":leader_attached_party", "$g_encountered_party", 0),
            (call_script, "script_setup_party_meeting", ":leader_attached_party"),
          (else_try),
            (call_script, "script_setup_party_meeting", "$g_encountered_party"),
          (try_end),
           ]),
        
      ("wait_24_hours",[],"Wait until tomorrow.", [
          (assign,"$auto_besiege_town","$g_encountered_party"),
          (assign, "$g_siege_force_wait", 1),
          (store_time_of_day,":cur_time_of_day"),
          (val_add, ":cur_time_of_day", 1),
          (assign, ":time_to_wait", 31),
          (val_sub,":time_to_wait",":cur_time_of_day"),
          (val_mod,":time_to_wait",24),
          (val_add, ":time_to_wait", 1),
          (rest_for_hours_interactive, ":time_to_wait", 5, 1), #rest while attackable
          (assign, "$cant_talk_to_enemy", 0),
          (change_screen_return),
          ]),

	## Pre-Battle Orders & Deployment Begin                        	
	 ("siege_attack_deployment",
      [
        (neg|eq, "$freelancer_state", 1),
        (neg|troop_is_wounded, "$g_player_troop"),
        
        (ge, "$g_siege_method", 1),
        (gt, "$g_friend_fit_for_battle", 3),
        (store_current_hours, ":cur_hours"),
        (ge, ":cur_hours", "$g_siege_method_finish_hours"),
        
        (party_get_skill_level, ":tactics", "p_main_party", skl_tactics),
        (ge, ":tactics", 2),
        
        (call_script, "script_party_count_fit_for_battle", "p_collective_friends"),
        (assign, ":friend_count", reg0),
        (call_script, "script_party_count_fit_for_battle", "p_collective_enemy"),
        (assign, ":enemy_count", reg0),
        (store_add, ":total_combatants", ":friend_count", ":enemy_count"),
        (party_get_slot, ":battle_size", "p_main_party", slot_party_prebattle_battle_size),
        (gt, ":total_combatants", ":battle_size"),
      ],
      "Choose who will join you in battle.",
      [
          (assign, "$g_next_menu", "mnu_castle_besiege"),
        (start_presentation, "prsnt_prebattle_custom_deployment"),
      ]),
     ("siege_attack_plan",
      [
        (neg|troop_is_wounded, "$g_player_troop"),
        
        (ge, "$g_siege_method", 1),
        (gt, "$g_friend_fit_for_battle", 3),
        (store_current_hours, ":cur_hours"),
        (ge, ":cur_hours", "$g_siege_method_finish_hours"),
        
      ],
      "Plan your assault.",
      [
          (assign, "$g_next_menu", "mnu_castle_besiege"),        
        (start_presentation, "prsnt_prebattle_orders"),
      ]),
     ## Pre-Battle Orders & Deployment End
     
      ("camp_special_ability",[],"Choose your special_ability.",[(assign, "$return_menu", "mnu_castle_besiege"),(jump_to_menu, "mnu_camp_set_special_ability"),]),
     
      ("toggle_weapons",
        [
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (try_begin),
            (eq, "$g_weapons_set_no", 0),
            (assign, reg1, 2),
          (else_try),
            (assign, reg1, 1),
          (try_end),
        ],
        "Toggle weapons to set {reg1} for heroes.",
        [
          (val_add, "$g_weapons_set_no", 1),
          (val_mod, "$g_weapons_set_no", 2),
          (call_script, "script_all_toggle_weapons_set", 0),
        ]),

      ("change_commander_castle_besiege",
        [
          (ge, "$g_siege_method", 1),
          (store_current_hours, ":cur_hours"),
          (ge, ":cur_hours", "$g_siege_method_finish_hours"),
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (str_store_troop_name,s7,"$g_player_troop"),
          (set_player_troop, "$g_player_troop"),
        ],
        "Change commander.(Current commander: {s7})",
        [
          (start_presentation, "prsnt_change_commander"),
        ]),
## CC
      ("castle_lead_attack",
       [
         ## CC
         (neg|troop_is_wounded, "$g_player_troop"),
         ## CC
         (ge, "$g_siege_method", 1),
         (gt, "$g_friend_fit_for_battle", 3),
         (store_current_hours, ":cur_hours"),
         (ge, ":cur_hours", "$g_siege_method_finish_hours"),
       ],
       "Lead your soldiers in an assault.", 
       [
	   	   ## Pre-Battle Orders & Deployment Begin
           (try_begin),
            (party_slot_eq, "p_main_party", slot_party_prebattle_plan, 1),
            (party_set_slot, "p_main_party", slot_party_prebattle_plan, 0),
           (try_end),
           ## Pre-Battle Orders & Deployment End
           (try_begin),
             (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
             (party_get_slot, ":battle_scene", "$g_encountered_party", slot_town_walls),
           (else_try),
             (party_get_slot, ":battle_scene", "$g_encountered_party", slot_castle_exterior),
           (try_end),

           (call_script, "script_calculate_renown_value"),            
           (call_script, "script_calculate_battle_advantage"),
           (assign, ":battle_advantage", reg0),
           (val_mul, ":battle_advantage", 2),
           (val_div, ":battle_advantage", 3), #scale down the advantage a bit in sieges.
           (set_battle_advantage, ":battle_advantage"),
           (set_party_battle_mode),
           (assign, "$g_siege_battle_state", 1),
           (assign, ":siege_sally", 0),
           (try_begin),
             (le, ":battle_advantage", -4), #we are outnumbered, defenders sally out
             (eq, "$g_siege_sallied_out_once", 0),
             (set_jump_mission,"mt_castle_attack_walls_defenders_sally"),
             (assign, "$g_siege_battle_state", 0),
             (assign, ":siege_sally", 1),
           (else_try),
             (party_slot_eq, "$current_town", slot_center_siege_with_belfry, 1),
             (set_jump_mission,"mt_castle_attack_walls_belfry"),
           (else_try),
             (set_jump_mission,"mt_castle_attack_walls_ladder"),
           (try_end),
           (assign, "$cant_talk_to_enemy", 0),           
           (assign, "$g_siege_final_menu", "mnu_castle_besiege"),
           (assign, "$g_next_menu", "mnu_castle_besiege_inner_battle"),
           (assign, "$g_siege_method", 0), #reset siege timer
           (jump_to_scene,":battle_scene"),
           (try_begin),
             (eq, ":siege_sally", 1),
             (jump_to_menu, "mnu_siege_attack_meets_sally"),
           (else_try),
#           (jump_to_menu,"mnu_castle_outside"),
##           (assign, "$g_next_menu", "mnu_castle_besiege"),
             (jump_to_menu, "mnu_battle_debrief"),
             (change_screen_mission),
           (try_end),
       ]),
      ("attack_stay_back",
       [
         (ge, "$g_siege_method", 1),
         (gt, "$g_friend_fit_for_battle", 3),
         (store_current_hours, ":cur_hours"),
         (ge, ":cur_hours",  "$g_siege_method_finish_hours"),
         ],
       "Order your soldiers to attack while you stay back...", [(assign, "$cant_talk_to_enemy", 0),(jump_to_menu,"mnu_castle_attack_walls_simulate")]),

      ("build_ladders",[(party_slot_eq, "$current_town", slot_center_siege_with_belfry, 0),(eq, "$g_siege_method", 0)],
       "Prepare ladders to attack the walls.", [(jump_to_menu,"mnu_construct_ladders")]),

      ("build_siege_tower",[(party_slot_eq, "$current_town", slot_center_siege_with_belfry, 1),(eq, "$g_siege_method", 0)],
       "Build a siege tower.", [(jump_to_menu,"mnu_construct_siege_tower")]),

      ("cheat_castle_lead_attack",[(eq, "$cheat_mode", 1),
                                   (eq, "$g_siege_method", 0)],
       "{!}CHEAT: Instant build equipments.",
       [
         (assign, "$g_siege_method", 1),
         (assign, "$g_siege_method_finish_hours", 0),
         (jump_to_menu, "mnu_castle_besiege"),
       ]),


      ("cheat_conquer_castle",[(eq, "$cheat_mode", 1),
                                   ],
       "{!}CHEAT: Instant conquer castle.",
       [
        (assign, "$g_next_menu", "mnu_castle_taken"),
        (jump_to_menu, "mnu_total_victory"),
       ]),

	   
      ("lift_siege",[],"Abandon the siege.",
       [
         (call_script, "script_lift_siege", "$g_player_besiege_town", 0),
         (assign,"$g_player_besiege_town", -1),
         (change_screen_return)]),
    ]
  ),
  
  (
    "siege_attack_meets_sally",mnf_scale_picture,
    "The defenders sally out to meet your assault.",
    "none",
    [
        (set_background_mesh, "mesh_pic_sally_out"),
    ],
    [
      ("continue",[],
       "Continue...",
       [
             (jump_to_menu, "mnu_battle_debrief"),
             (change_screen_mission),
       ]),
    ]
  ),

   (
    "castle_besiege_inner_battle",mnf_scale_picture,
    "{s1}",
    "none",
    [
        ## CC
        (troop_get_type, ":is_female", "$g_player_troop"),
        ## CC
        (try_begin),
          (this_or_next|eq, ":is_female", tf_female_elf),
          (eq, ":is_female", 1),
          (set_background_mesh, "mesh_pic_siege_sighted_fem"),
        (else_try),
          (set_background_mesh, "mesh_pic_siege_sighted"),
        (try_end),
        (assign, ":result", "$g_battle_result"),#will be reset at script_encounter_calculate_fit
        (call_script, "script_encounter_calculate_fit"),
        
# TODO: To use for the future:
            (str_store_string, s1, "@As a last defensive effort, you retreat to the main hall of the keep.\
 You and your remaining soldiers will put up a desperate fight here. If you are defeated, there's no other place to fall back to."),
            (str_store_string, s1, "@You've been driven away from the walls.\
 Now the attackers are pouring into the streets. IF you can defeat them, you can perhaps turn the tide and save the day."),
        (try_begin),
          (this_or_next|neq, ":result", 1),
          (this_or_next|le, "$g_friend_fit_for_battle", 0),
          (le, "$g_enemy_fit_for_battle", 0),
          (jump_to_menu, "$g_siege_final_menu"),
        (else_try),
          (call_script, "script_encounter_calculate_fit"),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (try_begin),
            (eq, "$g_siege_battle_state", 0),
            (eq, ":result", 1),
            (assign, "$g_battle_result", 0),
            (jump_to_menu, "$g_siege_final_menu"),
          (else_try),
            (eq, "$g_siege_battle_state", 1),
            (eq, ":result", 1),
            (str_store_string, s1, "@You've breached the town walls,\
 but the stubborn defenders continue to resist you in the streets!\
 You'll have to deal with them before you can attack the keep at the heart of the town."),
          (else_try),
            (eq, "$g_siege_battle_state", 2),
            (eq, ":result", 1),
            (str_store_string, s1, "@The town centre is yours,\
 but the remaining defenders have retreated to the castle.\
 It must fall before you can complete your victory."),
          (else_try),
            (jump_to_menu, "$g_siege_final_menu"),
          (try_end),
        (else_try),
          (try_begin),
            (eq, "$g_siege_battle_state", 0),
            (eq, ":result", 1),
            (assign, "$g_battle_result", 0),
            (jump_to_menu, "$g_siege_final_menu"),
          (else_try),
            (eq, "$g_siege_battle_state", 1),
            (eq, ":result", 1),
            (str_store_string, s1, "@The remaining defenders have retreated to the castle as a last defense. You must go in and crush any remaining resistance."),
          (else_try),
            (jump_to_menu, "$g_siege_final_menu"),
          (try_end),
        (try_end),
    ],
    [
      ("continue",[],
       "Continue...",
       [
           (try_begin),
             (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
             (try_begin),
               (eq, "$g_siege_battle_state", 1),
               (party_get_slot, ":battle_scene", "$g_encountered_party", slot_town_center),
               (set_jump_mission, "mt_besiege_inner_battle_town_center"),
             (else_try),
               (party_get_slot, ":battle_scene", "$g_encountered_party", slot_town_castle),
               (set_jump_mission, "mt_besiege_inner_battle_castle"),
             (try_end),
           (else_try),
             (party_get_slot, ":battle_scene", "$g_encountered_party", slot_town_castle),
             (set_jump_mission, "mt_besiege_inner_battle_castle"),
           (try_end),
##           (call_script, "script_calculate_battle_advantage"),
##           (set_battle_advantage, reg0),
           (set_party_battle_mode),
           (jump_to_scene, ":battle_scene"),
           (val_add, "$g_siege_battle_state", 1),
           (assign, "$g_next_menu", "mnu_castle_besiege_inner_battle"),
           (jump_to_menu, "mnu_battle_debrief"),
           (change_screen_mission),
       ]),
    ]
  ),

  
  (
    "construct_ladders",0,
    "As the party member with the highest Engineer skill ({reg2}), {reg3?you estimate:{s3} estimates} that it will take\
 {reg4} hours to build enough scaling ladders for the assault.",
    "none",
    [(call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
     (assign, ":max_skill", reg0),
     (assign, ":max_skill_owner", reg1),
     (assign, reg2, ":max_skill"),

     (store_sub, reg4, 14, ":max_skill"),
     (val_mul, reg4, 2),
     (val_div, reg4, 3),
     
     (try_begin),
       (eq, ":max_skill_owner", "trp_player"),
       (assign, reg3, 1),
     (else_try),
       (assign, reg3, 0),
       (str_store_troop_name, s3, ":max_skill_owner"),
     (try_end),
    ],
    [
      ("build_ladders_cont",[],
       "Do it.", [
           (assign, "$g_siege_method", 1),
           (store_current_hours, ":cur_hours"),
           (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
           (store_sub, ":hours_takes", 14, reg0),
           (val_mul, ":hours_takes", 2),
           (val_div, ":hours_takes", 3),
           (store_add, "$g_siege_method_finish_hours",":cur_hours", ":hours_takes"),
           (assign,"$auto_besiege_town","$current_town"),
           (rest_for_hours_interactive, 96, 5, 1), #rest while attackable. A trigger will divert control when attack is ready.
           (change_screen_return),
           ]),
      ("go_back",[],
       "Go back.", [(jump_to_menu,"mnu_castle_besiege")]),
        ],
  ),

  
  (
    "construct_siege_tower",0,
    "As the party member with the highest Engineer skill ({reg2}), {reg3?you estimate:{s3} estimates} that building a siege tower will take\
 {reg4} hours.",
    "none",
    [(call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
     (assign, ":max_skill", reg0),
     (assign, ":max_skill_owner", reg1),
     (assign, reg2, ":max_skill"),

     (store_sub, reg4, 15, ":max_skill"),
     (val_mul, reg4, 6),
     
     (try_begin),
       (eq, ":max_skill_owner", "trp_player"),
       (assign, reg3, 1),
     (else_try),
       (assign, reg3, 0),
       (str_store_troop_name, s3, ":max_skill_owner"),
     (try_end),
    ],
    [
      ("build_siege_tower_cont",[],
       "Start building.", [
           (assign, "$g_siege_method", 2),
           (store_current_hours, ":cur_hours"),
           (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
           (store_sub, ":hours_takes", 15, reg0),
           (val_mul, ":hours_takes", 6),
           (store_add, "$g_siege_method_finish_hours",":cur_hours", ":hours_takes"),
           (assign,"$auto_besiege_town","$current_town"),
           (rest_for_hours_interactive, 240, 5, 1), #rest while attackable. A trigger will divert control when attack is ready.
           (change_screen_return),
           ]),
      ("go_back",[],
       "Go back.", [(jump_to_menu,"mnu_castle_besiege")]),
        ],
  ),

   (
    "castle_attack_walls_simulate",mnf_scale_picture|mnf_disable_all_keys,
    "{s4}^^Your casualties:{s8}^^Enemy casualties were: {s9}",
    "none",
    [
        (try_begin),
          (set_background_mesh, "mesh_pic_siege_attack"),
        (try_end),
        
        (call_script, "script_party_calculate_strength", "p_main_party", 1), #skip player
        (assign, ":player_party_strength", reg0),
        (val_div, ":player_party_strength", 10),

        (call_script, "script_party_calculate_strength", "$g_encountered_party", 0),
        (assign, ":enemy_party_strength", reg0),
        (val_div, ":enemy_party_strength", 4),

        (inflict_casualties_to_party_group, "p_main_party", ":enemy_party_strength", "p_temp_casualties"),
        (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
        (str_store_string_reg, s8, s0),

        (inflict_casualties_to_party_group, "$g_encountered_party", ":player_party_strength", "p_temp_casualties"),
        (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
        (str_store_string_reg, s9, s0),

        (assign, "$no_soldiers_left", 0),
        (try_begin),
          (call_script, "script_party_count_members_with_full_health","p_main_party"),
          (le, reg0, 0), #(sdsd = TODO : compare with num_routed_us)
          (assign, "$no_soldiers_left", 1),
          (str_store_string, s4, "str_attack_walls_failure"),
        (else_try),
          (call_script, "script_party_count_members_with_full_health","$g_encountered_party"),
          (le, reg0, 0), #(sdsd = TODO : compare with num_routed_enemies)
          (assign, "$no_soldiers_left", 1),
          (assign, "$g_battle_result", 1),
          (str_store_string, s4, "str_attack_walls_success"),
        (else_try),
          (str_store_string, s4, "str_attack_walls_continue"),
        (try_end),
     ],
    [
##      ("lead_next_wave",[(eq, "$no_soldiers_left", 0)],"Lead the next wave of attack personally.", [
##           (party_get_slot, ":battle_scene", "$g_encountered_party", slot_castle_exterior),
##           (set_party_battle_mode),
##           (set_jump_mission,"mt_castle_attack_walls"),
##           (jump_to_scene,":battle_scene"),
##           (jump_to_menu,"mnu_castle_outside"),
##           (change_screen_mission),
##       ]),
##      ("continue_attacking",[(eq, "$no_soldiers_left", 0)],"Order your soldiers to keep attacking...", [
##                                    (jump_to_menu,"mnu_castle_attack_walls_3"),
##                                    ]),
##      ("call_soldiers_back",[(eq, "$no_soldiers_left", 0)],"Call your soldiers back.",[(jump_to_menu,"mnu_castle_outside")]),
      ("continue",[],"Continue...",[(jump_to_menu,"mnu_castle_besiege")]),
    ]
  ),
  
   (
    "castle_attack_walls_with_allies_simulate",mnf_scale_picture|mnf_disable_all_keys,
    "{s4}^^Your casualties: {s8}^^Allies' casualties: {s9}^^Enemy casualties: {s10}",
    "none",
    [
        (try_begin),
          (set_background_mesh, "mesh_pic_siege_attack"),
        (try_end),

        (call_script, "script_party_calculate_strength", "p_main_party", 1), #skip player
        (assign, ":player_party_strength", reg0),
        (val_div, ":player_party_strength", 10),
        (call_script, "script_party_calculate_strength", "p_collective_friends", 0),
        (assign, ":friend_party_strength", reg0),
        (val_div, ":friend_party_strength", 10),

        (val_max, ":friend_party_strength", 1),

        (call_script, "script_party_calculate_strength", "p_collective_enemy", 0),
        (assign, ":enemy_party_strength", reg0),
        (val_div, ":enemy_party_strength", 4),

##        (assign, reg0, ":player_party_strength"),
##        (assign, reg1, ":friend_party_strength"),
##        (assign, reg2, ":enemy_party_strength"),
##        (assign, reg3, "$g_enemy_party"),
##        (assign, reg4, "$g_ally_party"),
##        (display_message, "@{!}player_str={reg0} friend_str={reg1} enemy_str={reg2}"),
##        (display_message, "@{!}enemy_party={reg3} ally_party={reg4}"),

        (try_begin),
          (eq, ":friend_party_strength", 0),
          (store_div, ":enemy_party_strength_for_p", ":enemy_party_strength", 2),
        (else_try),
        (assign, ":enemy_party_strength_for_p", ":enemy_party_strength"),
        (val_mul, ":enemy_party_strength_for_p", ":player_party_strength"),
        (val_div, ":enemy_party_strength_for_p", ":friend_party_strength"),
        (try_end),
        (val_sub, ":enemy_party_strength", ":enemy_party_strength_for_p"),

        (inflict_casualties_to_party_group, "p_main_party", ":enemy_party_strength_for_p", "p_temp_casualties"),
        (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
        (str_store_string_reg, s8, s0),
                                    
        (inflict_casualties_to_party_group, "$g_enemy_party", ":friend_party_strength", "p_temp_casualties"),
        (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
        (str_store_string_reg, s10, s0),

        (call_script, "script_collect_friendly_parties"),

        (inflict_casualties_to_party_group, "$g_ally_party", ":enemy_party_strength", "p_temp_casualties"),
        (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
        (str_store_string_reg, s9, s0),

        (party_collect_attachments_to_party, "$g_enemy_party", "p_collective_enemy"),

        (assign, "$no_soldiers_left", 0),
        (try_begin),
          (call_script, "script_party_count_members_with_full_health", "p_main_party"),
          (le, reg0, 0), #(sdsd = TODO : compare with num_routed_us)
          (assign, "$no_soldiers_left", 1),
          (str_store_string, s4, "str_attack_walls_failure"),
        (else_try),
          (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
          (le, reg0, 0), #(sdsd = TODO : compare with num_routed_enemies)
          (assign, "$no_soldiers_left", 1),
          (assign, "$g_battle_result", 1),
          (str_store_string, s4, "str_attack_walls_success"),
        (else_try),
          (str_store_string, s4, "str_attack_walls_continue"),
        (try_end),
     ],
    [
      ("continue",[],"Continue...",[(jump_to_menu,"mnu_besiegers_camp_with_allies")]),
    ]
  ),

  (
    "castle_taken_by_friends",0,
    "Nothing to see here.",
    "none",
    [
        (party_clear, "$g_encountered_party"),
        (party_stack_get_troop_id, ":leader", "$g_encountered_party_2", 0),
        (party_set_slot, "$g_encountered_party", slot_center_last_taken_by_troop, ":leader"),
        (store_troop_faction, ":faction_no", ":leader"),
        #Reduce prosperity of the center by 5
        (call_script, "script_change_center_prosperity", "$g_encountered_party", -5),
        (try_begin),
            (assign, ":damage", 20),
            (is_between, "$g_encountered_party", towns_begin, towns_end),
            (assign, ":damage", 40),
        (try_end),
        (try_begin),
            (neq, ":faction_no", "$g_encountered_party_faction"),
            (call_script, "script_faction_inflict_war_damage_on_faction", ":faction_no", "$g_encountered_party_faction", ":damage"),
        (try_end),
        
        (call_script, "script_give_center_to_faction", "$g_encountered_party", ":faction_no"),
        (call_script, "script_add_log_entry", logent_player_participated_in_siege, "trp_player",  "$g_encountered_party", 0, "$g_encountered_party_faction"),
		(call_script, "script_change_player_relation_with_lords_after_battle"),
##        (call_script, "script_change_troop_renown", "trp_player", 1),
        (change_screen_return),
    ],
    [
    ],
  ),


  (
    "castle_taken",mnf_disable_all_keys,
  ##diplomacy begin
    "{s3} has fallen to your troops, and you now have full control of the {reg2?town:castle}. You can plunder spoils of war worth {reg3} denars.\
{reg1? You may station troops here to defend it against enemies who may try to recapture it. Also, you should select now whether you will hold the {reg2?town:castle} yourself or give it to a faithful vassal...:}",# Only visible when castle is taken without being a vassal of a kingdom.
  ##diplomacy end
    "none",
    [
        (party_clear, "$g_encountered_party"),

        (try_begin),        
          (eq, "$players_kingdom", "fac_player_supporters_faction"),
          (party_get_slot, ":new_owner", "$g_encountered_party", slot_town_lord),
          (neq, ":new_owner", "trp_player"),
          
          (try_for_range, ":unused", 0, 4),
            (call_script, "script_cf_reinforce_party", "$g_encountered_party"),
          (try_end),  
        (try_end),
        
        (call_script, "script_lift_siege", "$g_encountered_party", 0),
        (assign, "$g_player_besiege_town", -1),
                        
        (party_set_slot, "$g_encountered_party", slot_center_last_taken_by_troop, "trp_player"),
        ##diplomacy begin
        #Reduce prosperity of the center by 5
        #(call_script, "script_change_center_prosperity", "$g_encountered_party", -5),
           (try_begin),
               (is_between, "$g_encountered_party", towns_begin, towns_end),
               (store_random_in_range, ":random", 4000, 10000),
           (else_try),
             (store_random_in_range, ":random", 1000, 8000), 
           (try_end), 
           (party_get_slot, ":cur_wealth", "$g_encountered_party", slot_town_wealth),
           (val_add, ":random", ":cur_wealth"),
           (val_div, ":random", 3),
           (val_mul, ":random", 2),
           (val_div, ":random", 100),
           (val_mul, ":random", 100),
           (assign, "$diplomacy_var", ":random"),  
           (assign, reg3, "$diplomacy_var"),   
        ##diplomacy end

        (call_script, "script_change_troop_renown", "trp_player", 50),        

        (assign, ":damage", 20),
        (try_begin),
            (is_between, "$g_encountered_party", towns_begin, towns_end),
            (assign, ":damage", 40),
        (try_end),
        (call_script, "script_faction_inflict_war_damage_on_faction", "$players_kingdom", "$g_encountered_party_faction", ":damage"),
        
        #removed, is it duplicate (useless)? See 20 lines above.
        #(call_script, "script_add_log_entry", logent_castle_captured_by_player, "trp_player", "$g_encountered_party", -1, "$g_encountered_party_faction"),
        
        (try_begin),
          (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
          (neq, "$players_kingdom", "fac_player_supporters_faction"),
          (call_script, "script_give_center_to_faction", "$g_encountered_party", "$players_kingdom"),
          (call_script, "script_order_best_besieger_party_to_guard_center", "$g_encountered_party", "$players_kingdom"),
          (jump_to_menu, "mnu_castle_taken_2"),
        (else_try),
          (call_script, "script_give_center_to_faction", "$g_encountered_party", "fac_player_supporters_faction"),          
          (call_script, "script_order_best_besieger_party_to_guard_center", "$g_encountered_party", "fac_player_supporters_faction"),
          (str_store_party_name, s3, "$g_encountered_party"),
          (assign, reg1, 0),
          (try_begin),
            (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
            (assign, reg1, 1),
          (try_end),          
          #(party_set_slot, "$g_encountered_party", slot_town_lord, stl_unassigned),          
        (try_end),
        (assign, reg2, 0),
        (try_begin),
          (is_between, "$g_encountered_party", towns_begin, towns_end),
          (assign, reg2, 1),
        (try_end),
    ],
    [
##diplomacy begin

      ("continue",[],"Continue...",
       [        
         ##diplomacy begin
         (call_script, "script_change_center_prosperity", "$g_encountered_party", -3),
         ##diplomacy end        
         (assign, "$auto_enter_town", "$g_encountered_party"),                  
         (change_screen_return),
        ]),

      ("dplmc_spoils_yourself",[],"Plunder it and keep the spoils all for yourself.",
       [         
         (call_script, "script_change_center_prosperity", "$g_encountered_party", -8),  
         (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
           (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
           (store_troop_faction, ":troop_faction_no", ":troop_no"),
           (eq, "fac_player_supporters_faction", ":troop_faction_no"),
           (call_script, "script_change_player_relation_with_troop", ":troop_no", -2),
         (try_end),         
         (troop_add_gold, "trp_player", "$diplomacy_var"),
         (call_script, "script_change_player_honor", -3),
         (assign, "$auto_enter_town", "$g_encountered_party"),                  
         (change_screen_return),
         ]),
      ("dplmc_spoils_accompanying_vassals",
      [
          (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
          (eq, "$players_kingdom", "fac_player_supporters_faction"),
         (assign, ":vassal_count", 0),       
         (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
           (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
           (store_troop_faction, ":troop_faction_no", ":troop_no"),
           (eq, "fac_player_supporters_faction", ":troop_faction_no"),
           (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
           (ge, ":party_no", 1),
           (store_distance_to_party_from_party, ":distance","p_main_party", ":party_no"),
           (le, ":distance", 25),
           (val_add, ":vassal_count", 1),
         (try_end),
         (gt, ":vassal_count", 0),
         (assign, reg4, ":vassal_count"),
      ],"Plunder it and share the spoils equally between the vassals accompanying you and yourself.",
       [  
         (assign, ":vassal_count", 1),       
         (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
           (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
           (store_troop_faction, ":troop_faction_no", ":troop_no"),
           (eq, "fac_player_supporters_faction", ":troop_faction_no"),
           (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
           (ge, ":party_no", 1),
           (store_distance_to_party_from_party, ":distance","p_main_party", ":party_no"),
           (le, ":distance", 25),
           (val_add, ":vassal_count", 1),
           (call_script, "script_change_player_relation_with_troop", ":troop_no", 3),
         (try_end),
         (val_div, "$diplomacy_var", ":vassal_count"),
           (troop_add_gold, "trp_player", "$diplomacy_var"),
         #chenwz       
         (troop_get_slot, ":wealth", ":troop_no", slot_troop_wealth),
         (val_add, ":wealth", "$diplomacy_var"),
         (troop_set_slot, ":troop_no", slot_troop_wealth, ":wealth"),	
         #chenwz       
         (call_script, "script_change_center_prosperity", "$g_encountered_party", -8),  
         (call_script, "script_change_player_honor", -1),
         (assign, "$auto_enter_town", "$g_encountered_party"),                  
         (change_screen_return),
        ]),
      ("dplmc_spoils_all_vassals",
      [
          (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
          (eq, "$players_kingdom", "fac_player_supporters_faction"),
         (assign, ":vassal_count", 0),       
         (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
           (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
           (store_troop_faction, ":troop_faction_no", ":troop_no"),
           (eq, "fac_player_supporters_faction", ":troop_faction_no"),
           (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
           (ge, ":party_no", 1),
           (store_distance_to_party_from_party, ":distance","p_main_party", ":party_no"),
           (le, ":distance", 25),
           (val_add, ":vassal_count", 1),
         (try_end),
         (gt, ":vassal_count", 0),
         (assign, reg5, ":vassal_count"),
      ],"Plunder it and share the spoils equally between your vassals and yourself.",
       [         
         (assign, ":vassal_count", 1),
         (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
           (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
           (store_troop_faction, ":troop_faction_no", ":troop_no"),
           (eq, "fac_player_supporters_faction", ":troop_faction_no"),
           (val_add, ":vassal_count", 1),
           (call_script, "script_change_player_relation_with_troop", ":troop_no", 2),
         (try_end),
         (val_div, "$diplomacy_var", ":vassal_count"),
           (troop_add_gold, "trp_player", "$diplomacy_var"),
         #chenwz       
         (troop_get_slot, ":wealth", ":troop_no", slot_troop_wealth),
         (val_add, ":wealth", "$diplomacy_var"),
         (troop_set_slot, ":troop_no", slot_troop_wealth, ":wealth"),
         #chenwz       
         (call_script, "script_change_center_prosperity", "$g_encountered_party", -8),           
         (assign, "$auto_enter_town", "$g_encountered_party"),                  
         (change_screen_return),
        ]),
##diplomacy end
    ],        
  ),
  (
    "castle_taken_2",mnf_disable_all_keys,
    "{s3} has fallen to your troops, and you now have full control of the castle.\
 It is time to send word to {s9} about your victory. {s5}",
    "none",
    [
        (str_store_party_name, s3, "$g_encountered_party"),
        (str_clear, s5),
        (faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
        (str_store_troop_name, s9, ":faction_leader"),
        (try_begin),
          (eq, "$player_has_homage", 0),
          (assign, reg8, 0),
          (try_begin),
            (party_slot_eq, "$g_encountered_party", spt_town),
            (assign, reg8, 1),
          (try_end),
          (str_store_string, s5, "@However, since you are not a sworn {man/follower} of {s9}, there is no chance he would recognize you as the {lord/lady} of this {reg8?town:castle}."),
        (try_end),
           (assign, reg3, "$diplomacy_var"),   
    ],
    [
    
      ("castle_taken_no_claim",[],"Ask no rewards.",
       [
        (party_set_slot, "$g_encountered_party", slot_center_last_taken_by_troop, -1),
        (assign, "$auto_enter_town", "$g_encountered_party"),
        (change_screen_return),
#        (jump_to_menu, "mnu_town"),
        ]),
    
      ("Plunder_and_give_up_town",[],"Plunder it and keep the spoils all for yourself.",
       [         
         (call_script, "script_change_center_prosperity", "$g_encountered_party", -8),  
         (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
           (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
           (store_troop_faction, ":troop_faction_no", ":troop_no"),
           (eq, "$players_kingdom", ":troop_faction_no"),
           (store_random_in_range, ":random", 0, 10),
           (lt,":random", 4),
           (call_script, "script_change_player_relation_with_troop", ":troop_no", -2),
         (try_end),  

         (troop_add_gold, "trp_player", "$diplomacy_var"),
         (call_script, "script_change_player_honor", -3),
         (party_set_slot, "$g_encountered_party", slot_center_last_taken_by_troop, -1),
         (assign, "$auto_enter_town", "$g_encountered_party"),                  
         (change_screen_return),
         ]), 
            
        ("castle_taken_claim",[(eq, "$player_has_homage", 1)],
        "Request that {s3} be awarded to you.",
        [
        (party_set_slot, "$g_encountered_party", slot_center_last_taken_by_troop, "trp_player"),
        (assign, "$g_castle_requested_by_player", "$current_town"),
        (assign, "$g_castle_requested_for_troop", "trp_player"),
        (assign, "$auto_enter_town", "$g_encountered_party"),
        (change_screen_return),
        ]),

        ("castle_taken_claim_2",[
        (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
        (is_between, ":spouse", active_npcs_begin, active_npcs_end),
        (troop_slot_eq, ":spouse", slot_troop_occupation, slto_kingdom_hero),
        (store_faction_of_troop, ":spouse_faction", ":spouse"),
        (eq, ":spouse_faction", "$players_kingdom"),
        ],
        "Request that {s3} be awarded to your {wife/husband}.",
        [
        (party_set_slot, "$g_encountered_party", slot_center_last_taken_by_troop, "trp_player"),
        (assign, "$g_castle_requested_by_player", "$current_town"),
        (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
        (assign, "$g_castle_requested_for_troop", ":spouse"),
        (assign, "$auto_enter_town", "$g_encountered_party"),
        (change_screen_return),
        ]),
        
        
        
    ],
  ),

(
    "requested_castle_granted_to_player",mnf_scale_picture,
    "You receive a message from your liege, {s3}.^^\
 {reg4?She:He} has decided to grant {s2}{reg3? and the nearby village of {s4}:} to you, with all due incomes and titles, to hold in {reg4?her:his} name for as long as you maintain your oath of homage..",
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        (faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
        (str_store_troop_name, s3, ":faction_leader"),
        (str_store_party_name, s2, "$g_center_to_give_to_player"),
        (try_begin),
            (party_slot_eq, "$g_center_to_give_to_player", slot_party_type, spt_castle),
            (assign, reg3, 1),
            (try_for_range, ":cur_village", villages_begin, villages_end),
            	(party_slot_eq, ":cur_village", slot_village_bound_center, "$g_center_to_give_to_player"),
            	(str_store_party_name, s4, ":cur_village"),
            (try_end),
        (else_try),
            (assign, reg3, 0),
        (try_end),
        (troop_get_type, reg4, ":faction_leader"),
   (try_begin),
     (this_or_next|eq, reg4, tf_female_elf),
     (eq, reg4, tf_female),
     (assign, reg4, tf_female), 
   (else_try),
     (assign, reg4, tf_male), 
   (try_end),
   ],
    [
        ("continue",[],"Continue.",
            [
            (call_script, "script_give_center_to_lord", "$g_center_to_give_to_player", "trp_player", 0),
            (jump_to_menu, "mnu_give_center_to_player_2"),
            ],
        ),
	]
),
  


(
    "requested_castle_granted_to_player_husband", mnf_scale_picture,
    "You receive a message from your liege, {s3}.^^\
 {reg4?She:He} has decided to grant {s2}{reg3? and the nearby village of {s4}:} to your husband, {s7}.",	 
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        (faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
        (str_store_troop_name, s3, ":faction_leader"),
        (str_store_party_name, s2, "$g_center_to_give_to_player"),
        (try_begin),
            (party_slot_eq, "$g_center_to_give_to_player", slot_party_type, spt_castle),
            (assign, reg3, 1),
            (try_for_range, ":cur_village", villages_begin, villages_end),
            	(party_slot_eq, ":cur_village", slot_village_bound_center, "$g_center_to_give_to_player"),
            	(str_store_party_name, s4, ":cur_village"),
            (try_end),
        (else_try),
            (assign, reg3, 0),
        (try_end),
        (troop_get_type, reg4, ":faction_leader"),
   (try_begin),
     (this_or_next|eq, reg4, tf_female_elf),
     (eq, reg4, tf_female),
     (assign, reg4, tf_female), 
   (else_try),
     (assign, reg4, tf_male), 
   (try_end),
        (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
        (str_store_troop_name, s11, ":spouse"), 
        (str_store_string, s7, "str_to_your_husband_s11"),	 
    ],
    [
        ("continue",[],"Continue.",
            [
            (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
            (call_script, "script_give_center_to_lord", "$g_center_to_give_to_player", ":spouse", 0),
            ],
        ),
	]
),



  
  
  
  
(
    "requested_castle_granted_to_another",mnf_scale_picture,
    "You receive a message from your monarch, {s3}.^^\
 'I was most pleased to hear of your valiant efforts in the capture of {s2}. Your victory has gladdened all our hearts.\
 You also requested me to give you ownership of the castle, but that is a favour which I fear I cannot grant,\
 as you already hold significant estates in my realm.\
 Instead I have sent you {reg6} denars to cover the expenses of your campaign, but {s2} I give to {s5}.'\
 ",
    "none",
    [(set_background_mesh, "mesh_pic_messenger"),
     (faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
     (str_store_troop_name, s3, ":faction_leader"),
     (str_store_party_name, s2, "$g_center_to_give_to_player"),
     (party_get_slot, ":new_owner", "$g_center_to_give_to_player", slot_town_lord),
     (str_store_troop_name, s5, ":new_owner"),
     (assign, reg6, 2000),
     ## CC
	   (try_begin),
       (party_slot_eq, "$g_center_to_give_to_player", slot_party_type, spt_castle),
       (val_mul, reg6, 2),
     (else_try),
       (party_slot_eq, "$g_center_to_give_to_player", slot_party_type, spt_town),
       (val_mul, reg6, 4),
     (try_end),
     # level effect
     (store_character_level, ":level", "trp_player"),
     (store_add, ":level_factor", 30, ":level"), 
     (val_mul, reg6, ":level_factor"),
     (val_div, reg6, 30),
     # prosperity effect
     (party_get_slot, ":prosperity", "$g_center_to_give_to_player", slot_town_prosperity),
     (store_add, ":prosperity_factor", 100, ":prosperity"), 
     (val_mul, reg6, ":prosperity_factor"),
     (val_div, reg6, 100),
     ## CC
	 (assign, "$g_castle_requested_by_player", -1),
	 (assign, "$g_castle_requested_for_troop", -1),
	 
    ],
    [
      ("accept_decision",[],"Accept the decision.",
       [
       (call_script, "script_troop_add_gold", "trp_player", reg6),
       (change_screen_return),
       ]),
	   
       ("leave_faction",[],"You have been wronged! Renounce your oath to your liege! ",
       [
         (jump_to_menu, "mnu_leave_faction"),
         (call_script, "script_troop_add_gold", "trp_player", reg6),
        ]),
     ],
  ),

  
(
    "requested_castle_granted_to_another_female",mnf_scale_picture,
    "You receive a message from your monarch, {s3}.^^\
 'I was most pleased to hear of your valiant efforts in the capture of {s2}. Your victory has gladdened all our hearts.\
 You also requested me to give ownership of the castle to your husband, but that is a favour which I fear I cannot grant,\
 as he already holds significant estates in my realm.\
 Instead I have sent you {reg6} denars to cover the expenses of your campaign, but {s2} I give to {s5}.'\
 ",
    "none",
    [(set_background_mesh, "mesh_pic_messenger"),
     (faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
     (str_store_troop_name, s3, ":faction_leader"),
     (str_store_party_name, s2, "$g_center_to_give_to_player"),
     (party_get_slot, ":new_owner", "$g_center_to_give_to_player", slot_town_lord),
     (str_store_troop_name, s5, ":new_owner"),
     (assign, reg6, 2000),
     ## CC
	   (try_begin),
       (party_slot_eq, "$g_center_to_give_to_player", slot_party_type, spt_castle),
       (val_mul, reg6, 2),
     (else_try),
       (party_slot_eq, "$g_center_to_give_to_player", slot_party_type, spt_town),
       (val_mul, reg6, 4),
     (try_end),
     # level effect
     (store_character_level, ":level", "trp_player"),
     (store_add, ":level_factor", 30, ":level"), 
     (val_mul, reg6, ":level_factor"),
     (val_div, reg6, 30),
     # prosperity effect
     (party_get_slot, ":prosperity", "$g_center_to_give_to_player", slot_town_prosperity),
     (store_add, ":prosperity_factor", 100, ":prosperity"), 
     (val_mul, reg6, ":prosperity_factor"),
     (val_div, reg6, 100),
     ## CC

	 (assign, "$g_castle_requested_by_player", -1),
	 (assign, "$g_castle_requested_for_troop", -1),
    ],
	
    [
        ("accept_decision",[],"Accept the decision.",
        [
        (call_script, "script_troop_add_gold", "trp_player", reg6),
        (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
        (call_script, "script_troop_add_gold", ":spouse", reg6),
        (change_screen_return),
        ]),
    ],
),
  
  
  
  
## CC
  (
    "leave_faction_2",0,
    "Renouncing your oath is a grave act. Your lord may condemn you and confiscate your lands and holdings.\
 However, if you return them of your own free will, he may let the betrayal go without a fight.",
    "none",
    [
    ],
    [
      ("leave_faction_give_back_2", [], "Renounce your oath and give up your holdings.",
       [
#Troop commentary changes begin
#        (call_script, "script_add_log_entry", logent_renounced_allegiance,   "trp_player",  -1, "$g_talk_troop", "$g_talk_troop_faction"),
#Troop commentary changes end
        (call_script, "script_player_leave_faction", 1), #1 means give back fiefs
        (change_screen_return),
        ]),
      ("leave_faction_hold_2", [], "Renounce your oath and rule your lands in your own name.",
       [
        (call_script, "script_player_leave_faction", 0), #"1" would mean give back fiefs
        (call_script, "script_activate_player_faction", "trp_player"), #Activating player faction should now work
        (change_screen_return),
        ]),
      ("leave_faction_cancel_2", [], "Remain loyal.",
       [
        (change_screen_return),
        ]),
    ],
  ),
## CC
  (
    "leave_faction",0,
    "Renouncing your oath is a grave act. Your lord may condemn you and confiscate your lands and holdings.\
 However, if you return them of your own free will, he may let the betrayal go without a fight.",
    "none",
    [
    ],
    [
      ("leave_faction_give_back", [], "Renounce your oath and give up your holdings.",
       [
#Troop commentary changes begin
#        (call_script, "script_add_log_entry", logent_renounced_allegiance,   "trp_player",  -1, "$g_talk_troop", "$g_talk_troop_faction"),
#Troop commentary changes end
        (call_script, "script_player_leave_faction", 1), #1 means give back fiefs
        (change_screen_return),
        ]),
      ("leave_faction_hold", [
          (str_store_party_name, s2, "$g_center_to_give_to_player"),
          ], "Renounce your oath and rule your lands, including {s2}, in your own name.",
       [
        (call_script, "script_give_center_to_lord", "$g_center_to_give_to_player", "trp_player", 0), #this should activate the player faction (it does not)
        (call_script, "script_player_leave_faction", 0), #"1" would mean give back fiefs
        (call_script, "script_activate_player_faction", "trp_player"), #Activating player faction should now work
        (assign, "$begin_as_knight" ,0),
        (change_screen_return),
        ]),
      ("leave_faction_cancel", [], "Remain loyal and accept the decision.",
       [
        (change_screen_return),
        ]),
    ],
  ),

  (
    "give_center_to_player",mnf_scale_picture,
    "Your lord offers to extend your fiefs!\
 {s1} sends word that he is willing to grant {s2} to you in payment for your loyal service,\
 adding it to your holdings. What is your answer?",
    "none",
    [(set_background_mesh, "mesh_pic_messenger"),
     (store_faction_of_party, ":center_faction", "$g_center_to_give_to_player"),
     (faction_get_slot, ":faction_leader", ":center_faction", slot_faction_leader),
     (str_store_troop_name, s1, ":faction_leader"),
     (str_store_party_name, s2, "$g_center_to_give_to_player"),
     ## CC
     (set_fixed_point_multiplier, 100),
     (position_set_x, pos0, 62),
     (position_set_y, pos0, 30),
     (position_set_z, pos0, 170),
     (set_game_menu_tableau_mesh, "tableau_center_note_mesh", "$g_center_to_give_to_player", pos0),
     ## CC
    ],
    [
      ("give_center_to_player_accept",[],"Accept the offer.",
       [(call_script, "script_give_center_to_lord", "$g_center_to_give_to_player", "trp_player", 0),
        (jump_to_menu, "mnu_give_center_to_player_2"),
        ]),
      ("give_center_to_player_reject",[],"Reject. You have no interest in holding {s2}.",
       [(party_set_slot, "$g_center_to_give_to_player", slot_town_lord, stl_rejected_by_player),
        (change_screen_return),
        ]),
    ],
  ),
  
  (
    "give_center_to_player_2",0,
    "With a brief ceremony, you are officially confirmed as the new lord of {s2}{reg3? and its bound village {s4}:}.\
 {reg3?They:It} will make a fine part of your fiefdom.\
 You can now claim the rents and revenues from your personal estates there, draft soldiers from the populace,\
 and manage the lands as you see fit.\
 However, you are also expected to defend your fief and your people from harm,\
 as well as maintaining the rule of law and order.",
    "none",
    [
      (str_store_party_name, s2, "$g_center_to_give_to_player"),
      (assign, reg3, 0),
      (try_begin),
        (party_slot_eq, "$g_center_to_give_to_player", slot_party_type, spt_castle),
        (try_for_range, ":cur_village", villages_begin, villages_end),
          (party_slot_eq, ":cur_village", slot_village_bound_center, "$g_center_to_give_to_player"),
          (str_store_party_name, s4, ":cur_village"),
          (assign, reg3, 1),
        (try_end),
      (try_end),
    ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
    ],
  ),


  (
    "oath_fulfilled",0,
    "You had a contract with {s1} to serve him for a certain duration.\
 Your contract has now expired. What will you do?",
    "none",
    [
      (faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
      (str_store_troop_name, s1, ":faction_leader"),
     ],
    [
      ("renew_oath",[(faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
                     (str_store_troop_name, s1, ":faction_leader")], "Renew your contract with {s1} for another month.",
       [
         (store_current_day, ":cur_day"),
         (store_add, "$mercenary_service_next_renew_day", ":cur_day", 30),
         
         (troop_get_slot, ":player_effect", "trp_player", slot_troop_player_effect),
         (troop_get_slot, ":player_class", "trp_player", slot_troop_player_class),
         (call_script,"script_get_player_rank_name"),
         (assign, ":need_effect", reg1),
         (try_begin),
           (eq, ":player_class", 6),
           (store_sub, ":add_effect", ":need_effect", ":player_effect"), 
           (le, ":add_effect", 200),
           (call_script,"script_change_player_effect", ":add_effect"),
         (else_try),
           (call_script,"script_change_player_effect", 100),
         (try_end),
         
         
         (change_screen_return),
         ]),
      ("dont_renew_oath",[],"Become free of your bond.",
       [
         (call_script, "script_player_leave_faction", 1), #1 means give back fiefs
         (change_screen_return),
         ]),
    ]
  ),
  

##  (
##    "castle_garrison_stationed",0,
###    "The rest of the castle garrison recognizes that their situation is hopeless and surrenders. {s1} is at your mercy now. What do you want to do with this castle?",
##    "_",
##    "none",
##    [
##        (jump_to_menu, "mnu_town"),
##    ],
##    [],
##  ),

##  (
##    "castle_choose_captain",0,
##    "You will need to assign one of your companions as the castellan. Who will it be?",
##    "none",
##    [
##        (try_for_range, ":slot_no", 0, 20),
##          (troop_set_slot, "trp_temp_troop", ":slot_no", 0),
##        (try_end),
##        (assign, ":num_captains", 0),
##        (party_clear, "p_temp_party"),
##        (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
##        (try_for_range, ":i_s", 1,":num_stacks"),
##          (party_stack_get_troop_id, ":companion","p_main_party", ":i_s"),
##          (troop_slot_eq, ":companion", slot_troop_occupation, slto_player_companion),
##          (troop_set_slot, "trp_temp_troop", ":num_captains", ":companion"),
##        (try_end),
##    ],
##    [
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 0),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 0),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 1),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 1),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 2),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 2),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 3),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 3),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 4),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 4),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 5),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 5),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 6),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 6),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 7),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 7),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 8),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 8),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 9),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 9),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 10),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 10),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 11),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 11),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 12),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 12),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 13),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 13),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 14),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 14),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      ("castellan_candidate",  [(troop_get_slot, ":captain", "trp_temp_troop", 15),(gt,":captain",0),(str_store_troop_name, s5,":captain")],
##         "{s5}",    [(troop_get_slot, "$selected_castellan", "trp_temp_troop", 15),(jump_to_menu,"mnu_castle_captain_chosen")]),
##      
##      ("cancel",[],
##         "Cancel...",
##         [(jump_to_menu, "mnu_town")]),
##    ],
##  ),
##  (
##    "castle_captain_chosen",0,
##    "h this castle?",
##    "none",
##    [
##        (party_add_leader, "$g_encountered_party",  "$selected_castellan"),
##        (party_remove_members, "p_main_party", "$selected_castellan",1),
##        (party_set_slot, "$g_encountered_party", slot_town_lord, "trp_player"),
##        (party_set_faction, "$g_encountered_party", "fac_player_supporters_faction"),
##        (try_for_range, ":slot_no", 0, 20), #clear temp troop slots just in case
##          (troop_set_slot, "trp_temp_troop", ":slot_no", 0),
##        (try_end),
##        (jump_to_menu, "mnu_town"),
##        (change_screen_exchange_members,0),
##    ],
##    [],
##  ),

##  (
##    "under_siege_attacked_continue",0,
##    "Nothing to see here.",
##    "none",
##    [
##        (assign, "$g_enemy_party", "$g_encountered_party_2"),
##        (assign, "$g_ally_party", "$g_encountered_party"),
##        (party_set_next_battle_simulation_time, "$g_encountered_party", 0),
##        (call_script, "script_encounter_calculate_fit"),
##        (try_begin),
##          (call_script, "script_party_count_fit_regulars", "p_collective_enemy"),
##          (assign, ":num_enemy_regulars_remaining", reg(0)),
##          (assign, ":enemy_finished",0),
##          (try_begin),
##            (eq, "$g_battle_result", 1),
##            (eq, ":num_enemy_regulars_remaining", 0), #battle won
##            (assign, ":enemy_finished",1),
##          (else_try),
##            (eq, "$g_engaged_enemy", 1),
##            (le, "$g_enemy_fit_for_battle",0),
##            (ge, "$g_friend_fit_for_battle",1),
##            (assign, ":enemy_finished",1),
##          (try_end),
##          (this_or_next|eq, ":enemy_finished",1),
##          (eq,"$g_enemy_surrenders",1),
####          (assign, "$g_center_under_siege_battle", 0),
##          (assign, "$g_next_menu", -1),
##          (jump_to_menu, "mnu_total_victory"),
##        (else_try),
##          (assign, ":battle_lost", 0),
##          (try_begin),
##            (eq, "$g_battle_result", -1),
##            (assign, ":battle_lost",1),
##          (try_end),
##          (this_or_next|eq, ":battle_lost",1),
##          (eq,"$g_player_surrenders",1),
####          (assign, "$g_center_under_siege_battle", 0),
##          (assign, "$g_next_menu", "mnu_captivity_start_under_siege_defeat"),
##          (jump_to_menu, "mnu_total_defeat"),
##        (else_try),
##    # Ordinary victory.
##          (try_begin),
##          #check whether enemy retreats
##            (eq, "$g_battle_result", 1),
##            (store_mul, ":min_enemy_str", "$g_enemy_fit_for_battle", 2),
##            (lt, ":min_enemy_str", "$g_friend_fit_for_battle"),
##            (party_set_slot, "$g_enemy_party", slot_party_retreat_flag, 1),
##
##            (try_for_range, ":troop_no", kingdom_heroes_begin, kingdom_heroes_end),
##              (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
##              (troop_slot_eq, ":troop_no", slot_troop_is_prisoner, 0),
##              (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
##              (gt, ":party_no", 0),
##              (party_slot_eq, ":party_no", slot_party_ai_state, spai_besieging_center),
##              (party_slot_eq, ":party_no", slot_party_ai_object, "$g_encountered_party"),
##              (party_slot_eq, ":party_no", slot_party_ai_substate, 1),
##              (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
##              (call_script, "script_party_set_ai_state", ":party_no", spai_besieging_center, ":center_no"),
##            (try_end),
##            (display_message, "@{!}TODO: Enemy retreated. The assault has ended, siege continues."),
##            (change_screen_return),
##          (try_end),
####          (assign, "$g_center_under_siege_battle", 0),
##        (try_end),
##        ],
##    [
##    ]
##  ),


  (
    ## CC
    "siege_started_defender",mnf_enable_hot_keys,
    ## CC
    "{s1} is launching an assault against the walls of {s2}. You have {reg10} troops fit for battle against the enemy's {reg11}. You decide to...",
    "none",
    [
        (select_enemy,1),
        (assign, "$g_enemy_party", "$g_encountered_party_2"),
        (assign, "$g_ally_party", "$g_encountered_party"),
        (str_store_party_name, 1,"$g_enemy_party"),
        (str_store_party_name, 2,"$g_ally_party"),
        (call_script, "script_encounter_calculate_fit"),
        (try_begin),
          (eq, "$g_siege_first_encounter", 1),
          (call_script, "script_let_nearby_parties_join_current_battle", 0, 1),
          (call_script, "script_encounter_init_variables"),
        (try_end),

        (try_begin),
          (eq, "$g_siege_first_encounter", 0),
          (try_begin),
            (call_script, "script_party_count_members_with_full_health", "p_collective_enemy"),
            (assign, ":num_enemy_regulars_remaining", reg0),
            (call_script, "script_party_count_members_with_full_health", "p_collective_friends"),
            (assign, ":num_ally_regulars_remaining", reg0),
            (assign, ":enemy_finished", 0),
            (try_begin),
              (eq, "$g_battle_result", 1),
#COOP bugfix chief ##############
#              (eq, ":num_enemy_regulars_remaining", 0), #battle won (sdsd = TODO : compare with num_routed_us)
              (this_or_next|le, ":num_enemy_regulars_remaining", 0), #battle won
              (le, ":num_enemy_regulars_remaining",  "$num_routed_enemies"), #replaced for above line because we do not want routed agents to spawn again in next turn of battle.
#########################
              
              (assign, ":enemy_finished",1),
            (else_try),
              (eq, "$g_engaged_enemy", 1),
#COOP bugfix chief ##############
#              (le, "$g_enemy_fit_for_battle",0),
              (this_or_next|le, ":num_enemy_regulars_remaining", 0), 
              (le, "$g_enemy_fit_for_battle", "$num_routed_enemies"),  #replaced for above line because we do not want routed agents to spawn again in next turn of battle.
              (ge, "$g_friend_fit_for_battle",1),
              (assign, ":enemy_finished",1),
            (try_end),
            (this_or_next|eq, ":enemy_finished",1),
            (eq,"$g_enemy_surrenders",1),
            (assign, "$g_next_menu", -1),
            (jump_to_menu, "mnu_total_victory"),
          (else_try),
            (assign, ":battle_lost", 0),
            (try_begin),
              (this_or_next|eq, "$g_battle_result", -1),
              (troop_is_wounded,  "trp_player"),
              (eq, ":num_ally_regulars_remaining", 0), #(sdsd = TODO : compare with num_routed_allies)
              (assign, ":battle_lost",1),
            (try_end),
            (this_or_next|eq, ":battle_lost",1),
            (eq,"$g_player_surrenders",1),
            (assign, "$g_next_menu", "mnu_captivity_start_under_siege_defeat"),
            (jump_to_menu, "mnu_total_defeat"),
          (else_try),
            # Ordinary victory/defeat.
            (assign, ":attackers_retreat", 0),
            (try_begin),
            #check whether enemy retreats
              (eq, "$g_battle_result", 1),
  ##            (store_mul, ":min_enemy_str", "$g_enemy_fit_for_battle", 2),
  ##            (lt, ":min_enemy_str", "$g_friend_fit_for_battle"),
              (assign, ":attackers_retreat", 1),
            (else_try),
              (eq, "$g_battle_result", 0),
              (store_div, ":min_enemy_str", "$g_enemy_fit_for_battle", 3),
              (lt, ":min_enemy_str", "$g_friend_fit_for_battle"),
              (assign, ":attackers_retreat", 1),
            (else_try),
              (store_random_in_range, ":random_no", 0, 100),
              (store_mul, ":num_ally_regulars_remaining_multiplied", ":num_ally_regulars_remaining", 13),
              (val_div, ":num_ally_regulars_remaining_multiplied", 10),
              (ge, ":num_ally_regulars_remaining_multiplied", ":num_enemy_regulars_remaining"),
              (lt, ":random_no", 10),
              (neq, "$new_encounter", 1),
              (assign, ":attackers_retreat", 1),
            (try_end),
            (try_begin),
              (eq, "$freelancer_state", 1),
              (assign, ":attackers_retreat", 0),
            (try_end),
            (try_begin),
              (eq, ":attackers_retreat", 1),
              (neg|party_slot_eq, "$g_enemy_party", slot_party_type, spt_huge_party),
              (party_get_slot, ":siege_hardness", "$g_encountered_party", slot_center_siege_hardness),
              (val_add, ":siege_hardness", 100),
              (party_set_slot, "$g_encountered_party", slot_center_siege_hardness, ":siege_hardness"),
              (party_set_slot, "$g_enemy_party", slot_party_retreat_flag, 1),

              (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
                (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
                #(troop_slot_eq, ":troop_no", slot_troop_is_prisoner, 0),
                (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
                (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
                (gt, ":party_no", 0),
                (party_slot_eq, ":party_no", slot_party_ai_state, spai_besieging_center),
                (party_slot_eq, ":party_no", slot_party_ai_object, "$g_encountered_party"),
                (party_slot_eq, ":party_no", slot_party_ai_substate, 1),
                (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
                (call_script, "script_party_set_ai_state", ":party_no", spai_besieging_center, "$g_encountered_party"),
              (try_end),
              (display_message, "@The enemy has been forced to retreat. The assault is over, but the siege continues."),
              (assign, "$g_battle_simulation_cancel_for_party", "$g_encountered_party"),
              (leave_encounter),
              (change_screen_return),
              (assign, "$g_battle_simulation_auto_enter_town_after_battle", "$g_encountered_party"),
            (try_end),
          (try_end),
        (try_end),
        (assign, "$g_siege_first_encounter", 0),
        (assign, "$new_encounter", 0),
        (party_set_slot,"p_main_party", slot_party_is_in_siege, 1),
        ],
    [
     ##diplomacy begin
      ("dplmc_negotiate_with_besieger", 
      [
        (store_faction_of_party, ":enemy_faction", "$g_enemy_party"),
        (is_between, ":enemy_faction", npc_kingdoms_begin, npc_kingdoms_end),
        (party_slot_eq, "$current_town", slot_town_lord, "trp_player"), 
        (party_slot_ge, "$current_town", slot_center_is_besieged_by, 1),
      ]
       ,"Negotiate with the besieger.",
       [
        (jump_to_menu, "mnu_dplmc_negotiate_besieger"),
        ]),
     ##diplomacy end
     
      ("camp_special_ability",[],"Choose your special_ability.",[(assign, "$return_menu", "mnu_siege_started_defender"),(jump_to_menu, "mnu_camp_set_special_ability"),]),
     
## CC
      ("toggle_weapons",
        [
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (try_begin),
            (eq, "$g_weapons_set_no", 0),
            (assign, reg1, 2),
          (else_try),
            (assign, reg1, 1),
          (try_end),
        ],
        "Toggle weapons to set {reg1} for heroes.",
        [
          (val_add, "$g_weapons_set_no", 1),
          (val_mod, "$g_weapons_set_no", 2),
          (call_script, "script_all_toggle_weapons_set", 0),
        ]),


      ("change_commander_siege_defender",
        [
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (str_store_troop_name,s7,"$g_player_troop"),
          (set_player_troop, "$g_player_troop"),
        ],
        "Change commander.(Current commander: {s7})",
        [
          (start_presentation, "prsnt_change_commander"),
        ]),
## CC
      ("siege_defender_join_battle",
       [
         ## CC
         (neg|troop_is_wounded, "$g_player_troop"),
         ## CC
         ],
          "Join the battle.",[              
              (party_set_next_battle_simulation_time, "$g_encountered_party", -1),
              (assign, "$g_battle_result", 0),
              (try_begin),
                (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
                (party_get_slot, ":battle_scene", "$g_encountered_party", slot_town_walls),
              (else_try),
                (party_get_slot, ":battle_scene", "$g_encountered_party", slot_castle_exterior),
              (try_end),
              (call_script, "script_calculate_battle_advantage"),
              (val_mul, reg0, 2),
              (val_div, reg0, 3), #scale down the advantage a bit.
              (set_battle_advantage, reg0),
              (set_party_battle_mode),
              (try_begin),
                (party_slot_eq, "$current_town", slot_center_siege_with_belfry, 1),
                (set_jump_mission,"mt_castle_attack_walls_belfry"),
              (else_try),
                (set_jump_mission,"mt_castle_attack_walls_ladder"),
              (try_end),
              (jump_to_scene,":battle_scene"),
              (assign, "$g_next_menu", "mnu_siege_started_defender"),
              (jump_to_menu, "mnu_battle_debrief"),
              (change_screen_mission)]),
              
	  ("join_wounded",[
	    (eq, "$freelancer_state", 1),
	    (troop_is_wounded, "trp_player"),
	    ],
	  "You are too wounded to fight.",[(leave_encounter),(change_screen_map)]),
              
      ("siege_defender_troops_join_battle",[(call_script, "script_party_count_members_with_full_health", "p_main_party"),
                                            (this_or_next|troop_is_wounded,  "trp_player"),
                                            (ge, reg0, 3)],
          "Order your men to join the battle without you.",[
              (party_set_next_battle_simulation_time, "$g_encountered_party", -1),
              (select_enemy,1),
              (assign,"$g_enemy_party","$g_encountered_party_2"),
              (assign,"$g_ally_party","$g_encountered_party"),
              (assign,"$g_siege_join", 1),
              (jump_to_menu,"mnu_siege_join_defense")]),
##      ("siege_defender_do_not_join_battle",[(call_script, "script_party_count_fit_regulars","p_collective_ally"),
##                                            (gt, reg0, 0)],
##       "Don't get involved.", [(leave_encounter),
##                               (change_screen_return),
##           ]),

##      ("siege_defender_surrender",[(call_script, "script_party_count_fit_regulars","p_collective_ally"),
##                                   (this_or_next|eq, reg0, 0),
##                                   (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
##                                   ],
##       "Surrender.",[(assign, "$g_player_surrenders", 1),
##                     (jump_to_menu,"mnu_under_siege_attacked_continue")]),
    ]
  ),

  (
    "siege_join_defense",mnf_disable_all_keys,
    "{s4}^^Your casualties: {s8}^^Allies' casualties: {s9}^^Enemy casualties: {s10}",
    "none",
    [
        (try_begin),
          (eq, "$g_siege_join", 1),
          (call_script, "script_party_calculate_strength", "p_main_party", 1), #skip player
          (assign, ":player_party_strength", reg0),
          (val_div, ":player_party_strength", 5),
        (else_try),
          (assign, ":player_party_strength", 0),
        (try_end),
        
        (call_script, "script_party_calculate_strength", "p_collective_ally", 0),
        (assign, ":ally_party_strength", reg0),
        (val_div, ":ally_party_strength", 5),
        (call_script, "script_party_calculate_strength", "p_collective_enemy", 0),
        (assign, ":enemy_party_strength", reg0),
        (val_div, ":enemy_party_strength", 10),

        (store_add, ":friend_party_strength", ":player_party_strength", ":ally_party_strength"),
        (try_begin),
          (eq, ":friend_party_strength", 0),
          (store_div, ":enemy_party_strength_for_p", ":enemy_party_strength", 2),
        (else_try),
        (assign, ":enemy_party_strength_for_p", ":enemy_party_strength"),
        (val_mul, ":enemy_party_strength_for_p", ":player_party_strength"),
        (val_div, ":enemy_party_strength_for_p", ":friend_party_strength"),
        (try_end),

        (val_sub, ":enemy_party_strength", ":enemy_party_strength_for_p"),
        (inflict_casualties_to_party_group, "p_main_party", ":enemy_party_strength_for_p", "p_temp_casualties"),
        (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
        (str_store_string_reg, s8, s0),

        (inflict_casualties_to_party_group, "$g_ally_party", ":enemy_party_strength", "p_temp_casualties"),
        (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
        (str_store_string_reg, s9, s0),
        (party_collect_attachments_to_party, "$g_ally_party", "p_collective_ally"),

        (inflict_casualties_to_party_group, "$g_enemy_party", ":friend_party_strength", "p_temp_casualties"),
        (call_script, "script_print_casualties_to_s0", "p_temp_casualties", 0),
        (str_store_string_reg, s10, s0),
        (party_collect_attachments_to_party, "$g_enemy_party", "p_collective_enemy"),

        (try_begin),
          (call_script, "script_party_count_members_with_full_health","p_main_party"),
          (le, reg0, 0),
          (str_store_string, s4, "str_siege_defender_order_attack_failure"),
        (else_try),
          (call_script, "script_party_count_members_with_full_health","p_collective_enemy"),
          (le, reg0, 0),
          (assign, "$g_battle_result", 1),
          (str_store_string, s4, "str_siege_defender_order_attack_success"),
        (else_try),
          (str_store_string, s4, "str_siege_defender_order_attack_continue"),
        (try_end),
    ],
    [
      ("continue",[],"Continue...",[
          (jump_to_menu,"mnu_siege_started_defender"),
          ]),
    ]
  ),

  (
    "enter_your_own_castle",0,
    "{s10}",
    "none",
    [
      (try_begin),
        (neg|is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
        (faction_get_slot, ":faction_leader", "fac_player_supporters_faction", slot_faction_leader),
        (eq, ":faction_leader", "trp_player"),
        (str_store_string, s10, "@As you approach, you are spotted by the castle guards, who welcome you and open the gates for their {king/queen}."),
      (else_try),  
        (str_store_string, s10, "@As you approach, you are spotted by the castle guards, who welcome you and open the gates for their {lord/lady}."),
      (try_end),  
      
      (str_store_party_name, s2, "$current_town"),
    ],
    [
      ("continue",[],"Continue...",
       [ (jump_to_menu,"mnu_town"),
        ]),
    ],
  ),

  (
    "village",mnf_enable_hot_keys,
    "{s10} {s12}^{s11}^{s6}{s7}",
    "none",
    [
        (assign, "$current_town", "$g_encountered_party"),
        (call_script, "script_update_center_recon_notes", "$current_town"),

        (assign, "$g_defending_against_siege", 0), #required for bandit check
        (assign, "$g_battle_result", 0),
        (assign, "$qst_collect_taxes_currently_collecting", 0),
        (assign, "$qst_train_peasants_against_bandits_currently_training", 0),

        (try_begin),
          (gt, "$auto_enter_menu_in_center", 0),
          (jump_to_menu, "$auto_enter_menu_in_center"),
          (assign, "$auto_enter_menu_in_center", 0),
        (try_end),

        (try_begin),
          (neq, "$g_player_raiding_village",  "$current_town"),
          (assign, "$g_player_raiding_village", 0),
        (else_try),
          (jump_to_menu, "mnu_village_loot_continue"),
        (try_end),

        (try_begin),#Fix for collecting taxes
          (eq, "$g_town_visit_after_rest", 1),
          (assign, "$g_town_visit_after_rest", 0),
        (try_end),

        (str_store_party_name,s2, "$current_town"),
        (party_get_slot, ":center_lord", "$current_town", slot_town_lord),
        (store_faction_of_party, ":center_faction", "$current_town"),
        (str_store_faction_name,s9,":center_faction"),
        (try_begin),
          (ge, ":center_lord", 0),
          (str_store_troop_name,s8,":center_lord"),
          (str_store_string,s7,"@{s8} of {s9}"),
        (try_end),

        (str_clear, s10),
        (str_clear, s12),
        
        (try_begin),
          (neg|party_slot_eq, "$current_town", slot_village_state, svs_looted),
          (str_store_string, s60, s2),
                    
          (party_get_slot, ":prosperity", "$current_town", slot_town_prosperity),
          (try_begin),
            (eq, "$cheat_mode", 1),
            (assign, reg4, ":prosperity",),
            (display_message, "@{!}Prosperity: {reg4}"),
          (try_end),
          
          #(val_add, ":prosperity", 5),
          (store_div, ":str_id", ":prosperity", 10),
          (val_min, ":str_id", 9),
          (val_add, ":str_id", "str_village_prosperity_0"),
          (str_store_string, s10, ":str_id"),


          (store_div, ":str_id", ":prosperity", 20),
          (val_min, ":str_id", 4),
          (try_begin),
            (is_between, "$current_town", "p_village_91", villages_end),
            (val_add, ":str_id", "str_oasis_village_alt_prosperity_0"),
          (else_try),
            (val_add, ":str_id", "str_village_alt_prosperity_0"),
          (try_end),
          
          (str_store_string, s12, ":str_id"),                             
        (try_end),

        (str_clear, s11),
        (try_begin),
          (party_slot_eq, "$current_town", slot_village_state, svs_looted),
        (else_try),
          (eq, ":center_lord", "trp_player"),
          (str_store_string,s11,"@ This village and the surrounding lands belong to you."),
        (else_try),
          (ge, ":center_lord", 0),
          (str_store_string,s11,"@ You remember that this village and the surrounding lands belong to {s7}."),
        (else_try),
          (str_store_string,s11,"@ These lands belong to no one."),
        (try_end),

        (str_clear, s7),
        (try_begin),
          (neg|party_slot_eq, "$current_town", slot_village_state, svs_looted),
          (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
          (call_script, "script_describe_center_relation_to_s3", ":center_relation"),
          (assign, reg9, ":center_relation"),
          (str_store_string, s7, "@{!} {s3} ({reg9})."),
        (try_end),
        (str_clear, s6),
        (try_begin),
          (party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
          (party_get_slot, ":bandit_troop", "$current_town", slot_village_infested_by_bandits),
          (store_character_level, ":player_level", "trp_player"),
          (val_min, ":player_level", 63), ## CC
          (store_add, "$qst_eliminate_bandits_infesting_village_num_bandits", ":player_level", 10),
          (val_mul, "$qst_eliminate_bandits_infesting_village_num_bandits", 12),
          (val_div, "$qst_eliminate_bandits_infesting_village_num_bandits", 10),
          (store_random_in_range, "$qst_eliminate_bandits_infesting_village_num_villagers", 25, 30),
          (assign, reg8, "$qst_eliminate_bandits_infesting_village_num_bandits"),
          (str_store_troop_name_by_count, s35, ":bandit_troop", "$qst_eliminate_bandits_infesting_village_num_bandits"),
          (str_store_string, s6, "@ The village is infested by {reg8} {s35}."),
          
          (assign, "$g_enemy_party", -1), #new, no known enemy party while saving village from bandits dfdf
          (assign, "$g_ally_party", -1), #new, no known enemy party while saving village from bandits dfdf
          
          (try_begin),
            (eq, ":bandit_troop", "trp_forest_bandit"),
            (set_background_mesh, "mesh_pic_forest_bandits"),
          (else_try),
            (eq, ":bandit_troop", "trp_steppe_bandit"),
            (set_background_mesh, "mesh_pic_steppe_bandits"),
          (else_try),
            (eq, ":bandit_troop", "trp_taiga_bandit"),
            (set_background_mesh, "mesh_pic_steppe_bandits"),
          (else_try),
            (eq, ":bandit_troop", "trp_mountain_bandit"),
            (set_background_mesh, "mesh_pic_mountain_bandits"),
          #(else_try),
          #  (eq, ":bandit_troop", "trp_sea_raider"),
          #  (set_background_mesh, "mesh_pic_sea_raiders"),
          (else_try),
           ##diplmacy begin
            (eq, ":bandit_troop", "trp_peasant_woman"),
            (str_store_string, s6, "@ The peasants hired mercenaries and are rebelling against you."),
            (set_background_mesh, "mesh_pic_villageriot"),
          (else_try),
           ##diplomacy end
            (set_background_mesh, "mesh_pic_bandits"),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_village_state, svs_looted),
          (str_store_string, s6, "@ The village has been looted. A handful of souls scatter as you pass through the burnt out houses."),
          (try_begin),
            (neq, "$g_player_raid_complete", 1),
            (play_track, "track_empty_village", 1),
          (try_end),
          (set_background_mesh, "mesh_pic_looted_village"),
        (else_try),
          (party_slot_eq, "$current_town", slot_village_state, svs_being_raided),
          (str_store_string, s6, "@ The village is being raided."),
        (else_try),
          (store_current_hours, ":hours"),
          (party_get_slot, ":last_time", "$current_town", slot_center_lair_attack_cooldown),
          (gt, ":last_time", ":hours"),
          (set_background_mesh, "mesh_pic_villageriot"),
          (str_store_string, s6, "@ The village refused you into the village, Because you haved looted near settlements."),
        (else_try),
          (party_get_current_terrain, ":cur_terrain", "$current_town"),
          (try_begin),
            (this_or_next|eq, ":cur_terrain", rt_steppe),
            (this_or_next|eq, ":cur_terrain", rt_steppe_forest),
            (this_or_next|eq, ":cur_terrain", rt_desert),
            (             eq, ":cur_terrain", rt_desert_forest),
            (set_background_mesh, "mesh_pic_village_s"),
          (else_try),
            (this_or_next|eq, ":cur_terrain", rt_snow),
            (             eq, ":cur_terrain", rt_snow_forest),
            (set_background_mesh, "mesh_pic_village_w"),
          (else_try),
            (set_background_mesh, "mesh_pic_village_p"),
          (try_end),
        (try_end),

        (try_begin),
          (eq, "$g_player_raid_complete", 1),
          (assign, "$g_player_raid_complete", 0),
          (jump_to_menu, "mnu_village_loot_complete"),
        (else_try),
          (party_get_slot, ":raider_party", "$current_town", slot_village_raided_by),
          (gt, ":raider_party", 0),
        # Process here...
        (try_end),

        (try_begin),
          (eq,"$g_leave_town",1),
          (assign,"$g_leave_town",0),
          (change_screen_return),
        (try_end),

        (try_begin), 
          (neg|is_currently_night), ## CC
          (assign, "$town_nighttime", 0),
        (else_try),
          (assign, "$town_nighttime", 1),
        (try_end),
    ],
    [
    ## CC
      ("Meet_with_village_elder",
       [
          (party_slot_eq, "$current_town", slot_village_state, 0),
          (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
          
          (store_current_hours, ":hours"),
          (party_get_slot, ":last_time", "$current_town", slot_center_lair_attack_cooldown),
          (ge, ":hours", ":last_time"),
        (troop_slot_ge,"trp_player", slot_troop_player_class,2),
          #(troop_slot_eq, ":town_elder", slot_troop_met, 1),
        ],
         "Meet with the elder.",
         [
           (try_begin),
              (call_script, "script_cf_enter_center_location_bandit_check"),
           (else_try),
             (party_get_slot, ":conversation_troop", "$current_town", slot_town_elder),
             (call_script, "script_setup_troop_meeting", ":conversation_troop", -1),
           (try_end),
          ]),
    ## CC
      ("village_manage",
      [
        (neg|party_slot_eq, "$current_town", slot_village_state, svs_looted),
        (neg|party_slot_eq, "$current_town", slot_village_state, svs_being_raided),
        (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
        
        (party_slot_eq, "$current_town", slot_town_lord, "trp_player")
        ]
       ,"Manage this village.",
       [
           (assign, "$g_next_menu", "mnu_village"),
           (jump_to_menu, "mnu_center_manage"),
        ]),
        
      ("village_manage_advance",
      [
        (neg|party_slot_eq, "$current_town", slot_village_state, svs_looted),
        (neg|party_slot_eq, "$current_town", slot_village_state, svs_being_raided),
        (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
        (party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
        
        
        (store_faction_of_party, ":current_town_faction", "$current_town"),
        (this_or_next|eq, "$game_mode", 0),
        (eq, ":current_town_faction", "$players_kingdom"),
        ]
       ,"Manage this village.",
       [(jump_to_menu, "mnu_center_manage_advance"),]),
        
      ("village_center",[(neg|party_slot_eq, "$current_town", slot_village_state, svs_looted),
                         (neg|party_slot_eq, "$current_town", slot_village_state, svs_being_raided),
                         (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
                         
          (store_current_hours, ":hours"),
          (party_get_slot, ":last_time", "$current_town", slot_center_lair_attack_cooldown),
          (ge, ":hours", ":last_time"),
                        ]
       ,"Go to the village center.",
       [
         (try_begin),
           (call_script, "script_cf_enter_center_location_bandit_check"),
         (else_try),
           (party_get_slot, ":village_scene", "$current_town", slot_castle_exterior),
           (modify_visitors_at_site,":village_scene"),
           (reset_visitors),
           (party_get_slot, ":village_elder_troop", "$current_town",slot_town_elder),
           (set_visitor, 11, ":village_elder_troop"),
            ##diplomacy begin
          (try_begin),
            (gt, "$g_player_chamberlain", 0),
            (call_script, "script_dplmc_appoint_chamberlain"),  #fix for wrong troops after update
            (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
            (eq, ":town_lord", "trp_player"),
            (set_visitor, 9, "$g_player_chamberlain"),
          (try_end),
            ##diplomacy end           

           (call_script, "script_init_town_walkers"),

           (try_begin),
             (check_quest_active, "qst_hunt_down_fugitive"),
             (neg|is_currently_night),
             (quest_slot_eq, "qst_hunt_down_fugitive", slot_quest_target_center, "$current_town"),
             (neg|check_quest_succeeded, "qst_hunt_down_fugitive"),
             (neg|check_quest_failed, "qst_hunt_down_fugitive"),
             (set_visitor, 45, "trp_fugitive"),
           (try_end),

#Bounty hunting
           (try_begin),
             (check_quest_active, "qst_bounty_1"),
             #(neg|is_currently_night),
             (quest_slot_eq, "qst_bounty_1", slot_quest_target_center, "$current_town"),
             (neg|check_quest_succeeded, "qst_bounty_1"),
             (neg|check_quest_failed, "qst_bounty_1"),
             (store_random_in_range, ":random", 0, 3),
             (try_begin),
               (eq, ":random", 1),
               (store_random_in_range, "$bounty_target_1", "trp_looter", "trp_caravan_master"),
             (else_try),
               (store_random_in_range, "$bounty_target_1", "trp_looter", "trp_caravan_master"),
             (try_end),
             (set_visitor, 45, "$bounty_target_1"),
           (try_end),
              
           (try_begin),
             (check_quest_active, "qst_bounty_2"),
             #(neg|is_currently_night),
             (quest_slot_eq, "qst_bounty_2", slot_quest_target_center, "$current_town"),
             (neg|check_quest_succeeded, "qst_bounty_2"),
             (neg|check_quest_failed, "qst_bounty_2"),
             (store_random_in_range, ":random", 0, 3 ),
             (try_begin),
               (eq, ":random", 0),
               (store_random_in_range, "$bounty_target_2", "trp_goblin", "trp_ogre_young"),
             (else_try),
               (eq, ":random", 1),
               (store_random_in_range, "$bounty_target_2", "trp_ogre_young", "trp_troll_1"),
             (else_try),
               (eq, ":random", 2),
               (store_random_in_range, "$bounty_target_2", "trp_orc", "trp_orc_big_boss"),
             (try_end),
             (set_visitor, 45, "$bounty_target_2"),
           (try_end),
           
           (try_begin),
             (check_quest_active, "qst_bounty_3"),
             #(neg|is_currently_night),
             (quest_slot_eq, "qst_bounty_3", slot_quest_target_center, "$current_town"),
             (neg|check_quest_succeeded, "qst_bounty_3"),
             (neg|check_quest_failed, "qst_bounty_3"),
             (store_random_in_range, ":random", 0, 3 ),
             (try_begin),
               (eq, ":random", 0),
               (store_random_in_range, "$bounty_target_3", "trp_woodelf_recruit", "trp_grandelf_recruit"),
             (else_try),
               (eq, ":random", 1),
               (store_random_in_range, "$bounty_target_3", "trp_grandelf_recruit", "trp_ent_1"),
             (else_try),
               (eq, ":random", 2),
               (store_random_in_range, "$bounty_target_3", "trp_drowelf_assassin_1", "trp_drowelf_which_2"),
             #(else_try),
             #  (eq, ":random", 3),
             #  (store_random_in_range, "$bounty_target_3", "trp_dwarf_miner", "trp_giant_1"),
             (try_end),
             (set_visitor, 45, "$bounty_target_3"),
           (try_end),
           
           (try_begin),
             (check_quest_active, "qst_bounty_4"),
             (is_currently_night),
             (quest_slot_eq, "qst_bounty_4", slot_quest_target_center, "$current_town"),
             (neg|check_quest_succeeded, "qst_bounty_4"),
             (neg|check_quest_failed, "qst_bounty_4"),
             (store_random_in_range, ":random", 0, 8 ),
             (try_begin),
               (eq, ":random", 0),
               (assign, "$bounty_target_4","trp_lich_3"),
             (else_try),
               (eq, ":random", 1),
               (assign, "$bounty_target_4", "trp_lich_1"),
             (else_try),
               (eq, ":random", 2),
               (assign, "$bounty_target_4", "trp_undead_magic_2"),
             (else_try),
               (eq, ":random", 3),
               (assign, "$bounty_target_4", "trp_mummy_3"),
             (else_try),
               (eq, ":random", 4),
               (assign, "$bounty_target_4", "trp_dullahan"),
             (else_try),
               (eq, ":random", 5),
               (assign, "$bounty_target_4", "trp_vampire_1"),
             (else_try),
               (eq, ":random", 6),
               (assign, "$bounty_target_4", "trp_brigand"),
             (else_try),
               (assign, "$bounty_target_4", "trp_wight"),
             (try_end),
             (set_visitor, 45, "$bounty_target_4"),
           (try_end),
           
           (try_begin),
             (check_quest_active, "qst_bounty_5"),
             #(neg|is_currently_night),
             (quest_slot_eq, "qst_bounty_5", slot_quest_target_center, "$current_town"),
             (neg|check_quest_succeeded, "qst_bounty_5"),
             (neg|check_quest_failed, "qst_bounty_5"),
             (store_random_in_range, ":random", 0, 5 ),
             (try_begin),
               (eq, ":random", 0),
               (store_random_in_range, "$bounty_target_5", "trp_demon_magic_1", "trp_demon_1"),
             (else_try),
               (eq, ":random", 1),
               (store_random_in_range, "$bounty_target_5", "trp_turk_sipahi", "trp_rus_boyar"),
             (else_try),
               (eq, ":random", 2),
               (store_random_in_range, "$bounty_target_5", "trp_monk", "trp_manhunter"),
             (else_try),
               (eq, ":random", 3),
               (store_random_in_range, "$bounty_target_5", "trp_demon_magic_1", "trp_demon_1"),
             (else_try),
               (eq, ":random", 4),
               (store_random_in_range, "$bounty_target_5", "trp_teutonic_sword", "trp_france_horse_1"),
             (try_end),
             (set_visitor, 45, "$bounty_target_5"),
           (try_end),
           
           (try_begin),
             (check_quest_active, "qst_bounty_6"),
             (neg|is_currently_night),
             (quest_slot_eq, "qst_bounty_6", slot_quest_target_center, "$current_town"),
             (neg|check_quest_succeeded, "qst_bounty_6"),
             (neg|check_quest_failed, "qst_bounty_6"),
             (store_random_in_range, ":random", 0, 8 ),
             (try_begin),
               (eq, ":random", 0),
               (store_random_in_range, "$bounty_target_6", "trp_watchman", "trp_monk"),
             (else_try),
               (eq, ":random", 1),
               (store_random_in_range, "$bounty_target_6", "trp_balkan_vil_recruit", "trp_dragonfly"),
             (else_try),
               (eq, ":random", 2),
               (store_random_in_range, "$bounty_target_6", "trp_france_town_recruit", "trp_france_knight_1"),
             (else_try),
               (eq, ":random", 3),
               (store_random_in_range, "$bounty_target_6", "trp_france_knight_1", "trp_looter"),
             (else_try),
               (store_random_in_range, "$bounty_target_6", "trp_france_town_recruit", "trp_france_knight_1"),
             (try_end),
             (set_visitor, 45, "$bounty_target_6"),
           (try_end),
# end Bounty Hunting

           (set_jump_mission,"mt_village_center"),
           (jump_to_scene,":village_scene"),
           (change_screen_mission),
         (try_end),
        ],"Door to the village center."),
        
      ("village_buy_food",[
        (party_slot_eq, "$current_town", slot_village_state, 0),
        (troop_slot_ge,"trp_player", slot_troop_player_class,2),
        (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
        
          (store_current_hours, ":hours"),
          (party_get_slot, ":last_time", "$current_town", slot_center_lair_attack_cooldown),
          (ge, ":hours", ":last_time"),
                           ],"Buy supplies from the peasants.",
       [
         (try_begin),
           (call_script, "script_cf_enter_center_location_bandit_check"),
         (else_try),
           #(party_get_slot, ":merchant_troop", "$current_town", slot_town_elder),
           #(change_screen_trade, ":merchant_troop"),
           (jump_to_menu, "mnu_village_supplies"),
         (try_end),
         ]),

      ("change_commander_town",
        [
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (party_slot_eq,"$current_town",slot_party_type, spt_village),
          (str_store_troop_name,s7,"$g_player_troop"),
          (set_player_troop, "$g_player_troop"),
        ],
        "Change commander.(Current commander: {s7})",
        [
         (start_presentation, "prsnt_change_commander"),
        ]),
      ("go_to_settlements",[
        (party_slot_eq, "$current_town", slot_village_state, 0),
        (troop_slot_ge,"trp_player", slot_troop_player_class,2),
        (neq, "$freelancer_state", 1),
        (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
        
          (store_current_hours, ":hours"),
          (party_get_slot, ":last_time", "$current_town", slot_center_lair_attack_cooldown),
          (ge, ":hours", ":last_time"),
                           ],"Visit the nearby settlements.",
       [
       
         (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
         (try_begin),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, 0),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, graveyard),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, rogue_hideout),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, farm),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, keep),
           (neg|troop_slot_ge,"trp_player", slot_troop_player_class,5),
           (neg|ge, ":persuasion_level",5),
           (call_script, "script_cf_enter_center_location_bandit_check_2"),
         (else_try),
           (call_script, "script_cf_enter_center_location_bandit_check"),
         (else_try),
           (jump_to_menu, "mnu_go_to_settlements"),
         (try_end),
         ]),

      ("village_attack_bandits",[
        (party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
        ##diplomacy begin
        (neg|party_slot_eq, "$current_town", slot_village_infested_by_bandits, "trp_peasant_woman"),
        ##diplmacy end
        ],
       "Attack the bandits.",
       [(party_get_slot, ":bandit_troop", "$current_town", slot_village_infested_by_bandits),
        (party_get_slot, ":scene_to_use", "$current_town", slot_castle_exterior),
        (modify_visitors_at_site,":scene_to_use"),
        (reset_visitors),
        (set_visitors, 0, ":bandit_troop", "$qst_eliminate_bandits_infesting_village_num_bandits"),
        (set_visitors, 2, "trp_farmer", "$qst_eliminate_bandits_infesting_village_num_villagers"),
        (set_party_battle_mode),
        (set_battle_advantage, 0),
        (assign, "$g_battle_result", 0),
        (set_jump_mission,"mt_village_attack_bandits"),
        (jump_to_scene, ":scene_to_use"),
        (assign, "$g_next_menu", "mnu_village_infest_bandits_result"),
        (jump_to_menu, "mnu_battle_debrief"),
        (assign, "$g_mt_mode", vba_normal),
        (change_screen_mission),
        ]),
        
      ("village_wait",
       [(party_slot_eq, "$current_town", slot_center_has_manor, 1),
        (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
        ],
         "Wait here for some time.",
         [
           (assign,"$auto_enter_town","$current_town"),
           (assign, "$g_last_rest_center", "$current_town"),

           (try_begin),
             (party_is_active, "p_main_party"),
             (party_get_current_terrain, ":cur_terrain", "p_main_party"),
             (try_begin),
               (eq, ":cur_terrain", rt_desert),
               (unlock_achievement, ACHIEVEMENT_SARRANIDIAN_NIGHTS),
             (try_end),  
           (try_end),  
           (rest_for_hours_interactive, 24 * 7, 5, 1), #rest while attackable

           (change_screen_return),
          ]),
           
       ##diplomacy begin          
      ("dplmc_village_counter_insurgency",[
        (party_slot_eq, "$current_town", slot_village_infested_by_bandits, "trp_peasant_woman"),
        ],
       "Counter the insurgency.",
       [
          (store_random_in_range, ":enmity", -10, -5),
          (call_script, "script_change_player_relation_with_center", "$current_town", ":enmity"),
          (call_script, "script_calculate_battle_advantage"),
          (set_battle_advantage, reg0),
          (set_party_battle_mode),
          (assign, "$g_battle_result", 0),
          (assign, "$g_village_raid_evil", 1), #check
          (set_jump_mission,"mt_village_raid"),
          (party_get_slot, ":scene_to_use", "$current_town", slot_castle_exterior),
          (jump_to_scene, ":scene_to_use"),
          (assign, "$g_next_menu", "mnu_dplmc_village_riot_result"),

          (call_script, "script_objectionable_action", tmt_humanitarian, "str_loot_village"),
          (jump_to_menu, "mnu_battle_debrief"),
          (change_screen_mission),
        ]),
        
      ("dplmc_village_negotiate",[
        (party_slot_eq, "$current_town", slot_village_infested_by_bandits, "trp_peasant_woman"),
        ],
       "Begin negotiations.",
       [
          (jump_to_menu, "mnu_dplmc_riot_negotiate"),
        ]),
        ##diplomacy end     
      
      ("collect_taxes_qst",[(party_slot_eq, "$current_town", slot_village_state, 0),
                            (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
                            (check_quest_active, "qst_collect_taxes"),
                            (quest_get_slot, ":quest_giver_troop", "qst_collect_taxes", slot_quest_giver_troop),
                            (quest_slot_eq, "qst_collect_taxes", slot_quest_target_center, "$current_town"),
                            (neg|quest_slot_eq, "qst_collect_taxes", slot_quest_current_state, 4),
                            (str_store_troop_name, s1, ":quest_giver_troop"),
                            (quest_get_slot, reg5, "qst_collect_taxes", slot_quest_current_state),
                            ], "{reg5?Continue collecting taxes:Collect taxes} due to {s1}.",
       [(jump_to_menu, "mnu_collect_taxes"),]),

      ("train_peasants_against_bandits_qst",
       [
         (party_slot_eq, "$current_town", slot_village_state, 0),
         (check_quest_active, "qst_train_peasants_against_bandits"),
         (neg|check_quest_concluded, "qst_train_peasants_against_bandits"),
         (quest_slot_eq, "qst_train_peasants_against_bandits", slot_quest_target_center, "$current_town"),
         ], "Train the peasants.",
       [(jump_to_menu, "mnu_train_peasants_against_bandits"),]),

      ("village_hostile_action",[(party_slot_eq, "$current_town", slot_village_state, 0),
                                 (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
                                 (neq, "$players_kingdom", "$g_encountered_party_faction"),
                                 ], "Take a hostile action.",
       [(jump_to_menu,"mnu_village_hostile_action"),
           ]),
      
      ("village_reports",[(eq, "$cheat_mode", 1),], "{!}CHEAT! Show reports.",
       [(jump_to_menu,"mnu_center_reports"),
           ]),
        #zs:donate
        ("village_donate",
        [
            (neg|party_slot_eq, "$current_town", slot_village_state, svs_looted),
            (neg|party_slot_eq, "$current_town", slot_village_state, svs_being_raided),
            (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
        ],
        "Donate.",
        [
            (try_begin),
                (call_script, "script_cf_enter_center_location_bandit_check"),
            (else_try),
                (jump_to_menu,"mnu_donate"),
            (try_end),
           ]),
      ("village_leave",[],"Leave...",
        [
        (change_screen_map),
        (party_slot_eq, "$current_town", slot_village_state, 0),
        (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
        ## CC
        (try_begin),
          (eq, "$g_buy_foods_when_leaving", 1),
          (call_script, "script_auto_buy_food"),
        (try_end),
        (try_begin),
          (eq, "$g_sell_items_when_leaving", 1),
          (call_script, "script_auto_sell_all"),
        (try_end),
        ## CC
        ]),
      
    ],
  ),

  (
    "village_supplies",0,
    "The villagers bring you near their market square. What do you want to do?",
    "none",
    [(set_background_mesh, "mesh_budget_report"),],
    [

      ("auto_trade", [],
       "Trade automaticly.",
       [
          (start_presentation, "prsnt_auto_trade"),
        ]),


       ("use_trophy_buy_supply",
        [
         (str_store_item_name,s3,"itm_trophy_a"),
         (store_item_kind_count,":size","itm_trophy_a","trp_player"),
         (try_begin),
           (lt, ":size", 1),
           (disable_menu_option),
         (try_end),
        ],
        "use {s3} recruit_troop.",
        [(troop_remove_items, "trp_player", "itm_trophy_a", 1), 
         (call_script, "script_update_volunteer_troops_in_village", "$current_town"),
         (troop_add_items,"trp_player","itm_siege_supply",1),
         (str_store_item_name,s2,"itm_siege_supply"),
         (display_message, "@farmer bring {s2} for you !"),
        ]),

      ("buy_food",[],"Buy additional supplies and goods from the peasants.",
       [
        # (jump_to_menu, "mnu_village_supplies"),
         # (try_begin),
           # (call_script, "script_cf_enter_center_location_bandit_check"),
         # (else_try),
           (party_get_slot, ":merchant_troop", "$current_town", slot_town_elder),
           (change_screen_trade, ":merchant_troop"),
         # (try_end),
         ]),

      ("buy_cattle",[
          (party_get_slot, ":cattle", "$g_encountered_party", slot_village_number_of_cattle),
          (gt, ":cattle", 0),
          (assign, ":quest_village", 0),
          (try_begin),
            (check_quest_active, "qst_deliver_cattle"),
            (quest_slot_eq, "qst_deliver_cattle", slot_quest_target_center, "$current_town"),
            (assign, ":quest_village", 1),
          (try_end),
          (eq, ":quest_village", 0),
          (store_item_value, "$temp", "itm_cattle_meat"),
          (call_script, "script_game_get_item_buy_price_factor", "itm_cattle_meat"),
          (val_mul, "$temp", reg0),
      
          #Multiplied by 2 and divided by number of cattle
          (val_div, "$temp", ":cattle"),
          (assign, reg0, ":cattle"),
        
          (store_troop_gold, ":gold", "trp_player"),
          (ge, ":gold", "$temp"),
          (call_script, "script_game_get_money_text", "$temp"),
        ],
      "Select a head of cattle ({reg0} available) for {s1} each.",
       [(call_script, "script_buy_cattle_from_village", "$g_encountered_party", 1, "$temp"),
        (jump_to_menu, "mnu_village_supplies"),
       ]),

      ("go_back",[],
      "Forget it.",[(jump_to_menu,"mnu_village")]),
        
    ],
  ),

  (
    "village_hostile_action",0,
    "What action do you have in mind?",
    "none",
    [],
    [
      ("village_take_food",[
          (party_slot_eq, "$current_town", slot_village_state, 0),
          (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
          (party_get_slot, ":merchant_troop", "$current_town", slot_town_elder),
          (assign, ":town_stores_not_empty", 0),
          (try_for_range, ":slot_no", num_equipment_kinds, max_inventory_items + num_equipment_kinds),
            (troop_get_inventory_slot, ":slot_item", ":merchant_troop", ":slot_no"),
            (ge, ":slot_item", 0),
            (assign, ":town_stores_not_empty", 1),
          (try_end),
          (eq, ":town_stores_not_empty", 1),
          ],"Force the peasants to give you supplies.",
       [
           (jump_to_menu, "mnu_village_take_food_confirm")
        ]),
      ("village_steal_cattle",
       [
          (party_slot_eq, "$current_town", slot_village_state, 0),
          (party_slot_eq, "$current_town", slot_center_has_prisoner_tower, 0),
          (party_slot_eq, "$current_town", slot_village_player_can_not_steal_cattle, 0),
          (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
          (party_get_slot, ":num_cattle", "$current_town", slot_village_number_of_cattle),
          (neg|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
          (gt, ":num_cattle", 0),
          ],"Steal cattle.",
       [
           (jump_to_menu, "mnu_village_steal_cattle_confirm")
        ]),
      ("village_loot",[(party_slot_eq, "$current_town", slot_village_state, 0),
                       (party_slot_eq, "$current_town", slot_center_has_prisoner_tower, 0),
                       (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
                       (store_faction_of_party, ":center_faction", "$current_town"),
                       (store_relation, ":reln", "fac_player_supporters_faction", ":center_faction"),
                       (lt, ":reln", 0),
                       ],
       "Loot and burn this village.",
       [
#           (party_clear, "$current_town"),
#           (party_add_template, "$current_town", "pt_villagers_in_raid"),
           (jump_to_menu, "mnu_village_start_attack"),
           ]),
      ("forget_it",[],
      "Forget it.",[(jump_to_menu,"mnu_village")]),
    ],
  ),
  
  (
    "recruit_volunteers",0,
    "{s18}, You have {reg15} denars and room for {reg14} more soldiers",
    "none",
    [
    #(party_get_slot, ":volunteer_troop", "$current_town", slot_center_volunteer_troop_type),
        (party_get_slot, ":volunteer_amount", "$current_town", slot_center_volunteer_troop_amount),
        (str_clear, s18),
        (store_troop_gold, reg15, "trp_player"),
        (party_get_free_companions_capacity, reg14, "p_main_party"),
        (assign, ":free_capacity", reg14),
        
        (val_min, ":volunteer_amount", ":free_capacity"),

        (assign, reg5, ":volunteer_amount"),
        (try_begin),
            (eq, ":volunteer_amount", 0),
            (str_store_string, s18, "@No one here seems to be willing to join your party."),
        (else_try),
            (try_begin),
                (eq, reg5, 1),
                (str_store_string, s18, "@One volunteers to follow you."),
            (else_try),
                (str_store_string, s18, "@{reg5} volunteer to follow you."),
            (try_end),

            (set_background_mesh, "mesh_pic_recruits"),
        (try_end),
    ],
    [
      ("continue",
      [
        (eq, reg5, 0),
      ], #noone willing to join                   
      "Continue...",
      [
        (party_set_slot, "$current_town", slot_center_volunteer_troop_amount, -1),
        (jump_to_menu,"mnu_village"),
      ]),
##chenwz       
# mercenary begin
      
      #("town_recruit_them",
      #[
        #(assign, reg12, "trp_farmer"),
        #(call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        #(str_store_troop_name, s3, reg12),
        #(gt, reg10, 0),
        #(gt, reg5, 0),
      #],
       #"Recruit {reg10} {s3} ({reg11} denars).",
      #[(call_script, "script_castle_recruit_volunteers_troop","trp_farmer"),(jump_to_menu,"mnu_village"),]),
      	   
      ("town_recruit_them",
      [
        (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
        (party_get_slot, ":volunteer_troop", "$current_town", slot_center_volunteer_troop_type),
        (assign, reg12, ":volunteer_troop"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(party_get_slot, ":volunteer_troop", "$current_town", slot_center_volunteer_troop_type),
      (call_script, "script_castle_recruit_volunteers_troop",":volunteer_troop"),(jump_to_menu,"mnu_village"),]),
      
      
      ("town_recruit_them",
      [
        (assign, reg12, "trp_skeleton"),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, graveyard),

        (call_script, "script_cf_current_town_recruit_volunteer_cost_twice",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop_twice","trp_skeleton"),(jump_to_menu,"mnu_village"),]),

      ("town_recruit_them",
      [
        (assign, reg12, "trp_assassin"),
        (party_get_slot, ":party_faction", "$current_town", slot_center_original_faction),
        (neg|eq, ":party_faction", "fac_kingdom_9"),
        (neg|eq, ":party_faction", "fac_kingdom_12"),
        (neg|eq, ":party_faction", "fac_kingdom_6"),
        (neg|eq, ":party_faction", "fac_kingdom_8"),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, rogue_hideout),

        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_assassin"),(jump_to_menu,"mnu_village"),]),

      ("town_recruit_them",
      [
        (assign, reg12, "trp_rat_1"),
        (party_get_slot, ":culture", "$current_town", slot_center_culture),
        (this_or_next|eq, ":culture", "fac_culture_8"),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),

        (call_script, "script_cf_current_town_recruit_volunteer_cost_twice",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop_twice","trp_rat_1"),(jump_to_menu,"mnu_village"),]),

      ("town_recruit_them",
      [
        (assign, reg12, "trp_medusa_1"),
        (party_get_slot, ":party_faction", "$current_town", slot_center_original_faction),
        (store_troop_faction, ":troop_faction", reg12),
        (store_relation, ":talk_faction", "fac_player_faction", ":troop_faction"),
        (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
        (val_mul, ":persuasion_level", 2),
        (val_add, ":talk_faction", ":persuasion_level"),
        
        (this_or_next|gt, ":talk_faction", 30),
        (eq, ":party_faction", "fac_kingdom_8"),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),

        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_medusa_1"),(jump_to_menu,"mnu_village"),]),


      ("town_recruit_them",
      [
        (assign, reg12, "trp_draugr_1"),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),

        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_draugr_1"),(jump_to_menu,"mnu_village"),]),

      ("town_recruit_them",
      [
        (assign, reg12, "trp_scottish_jav"),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
        
        (store_troop_faction, ":troop_faction", reg12),
        (store_relation, ":talk_faction", "fac_player_faction", ":troop_faction"),
        (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
        (val_mul, ":persuasion_level", 2),
        (val_add, ":talk_faction", ":persuasion_level"),
        (gt, ":talk_faction", 25),

        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_scottish_jav"),(jump_to_menu,"mnu_village"),]),

      ("town_recruit_them",
      [
        (assign, reg12, "trp_goblin"),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),

        (call_script, "script_cf_current_town_recruit_volunteer_cost_twice",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop_twice","trp_goblin"),(jump_to_menu,"mnu_village"),]),
      
      ("town_recruit_them",
      [
        (assign, reg12, "trp_steppe_tribesman"),
        (party_get_slot, ":culture", "$current_town", slot_center_culture),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, nomad_tent),
        (this_or_next|eq, ":culture", "fac_culture_8"),
        (this_or_next|eq, ":culture", "fac_culture_9"),
        (this_or_next|eq, ":culture", "fac_culture_14"),
        (eq, ":culture", "fac_culture_3"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_steppe_tribesman"),(jump_to_menu,"mnu_village"),]),
      
      
      ("town_recruit_them",
      [
        (assign, reg12, "trp_orc"),
        (store_troop_faction, ":troop_faction", reg12),
        (store_relation, ":talk_faction", "fac_player_faction", ":troop_faction"),
        (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
        (val_mul, ":persuasion_level", 2),
        (val_add, ":talk_faction", ":persuasion_level"),
        (gt, ":talk_faction", 10),
        (party_get_slot, ":culture", "$current_town", slot_center_culture),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
        (eq, ":culture", "fac_culture_3"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_orc"),(jump_to_menu,"mnu_village"),]),
          
      ("town_recruit_them",
      [
        (assign, reg12, "trp_ogre_young"),
        (store_troop_faction, ":troop_faction", reg12),
        (store_relation, ":talk_faction", "fac_player_faction", ":troop_faction"),
        (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
        (val_mul, ":persuasion_level", 2),
        (val_add, ":talk_faction", ":persuasion_level"),
        (gt, ":talk_faction", 20),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_ogre_young"),(jump_to_menu,"mnu_village"),]),
            
      ("town_recruit_them",
      [
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, rogue_hideout),
        (this_or_next|eq,"$background_type",cb_forester),
        (eq,"$background_answer_3",cb3_poacher),
        (assign, reg12, "trp_welsh_longbowm_1"),
        (store_troop_faction, ":troop_faction", reg12),
        (store_relation, ":talk_faction", "fac_player_faction", ":troop_faction"),
        (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
        (val_mul, ":persuasion_level", 2),
        (val_add, ":talk_faction", ":persuasion_level"),
        (gt, ":talk_faction", 10),
        (party_get_current_terrain, ":terrain", "$current_town"),
        (eq, ":terrain", 11),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_welsh_longbowm_1"),(jump_to_menu,"mnu_village"),]),
            
      ("town_recruit_them",
      [
        (assign, reg12, "trp_swiss_swordman"),
        (store_troop_faction, ":troop_faction", reg12),
        (store_relation, ":talk_faction", "fac_player_faction", ":troop_faction"),
        (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
        (val_mul, ":persuasion_level", 2),
        (val_add, ":talk_faction", ":persuasion_level"),
        (gt, ":talk_faction", 25),
        (party_get_slot, ":culture", "$current_town", slot_center_culture),
        (this_or_next|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
        (eq, ":culture", "fac_culture_7"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_swiss_swordman"),(jump_to_menu,"mnu_village"),]),
      


      ("town_recruit_them",
      [
        (assign, reg12, "trp_ghazis_1"),
        (party_get_slot, ":party_faction", "$current_town", slot_center_original_faction),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
        (this_or_next|eq, ":party_faction", "fac_kingdom_9"),
        (this_or_next|eq, ":party_faction", "fac_kingdom_12"),
        (eq, ":party_faction", "fac_kingdom_6"),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
        (this_or_next|eq, ":party_faction", "$g_player_culture"),
        (this_or_next|eq, ":party_faction", "$players_kingdom"),
        (eq, ":party_faction", "$supported_pretender_old_faction"),

        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_ghazis_1"),(jump_to_menu,"mnu_village"),]),


##chenwz       
      ("forget_it",[],"Forget it.",[(jump_to_menu,"mnu_village"),]),
    ],
  ),


    ("town_recruit_volunteers", 0, "{s18}, You have {reg15} denars and room for {reg14} more soldiers", "none",
    [
        (party_get_slot, ":volunteer_amount", "$current_town", slot_center_volunteer_troop_amount),

        (store_troop_gold, reg15, "trp_player"),
        (party_get_free_companions_capacity, reg14, "p_main_party"),
        (assign, ":free_capacity", reg14),
        (str_clear, s18),
        (val_min, ":volunteer_amount", ":free_capacity"),

        (assign, reg5, ":volunteer_amount"),
        (try_begin),
            (eq, ":volunteer_amount", 0),
            (str_store_string, s18, "@No one here seems to be willing to join your party."),
        (else_try),
            (try_begin),
                (eq, reg5, 1),
                (str_store_string, s18, "@One volunteers to follow you."),
            (else_try),
                (str_store_string, s18, "@{reg5} volunteer to follow you."),
            (try_end),

            (set_background_mesh, "mesh_pic_payment"),
        (try_end),
    ],
    [
        ("continue",[(eq, reg5, 0),],"Continue...",
        [(party_set_slot, "$current_town", slot_center_volunteer_troop_amount, -1),(jump_to_menu, "mnu_town"),]),

      ("town_recruit_them",
      [
        (party_get_slot, ":volunteer_troop", "$current_town", slot_center_volunteer_troop_type),
        (assign, reg12, ":volunteer_troop"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [
        (party_get_slot, ":volunteer_troop", "$current_town", slot_center_volunteer_troop_type),
        (call_script, "script_castle_recruit_volunteers_troop",":volunteer_troop"),(jump_to_menu,"mnu_town"),]),

      ("town_recruit_them",
      [
        (this_or_next|eq, "fac_kingdom_1", "$players_kingdom"),
        (eq, "fac_kingdom_1", "$supported_pretender_old_faction"),
        (party_get_slot, ":party_faction", "$current_town", slot_center_original_faction),
        (eq, ":party_faction", "fac_kingdom_1"),
        (assign, reg12, "trp_scottish_pikeman"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost_2",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop_2","trp_scottish_pikeman"),(jump_to_menu,"mnu_town"),]),

      
      
        ("forget_it",[],"Forget it.",[(jump_to_menu,"mnu_town"),]),
    ]),

  (
    "regular_recruit",0,
    "{s18}, You have {reg15} denars and room for {reg14} more soldiers", "none",
    [
        (set_background_mesh, "mesh_pic_payment"),
        
        (str_clear, s18),
        (store_troop_gold, reg15, "trp_player"),
        (party_get_free_companions_capacity, reg14, "p_main_party"),
        (assign, ":free_capacity", reg14),
        
        (party_get_slot, ":volunteer_amount", "$current_town", slot_center_volunteer_troop_amount),
        
        (val_min, ":volunteer_amount", ":free_capacity"),

        (assign, reg5, ":volunteer_amount"),
        (try_begin),
            (eq, ":volunteer_amount", 0),
            (str_store_string, s18, "@No one here seems to be willing to join your party."),
        (else_try),
            (try_begin),
                (eq, reg5, 1),
                (str_store_string, s18, "@One volunteers to follow you."),
            (else_try),
                (str_store_string, s18, "@{reg5} volunteer to follow you."),
            (try_end),
        (try_end),
    ],
    
    [
    
       ("use_trophy_2",
        [
         (neg|party_slot_eq, "$current_town", slot_party_type, spt_castle),
         (call_script, "script_cf_center_bulid_need_level", "$current_town", slot_center_has_watch_tower, 1),
         (troop_slot_ge,"trp_player", slot_troop_player_class,5),
         (str_clear, s1),
         (str_clear, s18),
         (assign, ":hours_needed", 3),
         (party_get_slot, ":last_time", "$current_town", slot_center_player_enterprise_days_until_complete),
         (store_add, ":dest_time", ":last_time", ":hours_needed"),
         (store_current_hours, ":hours"),
         (str_store_item_name,s3,"itm_trophy_a"),
         (store_item_kind_count,":size","itm_trophy_a","trp_player"),
         (try_begin),
           (lt, ":hours", ":dest_time"),
           (store_sub, reg1, ":dest_time", ":hours"),
           (store_sub, reg2, reg1, 1),
           (str_store_string, s18, "@No one here seems to be willing to join your party."),
           (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
           (disable_menu_option),
        (else_try), 
           (str_store_string, s1, "@ "),
           (str_store_string, s18, "@use {s3} recruit_troop"),
           (lt, ":size", 1),
           (str_clear, s18),
           (str_store_string, s18, "@You don't have enough {s3}."),
           (disable_menu_option),
         (try_end),
         
         
        ],
        "{s18}{s1}.",
        [(troop_remove_items, "trp_player", "itm_trophy_a", 1), 
         (call_script, "script_update_volunteer_troops_in_village", "$current_town"),
         (call_script, "script_update_mercenary_lance_of_towns", "$current_town"),
         (store_current_hours, ":hours"),
         (party_set_slot, "$current_town", slot_center_player_enterprise_days_until_complete, ":hours"),
        ]),
          
      ("recruit_troops", 
       [
        #(store_faction_of_party, ":current_town_faction", "$current_town"),

        (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
        (try_begin),
          (party_slot_eq, "$current_town", slot_party_type, spt_castle),
          (this_or_next|le, ":town_lord", "trp_player"), # player or unassigned
          (troop_slot_eq, "trp_player", slot_troop_spouse, ":town_lord"),
          (assign, ":pass", 1),
        (else_try), 
          (eq, "$game_mode", game_mode_heroes),
          (this_or_next|party_slot_eq, "$current_town", slot_party_type, spt_town),
          (party_slot_eq, "$current_town", slot_party_type, spt_town),
          (store_faction_of_party, ":current_town_faction", "$current_town"),
          (call_script, "script_troop_get_relation_with_troop", "trp_player", ":town_lord"),
          (assign, ":relation", reg0),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":relation", ":persuasion_level"),
          (this_or_next|eq, ":current_town_faction", "$players_kingdom"),
          (ge, ":relation", 30),
          (assign, ":pass", 1),
        (else_try), 
          (neg|eq, "$game_mode", game_mode_heroes),
          (party_slot_eq, "$current_town", slot_party_type, spt_castle),
          (call_script, "script_troop_get_relation_with_troop", "trp_player", ":town_lord"),
          (assign, ":relation", reg0),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":relation", ":persuasion_level"),
          (ge, ":relation", 30),
          (assign, ":pass", 1),
        (else_try), 
          (neg|eq, "$game_mode", game_mode_heroes),
          (party_slot_eq, "$current_town", slot_party_type, spt_town),
          (call_script, "script_troop_get_relation_with_troop", "trp_player", ":town_lord"),
          (assign, ":relation", reg0),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":relation", ":persuasion_level"),
          (ge, ":relation", 0),
          (assign, ":pass", 1),
        (try_end),
        (eq, ":pass", 1),
         
         
       ],"Recruit troops.",
      [(assign, "$g_prsnt_param_1", -1),(assign, "$g_prsnt_param_2", 0),(start_presentation, "prsnt_town_recruit_troops"),]),
          
          
          
          
          
      ("town_recruit_them",
      [
        (store_faction_of_party, ":current_town_faction", "$current_town"),
        (eq, ":current_town_faction", "$players_kingdom"),
        (this_or_next|eq, "$player_has_homage", 1),
        (eq, "$players_kingdom", "fac_player_supporters_faction"),
      
        (party_get_slot, ":volunteer_troop", "$current_town", slot_center_volunteer_troop_type),
        (assign, reg12, ":volunteer_troop"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [
       (party_get_slot, ":volunteer_troop", "$current_town", slot_center_volunteer_troop_type),
       (call_script, "script_castle_recruit_volunteers_troop",":volunteer_troop"),(jump_to_menu,"mnu_town"),
      ]),

      ("center_build_order",
      [
        (this_or_next|eq,"$background_type",cb_noble),
        (this_or_next|eq,"$background_answer_2",cb2_page),
        (this_or_next|eq,"$background_answer_3",cb3_squire),
        (this_or_next|eq,"$background_answer_3",cb3_lady_in_waiting),
        (troop_slot_ge,"trp_player", slot_troop_player_class,6),
        (party_slot_eq, "$current_town", slot_center_has_order, 0),
        (party_slot_eq, "$current_town", slot_party_type, spt_town),
      ],
       "Build a custom order.",
       [(jump_to_menu, "mnu_center_build_order"),]),
      
      ("town_recruit_them",
      [
         (this_or_next|eq,"$character_gender",tf_male),
         (this_or_next|eq,"$character_gender",tf_ogre),
         (this_or_next|eq,"$character_gender",tf_vampire),
         (this_or_next|eq,"$character_gender",tf_dwarf),
         (eq,"$character_gender",tf_female),

        (party_slot_eq, "$current_town", slot_center_has_order, 1),
        (assign, reg12, "trp_custom_musket"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (call_script, "script_game_get_join_cost", reg12),
        (assign, reg13, reg0),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_custom_musket"),(jump_to_menu,"mnu_town"),]),
      
      ("town_recruit_them",
      [
         (this_or_next|eq,"$character_gender",tf_male),
         (this_or_next|eq,"$character_gender",tf_female_elf),
         (this_or_next|eq,"$character_gender",tf_male_elf),
         (this_or_next|eq,"$character_gender",tf_demon_human),
         (eq,"$character_gender",tf_female),
      
        (party_slot_eq, "$current_town", slot_center_has_order, 1),
        (assign, reg12, "trp_custom_horseman"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (call_script, "script_game_get_join_cost", reg12),
        (assign, reg13, reg0),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_custom_horseman"),(jump_to_menu,"mnu_town"),]),
      
      ("town_recruit_them",
      [
         (this_or_next|eq,"$character_gender",tf_female_elf),
         (this_or_next|eq,"$character_gender",tf_male_elf),
         (eq,"$character_gender",tf_female),
         
        (party_slot_eq, "$current_town", slot_center_has_order, 1),
        (troop_slot_ge,"trp_player", slot_troop_player_class,7),
        (assign, reg12, "trp_custom_recruit"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (call_script, "script_game_get_join_cost", reg12),
        (assign, reg13, reg0),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_custom_recruit"),(jump_to_menu,"mnu_town"),]),
      
      ("town_recruit_them",
      [
         (this_or_next|eq,"$character_gender",tf_male),
         (this_or_next|eq,"$character_gender",tf_dwarf),
         (this_or_next|eq,"$character_gender",tf_demon_human),
         (this_or_next|eq,"$character_gender",tf_ogre),
         (eq,"$character_gender",tf_vampire),
        (party_slot_eq, "$current_town", slot_center_has_order, 1),
        (troop_slot_ge,"trp_player", slot_troop_player_class,7),
        
        (assign, reg12, "trp_custom_footman"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (call_script, "script_game_get_join_cost", reg12),
        (assign, reg13, reg0),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_custom_footman"),(jump_to_menu,"mnu_town"),]),
      
      ("town_recruit_them",
      [
        (store_faction_of_party, ":current_town_faction", "$current_town"),
        (eq, ":current_town_faction", "$players_kingdom"),
        (party_slot_eq, "$current_town", slot_center_has_order, 1),
        (troop_slot_ge,"trp_player", slot_troop_player_class,9),
        (assign, reg12, "trp_custom_knight_1"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (call_script, "script_game_get_join_cost", reg12),
        (assign, reg13, reg0),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_custom_knight_1"),(jump_to_menu,"mnu_town"),]),

      ("town_recruit_them",
      [
        (store_faction_of_party, ":current_town_faction", "$current_town"),
        (eq, ":current_town_faction", "$players_kingdom"),
        (party_slot_eq, "$current_town", slot_center_has_order, 1),
        (troop_slot_ge,"trp_player", slot_troop_player_class,10),
        (assign, reg12, "trp_custom_cannon_man"),
        (call_script, "script_cf_current_town_recruit_volunteer_cost",reg12),
        (str_store_troop_name, s3, reg12),
        (call_script, "script_game_get_join_cost", reg12),
        (assign, reg13, reg0),
        (gt, reg10, 0),
        (gt, reg5, 0),
      ],
       "Recruit {reg10} {s3} ({reg11} denars).",
      [(call_script, "script_castle_recruit_volunteers_troop","trp_custom_cannon_man"),(jump_to_menu,"mnu_town"),]),


    ## CC
      ("regular_recruit",
      [
        (party_slot_eq, "$current_town", slot_center_is_besieged_by, -1),
        (store_faction_of_party, ":current_town_faction", "$current_town"),
        (eq, ":current_town_faction", "$players_kingdom"),
        (this_or_next|eq, "$player_has_homage", 1),
        (eq, "$players_kingdom", "fac_player_supporters_faction"),
        # relation
        (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
        (try_begin),
          (this_or_next|le, ":town_lord", "trp_player"), # player or unassigned
          (troop_slot_eq, "trp_player", slot_troop_spouse, ":town_lord"),
          (assign, ":relation", 0),
        (else_try), 
          (call_script, "script_troop_get_relation_with_troop", "trp_player", ":town_lord"),
          (assign, ":relation", reg0),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":relation", ":persuasion_level"),
        (try_end),
        (ge, ":relation", 0),
        
        # cost and hours
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":reinforcement_cost", reinforcement_cost_moderate),
        (assign, ":hours_needed", 36),
        (try_begin),
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
          (assign, ":reinforcement_cost", reinforcement_cost_easy),
          (assign, ":hours_needed", 48),
        (try_end),
        
        (try_begin),
          (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
          (assign, ":reinforcement_cost", reinforcement_cost_hard),
          (assign, ":hours_needed", 24),
        (try_end),
        
        (val_mul, ":reinforcement_cost", 2),
        (val_mul, ":hours_needed", 2),
        
        (party_get_slot, ":last_time", "$current_town", slot_town_last_recruit_time),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),
          (assign, "$temp", ":reinforcement_cost"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@One lance ready to join you, Recruit them"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_town_last_recruit_time, ":hours"),
        (assign, ":reinforcement_cost", "$temp"),
        (assign, ":recruit_rounds", 1),
        (try_begin),
          (party_slot_eq, "$current_town", slot_party_type, spt_town),
          (store_random_in_range, ":recruit_rounds", 1, 3),
        (try_end),
        
        # start to recruit
        (party_clear, "p_temp_party"),
        (try_for_range, ":unused", 0, ":recruit_rounds"),
          (store_troop_gold, ":gold", "trp_player"),
          (ge, ":gold", ":reinforcement_cost"),
          (troop_remove_gold, "trp_player", ":reinforcement_cost"),
          (call_script, "script_cf_reinforce_party", "p_temp_party"),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
      ]),
    ## CC
    ## CC
      ("town_merc_recruit",
      [
        (party_slot_eq, "$current_town", slot_party_type, spt_town),
        (troop_slot_ge,"trp_player", slot_troop_player_class,4),
        (party_get_slot, ":merc_lance_type", "$current_town", slot_center_merc_lance_type_1),
              
        # cost and hours
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":reinforcement_cost", reinforcement_cost_moderate),
        (try_begin), 
          (eq, "$g_game_difficulty", 4), 
          (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (else_try), 
          (eq, "$g_game_difficulty", 3), 
          (assign, ":reinforcement_cost", reinforcement_cost_moderate),
        (else_try), 
          (eq, "$g_game_difficulty", 1), 
          (assign, ":reinforcement_cost", reinforcement_cost_hard),
        (try_end),
        
        (val_mul, ":reinforcement_cost", 2),
        (try_begin), 
          (eq, "$g_use_special_item", 0),
          (this_or_next|eq, ":merc_lance_type", "pt_cannon_merc_1"),
          (eq, ":merc_lance_type", "pt_cannon_merc"),
          (assign, ":reinforcement_cost", 50000),
        (else_try), 
          (eq, "$g_use_special_item", 1),
          (ge, ":merc_lance_type", "pt_demon_merc_1"),
          (val_mul, ":reinforcement_cost", 8),
        (else_try), 
          (eq, "$g_use_special_item", 1),
          (ge, ":merc_lance_type", "pt_scottish_merc_fan"),
          (val_mul, ":reinforcement_cost", 3),
        (try_end),

        (party_get_slot, ":dest_time", "$current_town", slot_town_last_recruit_time_2),
        (store_current_hours, ":hours"),
        (try_begin),
          (gt, ":merc_lance_type", 0),
          (assign, reg1, ":reinforcement_cost"),
          (assign, "$temp", ":reinforcement_cost"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          
          (call_script, "script_get_merc_lance_text_to_s2", ":merc_lance_type"),
          (str_store_string, s18, "@One lance {s2} ready to join you, Recruit them {s1}"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money. {s1}"),
          (disable_menu_option),
        (else_try), 
          (le, ":merc_lance_type", 0),
          #(lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (str_store_string, s18, "@{!}{s18}{s1}."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}.",
      [
        (assign, ":reinforcement_cost", "$temp"),
        (party_get_slot, ":merc_lance_type", "$current_town", slot_center_merc_lance_type_1),
        (gt, ":merc_lance_type", 0),
        # start to recruit
        (party_clear, "p_temp_party"),
        (party_get_slot, ":merc_lance_type", "$current_town", slot_center_merc_lance_type_1),
        (store_troop_gold, ":gold", "trp_player"),
        (ge, ":gold", ":reinforcement_cost"),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", ":merc_lance_type"),
        (party_set_slot, "$current_town", slot_center_merc_lance_type_1, -1),
        (change_screen_exchange_with_party, "p_temp_party"),
      ]),
    ## CC
      ("town_merc_recruit",
      [
        (party_slot_eq, "$current_town", slot_party_type, spt_town),
        (troop_slot_ge,"trp_player", slot_troop_player_class,5),
        (assign, ":c", 0),
        (try_begin),
          (eq,"$background_type",cb_merchant),
          (val_add, ":c", 1),
        (try_end),
        (try_begin),
          (eq,"$background_answer_2",cb2_merchants_helper),
          (val_add, ":c", 1),
        (try_end),
        (try_begin),
          (eq,"$background_answer_3",cb3_peddler),
          (val_add, ":c", 1),
        (try_end),
        (this_or_next|ge, ":c", 2),
        (call_script, "script_cf_center_bulid_need_level", "$current_town", slot_center_has_watch_tower, 2),
        (party_get_slot, ":merc_lance_type", "$current_town", slot_center_merc_lance_type_2),
              
        # cost and hours
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":reinforcement_cost", reinforcement_cost_moderate),
        (try_begin), 
          (eq, "$g_game_difficulty", 4), 
          (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (else_try), 
          (eq, "$g_game_difficulty", 3), 
          (assign, ":reinforcement_cost", reinforcement_cost_moderate),
        (else_try), 
          (eq, "$g_game_difficulty", 1), 
          (assign, ":reinforcement_cost", reinforcement_cost_hard),
        (try_end),
        
        (val_mul, ":reinforcement_cost", 2),
                
        (try_begin), 
          (eq, "$g_use_special_item", 0),
          (this_or_next|eq, ":merc_lance_type", "pt_cannon_merc_1"),
          (eq, ":merc_lance_type", "pt_cannon_merc"),
          (assign, ":reinforcement_cost", 50000),
        (else_try), 
          (eq, "$g_use_special_item", 1),
          (ge, ":merc_lance_type", "pt_demon_merc_1"),
          (val_mul, ":reinforcement_cost", 5),
        (else_try), 
          (eq, "$g_use_special_item", 1),
          (ge, ":merc_lance_type", "pt_scottish_merc_fan"),
          (val_mul, ":reinforcement_cost", 3),
        (try_end),
                
        (party_get_slot, ":dest_time", "$current_town", slot_town_last_recruit_time_2),
        (store_current_hours, ":hours"),
        (try_begin),
          (gt, ":merc_lance_type", 0),
          (assign, reg1, ":reinforcement_cost"),
          (assign, "$temp_2", ":reinforcement_cost"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          
          (call_script, "script_get_merc_lance_text_to_s2", ":merc_lance_type"),
          (str_store_string, s18, "@One lance {s2} ready to join you, Recruit them {s1}"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money. {s1}"),
          (disable_menu_option),
        (else_try), 
          (le, ":merc_lance_type", 0),
          #(lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (str_store_string, s18, "@{!}{s18}{s1}."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}.",
      [
        (assign, ":reinforcement_cost", "$temp_2"),
        (party_get_slot, ":merc_lance_type", "$current_town", slot_center_merc_lance_type_2),
        (gt, ":merc_lance_type", 0),
        # start to recruit
        (party_clear, "p_temp_party"),
        (party_get_slot, ":merc_lance_type", "$current_town", slot_center_merc_lance_type_2),
        (store_troop_gold, ":gold", "trp_player"),
        (ge, ":gold", ":reinforcement_cost"),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", ":merc_lance_type"),
        (party_set_slot, "$current_town", slot_center_merc_lance_type_2, -1),
        (change_screen_exchange_with_party, "p_temp_party"),
      ]),
    ## CC
      ("noble_recruit",
      [
      
        (store_faction_of_party, ":current_town_faction", "$current_town"),
        (eq, ":current_town_faction", "$players_kingdom"),
      
        (party_slot_eq, "$current_town", slot_center_is_besieged_by, -1),
        #(party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
        (assign, ":relation", 0),
        # relation
        (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
        (try_begin),
          (this_or_next|le, ":town_lord", "trp_player"), # player or unassigned
          (troop_slot_eq, "trp_player", slot_troop_spouse, ":town_lord"),
          (assign, ":relation", 100),
        (else_try), 
          (call_script, "script_troop_get_relation_with_troop", "trp_player", ":town_lord"),
          (assign, ":relation", reg0),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":relation", ":persuasion_level"),
        (try_end),
        (ge, ":relation", 10),
        (this_or_next|party_slot_eq,  "$current_town", slot_center_has_manor, 1),
        (party_slot_eq, "$current_town", slot_party_type, spt_castle),
        # cost and hours
        (str_clear, s1),
        (str_clear, s18),
        
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 7),
        
        (party_get_slot, ":last_time", "$current_town", slot_town_last_recruit_time_2),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (str_store_string, s18, "@{!}{s18}{s1}."),
          (disable_menu_option),
        (else_try), 
          (str_store_string, s18, "@One noble lance ready to join you, Recruit them"),
          #(disable_menu_option),
        (try_end),
      ],
      "{s18}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_town_last_recruit_time_2, ":hours"),
        (assign, ":recruit_rounds", 1),

        ## :upper_limit_c
        # base limit
        (assign, ":upper_limit_c", 20), 
        # has barrack
        (try_begin),
          (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
          (party_slot_eq, "$current_town", slot_center_has_manor, 1),
          (val_add, ":upper_limit_c", 15),
        (try_end),
        
        # prosperity & relation
        (party_get_slot, ":prosperity", "$current_town", slot_town_prosperity),
        (party_get_slot, ":player_relation", "$current_town", slot_center_player_relation),
        (val_div, ":player_relation", 5),
        (val_div, ":prosperity", 10),
        (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
        (val_mul, ":persuasion_level", 2),
        (val_add, ":upper_limit_c", ":persuasion_level"),
        (val_add, ":upper_limit_c", ":player_relation"),
        (val_add, ":upper_limit_c", ":prosperity"),

        # castle: lower :upper_limit_c
        (try_begin),
          (party_slot_eq, "$current_town", slot_party_type, spt_castle),
          (val_mul, ":upper_limit_c", 2),
          (val_div, ":upper_limit_c", 3),
        (try_end),
        (store_mul, ":upper_limit_b", ":upper_limit_c", 2),

        # start to recruit
        (party_clear, "p_temp_party"),
        (call_script, "script_get_town_faction_for_recruiting", "$current_town"),
        (assign, ":party_faction", reg0),
        (try_for_range, ":unused", 0, ":recruit_rounds"),
          (store_random_in_range, ":rand", 0, 100),
          (try_begin),
            (lt, ":rand", ":upper_limit_c"),
            (call_script, "script_init_troop_leader_party_template", "trp_temp_troop", "p_temp_party"),
            (troop_get_slot, ":hero_party_template_d", "trp_temp_troop", slot_troop_hero_pt_d),
            (party_add_template, "p_temp_party", ":hero_party_template_d"),
          (else_try),
            (lt, ":rand", ":upper_limit_b"),
            (faction_get_slot, ":troop_1", ":party_faction", slot_faction_infantry_2_troop),
            (faction_get_slot, ":troop_2", ":party_faction", slot_faction_cavalry_2_troop),
            (faction_get_slot, ":troop_3", ":party_faction", slot_faction_cavalry_3_troop),
            (store_random_in_range,":troop_size_1", 3, 6),
            (store_random_in_range,":troop_size_2", 4, 8),
            (party_add_members,"p_temp_party",":troop_3", 1),
            (party_add_members,"p_temp_party",":troop_2",":troop_size_2"),
            (party_add_members,"p_temp_party",":troop_1",":troop_size_1"),
          (else_try),
            (faction_get_slot, ":troop_1", ":party_faction", slot_faction_cavalry_2_troop),
            (faction_get_slot, ":troop_2", ":party_faction", slot_faction_infantry_2_troop),
            (store_random_in_range,":troop_size", 4, 8),
            (party_add_members,"p_temp_party",":troop_1",":troop_size"),
            (store_random_in_range,":troop_size", 4, 8),
            (party_add_members,"p_temp_party",":troop_2",":troop_size"),
          (try_end),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
      ]),
    
      ("forget_it",[],"Forget it.",[(jump_to_menu,"mnu_town"),]),
    ],
  ),

  (
    "center_build_order",0,
    "After bodyguard Camp build, you can recruit Different kinds of custom troop, it need 1 {s1} and {reg5} gold",
    "none",
    [
     (assign, reg5, 50000),
     (str_store_item_name,s1,"itm_diamonds"),
     (try_begin),
      (eq,"$background_type",cb_noble),
      (eq,"$background_answer_2",cb2_page),
      (eq,"$background_answer_3",cb3_squire),
      (str_store_item_name,s1,"itm_sg_blood"),
     (try_end),
    ],
    [
    
      ("improve_cont",[(store_troop_gold, ":cur_gold", "trp_player"),
                       (ge, ":cur_gold", reg5),
                       (assign, ":need_item", "itm_diamonds"),
                       (try_begin),
                         (eq,"$background_type",cb_noble),
                         (eq,"$background_answer_2",cb2_page),
                         (eq,"$background_answer_3",cb3_squire),
                        (assign, ":need_item", "itm_sg_blood"),
                       (try_end),
                       (store_item_kind_count,":number",":need_item","trp_player"),
                       (ge, ":number", 1),
                       ],
       "Go on.", [(troop_remove_gold, "trp_player", reg5),
                       (assign, ":need_item", "itm_diamonds"),
                       (try_begin),
                         (eq,"$background_type",cb_noble),
                         (eq,"$background_answer_2",cb2_page),
                         (eq,"$background_answer_3",cb3_squire),
                        (assign, ":need_item", "itm_sg_blood"),
                       (try_end),
                  (troop_remove_items,"trp_player",":need_item",1),
                  (party_set_slot, "$current_town", slot_center_has_order, 1),
                  (jump_to_menu,"mnu_regular_recruit"),
                  ]),
                  
      ("forget_it",[],"Forget it.", [(jump_to_menu,"mnu_regular_recruit")]),

    ],
  ),

  (
    "village_hunt_down_fugitive_defeated",0,
    "A heavy blow from the fugitive sends you to the ground, and your vision spins and goes dark.\
 Time passes. When you open your eyes again you find yourself battered and bloody,\
 but luckily none of the wounds appear to be lethal.",
    "none",
    [],
    [
      ("continue",[],"Continue...",[(jump_to_menu, "mnu_village"),]),
    ],
  ),

  (
    "village_infest_bandits_result",mnf_scale_picture,
    "{s9}",
    "none",
    [(try_begin),
       (eq, "$g_battle_result", 1),
       (jump_to_menu, "mnu_village_infestation_removed"),
     (else_try),
       (str_store_string, s9, "@Try as you might, you could not defeat the bandits.\
 Infuriated, they raze the village to the ground to punish the peasants,\
 and then leave the burning wasteland behind to find greener pastures to plunder."),
       (set_background_mesh, "mesh_pic_looted_village"),
     (try_end),
    ],
    [
      ("continue",[],"Continue...",
       [(party_set_slot, "$g_encountered_party", slot_village_infested_by_bandits, 0),
        (party_set_slot, "$current_town", slot_center_lair_build_type, 0),
        (party_set_extra_text, "$current_town", "str_empty_string"),

        (call_script, "script_village_set_state",  "$current_town", svs_looted),
        (party_set_slot, "$current_town", slot_village_raid_progress, 0),
        (party_set_slot, "$current_town", slot_village_recover_progress, 0),
        (try_begin),
          (check_quest_active, "qst_eliminate_bandits_infesting_village"),
          (quest_slot_eq, "qst_eliminate_bandits_infesting_village", slot_quest_target_center, "$g_encountered_party"),
          (call_script, "script_change_player_relation_with_center", "$g_encountered_party", -5),
          (call_script, "script_fail_quest", "qst_eliminate_bandits_infesting_village"),
          (call_script, "script_end_quest", "qst_eliminate_bandits_infesting_village"),
        (else_try),
          (check_quest_active, "qst_deal_with_bandits_at_lords_village"),
          (quest_slot_eq, "qst_deal_with_bandits_at_lords_village", slot_quest_target_center, "$g_encountered_party"),
          (call_script, "script_change_player_relation_with_center", "$g_encountered_party", -4),
          (call_script, "script_fail_quest", "qst_deal_with_bandits_at_lords_village"),
          (call_script, "script_end_quest", "qst_deal_with_bandits_at_lords_village"),
        (else_try),
          (call_script, "script_change_player_relation_with_center", "$g_encountered_party", -3),
        (try_end),
        (jump_to_menu, "mnu_village"),]),
    ],
  ),


  (
    "village_infestation_removed",mnf_disable_all_keys,
    "In a battle worthy of song, you and your men drive the bandits out of the village, making it safe once more.\
 The villagers have little left in the way of wealth after their ordeal,\
 but they offer you all they can find.",
    "none",
    [(party_get_slot, ":bandit_troop", "$g_encountered_party", slot_village_infested_by_bandits),
     (party_set_slot, "$g_encountered_party", slot_village_infested_by_bandits, 0),
     (party_clear, "p_temp_party"),
     (party_add_members, "p_temp_party", ":bandit_troop", "$qst_eliminate_bandits_infesting_village_num_bandits"),
     (assign, "$g_strength_contribution_of_player", 50),
     (call_script, "script_party_give_xp_and_gold", "p_temp_party"),
     (try_begin),
       (check_quest_active, "qst_eliminate_bandits_infesting_village"),
       (quest_slot_eq, "qst_eliminate_bandits_infesting_village", slot_quest_target_center, "$g_encountered_party"),
       (call_script, "script_end_quest", "qst_eliminate_bandits_infesting_village"),
       #Add quest reward
       (call_script, "script_change_player_relation_with_center", "$g_encountered_party", 5),
     (else_try),
       (check_quest_active, "qst_deal_with_bandits_at_lords_village"),
       (quest_slot_eq, "qst_deal_with_bandits_at_lords_village", slot_quest_target_center, "$g_encountered_party"),
       (call_script, "script_succeed_quest", "qst_deal_with_bandits_at_lords_village"),
       (call_script, "script_change_player_relation_with_center", "$g_encountered_party", 3),
     (else_try),
     #Add normal reward
       (call_script, "script_change_player_relation_with_center", "$g_encountered_party", 4),
     (try_end),
   
     (party_get_slot, ":merchant_troop", "$current_town", slot_town_elder),
     (try_for_range, ":slot_no", num_equipment_kinds ,max_inventory_items + num_equipment_kinds),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 70),
        (troop_set_inventory_slot, ":merchant_troop", ":slot_no", -1),
     (try_end),
    ],
    [
      ("village_bandits_defeated_accept",[],"Take it as your just due.",[(jump_to_menu, "mnu_village"),
                                                                         (party_get_slot, ":merchant_troop", "$current_town", slot_town_elder),
                                                                         (troop_sort_inventory, ":merchant_troop"),
                                                                         (change_screen_loot, ":merchant_troop"),
                                                                       ]),
                                                                       
      ("village_bandits_defeated_cont",[],  "Refuse, stating that they need these items more than you do.",
	  [	(call_script, "script_change_player_relation_with_center", "$g_encountered_party", 3),
        (call_script, "script_change_player_honor", 1),	  
        (jump_to_menu, "mnu_village")]),
    ],
  ),

  (
    "center_manage_advance",0,
    "{s20}^{s19}^{reg6?^^You are\
 currently building {s7}. The building will be completed after {reg8} day{reg9?s:}.:}.{reg10} hour",
    "none",
    [(assign, ":num_improvements", 0),
     (str_clear, s18),
     (str_store_party_name, s17, "$g_encountered_party"),
     
     (try_begin),
       (party_get_slot, ":village_type", "$g_encountered_party", slot_center_village_type),
       (try_begin),
         (eq, ":village_type", village_type_basic),
         (str_store_string, s20, "@The {s17} has Nothing special."),
       (else_try),
         (eq, ":village_type", village_type_mine),
         (str_store_string, s20, "@The {s17} has the mine."),
       (else_try),
         (eq, ":village_type", village_type_garden),
         (str_store_string, s20, "@The {s17} has the forest."),
       (else_try),
         (eq, ":village_type", village_type_graveyard),
         (str_store_string, s20, "@The {s17} was the battlefield."),
       (try_end),
     (try_end),
     
     (try_begin),
       (party_get_slot, ":cur_improvement", "$g_encountered_party", slot_center_player_enterprise),
       (gt, ":cur_improvement", 0),
       (call_script, "script_get_improvement_details_2", ":cur_improvement"),
       (str_store_string, s18, "@{!}{s0}"),
     (try_end),
     
     
     (try_begin),
       (eq,  ":num_improvements", 0),
       (str_store_string, s19, "@The {s17} has no improvements."),
     (else_try),
       (str_store_string, s19, "@The {s17} has improvements:{s18}."),
     (try_end),
     
     
     (assign, reg6, 0),
     (try_begin),
       (party_get_slot, ":finish_time", "$g_encountered_party", slot_center_player_enterprise_days_until_complete),
       (store_current_hours, ":cur_hours"),
       (lt, ":cur_hours", ":finish_time"),
       (assign, reg6, 1),
       
       (party_get_slot, ":cur_improvement", "$g_encountered_party", slot_center_player_enterprise),
       (gt, ":cur_improvement", 0),
       (call_script, "script_get_improvement_details_2", ":cur_improvement"),
       (str_store_string, s7, s0),
       (store_div, reg8, ":finish_time", 24),
       (store_mod, reg10, ":finish_time", 24),
       #(val_max, reg8, 1),
       (store_sub, reg9, reg8, 1),
       (val_max, reg9, 0),
     (try_end),
     
     
     
        (try_begin),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Den_of_Thieves),
          (set_background_mesh, "mesh_pic_market_2"),
          
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Elemental_Conflux),
          (set_background_mesh, "mesh_pic_village_Elemental_Conflux"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Graveyard2),
          (set_background_mesh, "mesh_lair_Graveyard"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Nord_Warrior_Tomb),
          (set_background_mesh, "mesh_pic_village_Warrior_Tomb"),
          
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Ruins),
          (set_background_mesh, "mesh_pic_camp_orc_camp"),
          
          
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Crystal_Mine),
          (set_background_mesh, "mesh_pic_village_Crystal_Mine"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Ore_Pit),
          (set_background_mesh, "mesh_pic_village_ore_pit"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Imp_Pit),
          (set_background_mesh, "mesh_pic_village_ore_pit"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Silver_Mine),
          (set_background_mesh, "mesh_pic_village_ore_pit"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Gold_Mine),
          (set_background_mesh, "mesh_pic_village_gold_mine"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Mine),
          (set_background_mesh, "mesh_pic_village_mine"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Gem_Mine),
          (set_background_mesh, "mesh_pic_village_gem_mine"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Dream_Teacher),
          (set_background_mesh, "mesh_pic_village_Stone_of_Enlightenment"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Order_of_Paladins),
          (set_background_mesh, "mesh_pic_village_Order_of_Paladins"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Transept_of_Heaven),
          (set_background_mesh, "mesh_pic_village_Transept_of_Heaven"),
          
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Golem_Factory),
          (set_background_mesh, "mesh_pic_Mage_summon"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Mage_Housings),
          (set_background_mesh, "mesh_pic_camp_Mage_Housings"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Arcane_Forge),
          (set_background_mesh, "mesh_pic_Arcane_Forge"),

        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Imp_Cache2),
          #(set_background_mesh, "mesh_pic_Mage_summon"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Altar_of_Chaos),
          (set_background_mesh, "mesh_pic_castle_undead"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Heart_of_Pit),
          (set_background_mesh, "mesh_lair_chaos_castle"),

        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Mystical_Garden),
          (set_background_mesh, "mesh_pic_forest"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Stone_Ring),
          (set_background_mesh, "mesh_pic_camp_Dragon_Shrine"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Dragon_Shrine),
          (set_background_mesh, "mesh_pic_camp_stone_1"),

        #(else_try),
          #(party_slot_eq, "$current_town", slot_center_player_enterprise, Necromancy_Amplifier),
          #(set_background_mesh, "mesh_pic_recruits_undead"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Blood_Tank),
          (set_background_mesh, "mesh_lair_Grave"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Sepulcher),
          (set_background_mesh, "mesh_lair_Ruins"),

        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Hunters_Cabins),
          (set_background_mesh, "mesh_pic_camp_Dragon_Shrine"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Dragon_Cliffs),
          (set_background_mesh, "mesh_pic_camp_Mystical_Garden"),


        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Warriors_Tents),
          (set_background_mesh, "mesh_pic_village_Warriors_Tents"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Behemoth_Crag),
          (set_background_mesh, "mesh_lair_cave"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Troll_Cave),
          (set_background_mesh, "mesh_lair_cave"),

        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Subterranean_Gate),
          (set_background_mesh, "mesh_lair_cave"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Hall_of_Shadows),
          (set_background_mesh, "mesh_pic_castle_undead"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Dragon_Spire),
          (set_background_mesh, "mesh_lair_town_002"),

        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Runic_Chapel),
          (set_background_mesh, "mesh_lair_keep2"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Lava_Fissure),
          (set_background_mesh, "mesh_lair_keep2"),

        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Refugee_Camp),
          (set_background_mesh, "mesh_lair_keep3"),

        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Monastery),
          (set_background_mesh, "mesh_pic_lost_town"),

        #(else_try),
        #  (party_slot_eq, "$current_town", slot_center_player_enterprise, Alchemists_Lab),
        #  (set_background_mesh, "mesh_pic_market_1"),
          
        (else_try),
          (set_background_mesh, "mesh_pic_book_1"),
        (try_end),
     
    ],
    [
    
     ("mystic_merchant",
      [
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Alchemists_Lab),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Imp_Pit),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Crystal_Mine),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Ore_Pit),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Silver_Mine),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Gold_Mine),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Mine),
        (party_slot_eq, "$current_town", slot_center_player_enterprise, Gem_Mine),

        (str_clear, s1),
        (str_clear, s18),
        
        (party_get_slot, ":cur_improvement", "$current_town", slot_center_player_enterprise),
        (gt, ":cur_improvement", 0),
        (call_script, "script_get_improvement_details_2", ":cur_improvement"),
        
        (party_get_slot, ":improvement_out_put", "$current_town", slot_center_player_enterprise_production_order),
        (store_free_inventory_capacity, ":space", "trp_player"),

        (party_get_slot, ":last_time", "$current_town", slot_center_player_enterprise_days_until_complete),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":last_time"),
          (store_sub, reg1, ":last_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@currently building {s0}, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (le, ":improvement_out_put", 0),
          (str_store_string, s18, s1),
          (str_store_string, s1, "@ but not enough out_put"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":improvement_out_put"),
          (str_store_string, s18, s1),
          (str_store_string, s1, "@ ({reg1} out_put)"),
          (lt, ":space", 2),
          (str_clear, s1),
          (str_store_string, s1, "@You don't have enough space."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (party_get_slot, ":improvement_level", "$current_town", slot_center_player_enterprise_production_order),
        (gt, ":improvement_level", 0),
        (val_add, ":improvement_level", -1), 
        (party_set_slot, "$current_town", slot_center_player_enterprise_production_order, ":improvement_level"),
        (try_begin),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Alchemists_Lab),
          (call_script, "script_change_player_necro_item","itm_mercury",2),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Imp_Pit),
          (troop_add_items,"trp_player","itm_sulfur",2),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Crystal_Mine),
          (troop_add_items,"trp_player","itm_crystal",2),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Ore_Pit),
          (store_random_in_range, ":var_1", 0, 40),
          (try_begin),
              (is_between, ":var_1", 0, 2),#2
              (call_script, "script_change_player_necro_item", "itm_trophy_a",2),
          (else_try),
              (is_between, ":var_1", 2, 6),#4
              (call_script, "script_change_player_necro_item", "itm_silver",2),
          (else_try),
              (is_between, ":var_1", 6, 14),#8
              (call_script, "script_change_player_necro_item", "itm_crystal",2),
          (else_try),
              (is_between, ":var_1", 14, 22),#8
              (call_script, "script_change_player_necro_item", "itm_sulfur",2),
          (else_try),
              (is_between, ":var_1", 22, 30),#8
              (call_script, "script_change_player_necro_item", "itm_mercury",2),
              (troop_add_gold, "trp_player", 3000),
          (else_try),
              (troop_add_items, "trp_player", "itm_iron",2),
              (troop_add_gold, "trp_player", 3000),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Silver_Mine),
          (troop_add_items,"trp_player","itm_silver",2),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Gold_Mine),
          (troop_add_items,"trp_player","itm_trophy_a",2),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Mine),
          (store_random_in_range, ":var_1", 0, 160),
          (try_begin),
              (is_between, ":var_1", 0, 2),#2
              (troop_add_items, "trp_player", "itm_diamonds",1),
          (else_try),
              (is_between, ":var_1", 2, 6),#4
              (troop_add_items, "trp_player", "itm_trophy_b",1),
          (else_try),
              (is_between, ":var_1", 6, 10),#4
              (troop_add_items, "trp_player", "itm_sg_blood",1),
          (else_try),
              (is_between, ":var_1", 10, 18),#8
              (call_script, "script_change_player_necro_item", "itm_trophy_a",2),
          (else_try),
              (is_between, ":var_1", 18, 34),#16
              (call_script, "script_change_player_necro_item", "itm_silver",2),
          (else_try),
              (is_between, ":var_1", 34, 50),#16
              (call_script, "script_change_player_necro_item", "itm_crystal",2),
          (else_try),
              (is_between, ":var_1", 50, 82),#32
              (troop_add_items, "trp_player", "itm_iron",2),
              (troop_add_gold, "trp_player", 3000),
          (else_try),
              (is_between, ":var_1", 82, 114),#32
              (troop_add_items, "trp_player", "itm_salt",2),
              (troop_add_gold, "trp_player", 3000),
          (else_try),
              (is_between, ":var_1", 114, 130),#16
              (call_script, "script_change_player_necro_item", "itm_sulfur",2),
          (else_try),
              (call_script, "script_change_player_necro_item", "itm_clay",2),
              (troop_add_gold, "trp_player", 5000),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Gem_Mine),
          (store_random_in_range, ":rand", 0, 3), 
          (store_random_in_range, ":rand_2", 0, 10), 
          (try_begin),
            (eq, ":rand", 0),
            (try_begin),
              (is_between, ":rand_2", 1, 4),
              (assign, ":item","itm_sg_human_big"),
            (else_try),
              (eq, ":rand_2", 4),
              (assign, ":item","itm_sg_purple_big"),
            (else_try),
              (eq, ":rand_2", 5),
              (assign, ":item","itm_sg_black_big"),
            (else_try),
              (eq, ":rand_2", 6),
              (assign, ":item","itm_sg_green_big"),
            (else_try),
              (eq, ":rand_2", 7),
              (assign, ":item","itm_sg_orange_big"),
            (else_try),
              (eq, ":rand_2", 8),
              (assign, ":item","itm_sg_yellow_big"),
            (else_try),
              (eq, ":rand_2", 9),
              (assign, ":item","itm_sg_blue_big"),
            (else_try),
              (assign, ":item","itm_diamonds"),
              (troop_add_item, "trp_player", ":item"),
            (try_end),
            (call_script, "script_change_player_necro_item",":item",1),
          (else_try),
            (try_begin),
              (is_between, ":rand_2", 1, 4),
              (assign, ":item","itm_sg_human_small"),
            (else_try),
              (eq, ":rand_2", 4),
              (assign, ":item","itm_sg_purple_small"),
            (else_try),
              (eq, ":rand_2", 5),
              (assign, ":item","itm_sg_black_small"),
            (else_try),
              (eq, ":rand_2", 6),
              (assign, ":item","itm_sg_green_small"),
            (else_try),
              (eq, ":rand_2", 7),
              (assign, ":item","itm_sg_orange_small"),
            (else_try),
              (eq, ":rand_2", 8),
              (assign, ":item","itm_sg_yellow_small"),
            (else_try),
              (eq, ":rand_2", 9),
              (assign, ":item","itm_sg_blue_small"),
            (else_try),
              (assign, ":item","itm_diamonds"),
              (troop_add_items, "trp_player", ":item", ":rand"),
            (try_end),
            (try_begin),
              (eq, ":rand", 1),
              (call_script, "script_change_player_necro_item",":item",1),
            (else_try),
              (eq, ":rand", 2),
              (call_script, "script_change_player_necro_item",":item",2),
            (try_end),
          (try_end),
          (troop_add_gold, "trp_player", 1000),
        (try_end),
     ]),
     
     ("recruit_nord",
      [
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Golem_Factory),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Nord_Warrior_Tomb),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Subterranean_Gate),
        
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Elemental_Conflux),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Graveyard2),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Mystical_Garden),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Ruins),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Den_of_Thieves),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Imp_Cache2),
        (party_slot_eq, "$current_town", slot_center_player_enterprise, Refugee_Camp),

        (str_clear, s1),
        (str_clear, s18),
        
        (party_get_slot, ":cur_improvement", "$current_town", slot_center_player_enterprise),
        (gt, ":cur_improvement", 0),
        (call_script, "script_get_improvement_details_2", ":cur_improvement"),
        
        (party_get_slot, ":improvement_out_put", "$current_town", slot_center_player_enterprise_production_order),

        (party_get_slot, ":last_time", "$current_town", slot_center_player_enterprise_days_until_complete),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":last_time"),
          (store_sub, reg1, ":last_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@currently building {s0}, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":improvement_out_put"),
          (str_store_string, s18, s1),
          (str_store_string, s1, "@ ({reg1} out_put)"),
          (le, ":improvement_out_put", 0),
          (str_clear, s1),
          (str_store_string, s1, "@ but not enough out_put troop"),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (party_get_slot, ":improvement_level", "$current_town", slot_center_player_enterprise_production_order),
        (gt, ":improvement_level", 0),
        (val_add, ":improvement_level", -1), 
        (party_set_slot, "$current_town", slot_center_player_enterprise_production_order, ":improvement_level"),
        (party_clear, "p_temp_party"),
        
        
        (try_begin),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Golem_Factory),
          (party_add_members,"p_temp_party","trp_golem_1",5),
          (party_add_members,"p_temp_party","trp_golem_3",5),
          #(party_add_members,"p_temp_party","trp_golem_2",2),
          (party_add_members,"p_temp_party","trp_golem_4",3),
          #(try_for_range, ":unused", 0, 15),
          #  (store_random_in_range, ":rand", "trp_golem_1", "trp_sissofbattle"),
          #  (party_add_members,"p_temp_party",":rand",1),
          #(try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Elemental_Conflux),
          (try_for_range, ":unused", 0, 15),
            (store_random_in_range, ":rand", "trp_air_elemental", "trp_human_magic_1"),
            (party_add_members,"p_temp_party",":rand",1),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Graveyard2),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 7),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_se_tribesman",20),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_zombie_1",20),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_skeleton",20),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_mummy_1",15),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_ghost",10),
            (else_try),
              (party_add_members,"p_temp_party","trp_vampire_assassin",5),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Nord_Warrior_Tomb),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 2, 6),
            (try_begin),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_draugr_1",15),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_draugr_2",10),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_draugr_3",5),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_draugr_lord",2),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Mystical_Garden),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 2, 6),
            (try_begin),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_dryad",10),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_pixie",10),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_ent_1",1),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_ent_2",1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Subterranean_Gate),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 0, 5),
            (try_begin),
              (eq,":rand",0),
              (party_add_members,"p_temp_party","trp_rat_bomber2",5),
            (else_try),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_rat_bomber",10),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_rat_1",15),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_medusa_1",4),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_undead_magic_1",4),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Ruins),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 2, 6),
            (try_begin),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_goblin_bomber2",5),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_goblin_bomber",10),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_cyclop",1),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_cyclop",1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Den_of_Thieves),
          (try_for_range, ":unused", 0, 1),
            (store_random_in_range, ":rand", 2, 6),
            (try_begin),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_assassin",15),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_sarranid_assasin",10),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_drowelf_assassin_2",5),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_drowelf_assassin_3",2),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Imp_Cache2),
          (try_for_range, ":unused", 0, 1),
            (store_random_in_range, ":rand", 1, 8),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_undead_magic_1",10),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_demon_1",15),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_demon_1_2",10),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_demon_2",5),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_demon_3",5),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_demon_4",5),
            (else_try),
              (eq,":rand",6),
              (party_add_members,"p_temp_party","trp_inferno",5),
            (else_try),
              (eq,":rand",7),
              (party_add_members,"p_temp_party","trp_huge_inferno",2),
            (else_try),
              (party_add_members,"p_temp_party","trp_demon_human_5_2",2),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Refugee_Camp),
          (try_for_range, ":unused", 0, 7),
            (store_random_in_range, ":rand", village_troops_begin, kingdom_troops_end),
            (party_add_members,"p_temp_party",":rand",2),
          (try_end),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Blood_Tank),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Hunters_Cabins),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Stone_Ring),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Hall_of_Shadows),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Runic_Chapel),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Altar_of_Chaos),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Mage_Housings),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Monastery),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Order_of_Paladins),
        (party_slot_eq, "$current_town", slot_center_player_enterprise, Warriors_Tents),

        (str_clear, s1),
        (str_clear, s18),
        
        (party_get_slot, ":cur_improvement", "$current_town", slot_center_player_enterprise),
        (gt, ":cur_improvement", 0),
        (call_script, "script_get_improvement_details_2", ":cur_improvement"),
        
        (party_get_slot, ":improvement_out_put", "$current_town", slot_center_player_enterprise_production_order),

        (party_get_slot, ":last_time", "$current_town", slot_center_player_enterprise_days_until_complete),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":last_time"),
          (store_sub, reg1, ":last_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@currently building {s0}, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":improvement_out_put"),
          (str_store_string, s18, s1),
          (str_store_string, s1, "@ ({reg1} out_put)"),
          (le, ":improvement_out_put", 0),
          (str_clear, s1),
          (str_store_string, s1, "@ but not enough out_put troop"),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (party_get_slot, ":improvement_level", "$current_town", slot_center_player_enterprise_production_order),
        (gt, ":improvement_level", 0),
        (val_add, ":improvement_level", -1), 
        (party_set_slot, "$current_town", slot_center_player_enterprise_production_order, ":improvement_level"),
        (party_clear, "p_temp_party"),
        
        (try_begin),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Blood_Tank),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 7),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_vampire_assassin",8),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_vampire_2",5),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_undead_horse_1",5),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_undead_horse_3",2),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_vampire_4",2),
            (else_try),
              (party_add_members,"p_temp_party","trp_lich_1",3),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Hunters_Cabins),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 7),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_grandelf_recruit",10),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_grandelf_marksman",7),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_grandelf_swordman",7),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_grandelf_arcane_guard",3),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_grandelf_guard",3),
            (else_try),
              (party_add_members,"p_temp_party","trp_grandelf_cavalry",3),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Stone_Ring),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 7),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_woodelf_recruit",10),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_woodelf_hunter",7),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_woodelf_spearman",7),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_woodelf_sharpshooter",3),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_woodelf_sworddancer",3),
            (else_try),
              (party_add_members,"p_temp_party","trp_woodelf_cavalry",3),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Hall_of_Shadows),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 7),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_drowelf_recruit",8),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_drowelf_infantry_1",4),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_drowelf_raider_1",4),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_drowelf_assassin_1",6),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_minotaur_3",2),
            (else_try),
              (party_add_members,"p_temp_party","trp_minotaur_1",8),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Runic_Chapel),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 7),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_dwarf_miner",15),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_dwarf_veteran",10),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_dwarf_musketeer_2_1",8),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_dwarf_guard_1",7),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_dwarf_guard_2",7),
            (else_try),
              (party_add_members,"p_temp_party","trp_giant_1",10),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Altar_of_Chaos),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 7),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_mamluke_horseman_3",5),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_demon_human_1",15),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_demon_magic_2",10),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_demon_human_3",10),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_janissary_infantry_2",5),
            (else_try),
              (party_add_members,"p_temp_party","trp_chaos_warrior_2",5),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Mage_Housings),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 5),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_human_magic_1",8),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_polish_which_1",6),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_human_magic_3",4),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_human_magic_4",2),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Order_of_Paladins),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 5),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_sissofbattle",10),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_clerics",10),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_teutonic_dis_halbbruder",10),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_hospitaller_knight",5),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Warriors_Tents),
          (try_for_range, ":unused", 0, 3),
            (store_random_in_range, ":rand", 1, 8),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_orc",15),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_orc_warrior",10),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_orc_blackorc",7),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_orc_blackorc_boss",3),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_orc_veteran_boar",7),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_orc_arrer_boy",7),
            (else_try),
              (eq,":rand",6),
              (party_add_members,"p_temp_party","trp_ogre_young",10),
            (else_try),
              (eq,":rand",7),
              (party_add_members,"p_temp_party","trp_ogre_war",4),
            (else_try),
              (party_add_members,"p_temp_party","trp_ogre_mega",3),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Monastery),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 7),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_lich_dragon",2),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_draugr_lord",3),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_scottish_swordman",6),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_scottish_guard",6),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_lich_3",2),
            (else_try),
              (party_add_members,"p_temp_party","trp_lizard_dragon",3),
            (try_end),
          (try_end),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Sepulcher),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Dragon_Cliffs),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Dragon_Shrine),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Dragon_Spire),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Lava_Fissure),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Heart_of_Pit),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Arcane_Forge),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Behemoth_Crag),
        (this_or_next|party_slot_eq, "$current_town", slot_center_player_enterprise, Transept_of_Heaven),
        (party_slot_eq, "$current_town", slot_center_player_enterprise, Troll_Cave),

        (str_clear, s1),
        (str_clear, s18),
        
        (party_get_slot, ":cur_improvement", "$current_town", slot_center_player_enterprise),
        (gt, ":cur_improvement", 0),
        (call_script, "script_get_improvement_details_2", ":cur_improvement"),
        
        (party_get_slot, ":improvement_out_put", "$current_town", slot_center_player_enterprise_production_order),

        (party_get_slot, ":last_time", "$current_town", slot_center_player_enterprise_days_until_complete),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":last_time"),
          (store_sub, reg1, ":last_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@currently building {s0}, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":improvement_out_put"),
          (str_store_string, s18, s1),
          (str_store_string, s1, "@ ({reg1} out_put)"),
          (le, ":improvement_out_put", 0),
          (str_clear, s1),
          (str_store_string, s1, "@ but not enough out_put troop"),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (party_get_slot, ":improvement_level", "$current_town", slot_center_player_enterprise_production_order),
        (gt, ":improvement_level", 0),
        (val_add, ":improvement_level", -1), 
        (party_set_slot, "$current_town", slot_center_player_enterprise_production_order, ":improvement_level"),
        (party_clear, "p_temp_party"),
        
        
        (try_begin),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Sepulcher),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 0, 2),
            (try_begin),
              (eq,":rand",0),
              (party_add_members,"p_temp_party","trp_bone_dragon",1),
            (else_try),
              (party_add_members,"p_temp_party","trp_wraith",1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Dragon_Cliffs),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 0, 2),
            (try_begin),
              (eq,":rand",0),
              (party_add_members,"p_temp_party","trp_grandelf_mage_1",5),
            (else_try),
              (party_add_members,"p_temp_party","trp_gold_dragon",1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Dragon_Shrine),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 0, 2),
            (try_begin),
              (eq,":rand",0),
              (party_add_members,"p_temp_party","trp_woodelf_druid_1",4),
            (else_try),
              (party_add_members,"p_temp_party","trp_green_dragon",1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Dragon_Spire),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 0, 2),
            (try_begin),
              (eq,":rand",0),
              (party_add_members,"p_temp_party","trp_drowelf_which_1",4),
            (else_try),
              (party_add_members,"p_temp_party","trp_red_dragon",1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Lava_Fissure),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 0, 2),
            (try_begin),
              (eq,":rand",0),
              (party_add_members,"p_temp_party","trp_dwarf_musketeer_2_2",5),
            (else_try),
              (party_add_members,"p_temp_party","trp_fire_dragon",1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Heart_of_Pit),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 7),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_huge_inferno",2),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_demon_5",1),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_mummy_4",2),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_demon_6",1),
            (else_try),
              (eq,":rand",5),
              (party_add_members,"p_temp_party","trp_demon_8",3),
            (else_try),
              (party_add_members,"p_temp_party","trp_demon_human_5_2",3),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Arcane_Forge),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 1, 5),
            (try_begin),
              (eq,":rand",1),
              (party_add_members,"p_temp_party","trp_we_recruit",4),
            (else_try),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_golem_2",3),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_titan_0",2),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_titan_1",1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Transept_of_Heaven),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 2, 5),
            (try_begin),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_angle",1),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_angle",1),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_archangle",1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Behemoth_Crag),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 2, 5),
            (try_begin),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_demon_4_2",1),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_demon_4_2",1),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_demon_4_3",1),
            (try_end),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_player_enterprise, Troll_Cave),
          (try_for_range, ":unused", 0, 2),
            (store_random_in_range, ":rand", 2, 5),
            (try_begin),
              (eq,":rand",2),
              (party_add_members,"p_temp_party","trp_troll_1",1),
            (else_try),
              (eq,":rand",3),
              (party_add_members,"p_temp_party","trp_troll_2",1),
            (else_try),
              (eq,":rand",4),
              (party_add_members,"p_temp_party","trp_troll_3",1),
            (try_end),
          (try_end),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

      ("remove_center_build",
      [
       (neg|party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_get_slot, ":enterprise", "$g_encountered_party", slot_center_player_enterprise),
       (neg|eq, ":enterprise", 0),
       (call_script, "script_get_improvement_details_2", ":enterprise"), 
      ],
       "remove {s0}.",
       [
         (party_set_slot, "$g_encountered_party", slot_center_player_enterprise, 0),
         (party_set_slot, "$g_encountered_party", slot_center_player_enterprise_days_until_complete, 0),
         (jump_to_menu,"mnu_center_manage_advance"),
       ]),
    
      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq, "$background_answer_2",cb2_apprentice),
       (this_or_next|eq,"$background_answer_3",cb3_craftsman),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Alchemists_Lab), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Alchemists_Lab),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq,"$character_gender",tf_female_elf),
       (this_or_next|eq,"$background_type",cb_thief),
       (this_or_next|eq,"$background_answer_2",cb2_urchin),
       (ge, ":max_skill", 8),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Den_of_Thieves), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Den_of_Thieves),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Refugee_Camp), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Refugee_Camp),(jump_to_menu, "mnu_center_improve_advance"),]),
       
      ("center_build",
      [(eq, reg6, 0),
      
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (eq, "$background_answer_2",cb2_apprentice),
       (eq,"$background_answer_3",cb3_craftsman),
       (ge, ":max_skill", 2),
       (this_or_next|party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Golem_Factory), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Golem_Factory),(jump_to_menu, "mnu_center_improve_advance"),]),
   
      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq,"$character_gender",tf_dwarf),
       (ge, ":max_skill", 4),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (call_script, "script_get_improvement_details_2", Crystal_Mine), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Crystal_Mine),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
      
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (call_script, "script_get_improvement_details_2", Ore_Pit), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Ore_Pit),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       
       (this_or_next|eq,"$character_gender",tf_male_elf),
       (this_or_next|eq,"$character_gender",tf_female_elf),
       (this_or_next|eq,"$character_gender",tf_dwarf),
       (ge, ":max_skill", 5),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (call_script, "script_get_improvement_details_2", Silver_Mine), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Silver_Mine),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq,"$character_gender",tf_male_elf),
       (this_or_next|eq,"$character_gender",tf_female_elf),
       (this_or_next|eq,"$character_gender",tf_dwarf),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (call_script, "script_get_improvement_details_2", Gold_Mine), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Gold_Mine),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (this_or_next|eq,"$character_gender",tf_dwarf),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (call_script, "script_get_improvement_details_2", Mine), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Mine),(jump_to_menu, "mnu_center_improve_advance"),]),
       
      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq,"$character_gender",tf_demon_human),
       (ge, ":max_skill", 4),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_graveyard),
       (call_script, "script_get_improvement_details_2", Imp_Pit), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Imp_Pit),(jump_to_menu, "mnu_center_improve_advance"),]),


      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_necromancy"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq,"$character_gender",tf_vampire),
       (ge, ":max_skill", 1),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_graveyard),
       (call_script, "script_get_improvement_details_2", Necromancy_Amplifier), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Necromancy_Amplifier),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_necromancy"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq,"$character_gender",tf_vampire),
       (ge, ":max_skill", 4),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_graveyard),
       (call_script, "script_get_improvement_details_2", Graveyard2), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Graveyard2),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_necromancy"),
       (assign, ":max_skill", reg0),
       (call_script,"script_get_village_type","$g_encountered_party"),
       (assign,":village_type",reg0),
       (eq,":village_type",snow_village),
       (ge, ":max_skill", 2),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (call_script, "script_get_improvement_details_2", Nord_Warrior_Tomb), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Nord_Warrior_Tomb),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_beast"),
       (assign, ":relation_need", 10),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 5),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (call_script, "script_get_improvement_details_2", Subterranean_Gate), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Subterranean_Gate),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_demon"),
       (assign, ":relation_need", 10),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq,"$character_gender",tf_demon_human),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_graveyard),
       (call_script, "script_get_improvement_details_2", Imp_Cache2), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Imp_Cache2),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq,"$character_gender",tf_male_elf),
       (this_or_next|eq,"$character_gender",tf_female_elf),
       (ge, ":max_skill", 8),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (this_or_next|party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_graveyard),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_garden),
       (call_script, "script_get_improvement_details_2", Gem_Mine), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Gem_Mine),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 8),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (this_or_next|party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_graveyard),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_garden),
       (call_script, "script_get_improvement_details_2", Dream_Teacher), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Dream_Teacher),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq, "$background_answer_2",cb2_apprentice),
       (ge, ":max_skill", 2),
       (eq,"$background_answer_3",cb3_student),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_garden),
       (call_script, "script_get_improvement_details_2", Elemental_Conflux), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Elemental_Conflux),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq,"$character_gender",tf_male_elf),
       (this_or_next|eq,"$character_gender",tf_female_elf),
       (ge, ":max_skill", 3),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_garden),
       (call_script, "script_get_improvement_details_2", Mystical_Garden), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Mystical_Garden),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_orc"),
       (assign, ":relation_need", 10),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (this_or_next|eq,"$character_gender",tf_ogre),
       (ge, ":max_skill", 4),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_garden),
       (call_script, "script_get_improvement_details_2", Ruins), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Ruins),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_undeads_2"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Blood_Tank), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Blood_Tank),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_undeads_2"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (eq,"$character_gender",tf_vampire),
       (call_script, "script_get_max_skill_of_player_party", "skl_necromancy"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_graveyard),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Sepulcher), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Sepulcher),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_elf"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Hunters_Cabins), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Hunters_Cabins),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_elf"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (eq,"$character_gender",tf_male_elf),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Dragon_Cliffs), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Dragon_Cliffs),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_forest_ranger"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_garden),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Stone_Ring), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Stone_Ring),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_forest_ranger"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (eq,"$character_gender",tf_male_elf),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_garden),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Dragon_Shrine), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Dragon_Shrine),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_beast"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Hall_of_Shadows), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Hall_of_Shadows),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_beast"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (eq,"$character_gender",tf_female),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Dragon_Spire), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Dragon_Spire),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_dwarf"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Runic_Chapel), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Runic_Chapel),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_dwarf"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (eq,"$character_gender",tf_dwarf),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Lava_Fissure), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Lava_Fissure),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_demon"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Altar_of_Chaos), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Altar_of_Chaos),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_demon"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (eq,"$character_gender",tf_demon_human),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_graveyard),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Heart_of_Pit), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Heart_of_Pit),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_dark_knights"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Mage_Housings), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Mage_Housings),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_dark_knights"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (eq,"$character_gender",tf_male),
       (call_script, "script_get_max_skill_of_player_party", "skl_necromancy"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_graveyard),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Arcane_Forge), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Arcane_Forge),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_demon_hunters"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Order_of_Paladins), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Order_of_Paladins),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_demon_hunters"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (eq,"$character_gender",tf_female),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Transept_of_Heaven), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Transept_of_Heaven),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_scotland"),
       (assign, ":relation_need", 80),
       (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_graveyard),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Monastery), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Monastery),(jump_to_menu, "mnu_center_improve_advance"),]),
    
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_orc"),
       (assign, ":relation_need", 80),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_basic),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Warriors_Tents), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Warriors_Tents),(jump_to_menu, "mnu_center_improve_advance"),]),
      
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_orc"),
       (assign, ":relation_need", 80),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (eq,"$character_gender",tf_ogre),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_mine),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Behemoth_Crag), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Behemoth_Crag),(jump_to_menu, "mnu_center_improve_advance"),]),

      
      ("center_build",
      [(eq, reg6, 0),
       (assign, ":faction", "fac_orc"),
       (assign, ":relation_need", 80),
       (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
       (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
       (val_mul, ":persuasion_level", 2),
       (val_add, ":cur_relation", ":persuasion_level"),
       (ge, ":cur_relation", ":relation_need"),
       (eq,"$character_gender",tf_ogre),
       (call_script, "script_get_max_skill_of_player_party", "skl_undead_master"),
       (assign, ":max_skill", reg0),
       (ge, ":max_skill", 6),
       (party_slot_eq, "$g_encountered_party", slot_center_village_type, village_type_garden),
       (party_slot_eq, "$g_encountered_party", slot_center_player_enterprise, 0),
       (call_script, "script_get_improvement_details_2", Troll_Cave), 
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", Troll_Cave),(jump_to_menu, "mnu_center_improve_advance"),]),

      ("go_back_dot",[],"Go back.",[(jump_to_menu, "mnu_village")]),
    ],
  ),

  (
    "center_improve_advance",0,
    "{s19}, ^building the {s4} will cost you {reg5} denars and will take {reg6} days.",
    "none",
    [(call_script, "script_get_improvement_details_2", "$g_improvement_type"),
     (assign, ":improvement_cost", reg0),
     (str_store_string, s4, s0),
     (str_store_string, s19, s1),
     
     (assign, reg5, ":improvement_cost"),
     (assign, reg6, 7),

    ],
    [
      ##diplomacy begin
      ("dplmc_improve_cont", 
      [    
        (gt, "$g_player_chamberlain", 0),
        (store_troop_gold, ":cur_gold", "trp_household_possessions"),
        (ge, ":cur_gold", reg5),
      ], "Go on. (Pay from treasury)", 
        [
          (call_script, "script_dplmc_withdraw_from_treasury", reg5),
          (party_set_slot, "$g_encountered_party", slot_center_player_enterprise, "$g_improvement_type"),
          (store_current_hours, ":cur_hours"),
          (store_mul, ":hours_takes", reg6, 24),
          (val_add, ":hours_takes", ":cur_hours"),
          (party_set_slot, "$g_encountered_party", slot_center_player_enterprise_days_until_complete, ":hours_takes"),
          (jump_to_menu,"mnu_center_manage_advance"),
         ]
      ),
      ##diplomacy end
      ("improve_cont",[(store_troop_gold, ":cur_gold", "trp_player"),
                       (ge, ":cur_gold", reg5)],
       "Go on.", [(troop_remove_gold, "trp_player", reg5),
                  (party_set_slot, "$g_encountered_party", slot_center_player_enterprise, "$g_improvement_type"),
                  (store_current_hours, ":cur_hours"),
                  (store_mul, ":hours_takes", reg6, 24),
                  (val_add, ":hours_takes", ":cur_hours"),
                  (party_set_slot, "$g_encountered_party", slot_center_player_enterprise_days_until_complete, ":hours_takes"),
                  (jump_to_menu,"mnu_center_manage_advance"),
                  ]),
                  
      ("forget_it",[(store_troop_gold, ":cur_gold", "trp_player"),
                     ##diplomacy begin
                    (store_troop_gold, ":cur_treasury", "trp_household_possessions"),
                    (this_or_next|ge, ":cur_treasury", reg5),
                    ##diplomacy end
                    (ge, ":cur_gold", reg5)],
       "Forget it.", [(jump_to_menu,"mnu_center_manage_advance")]),
      ("improve_not_enough_gold",[(store_troop_gold, ":cur_gold", "trp_player"),
                                  ##diplomacy begin
                                  (store_troop_gold, ":cur_treasury", "trp_household_possessions"),
                                  (this_or_next|lt, ":cur_treasury", reg5),
                                  ##diplomacy end
                                  (lt, ":cur_gold", reg5)],
       "I don't have enough money for that.", [(jump_to_menu, "mnu_center_manage_advance"),]),
    ],
  ),

  (
    "center_manage",0,
    "{s19}", ## CC
    "none",
    [
     
     (call_script, "script_get_center_improvements_text_to_s0", "$g_encountered_party"),
     (str_store_string_reg, s19, s0),
     (str_store_string, s19, "@{s19}^"),
     
     ## CC
     (try_begin),
       (party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
       (assign, ":begin", village_improvements_begin),
       (assign, ":end", village_improvements_end),
     (else_try),
       (assign, ":begin", walled_center_improvements_begin),
       (assign, ":end", walled_center_improvements_end),
     (try_end),
     
     (try_for_range, ":improvement_no", ":begin", ":end"),
       (party_get_slot, ":improvement_level", "$g_encountered_party", ":improvement_no"),
       (val_mod, ":improvement_level", 10),
       (gt, ":improvement_level", 0),
       (call_script, "script_get_improvement_details", ":improvement_no", "$g_encountered_party", ":improvement_level"),
       (str_store_string, s19, "@{s19}^{s0}:{s1}"),
     (try_end),
     (str_store_string, s19, "@{s19}^"),
     
     (store_current_hours, ":cur_hours"),
     (try_for_range, ":improvement_no", ":begin", ":end"),
       (party_get_slot, ":improvement_data", "$g_encountered_party", ":improvement_no"),
       (gt, ":improvement_data", 24), # currently building
       (store_mod, ":improvement_level", ":improvement_data", 10),
       (val_add, ":improvement_level", 1),
       (call_script, "script_get_improvement_details", ":improvement_no","$g_encountered_party", ":improvement_level"),
       (str_store_string, s7, s0),
       (party_get_slot, ":finish_time", "$g_encountered_party", ":improvement_no"),
       (val_sub, ":finish_time", ":cur_hours"),
       (store_div, reg8, ":finish_time", 24),
       (val_max, reg8, 1),
       (store_sub, reg9, reg8, 1),
       (str_store_string, s19, "@{s19}^You are currently building {s7}. The building will be completed after {reg8} day{reg9?s:}."),
     (try_end),
     
     
    ],
    [
    
      ("center_leave_faction", 
        [
          (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
          (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
        ],
        "Renounce your oath to your liege!", [(jump_to_menu, "mnu_leave_faction_2"),]),
    
      ("recruit_dplmc", 
        [
          (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
          (neq, "$g_player_chamberlain", "trp_dplmc_chamberlain"),
          (str_store_troop_name_plural, s4, "trp_dplmc_chamberlain"),
        ],
        "recruit_{s4}", [(jump_to_menu, "mnu_dplmc_notification_appoint_chamberlain"),]),
      ("recruit_dplmc", 
        [
          (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
          (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
          (neq, "$g_player_constable", "trp_dplmc_constable"),
          (str_store_troop_name_plural, s4, "trp_dplmc_constable"),
        ],
        "recruit_{s4}!", [(jump_to_menu, "mnu_dplmc_notification_appoint_constable"),]),
      ("recruit_dplmc", 
        [
          (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
          (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
          (neq, "$g_player_chancellor", "trp_dplmc_chancellor"),
          (str_store_troop_name_plural, s4, "trp_dplmc_constable"),
        ],
        "recruit_{s4}!", [(jump_to_menu, "mnu_dplmc_notification_appoint_chancellor"),]),
    
    
    
      ("village_station_troops",
      [(party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),],
      "Manage the garrison ",
      [
        (change_screen_exchange_members,1),
      ]),
    
      ("castle_recruit_troops", 
        [
          (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
          (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
        ],
        "Recruit some troops.", [(start_presentation, "prsnt_recruit_plan"),]),
        
      ("castle_recruit_troops_hoseman", 
        [
          (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
          (call_script, "script_cf_center_bulid_need_level", "$g_encountered_party", slot_center_has_stables, 1),
          (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
        ],
        "Recruit some troops_horseman.", [(start_presentation, "prsnt_recruit_plan_hoseman"),]),

      ("castle_recruit_troops_footman", 
        [
          (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
          (call_script, "script_cf_center_bulid_need_level", "$g_encountered_party", slot_center_has_barracks, 1),
          (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
        ],
        "Recruit some troops_footman.", [(start_presentation, "prsnt_recruit_plan_footman"),]),

      ("castle_recruit_troops_archer", 
        [
          (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
          (call_script, "script_cf_center_bulid_need_level", "$g_encountered_party", slot_center_has_archery_range, 1),
          (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
        ],
        "Recruit some troops_archer.", [(start_presentation, "prsnt_recruit_plan_archer"),]),
                
      ("castle_sort_troops", 
        [
          (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
          (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
          (party_get_num_companion_stacks, ":num_stacks", "$g_encountered_party"),
          (ge, ":num_stacks", 2),
        ],
        "Sort the defenders.", [(assign, "$g_cur_stack", -1),(start_presentation, "prsnt_sort_the_defenders"),]),
    ## CC
#chenwz_new_building
#village_begin
      ("center_build",
      [#(eq, reg6, 0),
      (party_slot_eq, "$g_encountered_party", slot_center_has_manor, 0),
      (call_script, "script_get_improvement_details", slot_center_has_manor, "$g_encountered_party",1), 
      ],
       "Build a {s0}.",
       [(assign, "$g_improvement_type", slot_center_has_manor),(jump_to_menu, "mnu_center_improve"),]),
       
      ("center_build",
      [
       (party_get_slot, ":improvement_level", "$g_encountered_party", slot_center_has_fish_pond),
       (lt, ":improvement_level", 3),
       (val_add, ":improvement_level", 1),
       (call_script, "script_get_improvement_details", slot_center_has_fish_pond, "$g_encountered_party", ":improvement_level"),
      ],
       "Build a {s0}.",[(assign, "$g_improvement_type", slot_center_has_fish_pond),(jump_to_menu, "mnu_center_improve"),]),
              
      ("center_build",
      [#(eq, reg6, 0),
       (party_get_slot, ":improvement_level", "$g_encountered_party", slot_center_has_watch_tower),
       (lt, ":improvement_level", 2),
       (val_add, ":improvement_level", 1),
       (call_script, "script_get_improvement_details", slot_center_has_watch_tower, "$g_encountered_party", ":improvement_level"),
       ],
       "Build a {s0}.",[(assign, "$g_improvement_type", slot_center_has_watch_tower),(jump_to_menu, "mnu_center_improve"),]),
       
      ("center_build",
      [#(eq, reg6, 0),

       (party_get_slot, ":improvement_level", "$g_encountered_party", slot_center_has_school),
       (lt, ":improvement_level", 2),
       (val_add, ":improvement_level", 1),
       (call_script, "script_get_improvement_details", slot_center_has_school, "$g_encountered_party", ":improvement_level"), 
       ],
       "Build a {s0}.",[(assign, "$g_improvement_type", slot_center_has_school),(jump_to_menu, "mnu_center_improve"),]),
                     
      ("center_build",
      [#(eq, reg6, 0),
       (party_slot_eq, "$g_encountered_party", slot_center_has_messenger_post, 0),
       (call_script, "script_get_improvement_details", slot_center_has_messenger_post, "$g_encountered_party", 1), 
       ],
       "Build a {s0}.",[(assign, "$g_improvement_type", slot_center_has_messenger_post),(jump_to_menu, "mnu_center_improve"),]),
                          

      ("center_build",
      [#(eq, reg6, 0),
       (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
       (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
       (party_get_slot, ":improvement_level", "$g_encountered_party", slot_center_has_archery_range),
       (lt, ":improvement_level", 2),
       (val_add, ":improvement_level", 1),
       
       (this_or_next|party_slot_eq, "$g_encountered_party", slot_center_has_archery_range, 1),
       (party_slot_eq, "$g_encountered_party", slot_center_has_archery_range, 0),
       (call_script, "script_get_improvement_details", slot_center_has_archery_range, "$g_encountered_party", ":improvement_level"), 
       ],
       "Build a {s0}.",
       [(assign, "$g_improvement_type", slot_center_has_archery_range),
        (jump_to_menu, "mnu_center_improve"),]),

      ("center_build",
      [#(eq, reg6, 0),
       (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
       (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
       (party_slot_eq, "$g_encountered_party", slot_center_has_archery_range, 2),
       
       (call_script, "script_cf_center_bulid_need_level", "$g_encountered_party", slot_center_has_blacksmith, 1),
       (call_script, "script_get_improvement_details", slot_center_has_archery_range, "$g_encountered_party", 3), 
       ],
       "Build a {s0}.",
       [(assign, "$g_improvement_type", slot_center_has_archery_range),
        (jump_to_menu, "mnu_center_improve"),]),



      ("center_build",
      [#(eq, reg6, 0),
       #(this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
       #(party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
       (party_slot_eq, "$g_encountered_party", slot_center_has_barracks, 0),
       (call_script, "script_get_improvement_details", slot_center_has_barracks, "$g_encountered_party", 1), 
       ],
       "Build a {s0}.",
       [(assign, "$g_improvement_type", slot_center_has_barracks),
       (jump_to_menu, "mnu_center_improve"),]),

      ("center_build",
        [#(eq, reg6, 0),
         (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
         (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
         (party_get_slot, ":improvement_level", "$g_encountered_party", slot_center_has_barracks),
         (ge, ":improvement_level", 1),
         (lt, ":improvement_level", 3),
         (val_add, ":improvement_level", 1),
         (party_slot_eq, "$g_encountered_party", slot_center_has_barracks, 1),
         (this_or_next|party_slot_eq, "$g_encountered_party", slot_center_has_barracks, 2),
         (party_slot_eq, "$g_encountered_party", slot_center_has_blacksmith, 1),
         (call_script, "script_get_improvement_details", slot_center_has_barracks, "$g_encountered_party", ":improvement_level"), 
        ],
       "Build a {s0}.",
       [(assign, "$g_improvement_type", slot_center_has_barracks),(jump_to_menu, "mnu_center_improve"),]),





      ("center_build",
        [#(eq, reg6, 0),
         (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
         (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
         (party_slot_eq, "$g_encountered_party", slot_center_has_stables, 0),
         (call_script, "script_cf_center_bulid_need_level", "$g_encountered_party", slot_center_has_manor, 1),
         (call_script, "script_get_improvement_details", slot_center_has_stables, "$g_encountered_party", 1), 
         ],
       "Build a {s0}.",
       [(assign, "$g_improvement_type", slot_center_has_stables),
        (jump_to_menu, "mnu_center_improve"),]),
        
      ("center_build",
        [#(eq, reg6, 0),
         (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
         (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
         (party_get_slot, ":improvement_level", "$g_encountered_party", slot_center_has_stables),
         (ge, ":improvement_level", 1),
         (lt, ":improvement_level", 3),
         (val_add, ":improvement_level", 1),
         
         (call_script, "script_cf_center_bulid_need_level", "$g_encountered_party", slot_center_has_blacksmith, 1),
         (call_script, "script_get_improvement_details", slot_center_has_stables, "$g_encountered_party", 2), 
         ],
       "Build a {s0}.",
       [(assign, "$g_improvement_type", slot_center_has_stables),(jump_to_menu, "mnu_center_improve"),]),
                
#castle_end
#town_begin
      #("center_build",
      #[#(eq, reg6, 0),
       #(party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
       #(party_slot_eq, "$g_encountered_party", slot_center_has_manor, 0),
         #(call_script, "script_get_improvement_details", slot_center_has_manor, "$g_encountered_party"), 
      #],
       #"Build a {s0}.",
      #[(assign, "$g_improvement_type", slot_center_has_manor),(jump_to_menu, "mnu_center_improve"),]),
          
      #("center_build",
        #[#(eq, reg6, 0),
         #(party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
         #(party_slot_eq, "$g_encountered_party", slot_center_has_stables, 0),
         #(call_script, "script_get_improvement_details", slot_center_has_stables, "$g_encountered_party"), 
         #],
       #"Build a {s0}.",
       #[(assign, "$g_improvement_type", slot_center_has_stables),(jump_to_menu, "mnu_center_improve"),]),
              
      ("center_build",
      [#(eq, reg6, 0),
       (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
       (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
       (party_get_slot, ":improvement_level", "$g_encountered_party", slot_center_has_blacksmith),
       (lt, ":improvement_level", 3),
       (val_add, ":improvement_level", 1),
       (call_script, "script_get_improvement_details", slot_center_has_blacksmith, "$g_encountered_party", ":improvement_level"), 
       ],
       "Build a {s0}.",
       [(assign, "$g_improvement_type", slot_center_has_blacksmith),(jump_to_menu, "mnu_center_improve"),]),
                   
      ("center_build",
       [#(eq, reg6, 0),
        (neg|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
        (neg|party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
        (party_slot_eq, "$g_encountered_party", slot_center_has_prisoner_tower, 0),
        (party_get_slot, ":improvement_level", "$g_encountered_party", slot_center_has_prisoner_tower),
        (lt, ":improvement_level", 1),
        (call_script, "script_get_improvement_details", slot_center_has_prisoner_tower, "$g_encountered_party", 1), 
       ],
       "Build a {s0}.",
       [(assign, "$g_improvement_type", slot_center_has_prisoner_tower),(jump_to_menu, "mnu_center_improve"),]),
           
      ("center_build",
       [#(eq, reg6, 0),
        (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
        (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
        (party_slot_eq, "$g_encountered_party", slot_center_has_prisoner_tower, 0),
        (party_get_slot, ":improvement_level", "$g_encountered_party", slot_center_has_prisoner_tower),
        (lt, ":improvement_level", 2),
        (val_add, ":improvement_level", 1),
        (call_script, "script_get_improvement_details", slot_center_has_prisoner_tower, "$g_encountered_party", ":improvement_level"), 
       ],
       "Build a {s0}.",
       [(assign, "$g_improvement_type", slot_center_has_prisoner_tower),(jump_to_menu, "mnu_center_improve"),]),

      #("center_build",
      #[#(eq, reg6, 0),
       #(party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
       #(party_slot_eq, "$g_encountered_party", slot_center_has_fish_pond, 0),
         #(call_script, "script_get_improvement_details", slot_center_has_fish_pond, "$g_encountered_party"), 
      #],
       #"Build a {s0}.",
       #[(assign, "$g_improvement_type", slot_center_has_fish_pond),(jump_to_menu, "mnu_center_improve"),]),
#town_end  
#chenwz_new_building
      ("go_back_dot",[],"Go back.",[(jump_to_menu, "$g_next_menu")]),
    ],
  ),

  (
    "center_improve",0,
    "{s19} As the party member with the highest engineer skill ({reg2}), {reg3?you reckon:{s3} reckons} that building the {s4} will cost you\
 {reg5} denars and will take {reg6} days.",
    "none",
    [
     ## CC
     (party_get_slot, ":improvement_level", "$g_encountered_party", "$g_improvement_type"),
     (val_mod, ":improvement_level", 10),
     (val_add, ":improvement_level", 1),
     ## CC
     (call_script, "script_get_improvement_details", "$g_improvement_type", "$g_encountered_party", ":improvement_level"),
     (assign, ":improvement_cost", reg0),
     (str_store_string, s4, s0),
     (str_store_string, s19, s1),
     (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
     (assign, ":max_skill", reg0),
     (assign, ":max_skill_owner", reg1),
     (assign, reg2, ":max_skill"),

     (store_sub, ":multiplier", 20, ":max_skill"),
     (val_mul, ":improvement_cost", ":multiplier"),
     (val_div, ":improvement_cost", 20),
     
     (store_div, ":improvement_time", ":improvement_cost", 200), ## CC
     (val_add, ":improvement_time", 3),
     (val_clamp, ":improvement_time", 1,31), 
     (assign, reg5, ":improvement_cost"),
     (assign, reg6, ":improvement_time"),

     (try_begin),
       (eq, ":max_skill_owner", "trp_player"),
       (assign, reg3, 1),
     (else_try),
       (assign, reg3, 0),
       (str_store_troop_name, s3, ":max_skill_owner"),
     (try_end),
    ],
    [
      ##diplomacy begin
      ("dplmc_improve_cont", 
      [    
        (gt, "$g_player_chamberlain", 0),
        (store_troop_gold, ":cur_gold", "trp_household_possessions"),
        (ge, ":cur_gold", reg5),
      ], "Go on. (Pay from treasury)", 
        [
          (call_script, "script_dplmc_withdraw_from_treasury", reg5),

                  ## CC
                  (party_get_slot, ":improvement_level", "$g_encountered_party", "$g_improvement_type"),
                  (store_current_hours, ":cur_hours"),
                  (store_mul, ":hours_takes", reg6, 24),
                  (val_add, ":hours_takes", ":cur_hours"),
                  # include improvement_level to slot
                  (val_div, ":hours_takes", 10),
                  (val_mul, ":hours_takes", 10),
                  (val_add, ":hours_takes", ":improvement_level"),
                  # include improvement_level to slot
                  (party_set_slot, "$g_encountered_party", "$g_improvement_type", ":hours_takes"),
                  ## CC
          (jump_to_menu,"mnu_center_manage"),
         ]
      ),
      ##diplomacy end
      ("improve_cont",[(store_troop_gold, ":cur_gold", "trp_player"),
                       (ge, ":cur_gold", reg5)],
       "Go on.", [(troop_remove_gold, "trp_player", reg5),
                  #(party_set_slot, "$g_encountered_party", slot_center_current_improvement, "$g_improvement_type"),
                  ## CC
                  (party_get_slot, ":improvement_level", "$g_encountered_party", "$g_improvement_type"),
                  (store_current_hours, ":cur_hours"),
                  (store_mul, ":hours_takes", reg6, 24),
                  (val_add, ":hours_takes", ":cur_hours"),
                  # include improvement_level to slot
                  (val_div, ":hours_takes", 10),
                  (val_mul, ":hours_takes", 10),
                  (val_add, ":hours_takes", ":improvement_level"),
                  # include improvement_level to slot
                  (party_set_slot, "$g_encountered_party", "$g_improvement_type", ":hours_takes"),
                  ## CC
                  (jump_to_menu,"mnu_center_manage"),
                  ]),
                  
      ("forget_it",[(store_troop_gold, ":cur_gold", "trp_player"),
                     ##diplomacy begin
                    (store_troop_gold, ":cur_treasury", "trp_household_possessions"),
                    (this_or_next|ge, ":cur_treasury", reg5),
                    ##diplomacy end
                    (ge, ":cur_gold", reg5)],
       "Forget it.", [(jump_to_menu,"mnu_center_manage")]),
      ("improve_not_enough_gold",[(store_troop_gold, ":cur_gold", "trp_player"),
                                  ##diplomacy begin
                                  (store_troop_gold, ":cur_treasury", "trp_household_possessions"),
                                  (this_or_next|lt, ":cur_treasury", reg5),
                                  ##diplomacy end
                                  (lt, ":cur_gold", reg5)],
       "I don't have enough money for that.", [(jump_to_menu, "mnu_center_manage"),]),
    ],
  ),

  (
    "town_bandits_failed",mnf_disable_all_keys,
    "{s4} {s5}",
    "none",
    [
#      (call_script, "script_loot_player_items", 0),
      (store_troop_gold, ":total_gold", "trp_player"),
      (store_div, ":gold_loss", ":total_gold", 30),
      (store_random_in_range, ":random_loss", 40, 100),
      (val_add, ":gold_loss", ":random_loss"),
      (val_min, ":gold_loss", ":total_gold"),
      (troop_remove_gold, "trp_player",":gold_loss"),
      
      (try_begin),
        (party_get_slot, ":bandit_troop", "$current_town", slot_village_infested_by_bandits),
        (party_get_slot, ":bandit_troop_2", "$current_town", slot_center_has_bandits),
        (neg|eq, ":bandit_troop", ":bandit_troop_2"),
        (party_set_slot, "$current_town", slot_center_has_bandits, 0),
      (try_end),
      
      (party_get_num_companions, ":num_companions", "p_main_party"),
      (str_store_string, s4, "@The assasins beat you down and leave you for dead. ."),
      (str_store_string, s4, "@You have fallen. The bandits quickly search your body for every coin they can find,\
 then vanish into the night. They have left you alive, if only barely."),
      (try_begin),
        (gt, ":num_companions", 2),
        (str_store_string, s5, "@Luckily some of your companions come to search for you when you do not return, and find you lying by the side of the road. They hurry you to safety and dress your wounds."),
      (else_try),
        (str_store_string, s5, "@Luckily some passing townspeople find you lying by the side of the road, and recognise you as something other than a simple beggar. They carry you to the nearest inn and dress your wounds."),
      (try_end),
    ],
    [
      ("continue",[],"Continue...",[(change_screen_return)]),
    ],
  ),

  (
    "town_bandits_succeeded",mnf_disable_all_keys,
    "The bandits fall before you as wheat to a scythe! Soon you stand alone in the streets\
 while most of your attackers lie unconscious, dead or dying.\
 Searching the bodies, you find a purse which must have belonged to a previous victim of these brutes.\
 Or perhaps, it was given to them by someone who wanted to arrange a suitable ending to your life.",
    "none",
    [
      (try_begin),
        (party_get_slot, ":bandit_troop", "$current_town", slot_village_infested_by_bandits),
        (party_get_slot, ":bandit_troop_2", "$current_town", slot_center_has_bandits),
        (neg|eq, ":bandit_troop", ":bandit_troop_2"),
        (party_set_slot, "$current_town", slot_center_has_bandits, 0),
      (try_end),
      (assign, "$g_last_defeated_bandits_town", "$g_encountered_party"),
      (try_begin),
        (check_quest_active, "qst_deal_with_night_bandits"),
        (neg|check_quest_succeeded, "qst_deal_with_night_bandits"),
        (quest_slot_eq, "qst_deal_with_night_bandits", slot_quest_target_center, "$g_encountered_party"),
        (call_script, "script_succeed_quest", "qst_deal_with_night_bandits"),
      (try_end),
      (store_mul, ":xp_reward", "$num_center_bandits", 117),
      (add_xp_to_troop, ":xp_reward", "trp_player"),
      (store_mul, ":gold_reward", "$num_center_bandits", 50),
      (call_script, "script_troop_add_gold","trp_player",":gold_reward"),
    ],
    [
      ("continue",[],"Continue...",[(change_screen_map)]),
    ],
  ),
  (
    "town_bandits_succeeded2",mnf_disable_all_keys,
    "The bandits fall before you as wheat to a scythe! Soon you stand alone in the streets\
 while most of your attackers lie unconscious, dead or dying.\
 Searching the bodies, you find a purse which must have belonged to a previous victim of these brutes.\
 Or perhaps, it was given to them by someone who wanted to arrange a suitable ending to your life.",
    "none",
    [
      (try_begin),
        (party_get_slot, ":bandit_troop", "$current_town", slot_village_infested_by_bandits),
        (party_get_slot, ":bandit_troop_2", "$current_town", slot_center_has_bandits),
        (neg|eq, ":bandit_troop", ":bandit_troop_2"),
        (party_set_slot, "$current_town", slot_center_has_bandits, 0),
      (try_end),
      (assign, "$g_last_defeated_bandits_town", "$g_encountered_party"),
      (try_begin),
        (check_quest_active, "qst_deal_with_night_bandits"),
        (neg|check_quest_succeeded, "qst_deal_with_night_bandits"),
        (quest_slot_eq, "qst_deal_with_night_bandits", slot_quest_target_center, "$g_encountered_party"),
        (call_script, "script_succeed_quest", "qst_deal_with_night_bandits"),
      (try_end),
      (store_mul, ":xp_reward", "$num_center_bandits", 117),
      (add_xp_to_troop, ":xp_reward", "trp_player"),
      (store_mul, ":gold_reward", "$num_center_bandits", 50),
      (call_script, "script_troop_add_gold","trp_player",":gold_reward"),
    ],
    [
      ("continue",[],"Continue...",[(change_screen_map)]),
    ],
  ),
  
  (
    "town_bandits_succeeded3",mnf_disable_all_keys,
    "The bandits fall before you as wheat to a scythe! Soon you stand alone in the streets\
 while most of your attackers lie unconscious, dead or dying.\
 Searching the bodies, you find a purse which must have belonged to a previous victim of these brutes.\
 Or perhaps, it was given to them by someone who wanted to arrange a suitable ending to your life.",
    "none",
    [
      (store_mul, ":xp_reward", "$num_center_bandits", 200),
      (add_xp_to_troop, ":xp_reward", "trp_player"),
      (store_mul, ":gold_reward", "$num_center_bandits", 100),
      (call_script, "script_troop_add_gold","trp_player",":gold_reward"),
    ],
    [
      ("continue",[],"Continue...",[(change_screen_map)]),
    ],
  ),
  
  (
    "credit_fight_failed",mnf_disable_all_keys,
    "{s4} {s5}",
    "none",
    [
#      (call_script, "script_loot_player_items", 0),
      (store_troop_gold, ":total_gold", "trp_player"),
      (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
      (try_begin),
        (ge, ":total_gold", ":player_debt"),
        (assign,":gold_loss", ":player_debt"),
        (party_set_slot, "$current_town", slot_town_player_debt, 0),
        (party_set_slot, "$current_town", slot_town_player_debt_days, 0),
      (else_try),
        (assign,":gold_loss", ":total_gold"),
        (assign,":c",1),
        (val_sub,":player_debt",":gold_loss" ),
        (party_set_slot, "$current_town", slot_town_player_debt, ":player_debt"),
        (party_set_slot, "$current_town", slot_town_player_debt_days, 26),
      (try_end),
      (troop_remove_gold, "trp_player",":gold_loss"),
      
      (str_store_string, s4, "@The assasins beat you down and leave you for dead. ."),
      (str_store_string, s4, "@You have fallen. The bandits quickly search your body for every coin they can find,\
 then vanish into the night. They have left you alive, if only barely."),
      (try_begin),
        (eq, ":c", 1),
        (str_store_string, s5, "@The bandits quickly search your body for every coin they can find. But still not enough to pay your debt. They left behind a bill, statement to the collection in a few days after."),
      (else_try),
        (str_store_string, s5, "@The bandits quickly search your body for every coin they can find. Luckily They only took that part should have."),
      (try_end),
    ],
    [
      ("continue",[],"Continue...",[(change_screen_return)]),
    ],
  ),

  (
    "credit_fight_succeeded",mnf_disable_all_keys,
    "credit_fight_succeeded.",
    "none",
    [
      (party_set_slot, "$current_town", slot_town_player_debt_days, 26),
      (store_mul, ":xp_reward", "$num_center_bandits", 500),
      (add_xp_to_troop, ":xp_reward", "trp_player"),
      (store_mul, ":gold_reward", "$num_center_bandits", 200),
      (call_script, "script_troop_add_gold","trp_player",":gold_reward"),
    ],
    [
      ("continue",[],"Continue...",[(change_screen_return)]),
    ],
  ),
  
   (
    "village_steal_cattle_confirm",0,
    "As the party member with the highest looting skill ({reg2}), {reg3?you reckon:{s1} reckons} that you can steal as many as {reg4} heads of village's cattle.",
    "none",
    [
      (call_script, "script_get_max_skill_of_player_party", "skl_looting"),
      (assign, reg2, reg0),
      (try_begin),
         (eq,"$background_type",cb_thief),
         (eq,"$background_answer_2",cb2_urchin),
         (store_skill_level, ":thief_bonus", "skl_looting", "trp_player"),
         (val_add, reg2, ":thief_bonus"),
      (try_end),
      (assign, ":max_skill_owner", reg1),
      (try_begin),
        (eq, ":max_skill_owner", "trp_player"),
        (assign, reg3, 1),
      (else_try),
        (assign, reg3, 0),
        (str_store_troop_name, s1, ":max_skill_owner"),
      (try_end),
      (call_script, "script_calculate_amount_of_cattle_can_be_stolen", "$current_town"),
      (assign, reg4, reg0),
      ],
    [
      ("village_steal_cattle_confirm",[],"Go on.",
       [
         (rest_for_hours_interactive, 3, 5, 1), #rest while attackable
         (assign, "$auto_menu", "mnu_village_steal_cattle"),
         (change_screen_return),
       ]),
      ("forget_it",[],"Forget it.",[(change_screen_return)]),
    ],
  ),

  (
    "village_steal_cattle",mnf_disable_all_keys,
    "{s1}",
    "none",
    [
      (call_script, "script_calculate_amount_of_cattle_can_be_stolen", "$current_town"),
      (assign, ":max_value", reg0),
      (val_add, ":max_value", 1),
      (store_random_in_range, ":random_value", 0, ":max_value"),
      (party_set_slot, "$current_town", slot_village_player_can_not_steal_cattle, 1),
      (party_get_slot, ":lord", "$current_town", slot_town_lord),
      (try_begin),
        (le, ":random_value", 0),
        (call_script, "script_change_player_relation_with_center", "$current_town", -3),
        (str_store_string, s1, "@You fail to steal any cattle."),
      (else_try),
        (assign, reg17, ":random_value"),
        (store_sub, reg12, ":random_value", 1),
        (try_begin),
          (gt, ":lord", 0),
          (call_script, "script_change_player_relation_with_troop", ":lord", -3),
          (call_script, "script_add_log_entry", logent_player_stole_cattles_from_village, "trp_player",  "$current_town", ":lord", "$g_encountered_party_faction"),
        (try_end),
        (call_script, "script_change_player_relation_with_center", "$current_town", -5),
        (str_store_string, s1, "@You drive away {reg17} {reg12?heads:head} of cattle from the village's herd."),
        (try_begin),
          (eq, ":random_value", 3),
          (unlock_achievement, ACHIEVEMENT_GOT_MILK),
        (try_end),
        
        (call_script, "script_create_cattle_herd", "$current_town", ":random_value"),
        (party_get_slot, ":num_cattle", "$current_town", slot_village_number_of_cattle),
        (val_sub, ":num_cattle", ":random_value"),
        (party_set_slot, "$current_town", slot_village_number_of_cattle, ":num_cattle"),
      (try_end),
    ],
    [
      ("continue",[],"Continue...",
       [
         (change_screen_return),
         ]),
    ],
  ),
  

   (
    "village_take_food_confirm",0,
    "It will be difficult to force and threaten the peasants into giving their precious supplies. You think you will need at least one hour.",
    #TODO: mention looting skill?
    "none",
    [],
    [
      ("village_take_food_confirm",[],"Go ahead.",
       [
         (rest_for_hours_interactive, 1, 5, 0), #rest while not attackable
         (assign, "$auto_enter_town", "$current_town"),
         (assign, "$g_town_visit_after_rest", 1),
         (assign, "$auto_enter_menu_in_center", "mnu_village_take_food"),
         (change_screen_return),
         ]),
      ("forget_it",[],"Forget it.",[(jump_to_menu, "mnu_village_hostile_action")]),
    ],
  ),

  (
    "village_take_food",0,
    "The villagers grudgingly bring out what they have for you.",
    "none",
    [
       (call_script, "script_party_count_members_with_full_health","p_main_party"),
       (assign, ":player_party_size", reg0),
       (call_script, "script_party_count_members_with_full_health","$current_town"),
       (assign, ":villagers_party_size", reg0),
       (try_begin),
         (lt, ":player_party_size", 25),
         (ge, ":villagers_party_size", 40),
         (neg|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
         (jump_to_menu, "mnu_village_start_attack"),
       (try_end),
    ],
    [
      ("take_supplies",[],"Take the supplies.",
       [
         (try_begin),
           (party_slot_ge, "$current_town", slot_center_player_relation, -55),
           (try_begin),
             (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
             (call_script, "script_change_player_relation_with_center", "$current_town", -1),
           (else_try),
             (call_script, "script_change_player_relation_with_center", "$current_town", -3),
           (try_end),
         (try_end),
         (party_get_slot, ":village_lord", "$current_town", slot_town_lord),
         (try_begin),
           (gt,  ":village_lord", 1),
          (call_script, "script_change_player_relation_with_troop", ":village_lord", -1),
          (try_end),
         (party_get_slot, ":merchant_troop", "$current_town", slot_town_elder),
         (party_get_skill_level, ":player_party_looting", "p_main_party", "skl_looting"),
      (try_begin),
         (eq,"$background_type",cb_thief),
         (eq,"$background_answer_2",cb2_urchin),
         (store_skill_level, ":thief_bonus", "skl_looting", "trp_player"),
         (val_add, ":player_party_looting", ":thief_bonus"),
      (try_end),
         (val_mul, ":player_party_looting", 3),
         (store_sub, ":random_chance", 70, ":player_party_looting"), #Increases the chance of looting by 3% per skill level
         (try_for_range, ":slot_no", num_equipment_kinds ,max_inventory_items + num_equipment_kinds),
           (store_random_in_range, ":rand", 0, 100), 
           (lt, ":rand", ":random_chance"),
           (troop_set_inventory_slot, ":merchant_troop", ":slot_no", -1),
         (try_end),

###NPC companion changes begin
         (call_script, "script_objectionable_action", tmt_humanitarian, "str_steal_from_villagers"),
#NPC companion changes end
#Troop commentary changes begin
          (call_script, "script_add_log_entry", logent_village_extorted, "trp_player",  "$current_town", -1, -1),
          (store_faction_of_party,":village_faction",  "$current_town"),
          (call_script, "script_faction_inflict_war_damage_on_faction", "$players_kingdom", ":village_faction", 5),
#Troop commentary changes end          

         (jump_to_menu, "mnu_village"),
         (troop_sort_inventory, ":merchant_troop"),
         (change_screen_loot, ":merchant_troop"),       
         ]),
      ("let_them_keep_it",[],"Let them keep it.",[(jump_to_menu, "mnu_village")]),
    ],
  ),


  (
    "village_start_attack",mnf_disable_all_keys|mnf_scale_picture,
    "Some of the angry villagers grab their tools and prepare to resist you.\
 It looks like you'll have a fight on your hands if you continue.",
    "none",
    [
       (set_background_mesh, "mesh_pic_villageriot"),
       (call_script, "script_party_count_members_with_full_health","p_main_party"),
       (assign, ":player_party_size", reg0),
       (call_script, "script_party_count_members_with_full_health","$current_town"),
       (assign, ":villagers_party_size", reg0),
       
       (try_begin),
         (gt, ":player_party_size", 200),
         (jump_to_menu, "mnu_village_loot_no_resist"),
       (else_try),
         (this_or_next|eq, ":villagers_party_size", 0),
         (eq, "$g_battle_result", 1),
         (try_begin),
           (eq, "$g_battle_result", 1),
           (store_random_in_range, ":enmity", -30, -15),
           (call_script, "script_change_player_relation_with_center", "$current_town", ":enmity"),
           (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
           (gt, ":town_lord", 0),
           (call_script, "script_change_player_relation_with_troop", ":town_lord", -3),
         (try_end),
         (jump_to_menu, "mnu_village_loot_no_resist"),
       (else_try),
         (eq, "$g_battle_result", -1),
         (jump_to_menu, "mnu_village_loot_defeat"),
       (try_end),
    ],
    [
      ("village_raid_attack",[],"Charge them.",[
          (store_random_in_range, ":enmity", -10, -5),
          (call_script, "script_change_player_relation_with_center", "$current_town", ":enmity"),
          (try_begin),
            (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
            (gt, ":town_lord", 0),
            (call_script, "script_change_player_relation_with_troop", ":town_lord", -3),
          (try_end),
          (call_script, "script_calculate_battle_advantage"),
          (set_battle_advantage, reg0),
          (set_party_battle_mode),
          (assign, "$g_battle_result", 0),
          (assign, "$g_village_raid_evil", 1),
          (set_jump_mission,"mt_village_raid"),
          (party_get_slot, ":scene_to_use", "$current_town", slot_castle_exterior),
          (jump_to_scene, ":scene_to_use"),
          (assign, "$g_next_menu", "mnu_village_start_attack"),

          (call_script, "script_diplomacy_party_attacks_neutral", "p_main_party", "$g_encountered_party"),
###NPC companion changes begin
          (call_script, "script_objectionable_action", tmt_humanitarian, "str_loot_village"),
#NPC companion changes end

          (jump_to_menu, "mnu_battle_debrief"),
          (change_screen_mission),
          ]),
      ("village_raid_leave",[],"Leave this village alone.",[(change_screen_return)]),
    ],
  ),
  
  (
    "village_loot_no_resist",0,
    "The villagers here are few and frightened, and they quickly scatter and run before you.\
 The village is at your mercy.",
    "none",
    [],
    [
      ("village_loot",[], "Plunder the village, then raze it.",
       [
          (call_script, "script_village_set_state", "$current_town", svs_being_raided),
          (party_set_slot, "$current_town", slot_village_raided_by, "p_main_party"),
          (assign,"$g_player_raiding_village","$current_town"),
          
          (try_begin),
            (store_faction_of_party, ":village_faction", "$current_town"),
            (store_relation, ":relation", "$players_kingdom", ":village_faction"),
            (ge, ":relation", 0),
            (call_script, "script_diplomacy_party_attacks_neutral", "p_main_party", "$current_town"),
          (try_end),	
          
          (rest_for_hours_interactive, 3, 5, 1), #rest while attackable (3 hours will be extended by the trigger)
          (change_screen_return),
           ]),
      ("village_raid_leave",[],"Leave this village alone.",[(change_screen_return)]),
    ],
  ),
  (
    "village_loot_complete",mnf_disable_all_keys,
    "On your orders your troops sack the village, pillaging everything of any value,\
 and then put the buildings to the torch. From the coins and valuables that are found, you get your share of {reg1} denars.",
    "none",
    [
        (get_achievement_stat, ":number_of_village_raids", ACHIEVEMENT_THE_BANDIT, 0),
        (get_achievement_stat, ":number_of_caravan_raids", ACHIEVEMENT_THE_BANDIT, 1),
        (val_add, ":number_of_village_raids", 1),
        (set_achievement_stat, ACHIEVEMENT_THE_BANDIT, 0, ":number_of_village_raids"),
        (try_begin),
          (ge, ":number_of_village_raids", 3),
          (ge, ":number_of_caravan_raids", 3),
          (unlock_achievement, ACHIEVEMENT_THE_BANDIT),
        (try_end),
        (party_get_slot, ":village_lord", "$current_town", slot_town_lord),
        (try_begin),
          (gt,  ":village_lord", 0),
          (call_script, "script_change_player_relation_with_troop", ":village_lord", -5),
        (try_end),
        (store_random_in_range, ":enmity", -35, -25),
        (call_script, "script_change_player_relation_with_center", "$current_town", ":enmity"),

        (store_faction_of_party, ":village_faction", "$current_town"),
        (store_relation, ":relation", ":village_faction", "fac_player_supporters_faction"),
        (try_begin),
          (lt, ":relation", 0),
          (call_script, "script_change_player_relation_with_faction", ":village_faction", -3),
        (try_end),
                
        (assign, ":money_gained", 300),
        (party_get_slot, ":prosperity", "$current_town", slot_town_prosperity),
        (store_mul, ":prosperity_of_village_mul_5", ":prosperity", 5),
        (val_add, ":money_gained", ":prosperity_of_village_mul_5"),
        (call_script, "script_troop_add_gold", "trp_player", ":money_gained"),
        
        (assign, ":morale_increase", 3),
        (store_div, ":money_gained_div_100", ":money_gained", 100),
        (val_add, ":morale_increase", ":money_gained_div_100"),
        (call_script, "script_change_player_party_morale", ":morale_increase"),
        
        ## CC
        (faction_get_slot, ":culture", ":village_faction", slot_faction_culture),
        (faction_get_slot, ":village_faction", ":culture", slot_faction_culture),
        ## CC
        (faction_get_slot, ":faction_morale", ":village_faction",  slot_faction_morale_of_player_troops),
        (store_mul, ":morale_increase_mul_2", ":morale_increase", 200),
        (val_sub, ":faction_morale", ":morale_increase_mul_2"),           
        (faction_set_slot, ":village_faction",  slot_faction_morale_of_player_troops, ":faction_morale"),
        

        
#NPC companion changes begin
        (call_script, "script_objectionable_action", tmt_humanitarian, "str_loot_village"),
#NPC companion changes end
        (assign, reg1, ":money_gained"),
      ],
    [
      ("continue",[], "Continue...",
       [
          (jump_to_menu, "mnu_close"),
          (call_script, "script_calculate_amount_of_cattle_can_be_stolen", "$current_town"),
          (assign, ":max_cattle", reg0),
          (val_mul, ":max_cattle", 3),
          (val_div, ":max_cattle", 2),
          (party_get_slot, ":num_cattle", "$current_town", slot_village_number_of_cattle),
          (val_min, ":max_cattle", ":num_cattle"),
          (val_add, ":max_cattle", 1),
          (store_random_in_range, ":random_value", 0, ":max_cattle"),
          (try_begin),
            (gt, ":random_value", 0),
            (call_script, "script_create_cattle_herd", "$current_town", ":random_value"),
            (val_sub, ":num_cattle", ":random_value"),
            (party_set_slot, "$current_town", slot_village_number_of_cattle, ":num_cattle"),
          (try_end),
          (troop_clear_inventory, "trp_temp_troop"),

          #below line changed with below lines to make plunder result more realistic. Now only items produced in bound town can be stolen after raid.
          #(reset_item_probabilities,100),

          #begin of changes
          (party_get_slot, ":bound_town", slot_village_bound_center, "$current_town"),
          (store_sub, ":item_to_price_slot", slot_town_trade_good_prices_begin, trade_goods_begin),
          (reset_item_probabilities,100),
          (assign, ":total_probability", 0),
          (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
            (store_add, ":cur_price_slot", ":cur_goods", ":item_to_price_slot"),
            (party_get_slot, ":cur_price", ":bound_town", ":cur_price_slot"),
            (call_script, "script_center_get_production", ":bound_town", ":cur_goods"),
            (assign, ":cur_probability", reg0),
            (call_script, "script_center_get_consumption", ":bound_town", ":cur_goods"),
            (val_div, reg0, 3),
            (val_add, ":cur_probability", reg0),
            (val_mul, ":cur_probability", 4),
            (val_mul, ":cur_probability", average_price_factor),
            (val_div, ":cur_probability", ":cur_price"),
            #first only simulation
            #(set_item_probability_in_merchandise,":cur_goods",":cur_probability"),                          
            (val_add, ":total_probability", ":cur_probability"),
          (try_end),

          (try_for_range, ":cur_goods", trade_goods_begin, trade_goods_end),
            (store_add, ":cur_price_slot", ":cur_goods", ":item_to_price_slot"),
            (party_get_slot, ":cur_price", ":bound_town", ":cur_price_slot"),
            (call_script, "script_center_get_production", ":bound_town", ":cur_goods"),
            (assign, ":cur_probability", reg0),
            (call_script, "script_center_get_consumption", ":bound_town", ":cur_goods"),
            (val_div, reg0, 3),
            (val_add, ":cur_probability", reg0),
            (val_mul, ":cur_probability", 4),
            (val_mul, ":cur_probability", average_price_factor),
            (val_div, ":cur_probability", ":cur_price"),

            (val_mul, ":cur_probability", num_merchandise_goods),
            (val_mul, ":cur_probability", 100),
            (val_div, ":cur_probability", ":total_probability"),

            (set_item_probability_in_merchandise,":cur_goods",":cur_probability"),                          
          (try_end),
          #end of changes

          (troop_add_merchandise,"trp_temp_troop",itp_type_goods,30),
          (troop_sort_inventory, "trp_temp_troop"),
          (change_screen_loot, "trp_temp_troop"),
        ]),
    ],
  ),
  (
    "village_loot_defeat",mnf_scale_picture,
    "Fighting with courage and determination, the villagers manage to hold together and drive off your forces.",
    "none",
    [
        (set_background_mesh, "mesh_pic_villageriot"),
	],
    [
      ("continue",[],"Continue...",[(change_screen_return)]),
    ],
  ),
  
  (
    "village_loot_continue",0,
    "Do you wish to continue looting this village?",
    "none",
    [],
    [
      ("disembark_yes",[],"Yes.",[ (rest_for_hours, 3, 5, 1), #rest while attackable (3 hours will be extended by the trigger)
                              (change_screen_return),
                              ]),
      ("disembark_no",[],"No.",[(call_script, "script_village_set_state", "$current_town", 0),
                            (party_set_slot, "$current_town", slot_village_raided_by, -1),
                            (assign, "$g_player_raiding_village", 0),
                            (change_screen_return)]),
    ],
  ),
  
  (
    "close",0,
    "Nothing.",
    "none",
    [
        (change_screen_return),
      ],
    [],
  ),
 
  (
    "town",mnf_enable_hot_keys|mnf_scale_picture,
    "{s10} {s14}^{s11}{s12}{s13}",
    "none",
    [    
        (try_begin),
          (eq, "$sneaked_into_town", 1),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_town_infiltrate),
        (else_try),
          (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
        (try_end),
        (store_encountered_party, "$current_town"),
      ## CC
        (try_begin),
          (party_get_slot, ":center_lord", "$current_town", slot_town_lord),
          (ge, ":center_lord", 0),
          (set_fixed_point_multiplier, 100),
          (position_set_x, pos0, 70),
          (position_set_y, pos0, 5),
          (position_set_z, pos0, 75),
          (set_game_menu_tableau_mesh, "tableau_troop_note_mesh", ":center_lord", pos0),
        (try_end),
      ## CC
        (call_script, "script_update_center_recon_notes", "$current_town"),
        (assign, "$g_defending_against_siege", 0),
        (str_clear, s3),
        (party_get_battle_opponent, ":besieger_party", "$current_town"),
        (store_faction_of_party, ":encountered_faction", "$g_encountered_party"),
        (store_relation, ":faction_relation", ":encountered_faction", "fac_player_supporters_faction"),
        (try_begin),
          (gt, ":besieger_party", 0),
          (ge, ":faction_relation", 0),
          (store_faction_of_party, ":besieger_party_faction", ":besieger_party"),
          (store_relation, ":besieger_party_relation", ":besieger_party_faction", "fac_player_supporters_faction"),
          (lt, ":besieger_party_relation", 0),
          (assign, "$g_defending_against_siege", 1),
          (assign, "$g_siege_first_encounter", 1),
          (jump_to_menu, "mnu_siege_started_defender"),
        (try_end),
        
        (try_begin),
          (is_between, "$g_encountered_party", towns_begin, towns_end),
          (store_sub, ":encountered_town_no", "$g_encountered_party", towns_begin),
          (set_achievement_stat, ACHIEVEMENT_MIGRATING_COCONUTS, ":encountered_town_no", 1),
          (assign, ":there_are_villages_not_visited", 0),
          (try_for_range, ":cur_town", towns_begin, towns_end),
            (store_sub, ":encountered_town_no", ":cur_town", towns_begin),
            (get_achievement_stat, ":town_is_visited", ACHIEVEMENT_MIGRATING_COCONUTS, ":encountered_town_no"),
            (eq, ":town_is_visited", 0),
            (assign, ":there_are_villages_not_visited", 1),
          (try_end),
          (try_begin),
            (eq, ":there_are_villages_not_visited", 0),
            (unlock_achievement, ACHIEVEMENT_MIGRATING_COCONUTS),
          (try_end),
        (try_end),  
        #Quest menus
        
        (assign, "$qst_collect_taxes_currently_collecting", 0),
        
        (try_begin),
          (gt, "$quest_auto_menu", 0),
          (jump_to_menu, "$quest_auto_menu"),
          (assign, "$quest_auto_menu", 0),
        (try_end),

        (try_begin),
##          (eq, "$g_center_under_siege_battle", 1),
##          (jump_to_menu,"mnu_siege_started_defender"),
##        (else_try),
          (eq, "$g_town_assess_trade_goods_after_rest", 1),
          (assign, "$g_town_assess_trade_goods_after_rest", 0),
          (jump_to_menu,"mnu_town_trade_assessment"),
        (try_end),

        (assign, "$talk_context", 0),
        (assign,"$all_doors_locked",0),

        (try_begin),
          (eq, "$g_town_visit_after_rest", 1),
          (assign, "$g_town_visit_after_rest", 0),
          (assign, "$town_entered", 1),
        (try_end),

        (try_begin),
          (eq,"$g_leave_town",1),
          (assign,"$g_leave_town",0),
          (assign,"$g_permitted_to_center",0),
          (leave_encounter),
          (change_screen_return),
        (try_end),
        
        (str_store_party_name, s2, "$current_town"),
        (party_get_slot, ":center_lord", "$current_town", slot_town_lord),
        (store_faction_of_party, ":center_faction", "$current_town"),
        (str_store_faction_name, s9, ":center_faction"),
        (try_begin),
          (ge, ":center_lord", 0),
          (str_store_troop_name,s8,":center_lord"),
          (str_store_string,s7,"@{s8} of {s9}"),
        (try_end),
        
        (try_begin),
          (party_slot_eq,"$current_town",slot_party_type, spt_town),

          (str_store_string, s60, s2),
          
          (party_get_slot, ":prosperity", "$current_town", slot_town_prosperity),
          (try_begin),
            (ge, "$cheat_mode", 1),
            (assign, reg4, ":prosperity",),
            (display_message, "@{!}DEBUG -- Prosperity: {reg4}"),
          (try_end),

	 #          (val_add, ":prosperity", 5),
          (store_div, ":str_id", ":prosperity", 10),
          (val_min, ":str_id", 9),
          (val_add, ":str_id", "str_town_prosperity_0"),
          (str_store_string, s10, ":str_id"),

          (store_div, ":str_id", ":prosperity", 20),
          (val_min, ":str_id", 4),
          (val_add, ":str_id", "str_town_alt_prosperity_0"),
          
          (str_store_string, s14, ":str_id"),

          
        (else_try),
          (str_clear, s14),
          (str_store_string,s10,"@You are at {s2}."),
        (try_end),
        
        (try_begin),
          (party_slot_eq,"$current_town",slot_party_type, spt_castle),
          (try_begin),
            (eq, ":center_lord", "trp_player"),
            (str_store_string,s11,"@ Your own banner flies over the castle gate."),
          (else_try),
            (gt, ":center_lord", -1),
            (troop_slot_eq, ":center_lord", slot_troop_spouse, "trp_player"),
            (str_store_string,s11,"str__you_see_the_banner_of_your_wifehusband_s7_over_the_castle_gate"),
          (else_try),
            (ge, ":center_lord", 0),
            (str_store_string,s11,"@ You see the banner of {s7} over the castle gate."),
          (else_try),
##            (str_store_string,s11,"@ This castle seems to belong to no one."),
            (str_store_string,s11,"str__this_castle_does_not_seem_to_be_under_anyones_control"),
            ##(str_store_string,s11,"@ This castle has no garrison."),
          (try_end),
        (else_try),
          (try_begin),
            (eq, ":center_lord", "trp_player"),
            (str_store_string,s11,"@ Your own banner flies over the town gates."),
          (else_try),	
            (gt, ":center_lord", -1),
            (troop_slot_eq, ":center_lord", slot_troop_spouse, "trp_player"),
            (str_store_string,s11,"str__the_banner_of_your_wifehusband_s7_flies_over_the_town_gates"),
          (else_try),
            (ge, ":center_lord", 0),
            (str_store_string,s11,"@ You see the banner of {s7} over the town gates."),
          (else_try),
##            (str_store_string,s11,"@ The townsfolk here have declared their independence."),
            (str_store_string,s11,"str__the_townspeople_seem_to_have_declared_their_independence"),
            ##(str_store_string,s11,"@ This town has no garrison."),
          (try_end),
        (try_end),

        (str_clear, s12),
        (try_begin),
          (party_slot_eq,"$current_town",slot_party_type, spt_town),
          (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
          (call_script, "script_describe_center_relation_to_s3", ":center_relation"),
          (assign, reg9, ":center_relation"),
          (str_store_string, s12, "@{!} {s3} ({reg9})."),
        (try_end),

        (str_clear, s13),
        (try_begin), 
          (gt,"$entry_to_town_forbidden",0),
          (str_store_string, s13, "@ You have successfully sneaked in."),
        (else_try),  
          (faction_slot_eq, ":center_faction", slot_faction_ai_state, sfai_feast),
          (faction_slot_eq, ":center_faction", slot_faction_ai_object, "$current_town"),
          
          (str_store_string, s13, "str__the_lord_is_currently_holding_a_feast_in_his_hall"),
        (try_end),

        #forbidden to enter?
        (try_begin), 
          (neg|is_currently_night), ## CC
          (assign,"$town_nighttime",0),
        (else_try),
          (assign,"$town_nighttime",1),
          (party_slot_eq,"$current_town",slot_party_type, spt_town),
          (str_store_string, s13, "str_town_nighttime"),
        (try_end),

        (try_begin),
          (party_slot_ge, "$current_town", slot_town_has_tournament, 1),
          (neg|is_currently_night),
          (party_set_slot, "$current_town", slot_town_has_tournament, 1),
          (str_store_string, s13, "@{s13} A tournament will be held here soon."),
        (try_end),

        (assign,"$castle_undefended",0),
        (party_get_num_companions, ":castle_garrison_size", "p_collective_enemy"),
        (try_begin),
          (eq,":castle_garrison_size",0),
          (assign,"$castle_undefended",1),
        (try_end),

            (call_script, "script_set_town_picture"),
        
        (try_begin),
          (party_slot_ge, "$current_town", slot_town_player_debt_days, 38),
          (call_script, "script_cf_enter_center_credit_fight"),
        (try_end),
        
        (try_begin),
          (eq, "$g_is_quick_battle", -1),
          (jump_to_menu, "mnu_oim_rich_visitor"), 
        (else_try),
          (eq, "$g_is_quick_battle", 2),
          (jump_to_menu, "mnu_oim_rich_visitor_result"), 
        (try_end),
        (assign, "$g_is_quick_battle", 0),
#        (str_clear, s5), #alert player that there are new rumors
#        (try_begin),
#            (eq, 1, 0),
#            (neg|is_currently_night),
#            (str_store_string, s5, "@^The buzz of excited voices as you come near the gate suggests to you that news of some import is circulating among the townsfolk."),
#            (lt, "$last_town_log_entry_checked", "$num_log_entries"),
#            (assign, "$g_town_rumor_log_entry", 0),
#            (try_for_range, ":log_entry", "$last_town_log_entry_checked", "$num_log_entries"),
#            	(eq, ":log_entry", 4123), #placeholder to avoid having unused variable error message
#            (try_end),
#            (assign, "$last_town_log_entry_checked", "$num_log_entries"),
#        (try_end),
        ],
    [
      ("castle_castle",
      [        
        (party_slot_eq,"$current_town",slot_party_type, spt_castle),        
        
        (eq, "$sneaked_into_town", 0),         
        
        (str_clear, s1),
        (try_begin),
          (store_faction_of_party, ":center_faction", "$current_town"),
          (faction_slot_eq, ":center_faction", slot_faction_ai_state, sfai_feast),
          (faction_slot_eq, ":center_faction", slot_faction_ai_object, "$current_town"),
          (str_store_string, s1, "str__join_the_feast"),
        (try_end),
        ],"Go to the Lord's hall{s1}.",
       [          
           (try_begin),
             (this_or_next|eq, "$all_doors_locked", 1),
             (eq, "$sneaked_into_town", 1),           
             (display_message,"str_door_locked",0xFFFFAAAA),
           (else_try),
             (this_or_next|neq, "$players_kingdom", "$g_encountered_party_faction"),
             (neg|troop_slot_ge, "trp_player", slot_troop_renown, 50),
             (neg|troop_slot_ge, "trp_player", slot_troop_renown, 125),
             (neq, "$g_player_eligible_feast_center_no", "$current_town"),

             (faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_state, sfai_feast),
             (faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_object, "$g_encountered_party"),
             
             (neg|check_quest_active, "qst_wed_betrothed"),
             (neg|check_quest_active, "qst_wed_betrothed_female"),
             
             (neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin), #Married players always make the cut
             
             (jump_to_menu, "mnu_cannot_enter_court"),
           (else_try),
             (store_faction_of_party, ":current_town_faction", "$current_town"),
             (neg|eq, ":current_town_faction", "$players_kingdom"),
             (neg|troop_slot_ge,"trp_player", slot_troop_player_class,6),
             (neg|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
			 (neg|eq, "$background_type", cb_noble),
             (jump_to_menu, "mnu_castle_entry_refused"),
           (else_try),
             (assign, "$town_entered", 1),
             (call_script, "script_enter_court", "$current_town"),
           (try_end),
        ], "Door to the castle."),
        
      ("join_tournament", [(neg|is_currently_night),(party_slot_ge, "$current_town", slot_town_has_tournament, 1),
      (eq, "$g_player_troop","trp_player"),(eq, 1, 0),
      ]
       ,"Join the tournament.",
       [
           (call_script, "script_fill_tournament_participants_troop", "$current_town", 1),
           (assign, "$g_tournament_cur_tier", 0),
           (assign, "$g_tournament_player_team_won", -1),
           (assign, "$g_tournament_bet_placed", 0),
           (assign, "$g_tournament_bet_win_amount", 0),
           (assign, "$g_tournament_last_bet_tier", -1),
           (assign, "$g_tournament_next_num_teams", 0),
           (assign, "$g_tournament_next_team_size", 0),
           (assign, "$item_add", 0),
           (jump_to_menu, "mnu_town_tournament"),
        ]),
      
      ("town_castle",[        
          (party_slot_eq,"$current_town",slot_party_type, spt_town),        
          (eq, "$g_player_troop","trp_player"),
          (eq,"$entry_to_town_forbidden",0),        
          (str_clear, s1),
          (try_begin),
            (store_faction_of_party, ":center_faction", "$current_town"),
            (faction_slot_eq, ":center_faction", slot_faction_ai_state, sfai_feast),
            (faction_slot_eq, ":center_faction", slot_faction_ai_object, "$current_town"),
            (str_store_string, s1, "str__join_the_feast"),
          (try_end),

          ],"Go to the castle{s1}.",
       [           
           (try_begin),
             (this_or_next|eq, "$all_doors_locked", 1),
             (eq, "$sneaked_into_town", 1),           
             (display_message,"str_door_locked",0xFFFFAAAA),
           (else_try),
             (this_or_next|neq, "$players_kingdom", "$g_encountered_party_faction"),
             (neg|troop_slot_ge, "trp_player", slot_troop_renown, 50),
             (neg|troop_slot_ge, "trp_player", slot_troop_renown, 125),
             (neq, "$g_player_eligible_feast_center_no", "$current_town"),             
             
             (faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_state, sfai_feast),
             (faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_object, "$g_encountered_party"),

             (neg|check_quest_active, "qst_wed_betrothed"),
             (neg|check_quest_active, "qst_wed_betrothed_female"),
             
             (neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin), #Married players always make the cut
             
             (jump_to_menu, "mnu_cannot_enter_court"),
           (else_try),
             (store_faction_of_party, ":current_town_faction", "$current_town"),
             (neg|eq, ":current_town_faction", "$players_kingdom"),
             (neg|troop_slot_ge,"trp_player", slot_troop_player_class,6),
             (neg|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
			 (neg|eq, "$background_type", cb_noble),
             (jump_to_menu, "mnu_castle_entry_refused"),
            (else_try),
              (assign, "$town_entered", 1),              
              (call_script, "script_enter_court", "$current_town"),
           (try_end),
        ], "Door to the castle."),
      
      ("town_center",
      [                        
        (party_slot_eq, "$current_town", slot_party_type, spt_town),
        (this_or_next|eq,"$entry_to_town_forbidden",0),
        (eq, "$sneaked_into_town",1)
      ],
      "Take a walk around the streets.",
       [
         #If the player is fighting his or her way out
         (try_begin),
           (eq, "$talk_context", tc_prison_break),
           (assign, "$talk_context", tc_escape),
           (assign, "$g_mt_mode", tcm_escape),
           (store_faction_of_party, ":town_faction", "$current_town"),
           (faction_get_slot, ":tier_2_troop", ":town_faction", slot_faction_tier_3_troop),
           (faction_get_slot, ":tier_3_troop", ":town_faction", slot_faction_tier_3_troop),
           (faction_get_slot, ":tier_4_troop", ":town_faction", slot_faction_tier_4_troop),
           (party_get_slot, ":town_scene", "$current_town", slot_town_center),
           (modify_visitors_at_site, ":town_scene"),
           (reset_visitors),
           #ideally we could alarm troops at locations
           (try_begin), 
	         #if guards have not gone to some other important happening at nearby villages, then spawn 4 guards. (example : fire)
             (party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),                          
             (store_current_hours, ":cur_time"),
             (store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),
                                                    
             (neg|is_between, ":cur_time", ":last_nearby_fire_time", ":fire_finish_time"),
             (store_time_of_day, ":cur_day_hour"),
             (try_begin), #there are 6 guards at day time (no fire ext)
               (ge, ":cur_day_hour", 6),
               (lt, ":cur_day_hour", 22),
               (set_visitors, 25, ":tier_2_troop", 2),
               (set_visitors, 26, ":tier_2_troop", 1),
               (set_visitors, 27, ":tier_3_troop", 2),
               (set_visitors, 28, ":tier_4_troop", 1),
             (else_try),  #only 4 guards because of night
               (set_visitors, 25, ":tier_2_troop", 1),
               (set_visitors, 26, ":tier_2_troop", 1),
               (set_visitors, 27, ":tier_3_troop", 1),
               (set_visitors, 28, ":tier_4_troop", 1),
             (try_end),
           (else_try),
	         #if guards have gone to some other important happening at nearby villages, then spawn only 1 guard. (example : fire)
             (store_time_of_day, ":cur_day_hour"),
             (try_begin), #only 2 guard because there is a fire at one owned village
               (ge, ":cur_day_hour", 6),
               (lt, ":cur_day_hour", 22),
               (set_visitors, 25, ":tier_2_troop", 1),
               (set_visitors, 26, ":tier_2_troop", 0),
               (set_visitors, 27, ":tier_3_troop", 1),
               (set_visitors, 28, ":tier_4_troop", 0),
             (else_try), #only 1 guard because both night and there is a fire at one owned village
               (set_visitors, 25, ":tier_2_troop", 1),
               (set_visitors, 26, ":tier_2_troop", 0),
               (set_visitors, 27, ":tier_3_troop", 0),
               (set_visitors, 28, ":tier_4_troop", 0),
             (try_end),                   
           (try_end),
           (set_jump_mission,"mt_town_center"),
           (jump_to_scene, ":town_scene"),
           (change_screen_mission),
            #If you're already at escape, then talk context will reset
         (else_try),
           (assign, "$talk_context", 0),
           (call_script, "script_cf_enter_center_location_bandit_check"),
           #All other circumstances...
         (else_try),
           (party_get_slot, ":town_scene", "$current_town", slot_town_center),
           (modify_visitors_at_site, ":town_scene"),
           (reset_visitors),
           (assign, "$g_mt_mode", tcm_default),
           (store_faction_of_party, ":town_faction","$current_town"),
                      
           (try_begin),
             (neq, ":town_faction", "fac_player_supporters_faction"),
             (faction_get_slot, ":troop_prison_guard", "$g_encountered_party_faction", slot_faction_prison_guard_troop),
             (faction_get_slot, ":troop_castle_guard", "$g_encountered_party_faction", slot_faction_castle_guard_troop),
             (faction_get_slot, ":tier_2_troop", ":town_faction", slot_faction_tier_2_troop),
             (faction_get_slot, ":tier_3_troop", ":town_faction", slot_faction_tier_3_troop),
           (else_try),
             (party_get_slot, ":town_original_faction", "$current_town", slot_center_original_faction),
             (faction_get_slot, ":troop_prison_guard", ":town_original_faction", slot_faction_prison_guard_troop),
             (faction_get_slot, ":troop_castle_guard", ":town_original_faction", slot_faction_castle_guard_troop),
             (faction_get_slot, ":tier_2_troop", ":town_original_faction", slot_faction_tier_2_troop),
             (faction_get_slot, ":tier_3_troop", ":town_original_faction", slot_faction_tier_3_troop),
           (try_end),
           (try_begin), #think about this, should castle guard have to go nearby fire too? If he do not go, killing 2 armored guard is too hard for player. For now he goes too.
             #if guards have not gone to some other important happening at nearby villages, then spawn 4 guards. (example : fire)
             (party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),
             (store_current_hours, ":cur_time"),
             (store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),

             (neg|is_between, ":cur_time", ":last_nearby_fire_time", ":fire_finish_time"),
             (set_visitor, 23, ":troop_castle_guard"),
           (try_end),
           (set_visitor, 24, ":troop_prison_guard"),
           
           (try_begin),
             (gt,":tier_2_troop", 0),
             (assign,reg0,":tier_3_troop"),
             (assign,reg1,":tier_3_troop"),
             (assign,reg2,":tier_2_troop"),
             (assign,reg3,":tier_2_troop"),
           (else_try),
             (assign,reg0,"trp_mercenary_swordsman"),
             (assign,reg1,"trp_mercenary_swordsman"),
             (assign,reg2,"trp_musket_man"),
             (assign,reg3,"trp_musket_man"),
           (try_end),
           (shuffle_range,0,4),
         
           (try_begin),
             #if guards have not gone to some other important happening at nearby villages, then spawn 4 guards. (example : fire)
             (party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),
             (store_current_hours, ":cur_time"),
             (store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),

             (neg|is_between, ":cur_time", ":last_nearby_fire_time", ":fire_finish_time"),
             (set_visitor,25,reg0),
             (set_visitor,26,reg1),
             (set_visitor,27,reg2),
             (set_visitor,28,reg3),
           (try_end),
         
           (party_get_slot, ":spawned_troop", "$current_town", slot_town_armorer),
           (set_visitor, 9, ":spawned_troop"),
           (party_get_slot, ":spawned_troop", "$current_town", slot_town_weaponsmith),
           (set_visitor, 10, ":spawned_troop"),
           (party_get_slot, ":spawned_troop", "$current_town", slot_town_elder),
           (set_visitor, 11, ":spawned_troop"),
           (party_get_slot, ":spawned_troop", "$current_town", slot_town_horse_merchant),
           (set_visitor, 12, ":spawned_troop"),
           (call_script, "script_init_town_walkers"),
           (set_jump_mission,"mt_town_center"),
           (assign, ":override_state", af_override_horse),
           (try_begin),
             (eq, "$sneaked_into_town", 1), #setup disguise
             (assign, ":override_state", af_override_all),
           (try_end),
           (mission_tpl_entry_set_override_flags, "mt_town_center", 0, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_town_center", 2, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_town_center", 3, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_town_center", 4, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_town_center", 5, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_town_center", 6, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_town_center", 7, ":override_state"),
           (try_begin),
             (eq, "$town_entered", 0),
             (assign, "$town_entered", 1),
             (eq, "$town_nighttime", 0),
             (set_jump_entry, 1),
           (try_end),
           (jump_to_scene, ":town_scene"),
           (change_screen_mission),
         (try_end),	   
      ],"Door to the town center."),
      
      ("town_tavern",[
          (party_slot_eq,"$current_town",slot_party_type, spt_town),
          (this_or_next|eq,"$entry_to_town_forbidden",0),
          (eq, "$sneaked_into_town",1),
#          (party_get_slot, ":scene", "$current_town", slot_town_tavern),
#          (scene_slot_eq, ":scene", slot_scene_visited, 1), #check if scene has been visited before to allow entry from menu. Otherwise scene will only be accessible from the town center.
          ]
       ,"Visit the tavern.",
       [
           (try_begin),
             (eq,"$all_doors_locked",1),
             (display_message,"str_door_locked",0xFFFFAAAA),
           (else_try),
             (call_script, "script_cf_enter_center_location_bandit_check"),
           (else_try),
             (assign, "$town_entered", 1),
             (set_jump_mission, "mt_town_default"),
             (mission_tpl_entry_set_override_flags, "mt_town_default", 0, af_override_horse),
             (try_begin),
               (eq, "$sneaked_into_town",1),
               (mission_tpl_entry_set_override_flags, "mt_town_default", 0, af_override_all),
             (try_end),
             (party_get_slot, ":cur_scene", "$current_town", slot_town_tavern),
             (jump_to_scene, ":cur_scene"),
             (scene_set_slot, ":cur_scene", slot_scene_visited, 1),

             (assign, "$talk_context", tc_tavern_talk),
             (call_script, "script_initialize_tavern_variables"),
             (party_set_slot,"p_main_party", slot_party_is_in_siege, 1),
             #(store_random_in_range, ":randomize_attacker_placement", 0, 4),

             (modify_visitors_at_site, ":cur_scene"),
             (reset_visitors),
             
             (assign, ":cur_entry", 17),

             #(troop_set_slot, "trp_belligerent_drunk", slot_troop_cur_center, "$g_encountered_party"),
            # (try_begin),
            #	(eq, "$cheat_mode", 1),
            #	(troop_get_slot, ":drunk_location", "trp_belligerent_drunk", slot_troop_cur_center),
            #	(try_begin),
            #        (eq, "$cheat_mode", 0),
            #	(else_try),
            #        (is_between, ":drunk_location", centers_begin, centers_end),
            #        (str_store_party_name, s4, ":drunk_location"),
            #        (display_message, "str_belligerent_drunk_in_s4"),
            #    (else_try),
            #        (display_message, "str_belligerent_drunk_not_found"),
            #	(try_end),
            #	
            #	(troop_get_slot, ":promoter_location", "trp_fight_promoter", slot_troop_cur_center),
            #	(try_begin),
            #        (eq, "$cheat_mode", 0),
            #	(else_try),
            #        (is_between, ":promoter_location", centers_begin, centers_end),
            #        (str_store_party_name, s4, ":promoter_location"),
            #        (display_message, "str_roughlooking_character_in_s4"),
            #    (else_try),
            #        (display_message, "str_roughlooking_character_not_found"),
            #	(try_end),            	
            # (try_end),
             
             
             #this determines whether or not a lord who dislikes you will commission an assassin
             (try_begin),
            	(store_current_hours, ":hours"),
            	(store_sub, ":hours_since_last_attempt", ":hours", "$g_last_assassination_attempt_time"),
            	(gt, ":hours_since_last_attempt", 168),
            	(try_for_range, ":lord", active_npcs_begin, active_npcs_end),
                    (troop_slot_eq, ":lord", slot_lord_reputation_type, lrep_debauched),
                    (troop_get_slot, ":led_party", ":lord", slot_troop_leaded_party),
                    (party_is_active, ":led_party"),
                    (party_get_attached_to, ":led_party_attached", ":led_party"), 
                    (eq, ":led_party_attached", "$g_encountered_party"),
                    (call_script, "script_troop_get_relation_with_troop", "trp_player", ":lord"),
                    (lt, reg0, -20),
                    (assign, "$g_last_assassination_attempt_time", ":hours"),
#                    (assign, "$g_last_assassination_attempt_location", "$g_encountered_party"),
#                    (assign, "$g_last_assassination_attempt_perpetrator", ":lord"),
                    
                    (troop_set_slot, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),                    
            	(try_end),
             (try_end),	

             ## starting merchant
             (try_begin),
               (eq, "$g_starting_town", "$current_town"),
                              
               (this_or_next|neg|check_quest_finished, "qst_collect_men"),
               (this_or_next|neg|check_quest_finished, "qst_learn_where_merchant_brother_is"),
               (this_or_next|neg|check_quest_finished, "qst_save_relative_of_merchant"),
               (this_or_next|neg|check_quest_finished, "qst_save_town_from_bandits"),
               (eq,  "$g_do_one_more_meeting_with_merchant", 1),
               (neg|eq,  "$begin_as_knight", 1),
               (assign, ":troop_of_merchant", 0),	
               #(try_begin),
                 #(eq, "$g_encountered_party_faction", "fac_kingdom_1"),
                 #(assign, ":troop_of_merchant", "trp_swadian_merchant"),
               #(else_try),  
                 #(eq, "$g_encountered_party_faction", "fac_kingdom_2"),
                 #(assign, ":troop_of_merchant", "trp_vaegir_merchant"),
               #(else_try),                   
                 #(eq, "$g_encountered_party_faction", "fac_kingdom_3"),
                 #(assign, ":troop_of_merchant", "trp_khergit_merchant"),
               #(else_try),  
                 #(eq, "$g_encountered_party_faction", "fac_kingdom_4"),
                 #(assign, ":troop_of_merchant", "trp_nord_merchant"),
               #(else_try),  
                 #(eq, "$g_encountered_party_faction", "fac_kingdom_5"),
                 #(assign, ":troop_of_merchant", "trp_rhodok_merchant"),
               #(else_try),  
                 #(eq, "$g_encountered_party_faction", "fac_kingdom_6"),
                 #(assign, ":troop_of_merchant", "trp_sarranid_merchant"),
               #(try_end),
               
               (assign, ":troop_of_merchant", "trp_swadian_merchant"),
               (gt, ":troop_of_merchant", 0),	
               
               (set_visitor, ":cur_entry", ":troop_of_merchant"),
               (val_add, ":cur_entry", 1),
             (try_end),                         
             (try_begin),
                 #(eq, ":randomize_attacker_placement", 0),
                 #(call_script, "script_setup_tavern_attacker", ":cur_entry"),
                 #(store_random_in_range, ":randomize", 0, 15),
                 #(this_or_next|eq, ":randomize", 0),
                 (neg|troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),
                 #(store_random_in_range, ":num", 1, 4),
				 #(store_random_in_range, ":random_troop", town_troops_begin, town_troops_end),
				 (assign, ":random_troop", 0),
                 (store_random_in_range, ":random_no", 0, 22),
                 (try_begin),
                    (is_between, ":random_no", 0,5),
					(faction_get_slot, ":random_troop", "$g_encountered_party_faction", slot_faction_tier_1_troop),
                 (else_try),
                    (is_between, ":random_no", 5,10),
                    (faction_get_slot, ":random_troop", "$g_encountered_party_faction", slot_faction_tier_1_town_troop),
                 (else_try),
                   (is_between, ":random_no", 15,20),
                   (try_begin),
                     (eq,"$g_encountered_party_faction","fac_kingdom_1"),
                     (assign, ":random_troop", "trp_grandelf_recruit"),
                   (else_try), 
                     (eq,"$g_encountered_party_faction","fac_kingdom_3"),
                     (store_random_in_range, ":random_troop", "trp_orc", "trp_orc_big_boss"),
                   (else_try),  
                     (eq,"$g_encountered_party_faction","fac_kingdom_4"),
                     (assign, ":random_troop", "trp_woodelf_recruit"),
                   (else_try),  
                     (eq,"$g_encountered_party_faction","fac_kingdom_7"),
                     (assign, ":random_troop", "trp_german_knight_1"),
                   (else_try),  
                     (eq,"$g_encountered_party_faction","fac_kingdom_8"),
                     (store_random_in_range, ":random_troop", "trp_drowelf_assassin_1", "trp_drowelf_which_2"),
                   (else_try),  
                     (eq,"$g_encountered_party_faction","fac_kingdom_8"),
                     (assign, ":random_troop", "trp_minotaur_1"),
                   (else_try), 
                     (eq,"$g_encountered_party_faction","fac_kingdom_9"),
                     (assign, ":random_troop", "trp_demon_human_1"),
                   (else_try),  
                     (eq,"$g_encountered_party_faction","fac_kingdom_5"),
                     (assign, ":random_troop", "trp_vampire_assassin"),
                   (else_try),  
                     (eq,"$g_encountered_party_faction","fac_kingdom_10"),
                     (assign, ":random_troop", "trp_dwarf_miner"),
                   (else_try),
                     (store_random_in_range, ":random_troop", "trp_slaver_captain", "trp_naffatun"),
                   (try_end),
                 (else_try),
                   (is_between, ":random_no", 10,15),
                   (try_begin),  
                     (this_or_next|eq,"$g_encountered_party_faction","fac_kingdom_1"),
                     (eq,"$g_encountered_party_faction","fac_kingdom_4"),
                     (assign, ":random_troop", "trp_welsh_longbowm_1"),
                   (else_try),  
                     (eq,"$g_encountered_party_faction","fac_kingdom_8"),
                     (assign, ":random_troop", "trp_steppe_tribesman"),
                   (else_try), 
                     (eq,"$g_encountered_party_faction","fac_kingdom_3"),
                     (store_random_in_range, ":random_troop", "trp_goblin", "trp_troll_1"),
                   (else_try), 
                     (eq,"$g_encountered_party_faction","fac_kingdom_5"),
                     (store_random_in_range, ":random_troop", "trp_swiss_swordman", "trp_goblin"),
                   (else_try), 
                     (eq,"$g_encountered_party_faction","fac_kingdom_7"),
                     (store_random_in_range, ":random_troop", "trp_scottish_jav", "trp_swiss_swordman"),
                   (else_try), 
                     (eq,"$g_encountered_party_faction","fac_kingdom_9"),
                     (store_random_in_range, ":random_troop", "trp_me_mercenary_swordsman_1", "trp_mercenary_balkan_cav"),
                   (else_try),  
                     (eq,"$g_encountered_party_faction","fac_kingdom_10"),
                     (store_random_in_range, ":random_troop", "trp_mercenary_berserker", "trp_hand_gunner"),
                   (try_end),
                 (else_try),
                   (faction_get_slot, ":random_troop", "$g_encountered_party_faction", slot_faction_tier_1_castle_troop),
                 (try_end),
				 (val_max, ":random_troop", "trp_farmer"),
				 (store_character_level, ":upgrade"),
				 (val_div, ":upgrade", 10),
				 (assign, ":upgraded_troop", ":random_troop"),
				 (try_for_range, ":unused", 0, ":upgrade"),
					(gt, ":upgraded_troop", 0),
					(try_begin),
						(store_random_in_range, ":path", 0, 2),
						(eq, ":path", 1),
						(troop_get_upgrade_troop, ":upgraded_troop", ":random_troop", 1),
						(gt, ":upgraded_troop", 0),
						(assign, ":random_troop", ":upgraded_troop"),
					(else_try),
						(troop_get_upgrade_troop, ":upgraded_troop", ":random_troop", 0),
						(gt, ":upgraded_troop", 0),
						(assign, ":random_troop", ":upgraded_troop"),					
					(try_end),
				 (try_end),
                 (troop_set_slot, "trp_belligerent_drunk", slot_troop_cur_center, ":random_troop"),
                 #(store_character_level,":troop_level",":random_troop"),
                 #(store_div,":num",100,":troop_level"),
                 #(val_clamp, ":num", 0, 5),
                 #(try_for_range, ":unused", 0, ":num"),
                   (set_visitor, ":cur_entry", ":random_troop"),
                   (val_add, ":cur_entry", 1),
                 #(try_end),
             (try_end),

             (try_begin),
                (eq, "$current_town", "p_town_6"),
                (set_visitor, ":cur_entry", "trp_nameless"),
                (val_add, ":cur_entry", 1),
             (try_end),
             (try_begin),
                (eq, 1, 0),
                (troop_slot_eq, "trp_fight_promoter", slot_troop_cur_center, "$current_town"),
                (set_visitor, ":cur_entry", "trp_fight_promoter"),
                (val_add, ":cur_entry", 1),
             (try_end),
             #(party_get_slot, ":mercenary_troop", "$current_town", slot_center_mercenary_troop_type),
             #(party_get_slot, ":mercenary_amount", "$current_town", slot_center_mercenary_troop_amount),
             #(try_begin),
               #(gt, ":mercenary_troop", 0),
               #(gt, ":mercenary_amount", 0),
               #(set_visitor, ":cur_entry", ":mercenary_troop"),
               #(val_add, ":cur_entry", 1),
             #(try_end),

              #(party_get_slot, ":volunteer_troop", "$current_town", slot_town_volunteer_troop_type),
              #(party_get_slot, ":volunteer_amount", "$current_town", slot_town_volunteer_troop_amount),
              #(try_begin),
               #(gt, ":volunteer_troop", 0),
               #(gt, ":volunteer_amount", 0),
               #(set_visitor, ":cur_entry", ":volunteer_troop"),
               #(val_add, ":cur_entry", 1),
              #(try_end),


             (try_begin), #this doubles the incidence of ransom brokers and (below) minstrels
               (troop_slot_ge,"trp_player", slot_troop_player_class,1),
               (party_get_slot, ":ransom_broker", "$current_town", slot_center_ransom_broker),
               (gt, ":ransom_broker", 0),
               (assign, reg0, ":ransom_broker"),
               (assign, reg1, "$current_town"),

               (set_visitor, ":cur_entry", ":ransom_broker"),
               (val_add, ":cur_entry", 1),
             #(else_try),
               # (is_between, "$g_talk_troop", ransom_brokers_begin, ransom_brokers_end), ## CC
               #(store_add, ":alternative_town", "$current_town", 9),

               #(try_begin),
                #(ge, ":alternative_town", towns_end),
                #(val_sub, ":alternative_town", 22),
               #(try_end),
               #(try_begin),
                #(eq, "$cheat_mode", 1),
                #(str_store_party_name, s3, "$current_town"),
                #(str_store_party_name, s4, ":alternative_town"),
                #(display_message, "@{!}DEBUG - Current town is {s3}, but also checking {s4}"),
               #(try_end),    

               #(party_get_slot, ":ransom_broker", ":alternative_town", slot_center_ransom_broker),
               # (gt, ":ransom_broker", 0),

               #(set_visitor, ":cur_entry", ":ransom_broker"),
               #(val_add, ":cur_entry", 1),
             (try_end),

             (try_begin),
               (troop_slot_ge,"trp_player", slot_troop_player_class,5),
               (party_get_slot, ":tavern_traveler", "$current_town", slot_center_tavern_traveler),
               (gt, ":tavern_traveler", 0),
               (set_visitor, ":cur_entry", ":tavern_traveler"),
               (val_add, ":cur_entry", 1),
             (try_end),
             
             (assign, ":has_tavern_minstrel", 0),
             (try_begin),
               (troop_slot_ge,"trp_player", slot_troop_player_class,3),
               (troop_get_type, ":agent_gender", "trp_player"),
                        (neg|eq, ":agent_gender", tf_female_elf),
                        (neg|eq, ":agent_gender", tf_female),
               (party_get_slot, ":tavern_minstrel", "$current_town", slot_center_tavern_minstrel),
               (gt, ":tavern_minstrel", 0),

               (set_visitor, ":cur_entry", ":tavern_minstrel"),
               (val_add, ":cur_entry", 1),
               (assign, ":has_tavern_minstrel", 1),
             #(else_try),  
               #(store_add, ":alternative_town", "$current_town", 9),
               #(try_begin),
            	#(ge, ":alternative_town", towns_end),
            	#(val_sub, ":alternative_town", 22),
               #(try_end),
               #(party_get_slot, ":tavern_minstrel", ":alternative_town", slot_center_tavern_minstrel),   
               #(gt, ":tavern_minstrel", 0),

               #(set_visitor, ":cur_entry", ":tavern_minstrel"),
               #(val_add, ":cur_entry", 1),
             (try_end),
             
## CC gambling begin
             (try_begin),
               (party_get_slot, ":mystic_merchant", "$current_town", slot_center_tavern_mystic_merchant),
               (try_begin),
                 (le, ":mystic_merchant", 0),
                 (try_begin),  
                   (party_get_slot, ":prosperity", "$current_town", slot_town_prosperity),
                   (val_mod, ":prosperity", 24),
                   (store_time_of_day, ":cur_hour"),
                   (store_sub, ":difference", ":prosperity", ":cur_hour"),
                   (is_between, ":difference", -1, 2), # -1 0 1, 1/8 probability
                   (assign, ":mystic_merchant", "trp_salt_mine_merchant"),
                 (try_end),
               (try_end),
               
               (try_begin),
                 (eq, ":mystic_merchant", "trp_mystic_merchant_2"), 
                 (store_relation, ":talk_faction", "fac_player_faction", "fac_forest_ranger"),
                 (le, ":talk_faction", 0),
                 (assign, ":mystic_merchant", "trp_salt_mine_merchant"),
               (else_try),  
                 (eq, ":mystic_merchant", "trp_mystic_merchant_3"), 
                 (store_relation, ":talk_faction", "fac_player_faction", "fac_elf"),
                 (le, ":talk_faction", 0),
                 (assign, ":mystic_merchant", "trp_salt_mine_merchant"),
               (else_try),  
                 (eq, ":mystic_merchant", "trp_mystic_merchant_4"), 
                 (store_relation, ":talk_faction", "fac_player_faction", "fac_orc"),
                 (le, ":talk_faction", 0),
                 (assign, ":mystic_merchant", "trp_salt_mine_merchant"),
               (else_try),  
                 (eq, ":mystic_merchant", "trp_mystic_merchant_5"), 
                 (store_relation, ":talk_faction", "fac_player_faction", "fac_undeads_2"),
                 (le, ":talk_faction", 0),
                 (assign, ":mystic_merchant", "trp_salt_mine_merchant"),
               (else_try),  
                 (eq, ":mystic_merchant", "trp_mystic_merchant_6"), 
                 (store_relation, ":talk_faction", "fac_player_faction", "fac_beast"),
                 (le, ":talk_faction", 0),
                 (assign, ":mystic_merchant", "trp_salt_mine_merchant"),
               (else_try),  
                 (eq, ":mystic_merchant", "trp_mystic_merchant_7"), 
                 (store_relation, ":talk_faction", "fac_player_faction", "fac_dwarf"),
                 (le, ":talk_faction", 0),
                 (assign, ":mystic_merchant", "trp_salt_mine_merchant"),
               (else_try),  
                 (eq, ":mystic_merchant", "trp_mystic_merchant_9"), 
                 (store_relation, ":talk_faction", "fac_player_faction", "fac_demon_hunters"),
                 (le, ":talk_faction", 0),
                 (assign, ":mystic_merchant", "trp_salt_mine_merchant"),
               (try_end),  
                 
               (try_begin),  
                 (eq, ":mystic_merchant", "trp_salt_mine_merchant"),
                 (troop_set_name, "trp_salt_mine_merchant", "@Mystic Merchant"),
               (try_end),
               
              # (try_begin),  
              #   (gt, ":mystic_merchant", 0),
              #   (set_visitor, ":cur_entry", ":mystic_merchant"),
              #   (call_script, "script_refresh_mystic_merchant_items", "trp_salt_mine_merchant"),
              #   (call_script, "script_refresh_mystic_merchant_items", ":mystic_merchant"),
              #   (val_add, ":cur_entry", 1),
              # (try_end),
             (try_end),
## CC gambling end
             
             
## CC
             (try_begin),
               (troop_slot_ge,"trp_player", slot_troop_player_class,4),
               (try_begin),
                 (party_get_slot, ":tavern_bookseller", "$current_town", slot_center_tavern_bookseller),
                 (gt, ":tavern_bookseller", 0),
                 (set_visitor, ":cur_entry", ":tavern_bookseller"),
                 (val_add, ":cur_entry", 1),
               (else_try),  
                 (party_get_slot, ":prosperity", "$current_town", slot_town_prosperity),
                 (val_mod, ":prosperity", 24),
                 (store_time_of_day, ":cur_hour"),
                 (store_sub, ":difference", ":prosperity", ":cur_hour"),
                 (assign, ":tavern_bookseller", -1),
                 (try_begin),
                   (is_between, ":difference", -1, 1), # -1 0 , 1/12 probability
                   (assign, ":tavern_bookseller", "trp_tavern_bookseller_1"),
                 (else_try),  
                   (is_between, ":difference", 1, 3), # 1 2, 1/12 probability
                   (assign, ":tavern_bookseller", "trp_tavern_bookseller_2"),
                 (try_end),
                 (gt, ":tavern_bookseller", 0),
                 (troop_get_inventory_capacity, ":inv_cap", ":tavern_bookseller"),
                 (try_for_range, ":i_slot", 10, ":inv_cap"),
                   (troop_get_inventory_slot, ":item", ":tavern_bookseller", ":i_slot"),
                   (gt, ":item", -1),
                   (item_get_type, ":type", ":item"),
                   (neq, ":type", itp_type_book),
                   (troop_set_inventory_slot, ":tavern_bookseller", ":i_slot", -1),
                 (try_end),
                 (set_visitor, ":cur_entry", ":tavern_bookseller"),
                 (val_add, ":cur_entry", 1),
               (try_end),
             (try_end),
             
             (try_begin),
                 (troop_slot_ge,"trp_player", slot_troop_player_class,3),
                 #(eq, ":randomize_attacker_placement", 3),
                 (store_random_in_range, ":randomize", 0, 10),
                 (this_or_next|eq, ":randomize", 1),
                 (troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$g_encountered_party"),
                 (store_random_in_range, ":num", 2, 4),
                 (try_for_range, ":unused", 0, ":num"),
                   (set_visitor, ":cur_entry", "trp_hired_assassin"),
                   (val_add, ":cur_entry", 1),
                 (try_end),
                 
                 #(call_script, "script_setup_tavern_attacker", ":cur_entry"),
                 #(val_add, ":cur_entry", 1),
             (try_end),

             (try_begin),
               (neg|check_quest_active, "qst_eliminate_bandits_infesting_village"),
               (neg|check_quest_active, "qst_deal_with_bandits_at_lords_village"),
               (assign, ":end_cond", villages_end),
               (try_for_range, ":cur_village", villages_begin, ":end_cond"),
                 (party_slot_eq, ":cur_village", slot_village_bound_center, "$current_town"),
                 (party_slot_ge, ":cur_village", slot_village_infested_by_bandits, 1),
                 (neg|party_slot_eq, ":cur_village", slot_town_lord, "trp_player"),
                 (set_visitor, ":cur_entry", "trp_farmer_from_bandit_village"),
                 (val_add, ":cur_entry", 1),
                 (assign, ":end_cond", 0),
               (try_end),
             (try_end),

             ## NPCs
             (try_for_range, ":companion_candidate", companions_begin, companions_end),
               (neg|ge, ":cur_entry", 32),
               (troop_slot_eq, ":companion_candidate", slot_troop_occupation, 0),
               (troop_slot_eq, ":companion_candidate", slot_troop_cur_center, "$current_town"),
               (neg|troop_slot_ge, ":companion_candidate", slot_troop_prisoner_of_party, centers_begin),

               (set_visitor, ":cur_entry", ":companion_candidate"),
               (val_add, ":cur_entry", 1),
             (try_end),
             
            (try_for_range, ":var_22", 32, 41),
                #(store_random_in_range, ":random", 0, 100),
                #(gt, ":random", 75),
                (try_begin),
                    (eq, ":has_tavern_minstrel", 0),
                    (store_random_in_range, ":var_23", 0, 15),
                    (gt, ":var_23", 13),
                    (mission_tpl_entry_clear_override_items, "mt_town_default", ":var_22"),
                    (store_random_in_range, ":var_23", 0, 2),
                    (try_begin),
                        (eq, ":var_23", 0),
                        (mission_tpl_entry_add_override_item, "mt_town_default", ":var_22", "itm_dedal_lutnia"),
                    (else_try),
                        (mission_tpl_entry_add_override_item, "mt_town_default", ":var_22", "itm_dedal_lira"),
                    (try_end),
                    (store_random_in_range, ":var_24", 0, 1000),
                    (store_random_in_range, ":var_25", "trp_musican_male", "trp_musicans_end"),
                    (set_visitor, ":var_22", ":var_25", ":var_24"),
                    (assign, ":has_tavern_minstrel", 1),
                (else_try),
                    (party_get_slot, ":faction", "$current_town", slot_center_original_faction),
                    (faction_get_slot, ":culture", ":faction", slot_faction_culture),
                    (store_random_in_range, ":random_slot", 0, 100),
                    (try_begin),
                      (is_between, ":random_slot", 40, 45),
                      (assign, ":town_walker_male_troop", "trp_musicans_end"),
                    (else_try),
                      (is_between, ":random_slot", 0, 40),
                      (party_get_slot, ":volunteer_amount", "$g_encountered_party", slot_town_volunteer_troop_amount),
                      (gt, ":volunteer_amount", 0),
                      (party_get_slot, ":town_walker_male_troop", "$current_town", slot_town_volunteer_troop_type),
                    (else_try),
                      (is_between, ":random_slot", 45, 100),
                      (party_get_slot, ":volunteer_amount2", "$g_encountered_party", slot_center_volunteer_troop_amount),
                      (gt, ":volunteer_amount2", 0),
                      (party_get_slot, ":town_walker_male_troop", "$current_town", slot_center_volunteer_troop_type),
                    (else_try),
                      (is_between, ":random_slot", 45, 60),
                      (faction_get_slot, ":town_walker_male_troop", ":culture", slot_faction_town_walker_female_troop),
                    (else_try),
                      (is_between, ":random_slot", 60, 80),
                      (faction_get_slot, ":town_walker_male_troop", ":culture", slot_faction_village_walker_male_troop),					  
                    (else_try),
                      (faction_get_slot, ":town_walker_male_troop", ":culture", slot_faction_town_walker_male_troop),
                    (try_end),
                    (store_random_in_range, ":var_24", 0, 1000),
                    (mission_tpl_entry_clear_override_items, "mt_town_default", ":var_22"),
                    (store_random_in_range, ":var_23", 0, 10),
                    (try_begin),
                        (is_between, ":random_slot", 80, 100),
                        (gt, ":var_23", 6),
                        (mission_tpl_entry_add_override_item, "mt_town_default", ":var_22", "itm_sharpening_1_ani"),
                    (else_try),
                        (eq, ":var_23", 9),
                        (mission_tpl_entry_add_override_item, "mt_town_default", ":var_22", "itm_reading_ani"),
                    (else_try),
                        (neg|is_between, ":random_slot", 40, 45),
                        (neg|is_between, ":random_slot", 80, 100),
                        (gt, ":var_23", 6),
                        (mission_tpl_entry_add_override_item, "mt_town_default", ":var_22", "itm_eating_ani"),
                    (else_try),
                        (gt, ":var_23", 3),
                        (mission_tpl_entry_add_override_item, "mt_town_default", ":var_22", "itm_dedal_kufel"),
                    (try_end),
                    (set_visitor, ":var_22", ":town_walker_male_troop", ":var_24"),
                (try_end),
           (try_end),
             (change_screen_mission),
           (try_end),
        ],"Door to the tavern."),
                               
#      ("town_smithy",[
#          (eq,"$entry_to_town_forbidden",0),
#          (eq,"$town_nighttime",0),
#          ],
#       "Visit the smithy.",
#       [
#           (set_jump_mission,"mt_town_default"),
#           (jump_to_scene,"$pout_scn_smithy"),
#           (change_screen_mission,0),
#        ]),

      
      ("town_merchant",
       [(party_slot_eq,"$current_town",slot_party_type, spt_town),
           #(eq, 1, 0),
           (eq,"$town_nighttime",0),
           (this_or_next|eq,"$entry_to_town_forbidden",0),
           (eq, "$sneaked_into_town",1),
           (party_get_slot, ":scene", "$current_town", slot_town_store),
           (scene_slot_eq, ":scene", slot_scene_visited, 1), #check if scene has been visited before to allow entry from menu. Otherwise scene will only be accessible from the town center.
           ],
       "Speak with the merchant.",
       [           
           (try_begin),
             (this_or_next|eq,"$all_doors_locked",1),
             (eq,"$town_nighttime",1),
             (display_message,"str_door_locked",0xFFFFAAAA),
           (else_try),
             (assign, "$town_entered", 1),
             (set_jump_mission, "mt_town_default"),
             (mission_tpl_entry_set_override_flags, "mt_town_default", 0, af_override_horse),
             (try_begin),
               (eq, "$sneaked_into_town",1),
               (mission_tpl_entry_set_override_flags, "mt_town_default", 0, af_override_all),
             (try_end),
             (party_get_slot, ":cur_scene", "$current_town", slot_town_store),
             (jump_to_scene, ":cur_scene"),
             (scene_set_slot, ":cur_scene", slot_scene_visited, 1),
             (change_screen_mission),
           (try_end),
        ],"Door to the shop."),       
                
      ("town_arena",
       [(party_slot_eq,"$current_town",slot_party_type, spt_town),
        (eq, "$sneaked_into_town", 0),
        (try_begin),
          (neg|is_currently_night),
          (party_slot_ge, "$current_town", slot_town_has_tournament, 1),
          (str_store_string, s1, "@Join the tournament."),
        (else_try),
          (str_store_string, s1, "@Enter the arena."),
        (try_end),
           ],
       "Enter the arena.",
       [
           (try_begin),
             (this_or_next|eq,"$all_doors_locked",1),
             (eq,"$town_nighttime",1),
             (display_message,"str_door_locked",0xFFFFAAAA),
           (else_try),
             (party_slot_ge, "$current_town", slot_town_has_tournament, 1),
             (assign, "$g_player_troop","trp_player"),
             (assign, "$g_tournament_cur_tier", 0),
             (assign, "$g_tournament_player_team_won", -1),
             (assign, "$g_tournament_bet_placed", 0),
             (assign, "$g_tournament_bet_win_amount", 0),
             (assign, "$g_tournament_last_bet_tier", -1),
             (assign, "$g_tournament_next_num_teams", 0),
             (assign, "$g_tournament_next_team_size", 0),
             (jump_to_menu, "mnu_town_tournament_start_new"),
           (else_try),
             (assign, "$town_entered", 1),
             (party_get_slot, ":arena_scene", "$current_town", slot_town_arena),
             (scene_set_slot, ":arena_scene", slot_scene_visited, 1),
             (call_script, "script_reset_arena_fighter"),
             (change_screen_mission),
           (try_end),
        ],"Door to the arena."),
      ("town_dungeon",
       [(eq, 1, 0)],
       "Never: Enter the prison.",
       [	   
           (try_begin),
            (eq, "$talk_context", tc_prison_break),
            (gt, "$g_main_attacker_agent", 0),
            
           	(neg|agent_is_alive, "$g_main_attacker_agent"),

            (agent_get_troop_id, ":agent_type", "$g_main_attacker_agent"),
            (try_begin),
              (eq, "$g_encountered_party_faction", "fac_player_supporters_faction"),
              (party_get_slot, ":prison_guard_faction", "$current_town", slot_center_original_faction),
            (else_try),
              (assign, ":prison_guard_faction", "$g_encountered_party_faction"),
            (try_end),
            (faction_slot_eq, ":prison_guard_faction", slot_faction_prison_guard_troop, ":agent_type"),

            (call_script, "script_deduct_casualties_from_garrison"),
            (call_script, "script_enter_dungeon", "$current_town", "mt_visit_town_castle"),

           (else_try),
             (eq,"$all_doors_locked",1),
             (display_message,"str_door_locked",0xFFFFAAAA),
           (else_try),
             (this_or_next|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
             (eq, "$g_encountered_party_faction", "$players_kingdom"),
             (assign, "$town_entered", 1),
             (call_script, "script_enter_dungeon", "$current_town", "mt_visit_town_castle"),
           (else_try),
             (display_message,"str_door_locked",0xFFFFAAAA),
           (try_end),
        ],"Door to the dungeon."),
        
      ("castle_inspect", 
      [
         (party_slot_eq,"$current_town",slot_party_type, spt_castle),
      ],
       "Take a walk around the courtyard.",
       [
         (try_begin),
           (eq, "$talk_context", tc_prison_break),
           (assign, "$talk_context", tc_escape),
           
           (party_get_slot, ":cur_castle_exterior", "$current_town", slot_castle_exterior),
           (modify_visitors_at_site, ":cur_castle_exterior"),
           (reset_visitors),
           
           (assign, ":guard_no", 40),
           
           (party_get_num_companion_stacks, ":num_stacks", "$g_encountered_party"),
           (try_for_range, ":troop_iterator", 0, ":num_stacks"),
             #nearby fire condition start
             (party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),
             (store_current_hours, ":cur_time"),
             (store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),  
             (this_or_next|eq, ":guard_no", 40),
             (neg|is_between, ":cur_time", ":last_nearby_fire_time", ":fire_finish_time"),
             #nearby fire condition end

             (lt, ":guard_no", 47),
             (party_stack_get_troop_id, ":cur_troop_id", "$g_encountered_party", ":troop_iterator"),
             (neg|troop_is_hero, ":cur_troop_id"),
             (party_stack_get_size, ":stack_size","$g_encountered_party",":troop_iterator"),
             (party_stack_get_num_wounded, ":num_wounded","$g_encountered_party",":troop_iterator"),
             (val_sub, ":stack_size", ":num_wounded"),
             (gt, ":stack_size", 0),
             (party_stack_get_troop_dna,":troop_dna", "$g_encountered_party", ":troop_iterator"),
             (set_visitor, ":guard_no", ":cur_troop_id", ":troop_dna"),
             (val_add, ":guard_no", 1),
           (try_end),                      
           #(set_jump_entry, 1),           
           (set_visitor, 7, "$g_player_troop"),

           (set_jump_mission,"mt_castle_visit"),
           (jump_to_scene, ":cur_castle_exterior"),
           (change_screen_mission),
            #If you're already at escape, then talk context will reset            
         (else_try),                   
           (assign, "$talk_context", tc_town_talk),
           
           (assign, "$g_mt_mode", tcm_default),
           
           (party_get_slot, ":cur_castle_exterior", "$current_town", slot_castle_exterior),
           (modify_visitors_at_site,":cur_castle_exterior"),
           (reset_visitors),

           (try_begin),
             (neq, "$g_encountered_party_faction", "fac_player_supporters_faction"),
             (faction_get_slot, ":troop_prison_guard", "$g_encountered_party_faction", slot_faction_prison_guard_troop),
           (else_try),
             (party_get_slot, ":town_original_faction", "$current_town", slot_center_original_faction),
             (faction_get_slot, ":troop_prison_guard", ":town_original_faction", slot_faction_prison_guard_troop),
           (try_end),
           (set_visitor, 24, ":troop_prison_guard"),
           
           (assign, ":guard_no", 40),
           
           (party_get_num_companion_stacks, ":num_stacks", "$g_encountered_party"),
           (try_for_range, ":troop_iterator", 0, ":num_stacks"),
             #nearby fire condition start
             (party_get_slot, ":last_nearby_fire_time", "$current_town", slot_town_last_nearby_fire_time),
             (store_current_hours, ":cur_time"),
             (store_add, ":fire_finish_time", ":last_nearby_fire_time", fire_duration),  
             (neg|is_between, ":cur_time", ":fire_finish_time", ":last_nearby_fire_time"),

             (lt, ":guard_no", 47),
             (party_stack_get_troop_id, ":cur_troop_id", "$g_encountered_party", ":troop_iterator"),
             (neg|troop_is_hero, ":cur_troop_id"),
             (party_stack_get_size, ":stack_size","$g_encountered_party",":troop_iterator"),
             (party_stack_get_num_wounded, ":num_wounded","$g_encountered_party",":troop_iterator"),
             (val_sub, ":stack_size", ":num_wounded"),
             (gt, ":stack_size", 0),
             (party_stack_get_troop_dna,":troop_dna","$g_encountered_party",":troop_iterator"),
             (set_visitor, ":guard_no", ":cur_troop_id", ":troop_dna"),
                          
             (val_add, ":guard_no", 1),
           (try_end),
           
           (try_begin),
             (eq, "$town_entered", 0),
             (assign, "$town_entered", 1),
           (try_end),
           (set_jump_entry, 1),

           (assign, ":override_state", af_override_horse),             
           (try_begin),
             (eq, "$sneaked_into_town", 1), #setup disguise
             (assign, ":override_state", af_override_all),
           (try_end),
           (set_jump_mission, "mt_castle_visit"),

           (mission_tpl_entry_set_override_flags, "mt_castle_visit", 0, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_castle_visit", 1, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_castle_visit", 2, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_castle_visit", 3, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_castle_visit", 4, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_castle_visit", 5, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_castle_visit", 6, ":override_state"),
           (mission_tpl_entry_set_override_flags, "mt_castle_visit", 7, ":override_state"),           
           
           (jump_to_scene, ":cur_castle_exterior"),
           (change_screen_mission),
         (try_end),
        ], "To the castle courtyard."),
        
     ("town_enterprise",
      [
        (party_slot_eq,"$current_town",slot_party_type, spt_town),
        (party_get_slot, ":item_produced", "$current_town", slot_center_player_enterprise),
        (gt, ":item_produced", 1),
        (eq,"$entry_to_town_forbidden",0),
        (call_script, "script_get_enterprise_name", ":item_produced"),
        (str_store_string, s3, reg0),
      ],	
      "Visit your {s3}.",
      [
        (store_sub, ":town_order", "$current_town", towns_begin),
        (store_add, ":master_craftsman", "trp_town_1_master_craftsman", ":town_order"),
        (party_get_slot, ":item_produced", "$current_town", slot_center_player_enterprise),
        (assign, ":enterprise_scene", "scn_enterprise_mill"),
        (try_begin),
            (eq, ":item_produced", "itm_bread"),
            (assign, ":enterprise_scene", "scn_enterprise_mill"),
        (else_try),
            (eq, ":item_produced", "itm_ale"),
            (assign, ":enterprise_scene", "scn_enterprise_brewery"),
        (else_try),
            (eq, ":item_produced", "itm_oil"),
            (assign, ":enterprise_scene", "scn_enterprise_oil_press"),
        (else_try),
            (eq, ":item_produced", "itm_wine"),
            (assign, ":enterprise_scene", "scn_enterprise_winery"),
        (else_try),
            (eq, ":item_produced", "itm_leatherwork"),
            (assign, ":enterprise_scene", "scn_enterprise_tannery"),
        (else_try),
            (eq, ":item_produced", "itm_wool_cloth"),
            (assign, ":enterprise_scene", "scn_enterprise_wool_weavery"),
        (else_try),
            (eq, ":item_produced", "itm_linen"),
            (assign, ":enterprise_scene", "scn_enterprise_linen_weavery"),
        (else_try),
            (eq, ":item_produced", "itm_velvet"),
            (assign, ":enterprise_scene", "scn_enterprise_dyeworks"),
        (else_try),
            (eq, ":item_produced", "itm_tools"),
            (assign, ":enterprise_scene", "scn_enterprise_smithy"),
        (try_end),
        (modify_visitors_at_site,":enterprise_scene"),
        (reset_visitors),
        (set_visitor,0,"trp_player"),
        (set_visitor,17,":master_craftsman"),
        (set_jump_mission,"mt_town_default"),
        (jump_to_scene,":enterprise_scene"),
        (change_screen_mission),
      ],"Door to your enterprise."), 

    ("visit_lady",
	[
	
	(neg|troop_slot_ge, "trp_player", slot_troop_spouse, kingdom_ladies_begin),
	
	(assign, "$love_interest_in_town", 0),
	(assign, "$love_interest_in_town_2", 0),
	(assign, "$love_interest_in_town_3", 0),
	(assign, "$love_interest_in_town_4", 0),
	(assign, "$love_interest_in_town_5", 0),
	(assign, "$love_interest_in_town_6", 0),
	(assign, "$love_interest_in_town_7", 0),
	(assign, "$love_interest_in_town_8", 0),
	
	(try_for_range, ":lady_no", kingdom_ladies_begin, kingdom_ladies_end),
        (troop_slot_eq, ":lady_no", slot_troop_cur_center, "$current_town"),
        (call_script, "script_get_kingdom_lady_social_determinants", ":lady_no"),
        (assign, ":lady_guardian", reg0),
        
        (troop_slot_eq, ":lady_no", slot_troop_spouse, -1),
        (ge, ":lady_guardian", 0), #not sure when this would not be the case
        #must have spoken to either father or lady
        (this_or_next|troop_slot_ge, ":lady_no", slot_troop_met, 2),
            (troop_slot_eq, ":lady_guardian", slot_lord_granted_courtship_permission, 1),
        
        (neg|troop_slot_eq, ":lady_no", slot_troop_met, 4),
        
        #must have approached father
#        (this_or_next|troop_slot_eq, ":lady_guardian", slot_lord_granted_courtship_permission, 1),
#            (troop_slot_eq, ":lady_guardian", slot_lord_granted_courtship_permission, -1),
        (try_begin),
            (eq, "$love_interest_in_town", 0),
            (assign, "$love_interest_in_town", ":lady_no"),	
        (else_try),
            (eq, "$love_interest_in_town_2", 0),
            (assign, "$love_interest_in_town_2", ":lady_no"),	
        (else_try),
            (eq, "$love_interest_in_town_3", 0),
            (assign, "$love_interest_in_town_3", ":lady_no"),	
        (else_try),
            (eq, "$love_interest_in_town_4", 0),
            (assign, "$love_interest_in_town_4", ":lady_no"),	
        (else_try),
            (eq, "$love_interest_in_town_5", 0),
            (assign, "$love_interest_in_town_5", ":lady_no"),	
        (else_try),
            (eq, "$love_interest_in_town_6", 0),
            (assign, "$love_interest_in_town_6", ":lady_no"),        
        (else_try),
            (eq, "$love_interest_in_town_7", 0),
            (assign, "$love_interest_in_town_7", ":lady_no"),        
        (else_try),
            (eq, "$love_interest_in_town_8", 0),
            (assign, "$love_interest_in_town_8", ":lady_no"),        
        (try_end),	
	(try_end),
	
	(gt, "$love_interest_in_town", 0),
	],
	  "Attempt to visit a lady",
       [
        (jump_to_menu, "mnu_lady_visit"),
        ], "Door to the garden."),	
                                            
      ("trade_with_merchants",
       [
           (party_slot_eq,"$current_town",slot_party_type, spt_town),
           (eq, "$g_player_troop","trp_player"),
           (party_slot_ge, "$current_town", slot_center_player_relation, 0),
           (store_faction_of_party, ":current_town_faction", "$current_town"),
           (store_relation, ":reln", ":current_town_faction", "fac_player_supporters_faction"),
           (ge, ":reln", 0),
        ],
         "Go to the marketplace.",
         [
           (try_begin),
             (call_script, "script_cf_enter_center_location_bandit_check"),
           (else_try),
             (jump_to_menu,"mnu_town_trade"),
           (try_end),
          ]),
          
      ("change_commander_town",
        [
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (party_slot_eq,"$current_town",slot_party_type, spt_town),
          (str_store_troop_name,s7,"$g_player_troop"),
          (set_player_troop, "$g_player_troop"),
        ],
        "Change commander.(Current commander: {s7})",
        [
         (start_presentation, "prsnt_change_commander"),
        ]),
    ("camp_manage_inventory",
      [
        (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
        (assign, ":num_of_heroes", reg0),
        (gt, ":num_of_heroes", 1),
        (party_slot_eq,"$current_town",slot_party_type, spt_town),
      ],
      "Manage your party's inventory.",
      [
        (troop_clear_inventory, "trp_temp_troop"),
        (assign, "$return_menu", "mnu_town"),
        (assign, "$inventory_menu_offset", 0),
        (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end),
          (troop_clear_inventory, ":cur_troop"), # clear_inventory
        (try_end),
        
        (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":this_hero","p_main_party",":i_stack"),
          (troop_is_hero, ":this_hero"),
          (neq, ":this_hero", "trp_player"),
          (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end),
            (call_script, "script_transfer_inventory", ":this_hero", ":cur_troop", 0),
          (try_end),
        (try_end),        
        (try_for_range, ":unused", 0, 86), # for 86 times
          (assign, ":best_score", 0),
          (assign, ":best_troop", -1),
          (assign, ":best_slot", -1),
          (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end),
            (troop_get_inventory_capacity, ":inv_cap", ":cur_troop"),
            (try_for_range, ":i_slot", 10, ":inv_cap"),
              (troop_get_inventory_slot, ":item", ":cur_troop", ":i_slot"),
              (troop_get_inventory_slot_modifier, ":imod", ":cur_troop", ":i_slot"),
              (gt, ":item", -1),
              (call_script, "script_get_item_value_with_imod", ":item", ":imod"),
              (assign, ":score", reg0),
              (val_div, ":score", 100),
              (val_max, ":score",1),
              (gt, ":score", ":best_score"),
              (assign, ":best_score", ":score"),
              (assign, ":best_troop", ":cur_troop"),
              (assign, ":best_slot", ":i_slot"),
            (try_end),
          (try_end),
          (gt, ":best_score", 0),
          (troop_get_inventory_slot, ":item", ":best_troop", ":best_slot"),
          (troop_get_inventory_slot_modifier, ":imod", ":best_troop", ":best_slot"),
          (troop_add_item, "trp_temp_troop", ":item", ":imod"), # add to trp_temp_troop
          (troop_set_inventory_slot, ":best_troop", ":best_slot", -1), # remove it 
        (try_end),        
        (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end_minus_one),
          (store_add, ":new_begin_troop", ":cur_troop", 1),
          (call_script, "script_transfer_best_items_to_dest_troop_by_price", ":cur_troop", ":new_begin_troop", pool_troops_end, 96),
        (try_end),
        (jump_to_menu, "mnu_manage_loot_pool"),
      ]
    ),
        #("recruit_volunteers_castle",
        #[
        #    (call_script, "script_cf_castle_recruit_volunteers_cond"),
        #],
        #"Purchase Regular Army.",
        #[
        #    (try_begin),
        #        (call_script, "script_cf_enter_center_location_bandit_check"),
        #    (else_try),
        #        (jump_to_menu, "mnu_recruit_volunteers_castle"),
        #    (try_end),
        #]),
        
        ("town_recruit_volunteers",
        [
            (troop_slot_ge,"trp_player", slot_troop_player_class,4),
            (call_script, "script_cf_town_recruit_volunteers_cond"),
        ],
        "Purchase volunteers.",
        [
            (jump_to_menu, "mnu_regular_recruit"),
            #(try_begin),
            #    (call_script, "script_cf_enter_center_location_bandit_check"),
            #(else_try),
                #(jump_to_menu, "mnu_town_recruit_volunteers"),
            #(try_end),
        ]),
        
        ("go_somewhere",[(troop_slot_ge,"trp_player", slot_troop_player_class,3),(neq, "$freelancer_state", 1),],"go_somewhere",
        [
         (try_begin),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, 0),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, graveyard),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, rogue_hideout),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
           
           
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, knights_chapter),
           
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, farm),
           (neg|party_slot_eq, "$current_town", slot_center_lair_build_type, keep),
           (neg|troop_slot_ge,"trp_player", slot_troop_player_class,5),
         
           (call_script, "script_cf_enter_center_location_bandit_check_2"),
         (else_try),
           (call_script, "script_cf_enter_center_location_bandit_check"),
         (else_try),
           (jump_to_menu, "mnu_go_to_settlements"),
         (try_end),
        ]),
                
      ("walled_center_manage",
      [
        ## CC (neg|party_slot_eq, "$current_town", slot_village_state, svs_under_siege),
        (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
        (assign, reg0, 1),
        (try_begin),
          (party_slot_eq, "$current_town", slot_party_type, spt_castle),
          (assign, reg0, 0),
        (try_end),
       ],
       "Manage this {reg0?town:castle}.",
       [
           (assign, "$g_next_menu", "mnu_town"),
           (jump_to_menu, "mnu_center_manage"),
       ]),
        
      ("walled_center_move_court",
      [
        (neg|party_slot_eq, "$current_town", slot_village_state, svs_under_siege),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
        (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
        (eq, "$g_encountered_party_faction", "fac_player_supporters_faction"),
        (neq, "$g_player_court", "$current_town"),
      ],
      "Move your court here.",
      [
        (jump_to_menu, "mnu_establish_court"),
      ]),
                                
    ## CC
        
    ## CC
      ("castle_station_troops",
      [	  
        (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
	    (str_clear, s10),
          
	    (assign, ":player_can_draw_from_garrison", 0), 
        (try_begin), #option 1 - player is town lord
          (eq, ":town_lord", "trp_player"),
          (assign, ":player_can_draw_from_garrison", 1),
        (else_try), #option 2 - town is unassigned and part of the player faction
          (store_faction_of_party, ":faction", "$g_encountered_party"),
          (eq, ":faction", "fac_player_supporters_faction"),            
          (neg|party_slot_ge, "$g_encountered_party", slot_town_lord, active_npcs_begin), #ie, zero or -1

          (assign, ":player_can_draw_from_garrison", 1),
        (else_try), #option 3 - town was captured by player
          (lt, ":town_lord", 0), #ie, unassigned
          (store_faction_of_party, ":castle_faction", "$g_encountered_party"),
          (eq, "$players_kingdom", ":castle_faction"),
          
          (eq, "$g_encountered_party", "$g_castle_requested_by_player"),

          (str_store_string, s10, "str_retrieve_garrison_warning"),
          (assign, ":player_can_draw_from_garrison", 1),
        (else_try),
          (lt, ":town_lord", 0), #ie, unassigned
          (store_faction_of_party, ":castle_faction", "$g_encountered_party"),
          (eq, "$players_kingdom", ":castle_faction"),
          
          (store_party_size_wo_prisoners, ":party_size", "$g_encountered_party"),
          (eq, ":party_size", 0),
            
          (str_store_string, s10, "str_retrieve_garrison_warning"),
          (assign, ":player_can_draw_from_garrison", 1),
        (else_try),
          (party_slot_ge, "$g_encountered_party", slot_town_lord, active_npcs_begin),
          (store_faction_of_party, ":castle_faction", "$g_encountered_party"),
          (eq, "$players_kingdom", ":castle_faction"),
          
          (troop_slot_eq, "trp_player", slot_troop_spouse, ":town_lord"),            

          (assign, ":player_can_draw_from_garrison", 1),
        (try_end),

        (eq, ":player_can_draw_from_garrison", 1),
      ],
      "Manage the garrison {s10}",
      [
        (change_screen_exchange_members,1),
      ]),

      ("castle_wait",
      [
        #(party_slot_eq,"$current_town",slot_party_type, spt_castle),
        (this_or_next|ge, "$g_encountered_party_relation", 0),
        (eq,"$castle_undefended",1),
        (assign, ":can_rest", 1),
        (str_clear, s1),
        (try_begin),
          (neg|party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
          (troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
          (neg|party_slot_eq, "$current_town", slot_town_lord, ":player_spouse"),
          (party_slot_ge, "$current_town", slot_town_lord, "trp_player"), #can rest for free in castles and towns with unassigned lords
          (store_faction_of_party, ":current_town_faction", "$current_town"),
          (neq, ":current_town_faction", "fac_player_supporters_faction"),
          (party_get_num_companions, ":num_men", "p_main_party"),
          (store_div, reg1, ":num_men", 4),
          (val_add, reg1, 1),
          (str_store_string, s1, "@ ({reg1} denars per night)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", reg1),
          (assign, ":can_rest", 0),
        (try_end),
        (eq, ":can_rest", 1),
      ],
      "Wait here for some time{s1}.",
      [
        (assign, "$auto_enter_town", "$current_town"),
        (assign, "$g_town_visit_after_rest", 1),
        (assign, "$g_last_rest_center", "$current_town"),
        (assign, "$g_last_rest_payment_until", -1),

        (try_begin),
          (party_is_active, "p_main_party"),
          (party_get_current_terrain, ":cur_terrain", "p_main_party"),
          (try_begin),
            (eq, ":cur_terrain", rt_desert),
            (unlock_achievement, ACHIEVEMENT_SARRANIDIAN_NIGHTS),
          (try_end),  
        (try_end),  
        (rest_for_hours_interactive, 24 * 7, 5, 0), #rest while not attackable
        (change_screen_return),
      ]),
      
      ("collect_taxes_qst",
      [
        (check_quest_active, "qst_collect_taxes"),
        (quest_slot_eq, "qst_collect_taxes", slot_quest_target_center, "$current_town"),
        (neg|quest_slot_eq, "qst_collect_taxes", slot_quest_current_state, 4),
        (quest_get_slot, ":quest_giver_troop", "qst_collect_taxes", slot_quest_giver_troop),
        (str_store_troop_name, s1, ":quest_giver_troop"),
        (quest_get_slot, reg5, "qst_collect_taxes", slot_quest_current_state),
      ],
      "{reg5?Continue collecting taxes:Collect taxes} due to {s1}.",
      [
        (jump_to_menu, "mnu_collect_taxes"),
      ]),
      ("town_leave",[],"Leave...",
      [
        (assign, "$g_permitted_to_center",0),
        (change_screen_map),
        
        
        ## CC
        (try_begin),
          (party_slot_eq,"$current_town",slot_party_type, spt_town),
          (try_begin),
            (eq, "$g_buy_foods_when_leaving", 1),
            (call_script, "script_auto_buy_food"),
          (try_end),
          (try_begin),
             (eq, "$g_sell_items_when_leaving", 1),
             (call_script, "script_auto_sell_all"),
          (try_end),
        (try_end),
        #(try_begin),
        #  (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
        #  (call_script, "script_init_commensalism_troops"),
        #  (call_script, "script_auto_adjust_commensalism_troops" , "p_main_party"),
        #  (call_script, "script_auto_adjust_commensalism_troops" , "$current_town"),
        #(try_end),
        ## CC
      ],"Leave Area."),

    ]
   ),

  (
    "go_to_settlements",0,
    "{s19},What do you want to do?", "none",
    [
     (str_clear, s18),
     (str_clear, s19),
     (str_store_party_name,s17, "$current_town"),
     (assign, "$g_is_quick_battle", 0),
     (try_begin),
       (is_between, "$current_town", towns_begin, towns_end),
       (party_get_slot, ":lair_type", "$current_town", slot_center_lair_build_type),
       (le,  ":lair_type", 0),
       (call_script,"script_set_center_lair_type", "$current_town"),
     (try_end),
     (try_begin),
       (party_get_slot, ":lair_type", "$current_town", slot_center_lair_build_type),
       (gt,  ":lair_type", 0),
       (store_sub, ":lair_name", ":lair_type", farm),
       (val_add, ":lair_name", "str_lair_name_1"),
       (party_set_extra_text, "$current_town", ":lair_name"),
       (str_store_string, s18, ":lair_name"),
       (str_store_string, s19, "@The {s17} has settlements:{s18}."),
       (party_set_extra_text, "$current_town", ":lair_name"),
     (else_try),
       (str_store_string, s19, "@The {s17} has no settlements."),
       (party_set_extra_text, "$current_town", "str_empty_string"),
     (try_end),
          
        (party_get_current_terrain, ":cur_terrain", "$current_town"),
          
        (try_begin),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, 0),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, farm),
          (try_begin),
            (this_or_next|eq, ":cur_terrain", rt_steppe),
            (this_or_next|eq, ":cur_terrain", rt_steppe_forest),
            (this_or_next|eq, ":cur_terrain", rt_desert),
            (             eq, ":cur_terrain", rt_desert_forest),
            (set_background_mesh, "mesh_pic_village_s"),
          (else_try),
            (this_or_next|eq, ":cur_terrain", rt_snow),
            (             eq, ":cur_terrain", rt_snow_forest),
            (set_background_mesh, "mesh_pic_village_w"),
          (else_try),
            (set_background_mesh, "mesh_pic_village_p"),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, keep),
          (try_begin),
            (this_or_next|eq, ":cur_terrain", rt_steppe),
            (this_or_next|eq, ":cur_terrain", rt_steppe_forest),
            (this_or_next|eq, ":cur_terrain", rt_desert),
            (             eq, ":cur_terrain", rt_desert_forest),
            (set_background_mesh, "mesh_lair_keep"),
          (else_try),
            (this_or_next|eq, ":cur_terrain", rt_snow),
            (             eq, ":cur_terrain", rt_snow_forest),
            (set_background_mesh, "mesh_lair_keep2"),
          (else_try),
            (set_background_mesh, "mesh_lair_keep3"),
          (try_end),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, rogue_hideout),
          (set_background_mesh, "mesh_pic_market_2"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
          (set_background_mesh, "mesh_pic_uxkhal"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (set_background_mesh, "mesh_pic_drow"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, tomb_of_curses),
          (set_background_mesh, "mesh_pic_lost_town"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cloud_temple),
          (set_background_mesh, "mesh_lair_strom_temple"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (set_background_mesh, "mesh_lair_Ruins"),
        (else_try),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, troll_cave),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dragon_altar),
          (set_background_mesh, "mesh_lair_cave"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, undead_magic_guild),
          (set_background_mesh, "mesh_lair_camp_Arcane_Academy"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          (set_background_mesh, "mesh_pic_village_Transept_of_Heaven2"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
          (set_background_mesh, "mesh_pic_market_1"),
          
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dwarf_cottage),
          (set_background_mesh, "mesh_lair_dwarf_cottage"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, nomad_tent),
          (set_background_mesh, "mesh_lair_nomad_tent"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
          (set_background_mesh, "mesh_lair_longhouse"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
          (set_background_mesh, "mesh_lair_elf_homestead"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, demon_gate),
          (set_background_mesh, "mesh_lair_demon_gate"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
          (set_background_mesh, "mesh_lair_clan_halls"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
          (set_background_mesh, "mesh_lair_ogre_fort"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (set_background_mesh, "mesh_lair_treant_alcove"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, graveyard),
          (set_background_mesh, "mesh_lair_Graveyard"),
          #(set_background_mesh, "mesh_pic_uxkhal"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
          (set_background_mesh, "mesh_pic_forest"),
          
        (else_try),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          #(this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, temple_of_the_fallen),
          #(this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
          (set_background_mesh, "mesh_pic_basilica"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
          (set_background_mesh, "mesh_pic_lost_town"),
        (try_end),
        
        (try_begin),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, dwarf_cottage),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
          (play_sound,"snd_lair_dwarf"),
        (else_try),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, nomad_tent),
          (play_sound,"snd_lair_nomad"),
        (else_try),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, knights_chapter),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, keep),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
          (play_sound,"snd_lair_keep"),
        (else_try),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
          (play_sound,"snd_lair_demon"),
        (else_try),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, imp_cache),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, demon_gate),
          (play_sound,"snd_lair_nomad"),
        (else_try),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
          (play_sound,"snd_lair_orc"),
        (else_try),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, tomb_of_curses),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_palace),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, graveyard),
          (play_sound,"snd_lair_undead"),
        (else_try),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, temple_of_the_fallen),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
          (play_sound,"snd_lair_monastery"),
        (else_try),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, troll_cave),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dragon_altar),
          (play_sound,"snd_lair_cave"),
        (else_try),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, cloud_temple),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, undead_magic_guild),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
          (play_sound,"snd_lair_magic"),
        (else_try),
          (play_sound,"snd_lair"),
        (try_end),
    ],
    [
        
     ("use_gem",
        [
        (assign, ":gem_need", -1),
        (assign, ":gem_need_num", 1),
        (try_begin),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, temple_of_the_fallen),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, troll_cave),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, dragon_altar),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cloud_temple),
          (assign, ":gem_need", "itm_sg_blood"),
        (else_try),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, undead_magic_guild),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_palace),
          (assign, ":gem_need", "itm_sg_black_big"),
          (assign, ":gem_need_num", 2),
        (else_try),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, knights_chapter),
          (assign, ":gem_need", "itm_sg_human_big"),
        (else_try),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (assign, ":gem_need", "itm_sg_yellow_big"),
        (else_try),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
          (assign, ":gem_need", "itm_sg_green_big"),
        (else_try),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dwarf_cottage),
          (assign, ":gem_need", "itm_sg_blue_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, demon_gate),
          (assign, ":gem_need", "itm_sg_purple_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
          (assign, ":gem_need", "itm_sg_blue_big"),
          (assign, ":gem_need_num", 2),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (assign, ":gem_need", "itm_sg_black_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
          (assign, ":gem_need", "itm_sg_orange_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
          (assign, ":gem_need", "itm_sg_orange_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (assign, ":gem_need", "itm_sg_purple_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, tomb_of_curses),
          (assign, ":gem_need", "itm_sg_black_big"),
        (try_end),
         (gt, ":gem_need", -1),
         (str_store_item_name,s3,":gem_need"),
         (store_item_kind_count,":size",":gem_need","trp_player"),
         (item_get_slot, ":size", ":gem_need", slot_item_num_for_necro),
         (try_begin),
           (lt, ":size", ":gem_need_num"),
           (disable_menu_option),
         (try_end),
        ],
        "use {s3} recruit_troop.",
        [
        (assign, ":gem_need", -1),
        (assign, ":gem_need_num", 1),
        (try_begin),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, temple_of_the_fallen),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, troll_cave),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, dragon_altar),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cloud_temple),
          (assign, ":gem_need", "itm_sg_blood"),
        (else_try),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, undead_magic_guild),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_palace),
          (assign, ":gem_need", "itm_sg_black_big"),
          (assign, ":gem_need_num", 2),
        (else_try),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, knights_chapter),
          (assign, ":gem_need", "itm_sg_human_big"),
        (else_try),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (assign, ":gem_need", "itm_sg_yellow_big"),
        (else_try),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
          (assign, ":gem_need", "itm_sg_green_big"),
        (else_try),  
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dwarf_cottage),
          (assign, ":gem_need", "itm_sg_blue_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, demon_gate),
          (assign, ":gem_need", "itm_sg_purple_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
          (assign, ":gem_need", "itm_sg_blue_big"),
          (assign, ":gem_need_num", 2),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (assign, ":gem_need", "itm_sg_black_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
          (assign, ":gem_need", "itm_sg_orange_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
          (assign, ":gem_need", "itm_sg_orange_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (assign, ":gem_need", "itm_sg_purple_big"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, tomb_of_curses),
          (assign, ":gem_need", "itm_sg_black_big"),
        (try_end),
        (val_mul, ":gem_need_num", -1),
        (call_script, "script_change_player_necro_item",":gem_need",":gem_need_num"),
        
         #(troop_remove_items, "trp_player", ":gem_need", ":gem_need_num"), 
         (party_set_slot, "$current_town", slot_center_lair_build_cooldown, -1000),
         (party_set_slot, "$current_town", slot_center_extra_build_cooldown, -1000),
     ]),
            
     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (neg|party_slot_eq, "$current_town", slot_party_type, spt_village),
        (store_faction_of_party, ":original_faction","$current_town"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_3),
        (val_mul, ":reinforcement_cost", 5),
        
        (try_begin),
          (eq, ":original_faction", "fac_player_supporters_faction"),
          (call_script, "script_get_town_faction_for_recruiting", "$current_town"),
          (assign, ":original_faction", reg0),
        (try_end),
        (assign,":merc", -1),
        (try_begin),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (eq, ":original_faction", "fac_kingdom_4"),
          (assign,":merc", "pt_wood_elven_merc_3"),
          (assign,":faction", "fac_forest_ranger"),
          (assign, ":relation_need", 20),
          (try_begin),
            (this_or_next|eq, ":original_faction", "fac_kingdom_7"),
            (eq, ":original_faction", "fac_kingdom_1"),
            (assign, ":merc", "pt_grand_elven_merc_1"),
            (assign,":faction", "fac_elf"),
          (try_end),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (assign,":merc", "pt_sissofbattle_merc"),
          (assign,":faction", "fac_demon_hunters"),
          (assign, ":relation_need", 30),
          (assign, ":hours_needed", lair_recruit_time_2),
          (val_mul, ":reinforcement_cost", 5),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (assign,":merc", vampire_estate),
          (assign,":faction", "fac_undeads_2"),
          (assign, ":relation_need", 20),
          (assign, ":hours_needed", lair_recruit_time_2),
          (val_mul, ":reinforcement_cost", 5),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, demon_gate),
          (store_random_in_range, ":merc", "pt_demon_merc_1", "pt_undead_merc_1"),
          (assign,":faction", "fac_demon"),
          (assign, ":relation_need", 30),
          (assign, ":hours_needed", lair_recruit_time_2),
          (val_mul, ":reinforcement_cost", 5),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_palace),
          (assign,":merc", vampire_palace),
          (assign,":faction", "fac_undeads_2"),
          (assign, ":relation_need", 30),
          (assign, ":hours_needed", lair_recruit_time_2),
          (val_mul, ":reinforcement_cost", 5),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cloud_temple),
          (assign,":merc", cloud_temple),
          (assign,":faction", "fac_dark_knights"),
          (assign, ":relation_need", 45),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dragon_altar),
          (assign,":merc", dragon_altar),
          (assign, ":relation_need", 45),
          (try_begin),
            (this_or_next|eq, ":original_faction", "fac_kingdom_2"),
            (eq, ":original_faction", "fac_kingdom_4"),
            (assign, ":merc", dragon_altar),
            (assign, ":faction", "fac_elf"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_10"),
            (assign, ":merc", "pt_dwarf_merc_4"),
            (assign, ":faction", "fac_dwarf"),
          (else_try),
            (assign, ":merc", "pt_titan_merc_2"),
            (assign, ":faction", "fac_beast"),
          (try_end),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          (assign,":merc", altar_of_light),
          (assign,":faction", "fac_demon_hunters"),
          (assign, ":relation_need", 45),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, troll_cave),
          (assign,":merc", troll_cave),
          (assign,":faction", "fac_orc"),
          (assign, ":relation_need", 35),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, temple_of_the_fallen),
          (assign,":merc", temple_of_the_fallen),
          (assign,":faction", "fac_demon"),
          (assign, ":relation_need", 45),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (assign,":merc", forlorn_cathedral),
          (assign,":faction", "fac_undeads_2"),
          (assign, ":relation_need", 45),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
          (try_begin),
            (this_or_next|eq, ":original_faction", "fac_kingdom_9"),
            (this_or_next|eq, ":original_faction", "fac_kingdom_6"),
            (eq, ":original_faction", "fac_kingdom_12"),
            (assign, ":merc", "pt_naffatun_merc"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_3"),
            (assign, ":merc", alchemist_lab),
          (else_try),
            (assign, ":merc", "pt_cannon_merc_fan"),
          (try_end),
          (store_faction_of_party, ":faction","$current_town"),
          (assign, ":relation_need", 25),
          (assign, ":hours_needed", lair_recruit_time_2),
          (val_mul, ":reinforcement_cost", 5),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, knights_chapter),
          (call_script, "script_init_troop_leader_party_template", "trp_temp_troop", "p_temp_party"),
          (troop_get_slot, ":merc", "trp_temp_troop", slot_troop_hero_pt_d),
          (assign, ":reinforcement_cost", reinforcement_cost_easy),
          (assign, ":hours_needed", lair_recruit_time_2),
          (store_faction_of_party, ":faction","$current_town"),
          (assign, ":relation_need", 30),
        (try_end),
        
        (gt,":merc", -1),
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 5),
        
        (store_faction_of_party, ":original_faction","$current_town"),
        
        (try_begin),
          (eq, ":original_faction", "fac_player_supporters_faction"),
          (call_script, "script_get_town_faction_for_recruiting", "$current_town"),
          (assign, ":original_faction", reg0),
        (try_end),
        
        (assign,":merc", -1),
        (try_begin),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (eq, ":original_faction", "fac_kingdom_4"),
          (assign,":merc", "pt_wood_elven_merc_3"),
          (try_begin),
            (this_or_next|eq, ":original_faction", "fac_kingdom_7"),
            (eq, ":original_faction", "fac_kingdom_1"),
            (assign, ":merc", "pt_grand_elven_merc_1"),
          (try_end),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (assign,":merc", "pt_sissofbattle_merc"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (assign,":merc", vampire_estate),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, demon_gate),
          (store_random_in_range, ":merc", "pt_demon_merc_1", "pt_undead_merc_1"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_palace),
          (assign,":merc", vampire_palace),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cloud_temple),
          (assign,":merc", cloud_temple),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dragon_altar),
          (assign,":merc", dragon_altar),
          (try_begin),
            (this_or_next|eq, ":original_faction", "fac_kingdom_2"),
            (eq, ":original_faction", "fac_kingdom_4"),
            (assign, ":merc", dragon_altar),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_10"),
            (assign, ":merc", "pt_dwarf_merc_4"),
          (else_try),
            (assign, ":merc", "pt_titan_merc_2"),
          (try_end),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          (assign,":merc", altar_of_light),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, troll_cave),
          (assign,":merc", troll_cave),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, temple_of_the_fallen),
          (assign,":merc", temple_of_the_fallen),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (assign,":merc", forlorn_cathedral),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
          (try_begin),
            (this_or_next|eq, ":original_faction", "fac_kingdom_9"),
            (this_or_next|eq, ":original_faction", "fac_kingdom_6"),
            (eq, ":original_faction", "fac_kingdom_12"),
            (assign, ":merc", "pt_naffatun_merc"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_3"),
            (assign, ":merc", alchemist_lab),
          (else_try),
            (assign, ":merc", "pt_cannon_merc_fan"),
          (try_end),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, knights_chapter),
          (call_script, "script_init_troop_leader_party_template", "trp_temp_troop", "p_temp_party"),
          (troop_get_slot, ":merc", "trp_temp_troop", slot_troop_hero_pt_d),
          (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (try_end),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", ":merc"),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),
     
     ("upgrade_troop_2",
      [
        (party_slot_eq, "$current_town", slot_party_type, spt_town),
        (troop_slot_ge,"trp_player", slot_troop_player_class,5),
        (call_script, "script_get_town_upgrade_troop", 1),
        (assign, ":upgrade_troop", reg0),
        (gt, ":upgrade_troop", 0),
        (troop_get_slot, ":cost_troop", ":upgrade_troop", slot_troop_upgrade_1),
        (party_get_slot, reg10, "$current_town", slot_town_upgrade_troop),
        (gt, ":cost_troop", 0),
        (call_script, "script_blacksmith_upgrade_cost", ":upgrade_troop",":cost_troop"),
        (assign, ":troop_cost", reg0),
        (assign,reg13,":troop_cost"),
        (party_count_companions_of_type,":num_men","p_main_party",":cost_troop"),
        (assign,reg12,":num_men"),
        (store_troop_gold, reg15, "trp_player"),
        
        (str_store_troop_name, s11, ":upgrade_troop"),
        (str_store_troop_name, s12, ":cost_troop"),
        (str_store_string, s11, "str_upgrade_troop"),
        (try_begin),
          (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":center_relation", ":persuasion_level"),
          (neg|ge,  ":center_relation", 50),
          (store_sub, reg2, 50, ":center_relation"),
          (str_store_string, s11, "@you need 25 center_relation."),
          (disable_menu_option),
        (else_try), 
          (this_or_next|lt,reg12,1),
          (this_or_next|lt,reg10,1),
          (lt, reg15, reg13),
          (disable_menu_option),
        (try_end),
      ], "{s11}",
      [
        (call_script, "script_get_town_upgrade_troop", 1),
        (assign, ":upgrade_troop", reg0),
        (gt, ":upgrade_troop", 0),
        (troop_get_slot, ":cost_troop", ":upgrade_troop", slot_troop_upgrade_1),
        (party_count_companions_of_type,":num_men","p_main_party",":cost_troop"),
        (gt, ":num_men", 0),
        (party_get_slot,  ":num", "$current_town", slot_town_upgrade_troop),
        (val_sub, ":num", 1),
        (party_set_slot, "$current_town", slot_town_upgrade_troop, ":num"),

        (call_script, "script_blacksmith_upgrade_cost", ":upgrade_troop",":cost_troop"),
        (assign, ":troop_cost", reg0),
        (party_remove_members,"p_main_party",":cost_troop",1),
        (party_add_members,"p_main_party",":upgrade_troop",1),
        (troop_remove_gold,"trp_player",":troop_cost"),
     ]),

     ("upgrade_troop_2",
      [
        (party_slot_eq, "$current_town", slot_party_type, spt_town),
        (troop_slot_ge,"trp_player", slot_troop_player_class,7),
        (call_script, "script_get_town_upgrade_troop", 2),
        (assign, ":upgrade_troop", reg0),
        (gt, ":upgrade_troop", 0),
        (troop_get_slot, ":cost_troop", ":upgrade_troop", slot_troop_upgrade_1),
        (party_get_slot, reg10, "$current_town", slot_town_upgrade_troop),
        (gt, ":cost_troop", 0),
        (call_script, "script_blacksmith_upgrade_cost", ":upgrade_troop",":cost_troop"),
        (assign, ":troop_cost", reg0),
        (assign,reg13,":troop_cost"),
        (party_count_companions_of_type,":num_men","p_main_party",":cost_troop"),
        (assign,reg12,":num_men"),
        (store_troop_gold, reg15, "trp_player"),
        
        (str_store_troop_name, s11, ":upgrade_troop"),
        (str_store_troop_name, s12, ":cost_troop"),
        (str_store_string, s11, "str_upgrade_troop"),
        (try_begin),
          (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":center_relation", ":persuasion_level"),
          (neg|ge,  ":center_relation", 50),
          (store_sub, reg2, 50, ":center_relation"),
          (str_store_string, s11, "@you need 25 center_relation."),
          (disable_menu_option),
        (else_try), 
          (this_or_next|lt,reg12,1),
          (this_or_next|lt,reg10,1),
          (lt, reg15, reg13),
          (disable_menu_option),
        (try_end),
      ], "{s11}",
      [
        (call_script, "script_get_town_upgrade_troop", 2),
        (assign, ":upgrade_troop", reg0),
        (gt, ":upgrade_troop", 0),
        (troop_get_slot, ":cost_troop", ":upgrade_troop", slot_troop_upgrade_1),
        (party_count_companions_of_type,":num_men","p_main_party",":cost_troop"),
        (gt, ":num_men", 0),
        (party_get_slot,  ":num", "$current_town", slot_town_upgrade_troop),
        (val_sub, ":num", 1),
        (party_set_slot, "$current_town", slot_town_upgrade_troop, ":num"),

        (call_script, "script_blacksmith_upgrade_cost", ":upgrade_troop",":cost_troop"),
        (assign, ":troop_cost", reg0),
        (party_remove_members,"p_main_party",":cost_troop",1),
        (party_add_members,"p_main_party",":upgrade_troop",1),
        (troop_remove_gold,"trp_player",":troop_cost"),
     ]),

     ("upgrade_troop_2",
      [
        (party_slot_eq, "$current_town", slot_party_type, spt_town),
        (troop_slot_ge,"trp_player", slot_troop_player_class,9),
        
        (call_script, "script_get_town_upgrade_troop", 3),
        (assign, ":upgrade_troop", reg0),
        (gt, ":upgrade_troop", 0),
        (troop_get_slot, ":cost_troop", ":upgrade_troop", slot_troop_upgrade_1),
        (party_get_slot, reg10, "$current_town", slot_town_upgrade_troop),
        (gt, ":cost_troop", 0),
        (call_script, "script_blacksmith_upgrade_cost", ":upgrade_troop",":cost_troop"),
        (assign, ":troop_cost", reg0),
        (assign,reg13,":troop_cost"),
        (party_count_companions_of_type,":num_men","p_main_party",":cost_troop"),
        (assign,reg12,":num_men"),
        (store_troop_gold, reg15, "trp_player"),
        (str_store_troop_name, s11, ":upgrade_troop"),
        (str_store_troop_name, s12, ":cost_troop"),
        (str_store_string, s11, "str_upgrade_troop"),
        (try_begin),
          (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":center_relation", ":persuasion_level"),
          (neg|ge,  ":center_relation", 50),
          (store_sub, reg2, 50, ":center_relation"),
          (str_store_string, s11, "@you need 25 center_relation."),
          (disable_menu_option),
        (else_try), 
          (this_or_next|lt,reg12,1),
          (this_or_next|lt,reg10,1),
          (lt, reg15, reg13),
          (disable_menu_option),
        (try_end),
      ], "{s11}",
      [
      
        (call_script, "script_get_town_upgrade_troop", 3),
        (assign, ":upgrade_troop", reg0),
        (gt, ":upgrade_troop", 0),
        (troop_get_slot, ":cost_troop", ":upgrade_troop", slot_troop_upgrade_1),
        (party_count_companions_of_type,":num_men","p_main_party",":cost_troop"),
        (gt, ":num_men", 0),
        (party_get_slot,  ":num", "$current_town", slot_town_upgrade_troop),
        (val_sub, ":num", 1),
        (party_set_slot, "$current_town", slot_town_upgrade_troop, ":num"),

        (call_script, "script_blacksmith_upgrade_cost", ":upgrade_troop",":cost_troop"),
        (assign, ":troop_cost", reg0),
        (party_remove_members,"p_main_party",":cost_troop",1),
        (party_add_members,"p_main_party",":upgrade_troop",1),
        (troop_remove_gold,"trp_player",":troop_cost"),
     ]),
     
     ("buy_horse",
      [
        (assign, ":faction", "fac_undeads_2"),
        (assign, ":relation_need", 30),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_palace),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, undead_magic_guild),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 7),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (this_or_next|neg|troop_slot_ge,"trp_player", slot_troop_player_class,5),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 

          (str_store_string, s1, "@ "),
          (str_store_string, s18, "@Undead Transformer Can change prisoner to Skeleton, Ghost or vampire"),
          (store_num_regular_prisoners, ":num_regular_prisoners"),
          (lt, ":num_regular_prisoners", 1),
          (str_clear, s1),
          (str_store_string, s1, "@You don't have prisoner."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (party_clear, "p_temp_party"),
        (play_sound,"snd_man_die"),
        (play_sound,"snd_skeleton_death"),
        (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
        (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":troop_no", "p_main_party", ":i_stack"),
          (neg|troop_is_hero, ":troop_no"),
          (party_prisoner_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
          (store_character_level, ":sell_price", ":troop_no"),
          (try_begin),
            (is_between, ":troop_no",nobility_troops_begin,nobility_troops_end),
            (ge, ":sell_price", 50),
            (party_add_members,"p_temp_party","trp_undead_horse_3",":stack_size"),
          (else_try), 
            (is_between, ":troop_no",nobility_troops_begin,nobility_troops_end),
            (ge, ":sell_price", 40),
            (party_add_members,"p_temp_party","trp_undead_horse_2",":stack_size"),
          (else_try), 
            (is_between, ":troop_no",nobility_troops_begin,nobility_troops_end),
            (ge, ":sell_price", 30),
            (party_add_members,"p_temp_party","trp_undead_horse_1",":stack_size"),
          (else_try), 
            (is_between, ":troop_no",nobility_troops_begin,nobility_troops_end),
            (party_add_members,"p_temp_party","trp_vampire_1",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 50),
            (party_add_members,"p_temp_party","trp_wraith",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 40),
            (party_add_members,"p_temp_party","trp_wight",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 35),
            (party_add_members,"p_temp_party","trp_skeleton_lord",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 30),
            (troop_is_guarantee_ranged, ":troop_no"),
            (party_add_members,"p_temp_party","trp_skeleton_archer",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 24),
            (troop_is_guarantee_ranged, ":troop_no"),
            (party_add_members,"p_temp_party","trp_se_musketeer_2",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 18),
            (troop_is_guarantee_ranged, ":troop_no"),
            (party_add_members,"p_temp_party","trp_se_musketeer_1",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 30),
            (party_add_members,"p_temp_party","trp_skeleton_warrior",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 24),
            (party_add_members,"p_temp_party","trp_se_billman_2",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 18),
            (party_add_members,"p_temp_party","trp_se_pikeman_2",":stack_size"),
          (else_try), 
            (party_add_members,"p_temp_party","trp_skeleton",":stack_size"),
          (try_end),
          (party_remove_prisoners, "p_main_party", ":troop_no", ":stack_size"),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
      ]),
  
     ("buy_horse",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, undead_magic_guild),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 3),
        (val_mul, ":reinforcement_cost", 4),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (this_or_next|neg|troop_slot_ge,"trp_player", slot_troop_player_class,5),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@There are some book_and scroll in magic_guild, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 4),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (troop_clear_inventory, "trp_find_item_cheat"),
        (set_merchandise_modifier_quality, 1000),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_undeads_2",itp_type_pistol,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_undeads_2",itp_type_bullets,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_undeads_2",itp_type_book,2),
        (change_screen_trade, "trp_find_item_cheat"),
     ]),
     
     ("buy_horse",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 3),
        (val_mul, ":reinforcement_cost", 4),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (this_or_next|neg|troop_slot_ge,"trp_player", slot_troop_player_class,5),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@There are some book_and firearm in alchemist_lab, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 4),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (troop_clear_inventory, "trp_find_item_cheat"),
        (set_merchandise_modifier_quality, 1000),
        (troop_add_merchandise,"trp_find_item_cheat", itp_type_book,5),
        (troop_add_item, "trp_find_item_cheat", "itm_cartridges_cannon", 0),
        (troop_add_item, "trp_find_item_cheat", "itm_cartridges_flame", 0),
        (troop_add_item, "trp_find_item_cheat", "itm_cartridges_sissofbattle_flame", 0),
        (troop_add_item, "trp_find_item_cheat", "itm_drawf_flame_caster", 0),

        (troop_add_item, "trp_find_item_cheat", "itm_nahptha_bomb", 0),
        (troop_add_item, "trp_find_item_cheat", "itm_granata", 0),
        (troop_add_item, "trp_find_item_cheat", "itm_granata_medium", 0),
        (troop_add_item, "trp_find_item_cheat", "itm_granata_small", 0),
        
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_dwarf",itp_type_pistol,4),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_dwarf",itp_type_musket,4),
        (change_screen_trade, "trp_find_item_cheat"),
     ]),
     
     ("buy_horse",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_party_type, spt_town),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
        
        (store_faction_of_party, ":original_faction","$current_town"),
        (this_or_next|eq, ":original_faction", "fac_kingdom_7"),
        (eq, ":original_faction", "fac_kingdom_1"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 3),
        (val_mul, ":reinforcement_cost", 4),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (this_or_next|neg|troop_slot_ge,"trp_player", slot_troop_player_class,5),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@There are some armor_and scroll in cathedral, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 4),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (troop_clear_inventory, "trp_find_item_cheat"),
        (set_merchandise_modifier_quality, 1000),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_demon_hunters",itp_type_pistol,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_demon_hunters",itp_type_bullets,3),
        (troop_add_merchandise_with_faction, "trp_find_item_cheat", "fac_demon_hunters", itp_type_body_armor, 3),
        (troop_add_merchandise_with_faction, "trp_find_item_cheat", "fac_demon_hunters", itp_type_head_armor, 3),
        (troop_add_merchandise_with_faction, "trp_find_item_cheat", "fac_demon_hunters", itp_type_foot_armor, 3),
        (troop_add_merchandise_with_faction, "trp_find_item_cheat", "fac_demon_hunters", itp_type_hand_armor, 3),
        (change_screen_trade, "trp_find_item_cheat"),
     ]),
     
     ("horse_medical",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, nomad_tent),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 3),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 7),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@Nomads veterinary Can help you to horses are restored to health, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 3),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        
        (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
        (try_for_range, ":i_slot", 0, ":inv_cap"),
          (troop_get_inventory_slot, ":item", "trp_player", ":i_slot"),
          (gt, ":item", -1),
          (item_get_type, ":type", ":item"),
          (eq, ":type", itp_type_horse),
          (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
          (this_or_next|eq, ":imod", imod_lame),
          (this_or_next|eq, ":imod", imod_swaybacked),
          (eq, ":imod", imod_stubborn),
          (troop_set_inventory_slot_modifier, "trp_player", ":i_slot",0),
        (try_end),
     ]),

     ("buy_horse",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, nomad_tent),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 3),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@There are some spirited horse in Nomads tent, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (set_merchandise_modifier_quality, 1000),
        (troop_clear_inventory, "trp_find_item_cheat"),
        (troop_add_merchandise,"trp_find_item_cheat",itp_type_horse,3),
        
        (try_for_range, ":unused", 0, 2),   
          (store_random_in_range, ":item_id", "itm_sumpter_horse", "itm_drow_basilisk"),  
          (call_script, "script_get_best_modifier_of_item", ":item_id"),
          (assign, ":best_imod", reg0),
          (troop_add_item,"trp_find_item_cheat",":item_id",":best_imod"),
        (try_end),
        (store_random_in_range, ":item_id", "itm_camel3", "itm_arrows"),    
        (call_script, "script_get_best_modifier_of_item", ":item_id"),
        (assign, ":best_imod", reg0),
        (troop_add_item,"trp_find_item_cheat",":item_id",":best_imod"),
        
        (change_screen_trade, "trp_find_item_cheat"),
     ]),

     ("collect_soul_point",
      [
        (str_clear, s1),
        (str_clear, s18),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, tomb_of_curses),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, graveyard),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 3),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (str_store_string, s18, "@In this graveyard, no soul_point can gather.{s1}"),
          (disable_menu_option),
        (else_try), 
          (party_get_free_companions_capacity, ":var_0", "p_main_party"),
          (lt, ":var_0", 1),
          (str_clear, s18),
          (str_store_string, s18, "@Party full!"),
          (disable_menu_option),
        (else_try), 
          (str_store_string, s18, "@You can gather soul_point in here, but need some skill"),
          (store_skill_level,":power",skl_necromancy,"trp_player"),
          (lt, ":power", 1),
          (str_clear, s18),
          (str_store_string, s18, "@You can gather soul_point in here, but You don't have enough skill."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        
        (assign,"$auto_menu","mnu_go_to_settlements"),
        (assign, "$g_is_quick_battle", -3),
        (rest_for_hours, 24, 5, 0),
        (change_screen_return),
     ]),

     ("find_some_item_in_graveyard",
      [
        (str_clear, s1),
        (str_clear, s18),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, tomb_of_curses),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, graveyard),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 5),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (str_store_string, s18, "@In this graveyard, no thing can gather.{s1}."),
          (disable_menu_option),
        (else_try), 
          (store_free_inventory_capacity, ":var_0", "trp_player"),
          (lt, ":var_0", 1),
          (str_clear, s18),
          (str_store_string, s18, "@Inventory full!"),
          (disable_menu_option),
        (else_try), 
          (str_store_string, s18, "@You can Dig the graveyard"),
          (store_skill_level,":power",skl_looting,"trp_player"),
          (lt, ":power", 1),
          (str_clear, s18),
          (str_store_string, s18, "@You can Dig the graveyard, but You don't have enough skill."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        
        (assign,"$auto_menu","mnu_go_to_settlements"),
        (assign, "$g_is_quick_battle", -4),
        (rest_for_hours, 24, 5, 0),
        (change_screen_return),
     ]),

     ("buy_horse",#speech
      [
        (party_slot_eq, "$current_town", slot_party_type, spt_town),
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 3),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (str_store_string, s1, "@ (12 hours)"),
          (str_store_string, s18, "@I want to make a speech."),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_clear, s1),
          (str_clear, s18),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign,"$auto_menu","mnu_go_to_settlements"),
        (assign, "$g_is_quick_battle", -8),
        (rest_for_hours, 24, 5, 0),
        (change_screen_return),
     ]),

     ("buy_horse",#buy_drinks
      [
        (party_slot_eq, "$current_town", slot_party_type, spt_town),
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 2),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (str_store_string, s1, "@ (24 hours)"),
          (str_store_string, s18, "@I'd like to buy every man from this town a jar of your best wine."),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_clear, s1),
          (str_clear, s18),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign,"$auto_menu","mnu_go_to_settlements"),
        (assign, "$g_is_quick_battle", -9),
        (rest_for_hours, 24, 5, 0),
        (store_current_hours,":cur_hours"),
        (assign, "$buy_drinks_last_time", ":cur_hours"),
        (change_screen_return),
     ]),

     ("village_perform_basic_work",
      [
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, keep),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, nomad_tent),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, 0),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, farm),
      
        (party_slot_eq, "$current_town", slot_party_type, spt_village),
        (neg|party_slot_eq, "$current_town", slot_village_state, svs_looted),
        (neg|party_slot_eq, "$current_town", slot_village_state, svs_being_raided),
        (neg|party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),      
      ],
      "Perform some very basic work for the village (be farmer).",
      [
        (assign,"$auto_menu","mnu_go_to_settlements"),
        (display_message,"@ You start performing these hard peasantry basic work.",0xFF0000),     
        (assign, "$g_is_quick_battle", -7),
        (try_begin),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
          (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, nomad_tent),
          (assign, "$g_is_quick_battle", -6),
        (try_end),
        
        (rest_for_hours, 24, 5, 0),
        (change_screen_return),
     ]),
     
     ("work_mines",
      [
        (str_clear, s1),
        (str_clear, s18),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, imp_cache),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, dwarf_cottage),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 7),
        
        (try_begin),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
          (assign, ":faction", "fac_orc"),
        (else_try), 
          (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (assign, ":faction", "fac_beast"),
        (else_try), 
          (party_slot_eq, "$current_town", slot_center_lair_build_type, imp_cache),
          (assign,":faction", "fac_demon"),
        (else_try), 
          (assign,":faction", "fac_dwarf"),
        (try_end),
        (assign, ":relation_need", 0),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (str_store_string, s18, "@In this mine, no thing can gather.{s1}."),
          (disable_menu_option),
        (else_try), 
          (str_store_string, s18, "@Volunteer to work in the mines"),
          (store_free_inventory_capacity, ":var_0", "trp_player"),
          (lt, ":var_0", 1),
          (str_clear, s18),
          (str_store_string, s18, "@Inventory full!"),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        
        (assign,"$auto_menu","mnu_go_to_settlements"),
        (assign, "$g_is_quick_battle", -5),
        (rest_for_hours, 24, 5, 0),
        (change_screen_return),
     ]),


     ("force_troop_join_you",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 2),
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (str_store_string, s18, "@You can force_gobin_join_you army"),
          (str_store_string, s1, "@ "),
          (party_get_free_companions_capacity,":local_2","p_main_party"),
          (lt, ":local_2", 40),
          (str_clear, s18),
          (str_store_string, s18, "@You can force_gobin_join_you army, but You don't have enough place."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (store_random_in_range, ":random_value", 0, 7),
        (try_begin),
          (eq, ":random_value", 0),
          (party_add_members, "p_main_party", "trp_troll_1", 2),
          (party_add_members, "p_main_party", "trp_goblin", 22),
        (else_try),
          (eq, ":random_value", 1),
          (party_add_members, "p_main_party", "trp_goblin_horseman", 15),
          (party_add_members, "p_main_party", "trp_goblin_knight", 4),
        (else_try),
          (eq, ":random_value", 2),
          (party_add_members, "p_main_party", "trp_goblin_infantry", 16),
          (party_add_members, "p_main_party", "trp_goblin_skirmisher", 24),
        (else_try),
          (eq, ":random_value", 3),
          (party_add_members, "p_main_party", "trp_goblin_crossbowman", 24),
          (party_add_members, "p_main_party", "trp_goblin_footman", 16),
        (else_try),
          (eq, ":random_value", 4),
          (party_add_members, "p_main_party", "trp_goblin_skirmisher", 20),
          (party_add_members, "p_main_party", "trp_goblin_footman", 20),
        (else_try),
          (party_add_members, "p_main_party", "trp_goblin_bomber", 20),
        (try_end),
     ]),

     ("force_troop_join_you",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, imp_cache),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 2),
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (str_store_string, s18, "@You can force_imp_join_you army"),
          (str_store_string, s1, "@ "),
          (party_get_free_companions_capacity,":local_2","p_main_party"),
          (lt, ":local_2", 40),
          (str_clear, s18),
          (str_store_string, s18, "@You can force_imp_join_you army, but You don't have enough place."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (store_random_in_range, ":rand", 0, 7),
        (try_begin),
          (eq,":rand",1),
          (party_add_members,"p_main_party","trp_demon_1",7),
          (party_add_members,"p_main_party","trp_demon_1_2",3),
        (else_try),
          (eq,":rand",2),
          (party_add_members,"p_main_party","trp_demon_1",7),
          (party_add_members,"p_main_party","trp_demon_2",3),
        (else_try),
          (eq,":rand",3),
          (party_add_members,"p_main_party","trp_demon_1",4),
          (party_add_members,"p_main_party","trp_demon_1_2",3),
          (party_add_members,"p_main_party","trp_demon_2",3),
        (else_try),
          (eq,":rand",4),
          (party_add_members,"p_main_party","trp_demon_2",3),
          (party_add_members,"p_main_party","trp_demon_1_2",7),
        (else_try),
          (eq,":rand",5),
          (party_add_members,"p_main_party","trp_demon_2",5),
          (party_add_members,"p_main_party","trp_demon_1_2",5),
        (else_try),
          (eq,":rand",6),
          (party_add_members,"p_main_party","trp_demon_2",7),
          (party_add_members,"p_main_party","trp_demon_1_2",3),
        (else_try),
          (party_add_members,"p_main_party","trp_demon_1",10),
        (try_end),
     ]),

     ("mystic_merchant",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, imp_cache),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 7),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (this_or_next|neg|troop_slot_ge,"trp_player", slot_troop_player_class,5),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@imp can help you Meet with the Mystic Merchant, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (troop_set_name, "trp_salt_mine_merchant", "@Mystic Merchant"),
        (call_script, "script_refresh_mystic_merchant_items", "trp_salt_mine_merchant"),
        (call_script, "script_setup_troop_meeting", "trp_salt_mine_merchant", -1),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_kingdom_10"),
        (assign, ":relation_need", 15),
        
        (party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 3),
        
        (assign, ":hours_needed", lair_recruit_time_2),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_nord_join_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_nord_join_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 3),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (store_random_in_range, ":rand", 0, 10),
        (try_begin),
          (eq,":rand",1),
          (assign, ":party_template", "pt_viking_merc_1"),
        (else_try),
          (eq,":rand",2),
          (assign, ":party_template", "pt_viking_merc_2"),
        (else_try),
          (eq,":rand",3),
          (assign, ":party_template", "pt_viking_merc_3"),
        (else_try),
          (eq,":rand",3),
          (assign, ":party_template", "pt_viking_merc_2_fan"),
        (else_try),
          (eq,":rand",4),
          (assign, ":party_template", "pt_nord_lance_t4"),
        (else_try),
          (eq,":rand",5),
          (assign, ":party_template", "pt_viking_merc_4"),
        (else_try),
          (assign, ":party_template", "pt_viking_merc_3_fan"),
        (try_end),
        (party_add_template, "p_temp_party", ":party_template"),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_dwarf"),
        (assign, ":relation_need", 15),
        
        (party_slot_eq, "$current_town", slot_center_lair_build_type, dwarf_cottage),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 5),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_dwarf_join_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_dwarf_join_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 5),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (store_random_in_range, ":rand", 0, 10),
        (try_begin),
          (eq,":rand",1),
          (assign, ":party_template", "pt_dwarf_merc_1"),
        (else_try),
          (eq,":rand",2),
          (assign, ":party_template", "pt_dwarf_merc_2"),
        (else_try),
          (eq,":rand",3),
          (assign, ":party_template", "pt_dwarf_merc_3"),
        (else_try),
          (eq,":rand",3),
          (assign, ":party_template", "pt_dwarf_2_1"),
        (else_try),
          (eq,":rand",4),
          (assign, ":party_template", "pt_dwarf_2_2"),
        (else_try),
          (eq,":rand",5),
          (assign, ":party_template", "pt_dwarf_2_3"),
        (else_try),
          (assign, ":party_template", "pt_dwarf_1"),
        (try_end),
        (party_add_template, "p_temp_party", ":party_template"),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("dwarf_blacksmith",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, dwarf_cottage),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 3),

        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 7),
        
        (assign, ":faction", "fac_dwarf"),
        (assign, ":relation_need", 25),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@dwarf_blacksmith Can help you Repair all melee weapons and fire arm , but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 3),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        
        (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
        (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
        (try_for_range, ":i_slot", 0, ":inv_cap"),
          (troop_get_inventory_slot, ":item", "trp_player", ":i_slot"),
          (gt, ":item", -1),
          (item_get_type, ":type", ":item"),
          (this_or_next|eq, ":type", itp_type_pistol),
          (this_or_next|eq, ":type", itp_type_musket),
          (this_or_next|eq, ":type", itp_type_polearm),
          (this_or_next|eq, ":type", itp_type_two_handed_wpn),
          (eq, ":type", itp_type_one_handed_wpn),
          (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
          (this_or_next|eq, ":imod", imod_cracked),
          (this_or_next|eq, ":imod", imod_bent),
          (this_or_next|eq, ":imod", imod_rusty),
          (this_or_next|eq, ":imod", imod_rusty),
          (this_or_next|eq, ":imod", 0),
          (eq, ":imod", imod_chipped),
          (troop_set_inventory_slot_modifier, "trp_player", ":i_slot",imod_fine),
        (try_end),
     ]),

     ("dwarf_blacksmith",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, dwarf_cottage),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 3),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 7),
        (assign, ":faction", "fac_dwarf"),
        (assign, ":relation_need", 25),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@dwarf_blacksmith Can help you Repair all armor , but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 3),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        
        (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
        (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
        (try_for_range, ":i_slot", 0, ":inv_cap"),
          (troop_get_inventory_slot, ":item", "trp_player", ":i_slot"),
          (gt, ":item", -1),
          (item_get_type, ":type", ":item"),
          (this_or_next|eq, ":type", itp_type_hand_armor),
          (this_or_next|eq, ":type", itp_type_body_armor),
          (this_or_next|eq, ":type", itp_type_foot_armor),
          (this_or_next|eq, ":type", itp_type_shield),
          (eq, ":type", itp_type_head_armor),
          (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
          (this_or_next|eq, ":imod", imod_tattered),
          (this_or_next|eq, ":imod", imod_ragged),
          (this_or_next|eq, ":imod", imod_battered),
          (this_or_next|eq, ":imod", imod_rusty),
          (this_or_next|eq, ":imod", imod_crude),
          (eq, ":imod", imod_cracked),
          (troop_set_inventory_slot_modifier, "trp_player", ":i_slot",0),
        (try_end),
     ]),

     ("buy_horse",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 3),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@There are some well_made range weapon in elf_homestead, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (troop_clear_inventory, "trp_find_item_cheat"),
        (set_merchandise_modifier_quality, 1000),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_elf",itp_type_bow,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_elf",itp_type_crossbow,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_elf",itp_type_arrows,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_elf",itp_type_bolts,3),

        (change_screen_trade, "trp_find_item_cheat"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (store_faction_of_party, ":cur_faction", "$current_town"),
        (try_begin),
          (neg|eq, ":cur_faction", "fac_kingdom_9"),
          (neg|eq, ":cur_faction", "fac_kingdom_12"),
          (neg|eq, ":cur_faction", "fac_kingdom_6"),
          (assign, ":faction", "fac_demon_hunters"),
        (else_try),
          (assign, ":faction", "fac_demon"),
        (try_end),
        (assign, ":relation_need", 15),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_1),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (store_faction_of_party, ":cur_faction", "$current_town"),
        (try_begin),
          (neg|eq, ":cur_faction", "fac_kingdom_9"),
          (neg|eq, ":cur_faction", "fac_kingdom_12"),
          (neg|eq, ":cur_faction", "fac_kingdom_6"),
          (assign, ":party_template", "pt_monastery"),
        (else_try),
          (assign, ":party_template", "pt_ghazis_merc"),
          (try_begin),
            (eq, "$g_use_special_item", 1),
            (store_random_in_range, ":r", 0, 3),
            (eq, ":r", 1),
            (assign, ":party_template", "pt_ghazis_merc_fan"),
          (try_end),  
        (try_end),
        (party_add_template, "p_temp_party", ":party_template"),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("mystic_merchant",
      [
        (str_clear, s1),
        (str_clear, s18),
        
        (party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 2),
        (assign, ":hours_needed", 24),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@Buy indulgences for repent_your_sins, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 2),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (call_script,"script_change_player_honor",3),
        (val_add,"$g_donate_time", 1),
        (val_add,"$g_pray_time", 1),

     ]),

     ("mystic_merchant",
      [
        (str_clear, s1),
        (str_clear, s18),
        
        (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 4),
        (assign, ":hours_needed", 24),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@Buy indulgences for repent_your_sins, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 4),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (call_script,"script_change_player_honor",5),
        (val_add,"$g_donate_time", 1),
        (val_add,"$g_pray_time", 1),
     ]),

     ("mystic_merchant",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
        (assign, ":reinforcement_cost", 10000),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 7),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@THE healer in cathedral can heal_your_party, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", 10000),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (heal_party, "p_main_party"),
        (call_script,"script_change_player_party_morale",100),
        (val_add,"$g_donate_time", 1),
     ]),

     ("mystic_merchant",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 2),
        (assign, ":hours_needed", 24),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@hold_a_sermon_for raise_troop_spirits, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 2),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (call_script,"script_change_player_party_morale",50),
        (val_add,"$g_pray_time", 1),
        (val_add,"$g_donate_time", 1),
      ]),

      ("buy_horse",
      [
        (str_clear, s1),
        (str_clear, s18),
        #(this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 3),
        (val_mul, ":reinforcement_cost", 3),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@There are some book_and scroll in magic_guild, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 3),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (troop_clear_inventory, "trp_find_item_cheat"),
        (set_merchandise_modifier_quality, 1000),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_commoners",itp_type_pistol,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_commoners",itp_type_bullets,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat","fac_commoners",itp_type_book,1),
        (change_screen_trade, "trp_find_item_cheat"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_dark_knights"),
        (assign, ":relation_need", 15),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 4),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 4),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (store_faction_of_party, ":cur_faction", "$current_town"),
        (try_begin),
          (neg|eq, ":cur_faction", "fac_kingdom_9"),
          (neg|eq, ":cur_faction", "fac_kingdom_12"),
          (neg|eq, ":cur_faction", "fac_kingdom_6"),
          (assign, ":party_template", "pt_mage_merc"),
        (else_try),
          (assign, ":party_template", "pt_mage_merc_1"),
        (try_end),
        (party_add_template, "p_temp_party", ":party_template"),
        (store_random_in_range, ":rand", 0, 10),
        (try_begin),
          (eq,":rand",1),
          (party_add_members,"p_temp_party","trp_golem_1",6),
          (party_add_members,"p_temp_party","trp_golem_3",4),
        (else_try),
          (eq,":rand",2),
          (party_add_members,"p_temp_party","trp_golem_1",5),
          (party_add_members,"p_temp_party","trp_gargoyle",3),
          (party_add_members,"p_temp_party","trp_golem_3",2),
        (else_try),
          (eq,":rand",3),
          (party_add_members,"p_temp_party","trp_golem_1",5),
          (party_add_members,"p_temp_party","trp_golem_3",2),
          (party_add_members,"p_temp_party","trp_gargoyle",1),
          (party_add_members,"p_temp_party","trp_golem_4",2),
        (else_try),
          (eq,":rand",4),
          (party_add_members,"p_temp_party","trp_golem_1",3),
          (party_add_members,"p_temp_party","trp_golem_4",3),
          (party_add_members,"p_temp_party","trp_golem_3",3),
          (party_add_members,"p_temp_party","trp_golem_2",1),
        (else_try),
          (eq,":rand",5),
          (party_add_members,"p_temp_party","trp_golem_4",4),
          (party_add_members,"p_temp_party","trp_golem_3",4),
          (party_add_members,"p_temp_party","trp_golem_2",2),
        (else_try),
          (eq,":rand",6),
          (party_add_members,"p_temp_party","trp_golem_4",2),
          (party_add_members,"p_temp_party","trp_golem_3",6),
          (party_add_members,"p_temp_party","trp_golem_2",3),
        (else_try),
          (eq,":rand",7),
          (party_add_members,"p_temp_party","trp_golem_3",7),
          (party_add_members,"p_temp_party","trp_golem_4",3),
        (else_try),
          (eq,":rand",8),
          (party_add_members,"p_temp_party","trp_golem_3",6),
          (party_add_members,"p_temp_party","trp_golem_4",4),
        (else_try),
          (eq,":rand",9),
          (party_add_members,"p_temp_party","trp_golem_3",5),
          (party_add_members,"p_temp_party","trp_golem_2",5),
        (else_try),
          (party_add_members,"p_temp_party","trp_golem_1",8),
          (party_add_members,"p_temp_party","trp_gargoyle",2),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("regular_recruit",
      [
        (party_slot_eq, "$current_town", slot_center_lair_build_type, keep),

        # relation
        (party_get_slot, ":town_lord", "$current_town", slot_town_lord),
        (try_begin),
          (this_or_next|le, ":town_lord", "trp_player"), # player or unassigned
          (troop_slot_eq, "trp_player", slot_troop_spouse, ":town_lord"),
          (assign, ":relation", 0),
        (else_try), 
          (call_script, "script_troop_get_relation_with_troop", "trp_player", ":town_lord"),
          (assign, ":relation", reg0),
        (try_end),
        (ge, ":relation", 0),
        
        # cost and hours
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", 36),
        (try_begin),
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
          (assign, ":reinforcement_cost", reinforcement_cost_easy),
          (assign, ":hours_needed", 48),
        (try_end),
        
        (try_begin),
          (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
          (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
          (assign, ":reinforcement_cost", reinforcement_cost_hard),
          (assign, ":hours_needed", 24),
        (try_end),
        
        (val_mul, ":reinforcement_cost", 2),
        (val_mul, ":hours_needed", 2),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),
          (assign, ":reinforcement_cost", "$temp"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@One lance ready to join you, Recruit them"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", "$temp"),
        (assign, ":recruit_rounds", 1),
        (store_troop_gold, ":gold", "trp_player"),
        (ge, ":gold", ":reinforcement_cost"),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        # start to recruit
        (party_clear, "p_temp_party"),
        (try_for_range, ":unused", 0, ":recruit_rounds"),
          (call_script, "script_cf_reinforce_party", "p_temp_party"),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("mystic_merchant",
      [
        (str_clear, s1),
        (str_clear, s18),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, knights_chapter),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, keep),
        (assign, ":hours_needed", 24),
        (assign, ":reinforcement_cost", 5000),
        (val_mul, ":hours_needed", 10),
        (try_begin),
          (party_slot_eq, "$current_town", slot_center_lair_build_type, knights_chapter),
          (assign, ":reinforcement_cost", 10000),
        (try_end),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@keep Can help train your army, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign,"$auto_menu","mnu_go_to_settlements"),
        (assign, "$g_is_quick_battle", -10),
        (rest_for_hours, 10, 5, 0),
        (change_screen_return),
     ]),
       
     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_demon"),
        (assign, ":relation_need", 20),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, tomb_of_curses),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 5),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 5),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", "pt_mummy_merc"),
        (store_random_in_range, ":rand", 1, 3),
        (try_begin),
          (eq,":rand",1),
          (party_add_template, "p_temp_party", "pt_tomb_of_curses"),
        (else_try),
          (eq,":rand",2),
          (party_add_template, "p_temp_party", "pt_werewolf_merc_1"),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_demon_hunters"),
        (assign, ":relation_need", 25),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 5),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 5),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", "pt_monastery"),
        (store_random_in_range, ":rand", 0, 10),
        (try_begin),
          (eq,":rand",1),
          (party_add_members,"p_temp_party","trp_angle",5),
        (else_try),
          (eq,":rand",2),
          (party_add_members,"p_temp_party","trp_teutonic_horse_3",8),
        (else_try),
          (eq,":rand",3),
          (party_add_members,"p_temp_party","trp_sissofbattle_s",7),
        (else_try),
          (eq,":rand",4),
          (party_add_members,"p_temp_party","trp_archangle",2),
        (else_try),
          (eq,":rand",5),
          (party_add_members,"p_temp_party","trp_healer",5),
        (else_try),
          (eq,":rand",6),
          (party_add_members,"p_temp_party","trp_teutonic_dis_knight",8),
        (else_try),
          (eq,":rand",7),
          (party_add_members,"p_temp_party","trp_sissofbattle_c",8),
        (else_try),
          (eq,":rand",8),
          (party_add_template,"p_temp_party","pt_hospitalier_knight_merc_1"),
        (else_try),
          (eq,":rand",9),
          (party_add_template,"p_temp_party","pt_hospitalier_knight_merc_2"),
        (else_try),
          (party_add_members,"p_temp_party","trp_sissofbattle",15),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_demon"),
        (assign, ":relation_need", 25),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, demon_gate),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 5),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 5),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", "pt_imp_cache"),
        (store_random_in_range, ":rand", 0, 10),
        (try_begin),
          (eq,":rand",1),
          (party_add_members,"p_temp_party","trp_demon_6",2),
        (else_try),
          (eq,":rand",2),
          (party_add_members,"p_temp_party","trp_demon_5",2),
        (else_try),
          (eq,":rand",3),
          (party_add_members,"p_temp_party","trp_demon_4_2",4),
        (else_try),
          (eq,":rand",4),
          (party_add_members,"p_temp_party","trp_demon_7",4),
        (else_try),
          (eq,":rand",5),
          (party_add_members,"p_temp_party","trp_demon_magic_3",4),
        (else_try),
          (eq,":rand",6),
          (party_add_members,"p_temp_party","trp_demon_human_5_1",4),
        (else_try),
          (eq,":rand",7),
          (party_add_members,"p_temp_party","trp_demon_4",4),
        (else_try),
          (eq,":rand",8),
          (party_add_members,"p_temp_party","trp_demon_human_5_2",4),
        (else_try),
          (eq,":rand",9),
          (party_add_members,"p_temp_party","trp_demon_human_4",10),
        (else_try),
          (party_add_members,"p_temp_party","trp_demon_3",8),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("mystic_merchant",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, demon_gate),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 2),
        (assign, ":hours_needed", 24),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@demon can help you Meet with the ramun, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 2),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (call_script, "script_setup_troop_meeting", "trp_ramun_the_slave_trader", -1),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_undeads_2"),
        (assign, ":relation_need", 25),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 5),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 5),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", "pt_vampire_estate"),
        (store_random_in_range, ":rand", 1, 10),
        (try_begin),
          (eq,":rand",1),
          (party_add_members,"p_temp_party","trp_vampire_3",4),
          (party_add_members,"p_temp_party","trp_undead_horse_3",4),
          (party_add_members,"p_temp_party","trp_undead_magic_2",2),
        (else_try),
          (eq,":rand",2),
          (party_add_members,"p_temp_party","trp_skeleton_halberd",5),
          (party_add_members,"p_temp_party","trp_lich_1",5),
        (else_try),
          (eq,":rand",3),
          (party_add_members,"p_temp_party","trp_skeleton_spearman",7),
          (party_add_members,"p_temp_party","trp_lich_1",3),
        (else_try),
          (eq,":rand",4),
          (party_add_members,"p_temp_party","trp_lich_2",3),
          (party_add_members,"p_temp_party","trp_vampire_assassin",4),
          (party_add_members,"p_temp_party","trp_vampire_1",3),
        (else_try),
          (eq,":rand",5),
          (party_add_members,"p_temp_party","trp_vampire_assassin",2),
          (party_add_members,"p_temp_party","trp_skeleton_lord",4),
          (party_add_members,"p_temp_party","trp_vampire_2",3),
          (party_add_members,"p_temp_party","trp_wraith",1),
        (else_try),
          (eq,":rand",6),
          (party_add_members,"p_temp_party","trp_skeleton_warrior",2),
          (party_add_members,"p_temp_party","trp_vampire_2",3),
          (party_add_members,"p_temp_party","trp_undead_horse_1",3),
          (party_add_members,"p_temp_party","trp_undead_magic_2",2),
        (else_try),
          (eq,":rand",7),
          (party_add_members,"p_temp_party","trp_vampire_2",5),
          (party_add_members,"p_temp_party","trp_wight",2),
          (party_add_members,"p_temp_party","trp_undead_horse_2",1),
          (party_add_members,"p_temp_party","trp_undead_magic_2",2),
        (else_try),
          (eq,":rand",8),
          (party_add_members,"p_temp_party","trp_dullahan",3),
          (party_add_members,"p_temp_party","trp_vampire_3",2),
          (party_add_members,"p_temp_party","trp_undead_horse_2",3),
          (party_add_members,"p_temp_party","trp_undead_magic_2",2),
        (else_try),
          (eq,":rand",9),
          (party_add_members,"p_temp_party","trp_vampire_3",3),
          (party_add_members,"p_temp_party","trp_wight",3),
          (party_add_members,"p_temp_party","trp_undead_horse_3",2),
          (party_add_members,"p_temp_party","trp_undead_magic_2",2),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_dwarf"),
        (assign, ":relation_need", 25),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 7),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 7),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", "pt_clan_halls"),
        (store_random_in_range, ":rand", 1, 10),
        (try_begin),
          (eq,":rand",3),
          (party_add_members,"p_temp_party","trp_giant_1",6),
          (party_add_members,"p_temp_party","trp_giant_1_2",2),
          (party_add_members,"p_temp_party","trp_giant_1_3",2),
        (else_try),
          (eq,":rand",4),
          (party_add_members,"p_temp_party","trp_giant_1",4),
          (party_add_members,"p_temp_party","trp_giant_1_2",3),
          (party_add_members,"p_temp_party","trp_giant_1_3",3),
        (else_try),
          (eq,":rand",5),
          (party_add_members,"p_temp_party","trp_giant_1",2),
          (party_add_members,"p_temp_party","trp_giant_1_2",4),
          (party_add_members,"p_temp_party","trp_giant_1_3",4),
        (else_try),
          (eq,":rand",6),
          (party_add_members,"p_temp_party","trp_giant_1_2",5),
          (party_add_members,"p_temp_party","trp_giant_1_3",5),
        (else_try),
          (eq,":rand",7),
          (party_add_members,"p_temp_party","trp_giant_1_2",3),
          (party_add_members,"p_temp_party","trp_giant_1_3",3),
          (party_add_members,"p_temp_party","trp_giant_2",2),
          (party_add_members,"p_temp_party","trp_giant_3",2),
        (else_try),
          (eq,":rand",8),
          (party_add_members,"p_temp_party","trp_dwarf_guard_3",2),
          (party_add_members,"p_temp_party","trp_giant_2",4),
          (party_add_members,"p_temp_party","trp_giant_3",4),
        (else_try),
          (eq,":rand",9),
          (party_add_members,"p_temp_party","trp_giant_2",5),
          (party_add_members,"p_temp_party","trp_giant_3",5),
        (else_try),
          (eq,":rand",10),
          (party_add_members,"p_temp_party","trp_giant_2",5),
          (party_add_members,"p_temp_party","trp_giant_3",5),
        (else_try),
          (party_add_members,"p_temp_party","trp_giant_1",8),
          (party_add_members,"p_temp_party","trp_giant_1_2",1),
          (party_add_members,"p_temp_party","trp_giant_1_3",1),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_orc"),
        (assign, ":relation_need", 15),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 5),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 5),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", "pt_ogre_merc"),
        (store_random_in_range, ":rand", 1, 10),
        (try_begin),
          (eq,":rand",1),
          (party_add_members,"p_temp_party","trp_ogre",4),
          (party_add_members,"p_temp_party","trp_ogre_young",6),
        (else_try),
          (eq,":rand",2),
          (party_add_members,"p_temp_party","trp_ogre",6),
          (party_add_members,"p_temp_party","trp_ogre_young",4),
        (else_try),
          (eq,":rand",3),
          (party_add_members,"p_temp_party","trp_ogre",5),
          (party_add_members,"p_temp_party","trp_ogre_young",2),
          (party_add_members,"p_temp_party","trp_ogre_war",3),
        (else_try),
          (eq,":rand",4),
          (party_add_members,"p_temp_party","trp_ogre",6),
          (party_add_members,"p_temp_party","trp_ogre_war",4),
        (else_try),
          (eq,":rand",5),
          (party_add_members,"p_temp_party","trp_ogre",4),
          (party_add_members,"p_temp_party","trp_ogre_war",5),
          (party_add_members,"p_temp_party","trp_ogre_mega",1),
        (else_try),
          (eq,":rand",6),
          (party_add_members,"p_temp_party","trp_ogre",2),
          (party_add_members,"p_temp_party","trp_ogre_war",6),
          (party_add_members,"p_temp_party","trp_ogre_mega",2),
        (else_try),
          (eq,":rand",7),
          (party_add_members,"p_temp_party","trp_ogre",2),
          (party_add_members,"p_temp_party","trp_ogre_cannon",2),
          (party_add_members,"p_temp_party","trp_ogre_war",6),
        (else_try),
          (eq,":rand",8),
          (party_add_members,"p_temp_party","trp_ogre_cannon",2),
          (party_add_members,"p_temp_party","trp_ogre_war",5),
          (party_add_members,"p_temp_party","trp_ogre_mega",3),
        (else_try),
          (eq,":rand",9),
          (party_add_members,"p_temp_party","trp_ogre_war",6),
          (party_add_members,"p_temp_party","trp_ogre_mega",4),
        (else_try),
          (eq,":rand",10),
          (party_add_members,"p_temp_party","trp_ogre_war",5),
          (party_add_members,"p_temp_party","trp_ogre_mega",5),
        (else_try),
          (party_add_members,"p_temp_party","trp_ogre",2),
          (party_add_members,"p_temp_party","trp_ogre_young",8),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_scotland"),
        (assign, ":relation_need", 20),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 4),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 4),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", "pt_scottish_merc_fan"),
        (store_random_in_range, ":rand", 1, 3),
        (try_begin),
          (eq,":rand",1),
          (party_add_template, "p_temp_party", "pt_scottish_merc"),
        (else_try),
          (eq,":rand",2),
          (party_add_template, "p_temp_party", "pt_scottish_merc_2"),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_beast"),
        (assign, ":relation_need", 30),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 7),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 7),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (party_add_template, "p_temp_party", "pt_labyrinth"),
        (store_random_in_range, ":rand", 1, 5),
        (try_begin),
          (eq,":rand",1),
          (party_add_template, "p_temp_party", "pt_minotaur_merc"),
        (else_try),
          (eq,":rand",2),
          (party_add_template, "p_temp_party", "pt_titan_merc_2"),
        (else_try),
          (eq,":rand",3),
          (party_add_template, "p_temp_party", "pt_drow_elven_merc_1"),
        (else_try),
          (eq,":rand",4),
          (party_add_template, "p_temp_party", "pt_drow_elven_merc_2"),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_forest_ranger"),
        (assign, ":relation_need", 20),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 5),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_elf_join_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_elf_join_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 5),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (store_random_in_range, ":rand", 2, 5),
        (party_add_members,"p_temp_party","trp_ent_2",5),
        (try_begin),
          (eq,":rand",2),
          (assign, ":party_template", "pt_wood_elven_2"),
        (else_try),
          (eq,":rand",3),
          (assign, ":party_template", "pt_wood_elven_merc_1"),
        (else_try),
          (assign, ":party_template", "pt_wood_elven_merc_3"),
        (try_end),
        (party_add_template, "p_temp_party", ":party_template"),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_nord",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_elf"),
        (assign, ":relation_need", 20),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", lair_recruit_time_2),
        (val_mul, ":reinforcement_cost", 5),
        
        (party_get_slot, ":last_time", "$current_town", slot_center_extra_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@No one here seems to be willing to join your party."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s18, "@You can recruit_troop_you army"),
          (str_store_string, s1, "@ ({reg1} denars)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You can recruit_troop_you army, but You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_clear, "p_temp_party"),
        (party_set_slot, "$current_town", slot_center_extra_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 5),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (store_random_in_range, ":rand", 1, 5),
        (party_add_members,"p_temp_party","trp_ent_1",5),
        (try_begin),
          (eq,":rand",2),
          (party_add_members,"p_temp_party","trp_ent_1",5),
          (party_add_template, "p_temp_party", "pt_grand_elven_merc_1"),
        (else_try),
          (eq,":rand",3),
          (party_add_members,"p_temp_party","trp_ent_1",5),
          (party_add_template, "p_temp_party", "pt_grand_elven_2"),
        (else_try),
          (party_add_members,"p_temp_party","trp_ent_1",5),
          (party_add_template, "p_temp_party", "pt_grand_elven_merc_2"),
        (try_end),
            
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("mystic_merchant",
      [
        (str_clear, s1),
        (str_clear, s18),
        (store_faction_of_party, ":original_faction","$current_town"),
        (try_begin),
          (eq, ":original_faction", "fac_player_supporters_faction"),
          (call_script, "script_get_town_faction_for_recruiting", "$current_town"),
          (assign, ":original_faction", reg0),
        (try_end),
        (assign, ":mystic_merchant", 0),
        (try_begin),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (assign,":talk_faction", "fac_elf"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_3"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
          (assign,":talk_faction", "fac_forest_ranger"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_2"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dragon_altar),
          (try_begin),
            (this_or_next|eq, ":original_faction", "fac_kingdom_2"),
            (eq, ":original_faction", "fac_kingdom_4"),
            (assign,":talk_faction", "fac_forest_ranger"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_2"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_1"),
            (assign,":talk_faction", "fac_elf"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_3"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_10"),
            (assign,":talk_faction", "fac_dwarf"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_7"),
          (else_try),
            (assign, ":talk_faction", "fac_beast"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_6"),
          (try_end),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, troll_cave),
          (assign,":talk_faction", "fac_orc"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_4"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (assign,":talk_faction", "fac_undeads_2"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_5"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cloud_temple),
          (assign,":talk_faction", "fac_dark_knights"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
          (assign,":talk_faction", "fac_orc"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_4"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (assign,":talk_faction", "fac_undeads_2"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_5"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (assign,":talk_faction", "fac_beast"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_6"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
          (assign,":talk_faction", "fac_scotland"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
          (assign,":talk_faction", "fac_dwarf"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_7"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
          (store_faction_of_party, ":talk_faction", "$current_town"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_9"),
        (else_try), 
          (party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
          (assign,":talk_faction", "fac_dark_knights"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_9"),
        (try_end),
        (gt, ":talk_faction", 0),
        (gt, ":mystic_merchant", 0),
        (assign, ":hours_needed", 24),
        #(val_mul, ":hours_needed", 7),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (this_or_next|neg|troop_slot_ge,"trp_player", slot_troop_player_class,5),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (str_store_string, s1, "@ "),
          (str_store_string, s18, "@You can Meet with the Mystic Merchant, but need some relation"),
          (store_relation, ":relation", "fac_player_faction", ":talk_faction"),
          (lt, ":relation", 15),
          (str_clear, s1),
          (str_store_string, s1, "@You don't have enough relation."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_faction_of_party, ":original_faction","$current_town"),
        (try_begin),
          (eq, ":original_faction", "fac_player_supporters_faction"),
          (call_script, "script_get_town_faction_for_recruiting", "$current_town"),
          (assign, ":original_faction", reg0),
        (try_end),
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":mystic_merchant", 0),
        (try_begin),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (assign,":talk_faction", "fac_elf"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_3"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
          (assign,":talk_faction", "fac_forest_ranger"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_2"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dragon_altar),
          (try_begin),
            (this_or_next|eq, ":original_faction", "fac_kingdom_2"),
            (eq, ":original_faction", "fac_kingdom_4"),
            (assign,":talk_faction", "fac_forest_ranger"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_2"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_1"),
            (assign,":talk_faction", "fac_elf"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_3"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_10"),
            (assign,":talk_faction", "fac_dwarf"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_7"),
          (else_try),
            (assign, ":talk_faction", "fac_beast"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_6"),
          (try_end),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, troll_cave),
          (assign,":talk_faction", "fac_orc"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_4"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (assign,":talk_faction", "fac_undeads_2"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_5"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cloud_temple),
          (assign,":talk_faction", "fac_dark_knights"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
          (assign,":talk_faction", "fac_orc"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_4"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (assign,":talk_faction", "fac_undeads_2"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_5"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (assign,":talk_faction", "fac_beast"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_6"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
          (assign,":talk_faction", "fac_scotland"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
          (assign,":talk_faction", "fac_dwarf"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_7"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
          (store_faction_of_party, ":talk_faction", "$current_town"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          (assign,":talk_faction", "fac_demon_hunters"),
        (else_try), 
          (party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
          (assign,":talk_faction", "fac_dark_knights"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_9"),
        (try_end),
        (gt, ":mystic_merchant", 0),
        (gt, ":talk_faction", 0),
        (call_script, "script_refresh_mystic_merchant_items_2", "trp_salt_mine_merchant",":talk_faction"),
        (call_script, "script_setup_troop_meeting", ":mystic_merchant", -1),
     ]),
     
     ("mystic_merchant",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":mystic_merchant", 0),
        (store_faction_of_party, ":original_faction","$current_town"),
        
        (try_begin),
          (eq, ":original_faction", "fac_player_supporters_faction"),
          (call_script, "script_get_town_faction_for_recruiting", "$current_town"),
          (assign, ":original_faction", reg0),
        (try_end),
        (try_begin),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, imp_cache),
          (assign, ":mystic_merchant", "trp_demon_1"),
          (store_faction_of_party, ":talk_faction", "$current_town"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (assign,":talk_faction", "fac_elf"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_3"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dragon_altar),
          (try_begin),
            (this_or_next|eq, ":original_faction", "fac_kingdom_2"),
            (eq, ":original_faction", "fac_kingdom_4"),
            (assign,":talk_faction", "fac_forest_ranger"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_2"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_1"),
            (assign,":talk_faction", "fac_elf"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_3"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_10"),
            (assign,":talk_faction", "fac_dwarf"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_7"),
          (else_try),
            (assign, ":talk_faction", "fac_beast"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_6"),
          (try_end),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
          (assign,":talk_faction", "fac_forest_ranger"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_2"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, troll_cave),
          (assign,":talk_faction", "fac_orc"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_4"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (assign,":talk_faction", "fac_undeads_2"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_5"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cloud_temple),
          (assign,":talk_faction", "fac_dark_knights"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),

        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
          (assign,":talk_faction", "fac_orc"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_4"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (assign,":talk_faction", "fac_undeads_2"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_5"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (assign,":talk_faction", "fac_beast"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_6"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
          (assign,":talk_faction", "fac_scotland"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_6"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
          (assign,":talk_faction", "fac_dwarf"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_7"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
          (store_faction_of_party, ":talk_faction", "$current_town"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_9"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
          (assign,":talk_faction", "fac_dark_knights"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_9"),
        (try_end),
        (gt, ":talk_faction", 0),
        (gt, ":mystic_merchant", 0),
        (assign, ":hours_needed", 24),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (this_or_next|neg|troop_slot_ge,"trp_player", slot_troop_player_class,5),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (str_store_string, s1, "@ "),
          (str_store_string, s18, "@You can Meet with the Mystic Merchant, Do you want to try your fortune?"),
          (store_relation, ":relation", "fac_player_faction", ":talk_faction"),
          (lt, ":relation", 0),
          (str_clear, s1),
          (str_store_string, s1, "@You don't have enough relation."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        
        (store_faction_of_party, ":original_faction","$current_town"),
        
        (try_begin),
          (eq, ":original_faction", "fac_player_supporters_faction"),
          (call_script, "script_get_town_faction_for_recruiting", "$current_town"),
          (assign, ":original_faction", reg0),
        (try_end),
        
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":mystic_merchant", 0),
        (try_begin),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, imp_cache),
          (assign, ":mystic_merchant", "trp_demon_1"),
          (store_faction_of_party, ":talk_faction", "$current_town"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (assign,":talk_faction", "fac_elf"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_3"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dragon_altar),
          (try_begin),
            (this_or_next|eq, ":original_faction", "fac_kingdom_2"),
            (eq, ":original_faction", "fac_kingdom_4"),
            (assign,":talk_faction", "fac_forest_ranger"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_2"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_1"),
            (assign,":talk_faction", "fac_elf"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_3"),
          (else_try),
            (eq, ":original_faction", "fac_kingdom_10"),
            (assign,":talk_faction", "fac_dwarf"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_7"),
          (else_try),
            (assign, ":talk_faction", "fac_beast"),
            (assign, ":mystic_merchant", "trp_mystic_merchant_6"),
          (try_end),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
          (assign,":talk_faction", "fac_forest_ranger"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_2"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, troll_cave),
          (assign,":talk_faction", "fac_orc"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_4"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, forlorn_cathedral),
          (assign,":talk_faction", "fac_undeads_2"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_5"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cloud_temple),
          (assign,":talk_faction", "fac_dark_knights"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
        (else_try),  

          (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
          (assign,":talk_faction", "fac_orc"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_4"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (assign,":talk_faction", "fac_undeads_2"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_5"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (assign,":talk_faction", "fac_beast"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_6"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
          (assign,":talk_faction", "fac_scotland"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
          (assign,":talk_faction", "fac_dwarf"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_7"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, alchemist_lab),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
          (store_faction_of_party, ":talk_faction", "$current_town"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, altar_of_light),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_9"),

        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
          (assign, ":mystic_merchant", "trp_mystic_merchant_8"),
          (assign,":talk_faction", "fac_dark_knights"),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":mystic_merchant", "trp_mystic_merchant_9"),
        (try_end),
        (gt, ":mystic_merchant", 0),
        (gt, ":talk_faction", 0),
        (call_script, "script_refresh_mystic_merchant_items_2", "trp_salt_mine_merchant",":talk_faction"),
        (start_presentation, "prsnt_gambling"),
     ]),

     ("buy_horse",
      [
        (str_clear, s1),
        (str_clear, s18),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 3),
        (val_mul, ":reinforcement_cost", 2),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1, ":reinforcement_cost"),

          (str_store_string, s1, "@ ({reg1} denars)"),
          (str_store_string, s18, "@dwarf_blacksmith Can has some armor, but need some money"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", ":reinforcement_cost"),
          (str_clear, s18),
          (str_store_string, s18, "@You don't have enough money."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (assign, ":reinforcement_cost", reinforcement_cost_easy),
        (val_mul, ":reinforcement_cost", 2),
        (troop_remove_gold, "trp_player", ":reinforcement_cost"),
        (troop_clear_inventory, "trp_find_item_cheat"),
        (set_merchandise_modifier_quality, 1000),
        (store_faction_of_party, ":cur_faction", "$current_town"),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat",":cur_faction",itp_type_shield,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat",":cur_faction",itp_type_head_armor,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat",":cur_faction",itp_type_foot_armor,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat",":cur_faction",itp_type_hand_armor,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat",":cur_faction",itp_type_body_armor,3),
        (change_screen_trade, "trp_find_item_cheat"),
     ]),

     ("need_item",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":talk_faction", 0),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 7),
        (try_begin),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (assign,":talk_faction", "fac_elf"),
          (assign, ":need_item", "itm_spice"),
          (assign,":need_number", 1),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
          (assign,":talk_faction", "fac_forest_ranger"),
          (assign, ":need_item", "itm_crystal"),
          (assign,":need_number", 4),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
          (assign,":talk_faction", "fac_orc"),
          (assign, ":need_item", "itm_cattle_meat"),
          (assign,":need_number", 8),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (assign,":talk_faction", "fac_undeads_2"),
          (assign, ":need_item", "itm_mercury"),
          (assign,":need_number", 4),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
          (assign,":talk_faction", "fac_dark_knights"),
          (assign, ":need_item", "itm_diamonds"),
          (assign,":need_number", 1),
          (assign, ":hours_needed", 2),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (assign,":talk_faction", "fac_beast"),
          (assign, ":need_item", "itm_diamonds"),
          (assign,":need_number", 1),
          (assign, ":hours_needed", 2),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dwarf_cottage),
          (assign,":talk_faction", "fac_dwarf"),
          (assign, ":need_item", "itm_ale"),
          (assign,":need_number", 8),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
          (assign,":talk_faction", "fac_dwarf"),
          (assign, ":need_item", "itm_sulfur"),
          (assign,":need_number", 4),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":need_item", "itm_diamonds"),
          (assign,":need_number", 1),
          (assign, ":hours_needed", 2),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, demon_gate),
          (assign,":talk_faction", "fac_demon"),
          (assign, ":need_item", "itm_sg_yellow_small"),
          (assign,":need_number", 2),
          (assign, ":hours_needed", 2),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":need_item", "itm_sg_black_small"),
          (assign,":need_number", 2),
          (assign, ":hours_needed", 2),
        (try_end),
        (gt, ":talk_faction", 0),
        (party_get_slot, ":last_time", "$current_town", slot_town_last_recruit_time),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nothing need."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 
          (assign, reg1,":need_number"),
          (str_store_string, s1, "@ "),
          (party_get_slot, ":lair_type", "$current_town", slot_center_lair_build_type),
          (store_sub, ":lair_name", ":lair_type", farm),
          (val_add, ":lair_name", "str_lair_name_1"),
          (str_store_item_name,s2,":need_item"),
          (str_store_string, s17, ":lair_name"),
          (str_store_string, s18, "@{s17} neet {reg1} {s2}, can you help?"),
          (store_item_kind_count,":number",":need_item","trp_player"),
          (lt, ":number", ":need_number"),
          (str_clear, s1),
          (str_store_string, s1, "@You don't have enough {s2}."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_town_last_recruit_time, ":hours"),
        (assign, ":talk_faction", 0),
        (try_begin),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, treant_alcove),
          (assign,":talk_faction", "fac_elf"),
          (assign, ":need_item", "itm_spice"),
          (assign,":need_number", 1),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, elf_homestead),
          (assign,":talk_faction", "fac_forest_ranger"),
          (assign, ":need_item", "itm_crystal"),
          (assign,":need_number", 4),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
          (assign,":talk_faction", "fac_orc"),
          (assign, ":need_item", "itm_cattle_meat"),
          (assign,":need_number", 8),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
          (assign,":talk_faction", "fac_undeads_2"),
          (assign, ":need_item", "itm_mercury"),
          (assign,":need_number", 4),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
          (assign,":talk_faction", "fac_dark_knights"),
          (assign, ":need_item", "itm_diamonds"),
          (assign,":need_number", 1),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
          (assign,":talk_faction", "fac_beast"),
          (assign, ":need_item", "itm_diamonds"),
          (assign,":need_number", 1),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, dwarf_cottage),
          (assign,":talk_faction", "fac_dwarf"),
          (assign, ":need_item", "itm_ale"),
          (assign,":need_number", 8),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, clan_halls),
          (assign,":talk_faction", "fac_dwarf"),
          (assign, ":need_item", "itm_sulfur"),
          (assign,":need_number", 4),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, cathedral),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":need_item", "itm_diamonds"),
          (assign,":need_number", 1),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, demon_gate),
          (assign,":talk_faction", "fac_demon"),
          (assign, ":need_item", "itm_sg_yellow_small"),
          (assign,":need_number", 2),
        (else_try),  
          (party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
          (assign,":talk_faction", "fac_demon_hunters"),
          (assign, ":need_item", "itm_sg_black_small"),
          (assign,":need_number", 2),
        (try_end),
        (gt, ":talk_faction", 0),
        (store_item_kind_count,":number",":need_item","trp_player"),
        (ge, ":number", ":need_number"),
        (troop_remove_items,"trp_player",":need_item",":need_number"),
        (call_script,"script_change_player_relation_with_faction", ":talk_faction",4),
     ]),

     ("buy_horse",
      [
        (str_clear, s1),
        (str_clear, s18),
        (assign, ":faction", "fac_undeads_2"),
        (assign, ":relation_need", 30),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, vampire_estate),
        (assign, ":hours_needed", 24),
        (val_mul, ":hours_needed", 7),
        (party_get_slot, ":last_time", "$current_town", slot_center_lair_build_cooldown),
        (store_add, ":dest_time", ":last_time", ":hours_needed"),
        (store_current_hours, ":hours"),
        (try_begin),
          (store_relation, ":cur_relation", ":faction", "fac_player_faction"),
          (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
          (val_mul, ":persuasion_level", 2),
          (val_add, ":cur_relation", ":persuasion_level"),
          (lt, ":cur_relation", ":relation_need"),
          (str_store_faction_name,s2,":faction"),
          (assign, reg1, ":relation_need"),
          (store_sub, reg2, ":relation_need", ":cur_relation"),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ (need {reg1}{s2} relation, {reg2} left)"),
          (disable_menu_option),
        (else_try), 
          (lt, ":hours", ":dest_time"),
          (store_sub, reg1, ":dest_time", ":hours"),
          (store_sub, reg2, reg1, 1),
          (str_store_string, s18, "@In this settlement, nobody can help you."),
          (str_store_string, s1, "@ ({reg1} {reg2?hours:hour} left)"),
          (disable_menu_option),
        (else_try), 

          (str_store_string, s1, "@ "),
          (str_store_string, s18, "@Undead Transformer Can change prisoner to Skeleton, Ghost or vampire"),
          (store_num_regular_prisoners, ":num_regular_prisoners"),
          (lt, ":num_regular_prisoners", 1),
          (str_clear, s1),
          (str_store_string, s1, "@You don't have prisoner."),
          (disable_menu_option),
        (try_end),
      ],
      "{s18}{s1}.",
      [
        (store_current_hours, ":hours"),
        (party_set_slot, "$current_town", slot_center_lair_build_cooldown, ":hours"),
        (party_clear, "p_temp_party"),
        (play_sound,"snd_man_die"),
        (play_sound,"snd_skeleton_death"),
        (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
        (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":troop_no", "p_main_party", ":i_stack"),
          (neg|troop_is_hero, ":troop_no"),
          (party_prisoner_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
          (store_character_level, ":sell_price", ":troop_no"),
          (try_begin),
            (is_between, ":troop_no",nobility_troops_begin,nobility_troops_end),
            (ge, ":sell_price", 50),
            (party_add_members,"p_temp_party","trp_undead_horse_3",":stack_size"),
          (else_try), 
            (is_between, ":troop_no",nobility_troops_begin,nobility_troops_end),
            (ge, ":sell_price", 40),
            (party_add_members,"p_temp_party","trp_undead_horse_2",":stack_size"),
          (else_try), 
            (is_between, ":troop_no",nobility_troops_begin,nobility_troops_end),
            (ge, ":sell_price", 30),
            (party_add_members,"p_temp_party","trp_undead_horse_1",":stack_size"),
          (else_try), 
            (is_between, ":troop_no",nobility_troops_begin,nobility_troops_end),
            (party_add_members,"p_temp_party","trp_vampire_1",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 50),
            (party_add_members,"p_temp_party","trp_wraith",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 40),
            (party_add_members,"p_temp_party","trp_wight",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 35),
            (party_add_members,"p_temp_party","trp_skeleton_lord",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 30),
            (troop_is_guarantee_ranged, ":troop_no"),
            (party_add_members,"p_temp_party","trp_skeleton_archer",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 24),
            (troop_is_guarantee_ranged, ":troop_no"),
            (party_add_members,"p_temp_party","trp_se_musketeer_2",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 18),
            (troop_is_guarantee_ranged, ":troop_no"),
            (party_add_members,"p_temp_party","trp_se_musketeer_1",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 30),
            (party_add_members,"p_temp_party","trp_skeleton_warrior",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 24),
            (party_add_members,"p_temp_party","trp_se_billman_2",":stack_size"),
          (else_try), 
            (ge, ":sell_price", 18),
            (party_add_members,"p_temp_party","trp_se_pikeman_2",":stack_size"),
          (else_try), 
            (party_add_members,"p_temp_party","trp_skeleton",":stack_size"),
          (try_end),
          (party_remove_prisoners, "p_main_party", ":troop_no", ":stack_size"),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

     ("recruit_volunteers",
      [
        (party_slot_eq, "$current_town", slot_party_type, spt_village),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, 0),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, nomad_tent),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, graveyard),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, rogue_hideout),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, farm),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, keep),
        (call_script, "script_cf_village_recruit_volunteers_cond"),
       ]
       ,"Recruit Volunteers.",
       [
         (try_begin),
           (call_script, "script_cf_enter_center_location_bandit_check"),
         (else_try),
           (jump_to_menu, "mnu_recruit_volunteers"),
         (try_end),
     ]),


     ("village_attack_bandit_lair",[
        (party_slot_eq, "$current_town", slot_party_type, spt_village),
        #(party_get_slot, ":lair_type", "$current_town", slot_center_lair_build_type),
        
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, ogre_fort),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, nomad_tent),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, graveyard),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, gobin_slum),
        
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, imp_cache),
        
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, rogue_hideout),
        #(this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, labyrinth),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, longhouse),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, monastery),
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, magic_guild),
        
        (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, wolf_pen),
        (party_slot_eq, "$current_town", slot_center_lair_build_type, tomb_of_curses),
        
        ],
       "search and Attack the bandits.",
       [(party_get_slot, ":bandit_lair_template", "$current_town", slot_center_lair_build_type),
        (set_spawn_radius, 2),
     
        (spawn_around_party, "$current_town", ":bandit_lair_template"),
        (assign, ":new_camp", reg0),
        (party_set_slot, ":new_camp", slot_village_bound_center, "$current_town"),
        (party_set_slot, ":new_camp", slot_party_type, spt_bandit_lair),
        (change_screen_return),
        (party_clear, "p_total_enemy_casualties"), #new
        (call_script,"script_game_event_party_encounter",":new_camp",-1),
     ]),


##chenwz     
     
     ("town_cheats_new", [(neg|party_slot_eq, "$current_town", slot_party_type, spt_village),(eq, "$cheat_mode", 1),],"Cheat menu.", [(jump_to_menu,"mnu_town_menu_cheats"),]),
                
     ("back_to_town_menu", [(neg|party_slot_eq, "$current_town", slot_party_type, spt_village),], "Return.", [(jump_to_menu, "mnu_town")]),

     ("forget_it",[(party_slot_eq, "$current_town", slot_party_type, spt_village),],"Forget it.",[(jump_to_menu,"mnu_village"),]),
    ],
  ),

  ("go_somewhere", 0, "{s19},What do you want to do?", "none",[],[("back_to_town_menu", [], "Return.", [(jump_to_menu, "mnu_town")]),]),

  (
    "trophy_trade_2",0,
    "which trophy would you exchange for xp.",
    "none",
    [],
    [
               
   ("trophy_a_trade_trophy_b",[
    (store_item_kind_count,":size","itm_trophy_a","trp_player"),
    (try_begin),
       (lt, ":size", 6),
      (disable_menu_option),
    (try_end),],
       "Trade in your war trophy.",
       [
	(troop_remove_items,"trp_player","itm_trophy_a",6),
	(troop_add_item,"trp_player","itm_trophy_b",0),
	   (jump_to_menu,"mnu_trophy_trade_2"),
        ]),	
        
   ("trophy_b_trade_trophy_c",[
    (store_item_kind_count,":size","itm_trophy_b","trp_player"),
    (try_begin),
       (lt, ":size", 6),
      (disable_menu_option),
    (try_end),],
       "Trade in your epic trophy",
       [
	(troop_remove_items,"trp_player","itm_trophy_b",6),
	(troop_add_item,"trp_player","itm_trophy_c",0),
	   (jump_to_menu,"mnu_trophy_trade_2"),
        ]),            
        
   ("trophy_b_trade_trophy_a",[
    (store_item_kind_count,":size","itm_trophy_b","trp_player"),
    (store_free_inventory_capacity, ":space", "trp_player"),
    (try_begin),
	   (this_or_next|le, ":space", 3),                    
       (lt, ":size", 1),
      (disable_menu_option),
    (try_end),],
       "Trade in your epic trophy",
       [
	(troop_remove_items,"trp_player","itm_trophy_b",1),
	(troop_add_items,"trp_player","itm_trophy_a",4),
	   (jump_to_menu,"mnu_trophy_trade_2"),
        ]),            
	
   ("trophy_c_trade_trophy_b",[
    (store_item_kind_count,":size","itm_trophy_c","trp_player"),
    (store_free_inventory_capacity, ":space", "trp_player"),
    (try_begin),
	   (this_or_next|le, ":space", 3),                    
       (lt, ":size", 1),
      (disable_menu_option),
    (try_end),],
       "Trade in your epic trophy",
       [
	(troop_remove_items,"trp_player","itm_trophy_c",1),
	(troop_add_items,"trp_player","itm_trophy_b",4),
	   (jump_to_menu,"mnu_trophy_trade_2"),
        ]),            
        
       ("trade_trophy_a",[(player_has_item,"itm_trophy_a")],
       "Trade in your battle trophy.",
       [
       (call_script, "script_upgrade_main_party", 1000),

       (call_script, "script_troop_add_gold", "trp_player", 1000),
       (troop_remove_item,"trp_player","itm_trophy_a"),
       (jump_to_menu,"mnu_trophy_trade_2"),
        ]),        
       ("trade_trophy_b",[(player_has_item,"itm_trophy_b")],
       "Trade in your war trophy.",
       [

       (call_script, "script_upgrade_main_party", 5000),
       (call_script, "script_troop_add_gold", "trp_player", 5000),
       (call_script,"script_change_troop_renown", "trp_player" ,20),
       (troop_remove_item,"trp_player","itm_trophy_b"),
       (jump_to_menu,"mnu_trophy_trade_2"),
        ]),	
       ("trade_trophy_c",[(player_has_item,"itm_trophy_c")],
       "Trade in your epic trophy",
       [
       (call_script, "script_upgrade_main_party", 25000),
       (call_script, "script_troop_add_gold", "trp_player", 25000),
       (call_script,"script_change_troop_renown", "trp_player" ,100),
       (call_script,"script_change_player_honor",10),
       (troop_remove_item,"trp_player","itm_trophy_c"),
       (jump_to_menu,"mnu_trophy_trade_2"),
        ]),       
        
      ("back_to_town_menu",[],"Back.",
       [
          (jump_to_menu, "mnu_town_trade"),
        ]),
    ]
  ),  

  ("enter_blacksmith", 0, "{s8}", "none",
   [
    (str_clear, s8),
    (try_begin),
        (party_get_slot, ":center_relation", "$current_town", slot_center_player_relation),
        (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
        (val_mul, ":persuasion_level", 2),
        (val_add, ":center_relation", ":persuasion_level"),
        (this_or_next|troop_slot_ge,"trp_player", slot_troop_player_class,13),
        (ge,  ":center_relation", 25),
        (str_store_string, s8, "str_enter_blacksmith_relation"),
    (else_try),
        (eq,"$background_answer_2",cb2_apprentice),
        (eq,"$background_answer_3",cb3_craftsman),
        (str_store_string, s8, "str_enter_blacksmith_craftsman"),
	(try_end),
	
    (set_background_mesh, "mesh_pic_market_3"),
    (play_sound,"snd_blacksmith"),
     ],
      [       
       ("continue",[],"continue",[(jump_to_menu, "mnu_blacksmith_item_high"),]),
             
       ("back_to_town_menu", [], "Return.", [(jump_to_menu, "mnu_town_trade")]),]),

    ("cannot_enter_blacksmith",0,"You cannot_enter_blacksmith","none",[],
    [("continue", [], "Continue...",[(jump_to_menu, "mnu_town_trade"),]),]),

    ("cannot_enter_blacksmith_low",0,"You cannot_enter_blacksmith","none",[],
    [("continue", [], "Continue...",[(jump_to_menu, "mnu_town_trade"),]),]),

  (
    "cannot_enter_court",0,
    "There is a feast in progress in the lord's hall, but you are not of sufficient status to be invited inside. Perhaps increasing your renown would win you admittance -- or you might also try distinguishing yourself at a tournament while the feast is in progress...",
    "none",
    [(set_background_mesh, "mesh_set_vassal_title"),],
    [
	("continue", [],"Continue",
       [
        (jump_to_menu, "mnu_town"),
        ]),
	]),
  
  
  (
    "lady_visit",0,
    "Whom do you wish to visit?",
    "none",
    [(set_background_mesh, "mesh_pic_vlady"),],
    [        
        
	("visit_lady_1", [
	(gt, "$love_interest_in_town", 0),
	(str_store_troop_name, s12, "$love_interest_in_town"),
	],
	  "Visit {s12}",
       [
	    (assign, "$love_interest_in_town", "$love_interest_in_town"),
        (jump_to_menu, "mnu_garden"),
        ]),


        
	("visit_lady_2", [
	(gt, "$love_interest_in_town_2", 0),
	(str_store_troop_name, s12, "$love_interest_in_town_2"),
	],
	  "Visit {s12}",
       [
	    (assign, "$love_interest_in_town", "$love_interest_in_town_2"),
        (jump_to_menu, "mnu_garden"),
        ]),

	("visit_lady_3", [
	(gt, "$love_interest_in_town_3", 0),
	(str_store_troop_name, s12, "$love_interest_in_town_3"),
	],
	  "Visit {s12}",
       [
	    (assign, "$love_interest_in_town", "$love_interest_in_town_3"),
        (jump_to_menu, "mnu_garden")], "Door to the garden."),

        
	("visit_lady_4", [(gt, "$love_interest_in_town_4", 0),(str_store_troop_name, s12, "$love_interest_in_town_4"),],
	"Visit {s12}",[(assign, "$love_interest_in_town", "$love_interest_in_town_4"),(jump_to_menu, "mnu_garden"),]),
        
	("visit_lady_5", [(gt, "$love_interest_in_town_5", 0),(str_store_troop_name, s12, "$love_interest_in_town_5"),],
	"Visit {s12}",[(assign, "$love_interest_in_town", "$love_interest_in_town_5"),(jump_to_menu, "mnu_garden"),]),

	("visit_lady_6",[(gt, "$love_interest_in_town_6", 0),(str_store_troop_name, s12, "$love_interest_in_town_6"),],
	"Visit {s12}",[(assign, "$love_interest_in_town", "$love_interest_in_town_6"),(jump_to_menu, "mnu_garden"),]),
	
	("visit_lady_7",[(gt, "$love_interest_in_town_7", 0),(str_store_troop_name, s12, "$love_interest_in_town_7"),],
	"Visit {s12}",[(assign, "$love_interest_in_town", "$love_interest_in_town_7"),(jump_to_menu, "mnu_garden"),]),
	("visit_lady_8",[(gt, "$love_interest_in_town_8", 0),(str_store_troop_name, s12, "$love_interest_in_town_8"),],
	"Visit {s12}",[(assign, "$love_interest_in_town", "$love_interest_in_town_8"),(jump_to_menu, "mnu_garden"),]),
	("leave",[], "Leave",[(jump_to_menu, "mnu_town")]),

    ]
	),

  ("town_tournament_start_new", 0,
  "Select which type of tournament do you wish to participate in. You can only participate in one of them.",
  "none", 
  [
    (set_background_mesh, "mesh_pic_soldier_world_map"),
  ],
  [
    ("join_low", [],
    "Join low level tournament less money.",
    [
        (assign, "$item_add", -1),
        (call_script, "script_fill_tournament_participants_troop", "$current_town", 1),
        (jump_to_menu, "mnu_town_tournament"),
    ]),

    ("join_high", 
    [
        (try_begin),
            (neg|eq, "$background_type", cb_noble),
            (neg|troop_slot_ge,"trp_player", slot_troop_player_class,6),
            #(eq, "$freelancer_state", 0),
            (display_message, "@You do not enough class to join high team!"),
            (disable_menu_option),
        (try_end),
    ],
    "join_high level tournament more money.",
    [
        (assign, "$item_add", 0),
        (call_script, "script_fill_tournament_participants_troop", "$current_town", 1),
        (jump_to_menu, "mnu_town_tournament"),
    ]),

    ("go_back_dot", [], "Go back.",[(jump_to_menu, "mnu_town"),]),
  ]),

  (
    "town_tournament_lost",0,
    "You have been eliminated from the tournament.{s8}",
    "none",
    [
	(str_clear, s8),
	(try_begin),
        (this_or_next|neq, "$players_kingdom", "$g_encountered_party_faction"),
            (neg|troop_slot_ge, "trp_player", slot_troop_renown, 50),
        (neg|troop_slot_ge, "trp_player", slot_troop_renown, 125),
        (gt, "$g_player_tournament_placement", 4),
        (faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_state, sfai_feast),
        (faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_object, "$g_encountered_party"),
        (str_store_string, s8, "str__however_you_have_sufficiently_distinguished_yourself_to_be_invited_to_attend_the_ongoing_feast_in_the_lords_castle"),
	(try_end),
	
        ],
    [
      ("continue", [], "Continue...",
       [(jump_to_menu, "mnu_town_tournament_won_by_another"),
        ]),
    ]
  ),

  (
    "town_tournament_won",mnf_disable_all_keys,
    "You have won the tournament of {s3}! You are filled with pride as the crowd cheers your name.\
 In addition to honour, fame and glory, you earn a prize of {reg9} denars. {s8}",
    "none",
    [
      ## CC
        (try_begin),
          (set_fixed_point_multiplier, 100),
          (position_set_x, pos0, 70),
          (position_set_y, pos0, 30),
          (position_set_z, pos0, 75),
          (set_game_menu_tableau_mesh, "tableau_troop_note_mesh", "trp_player", pos0),
        (try_end),
      ## CC
        (str_store_party_name, s3, "$current_town"),
        (call_script, "script_change_troop_renown", "trp_player", 40),
        (call_script, "script_change_player_relation_with_center", "$current_town", 1),   
        (assign, reg9, 1000),
        (add_xp_to_troop, 2500, "trp_player"),
        (troop_add_gold, "trp_player", reg9),
        (str_clear, s8),
        (store_add, ":total_win", "$g_tournament_bet_placed", "$g_tournament_bet_win_amount"),
        (val_add,":total_win", 100),
        (try_begin),
          (gt, "$g_tournament_bet_win_amount", 0),
          (assign, reg8, ":total_win"),
          (str_store_string, s8, "@Moreover, you earn {reg8} denars from the clever bets you placed on yourself..."),
        (try_end),
        (try_begin),
            (this_or_next|neq, "$players_kingdom", "$g_encountered_party_faction"),
            	(neg|troop_slot_ge, "trp_player", slot_troop_renown, 70),
            (neg|troop_slot_ge, "trp_player", slot_troop_renown, 145),

            (faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_state, sfai_feast),
            (faction_slot_eq, "$g_encountered_party_faction", slot_faction_ai_object, "$g_encountered_party"),
            (str_store_string, s8, "str_s8_you_are_also_invited_to_attend_the_ongoing_feast_in_the_castle"),
        (try_end),
        (troop_add_gold, "trp_player", ":total_win"),
        (assign, ":player_odds_sub", 0),
        (store_div, ":player_odds_sub", "$g_tournament_bet_win_amount", 5),
        (party_get_slot, ":player_odds", "$current_town", slot_town_player_odds),
        (val_sub, ":player_odds", ":player_odds_sub"),
        (val_max, ":player_odds", 10),
        (party_set_slot, "$current_town", slot_town_player_odds, ":player_odds"),
        (call_script, "script_play_victorious_sound"),
        (val_add,"$g_tournament_time", 1),
        #(call_script, "script_cf_add_item_to_player"),
        (assign, "$g_mt_mode", 0),
        (unlock_achievement, ACHIEVEMENT_MEDIEVAL_TIMES),
        ],
    [
      ("continue", [], "Continue...",
       [(jump_to_menu, "mnu_town"),
         (try_begin),
           (ge, "$item_add", 1),
           (change_screen_loot, "trp_find_item_cheat"),
         (try_end),
        ]),
    ]
  ),
  
  (
    "town_tournament_won_by_another",mnf_disable_all_keys,
    "As the only {reg3?fighter:man} to remain undefeated this day, {s1} wins the lists and the glory of this tournament.",
    "none",
    [
      (call_script, "script_get_num_tournament_participants"),
      (store_sub, ":needed_to_remove_randomly", reg0, 1),
      (try_begin),
        (troop_slot_eq, "trp_tournament_participants", 0, 0), #delete player from the participants
        (troop_set_slot, "trp_tournament_participants", 0, -1),
        (val_sub, ":needed_to_remove_randomly", 1),
      (try_end),
        (call_script, "script_remove_tournament_participants_randomly", ":needed_to_remove_randomly"),
        (call_script, "script_sort_tournament_participant_troops"),
        (troop_get_slot, ":winner_troop", "trp_tournament_participants", 0),
        (str_store_troop_name, s1, ":winner_troop"),
        (try_begin),
          (troop_is_hero, ":winner_troop"),
          (call_script, "script_change_troop_renown", ":winner_troop", 20),
          (call_script, "script_troop_add_gold", ":winner_troop", 1000),
        (try_end),
        (assign, "$item_add", 0),
        (troop_get_type, reg3, ":winner_troop"),
      (try_begin),
        (this_or_next|eq, reg3, tf_female_elf),
        (eq, reg3, tf_female),
        (assign, reg3, tf_female), 
      (else_try),
        (assign, reg3, tf_male), 
      (try_end),
        (assign, "$g_mt_mode", 0),
      ## CC
        (try_begin),
          (set_fixed_point_multiplier, 100),
          (position_set_x, pos0, 70),
          (position_set_y, pos0, 30),
          (position_set_z, pos0, 75),
          (set_game_menu_tableau_mesh, "tableau_troop_note_mesh", ":winner_troop", pos0),
        (try_end),
      ## CC
        ],
    [
      ("continue", [], "Continue...",
       [(jump_to_menu, "mnu_town"),
        ]),
    ]
  ),

  (
    "town_tournament",mnf_disable_all_keys,
    "{s1}You are at tier {reg0} of the tournament, with {reg1} participants remaining. In the next round, there will be {reg2} teams with {reg3} {reg4?fighters:fighter} each.",
    "none",
    [
        (try_begin),
          (eq, "$item_add", -1),
          (set_background_mesh, "mesh_tournament_menu"),
        (else_try),
          (set_background_mesh, "mesh_tournament_menu2"),
        (try_end),
        
        (party_set_slot, "$current_town", slot_town_has_tournament, 0), #No way to return back if this menu is left
        (call_script, "script_sort_tournament_participant_troops"),#Moving trp_player to the top of the list
        (call_script, "script_get_num_tournament_participants"),
        (assign, ":num_participants", reg0),
        (try_begin),
          (neg|troop_slot_eq, "trp_tournament_participants", 0, 0),#Player is defeated

          (assign, ":player_odds_add", 0),
          (store_div, ":player_odds_add", "$g_tournament_bet_placed", 5),
          (party_get_slot, ":player_odds", "$current_town", slot_town_player_odds),
          (val_add, ":player_odds", ":player_odds_add"),
          (val_min, ":player_odds", 4000),
          (party_set_slot, "$current_town", slot_town_player_odds, ":player_odds"),

          (jump_to_menu, "mnu_town_tournament_lost"),
        (else_try),
          (eq, ":num_participants", 1),#Tournament won
          (jump_to_menu, "mnu_town_tournament_won"),
        (else_try),
          (try_begin),
            (le, "$g_tournament_next_num_teams", 0),
            (call_script, "script_get_random_tournament_team_amount_and_size"),
            (assign, "$g_tournament_next_num_teams", reg0),
            (assign, "$g_tournament_next_team_size", reg1),
          (try_end),
          (assign, reg2, "$g_tournament_next_num_teams"),
          (assign, reg3, "$g_tournament_next_team_size"),
          (store_sub, reg4, reg3, 1),
          (str_clear, s1),
          (try_begin),
            (eq, "$g_tournament_player_team_won", 1),
            (str_store_string, s1, "@Victory is yours! You have won this melee, but now you must prepare yourself for the next round. "),
          (else_try),
            (eq, "$g_tournament_player_team_won", 0),
            (str_store_string, s1, "@You have been bested in this melee, but the master of ceremonies declares a recognition of your skill and bravery, allowing you to take part in the next round. "),
          (try_end),
          (assign, reg1, ":num_participants"),
          (store_add, reg0, "$g_tournament_cur_tier", 1),
        (try_end),
        ],
    [
      ("tournament_view_participants", [], "View participants.",
       [(jump_to_menu, "mnu_tournament_participants"),
        ]),
      ("tournament_bet", [(neq, "$g_tournament_cur_tier", "$g_tournament_last_bet_tier")], "Place a bet on yourself.",
       [(jump_to_menu, "mnu_tournament_bet"),
        ]),
      ("tournament_join_next_fight", [], "Fight in the next round.",
       [
           (party_get_slot, ":arena_scene", "$current_town", slot_town_arena),
           (try_begin),
             (ge, "$item_add", 0),
             (assign,":arena_scene", "scn_multi_scene_17"),
           (try_end),
           (modify_visitors_at_site, ":arena_scene"),
           (reset_visitors),
           #Assuming that there are enough participants for the teams
           (assign, "$g_player_tournament_placement", "$g_tournament_cur_tier"),
           (try_begin),
             (gt, "$g_player_tournament_placement", 4),
             (assign, "$g_player_eligible_feast_center_no", "$current_town"),
           (try_end),
           (val_add, "$g_tournament_cur_tier", 1),
           
           (store_mul, "$g_tournament_num_participants_for_fight", "$g_tournament_next_num_teams", "$g_tournament_next_team_size"),
           (troop_set_slot, "trp_tournament_participants", 0, -1),#Removing trp_player from the list
           (troop_set_slot, "trp_temp_array_a", 0, "trp_player"),
           (try_for_range, ":slot_no", 1, "$g_tournament_num_participants_for_fight"),
             (call_script, "script_get_random_tournament_participant"),
             (troop_set_slot, "trp_temp_array_a", ":slot_no", reg0),
           (try_end),
           (call_script, "script_shuffle_troop_slots", "trp_temp_array_a", 0, "$g_tournament_num_participants_for_fight"),


           (try_for_range, ":slot_no", 0, 4),#shuffle teams
             (troop_set_slot, "trp_temp_array_b", ":slot_no", ":slot_no"),
           (try_end),
           (call_script, "script_shuffle_troop_slots", "trp_temp_array_b", 0, 4),

           (assign, ":cur_slot", 0),
           (try_for_range, ":cur_team_offset", 0, "$g_tournament_next_num_teams"),
             (troop_get_slot, ":cur_team", "trp_temp_array_b", ":cur_team_offset"),
           
             (try_for_range, ":slot_no", 0, 8),#shuffle entry_points
               (troop_set_slot, "trp_temp_array_c", ":slot_no", ":slot_no"),
             (try_end),
             (call_script, "script_shuffle_troop_slots", "trp_temp_array_c", 0, 8),
           
             (try_for_range, ":cur_index", 0, "$g_tournament_next_team_size"),
               (store_mul, ":cur_entry_point", ":cur_team", 8),
               (troop_get_slot, ":entry_offset", "trp_temp_array_c", ":cur_index"),
               (val_add, ":cur_entry_point", ":entry_offset"),
               (troop_get_slot, ":troop_no", "trp_temp_array_a", ":cur_slot"),
               (set_visitor, ":cur_entry_point", ":troop_no"),
               (val_add, ":cur_slot", 1),
             (try_end),
           (try_end),

           (assign, "$g_tournament_next_num_teams", 0),
           (assign, "$g_tournament_next_team_size", 0),
           
           (assign, "$g_mt_mode", abm_tournament),

           (party_get_slot, ":town_original_faction", "$current_town", slot_center_original_faction),
           (assign, ":town_index_within_faction", 0),
           (assign, ":end_cond", towns_end),
           (try_for_range, ":cur_town", towns_begin, ":end_cond"),
             (try_begin),
               (eq, ":cur_town", "$current_town"),
               (assign, ":end_cond", 0), #break
             (else_try),
               (party_slot_eq, ":cur_town", slot_center_original_faction, ":town_original_faction"),
               (val_add, ":town_index_within_faction", 1),
             (try_end),
           (try_end),
           
           (try_begin),
             (lt, "$item_add", 0),
             (set_jump_mission, "mt_arena_melee_fight_2"),
             (try_begin),
               (this_or_next|eq, ":town_original_faction", "fac_kingdom_7"),
               (eq, ":town_original_faction", "fac_kingdom_1"),
               #Swadia
               (store_mod, ":mod", ":town_index_within_faction", 4),
               (try_begin),
                 (eq, ":mod", 0),
                 (call_script, "script_set_items_for_tournament", 40, 80, 50, 20, 0, 0, 0, 0, "itm_arena_armor_red", "itm_tourney_helm_red"),
               (else_try),
                 (eq, ":mod", 1),
                 (call_script, "script_set_items_for_tournament", 100, 100, 0, 0, 0, 0, 0, 0, "itm_arena_armor_red", "itm_tourney_helm_red"),
               (else_try),
                 (eq, ":mod", 2),
                 (call_script, "script_set_items_for_tournament", 100, 0, 100, 0, 0, 0, 0, 0, "itm_arena_armor_red", "itm_tourney_helm_red"),
               (else_try),
                 (eq, ":mod", 3),
                 (call_script, "script_set_items_for_tournament", 40, 80, 50, 20, 40, 0, 0, 0, "itm_arena_armor_red", "itm_tourney_helm_red"),
               (try_end),
             (else_try),
               (eq, ":town_original_faction", "fac_kingdom_8"),
               #Vaegirs
               (store_mod, ":mod", ":town_index_within_faction", 4),
               (try_begin),
                 (eq, ":mod", 0),
                 (call_script, "script_set_items_for_tournament", 40, 80, 50, 20, 0, 0, 0, 0, "itm_arena_armor_red", "itm_steppe_helmet_red"),
               (else_try),
                 (eq, ":mod", 1),
                 (call_script, "script_set_items_for_tournament", 100, 50, 0, 0, 0, 20, 30, 0, "itm_arena_armor_red", "itm_steppe_helmet_red"),
               (else_try),
                 (eq, ":mod", 2),
                 (call_script, "script_set_items_for_tournament", 100, 0, 50, 0, 0, 20, 30, 0, "itm_arena_armor_red", "itm_steppe_helmet_red"),
               (else_try),
                 (eq, ":mod", 3),
                 (call_script, "script_set_items_for_tournament", 40, 80, 50, 20, 30, 0, 60, 0, "itm_arena_armor_red", "itm_steppe_helmet_red"),
               (try_end),
             (else_try),
               (eq, ":town_original_faction", "fac_kingdom_3"),
               #Khergit
               (store_mod, ":mod", ":town_index_within_faction", 2),
               (try_begin),
                 (eq, ":mod", 0),
                 (call_script, "script_set_items_for_tournament", 100, 0, 0, 0, 0, 40, 60, 0, "itm_arena_tunic_red", "itm_steppe_helmet_red"),
               (else_try),
                 (eq, ":mod", 1),
                 (call_script, "script_set_items_for_tournament", 100, 50, 25, 0, 0, 30, 50, 0, "itm_arena_tunic_red", "itm_steppe_helmet_red"),
               (try_end),
             (else_try),
               (this_or_next|eq, ":town_original_faction", "fac_kingdom_10"),
               (eq, ":town_original_faction", "fac_kingdom_4"),
               #Nords
               (store_mod, ":mod", ":town_index_within_faction", 3),
               (try_begin),
                 (eq, ":mod", 0),
                 (call_script, "script_set_items_for_tournament", 0, 0, 50, 80, 0, 0, 0, 0, "itm_arena_armor_red", -1),
               (else_try),
                 (eq, ":mod", 1),
                 (call_script, "script_set_items_for_tournament", 0, 0, 50, 80, 50, 0, 0, 0, "itm_arena_armor_red", -1),
               (else_try),
                 (eq, ":mod", 2),
                 (call_script, "script_set_items_for_tournament", 40, 0, 0, 100, 0, 0, 0, 0, "itm_arena_armor_red", -1),
               (try_end),
             (else_try),
               #Rhodoks
               
               (eq, ":town_original_faction", "fac_kingdom_5"),
               (call_script, "script_set_items_for_tournament", 25, 100, 60, 0, 30, 0, 30, 50, "itm_arena_tunic_red", "itm_arena_helmet_red"),
             (else_try),
               #Sarranids
               (store_mod, ":mod", ":town_index_within_faction", 2),
               (try_begin),
                 (eq, ":mod", 0),
                 (call_script, "script_set_items_for_tournament", 100, 40, 60, 0, 30, 30, 0, 0, "itm_arena_tunic_red", "itm_arena_turban_red"),
               (else_try),
                 (call_script, "script_set_items_for_tournament", 50, 0, 60, 0, 30, 30, 0, 0, "itm_arena_tunic_red", "itm_arena_turban_red"),
               (try_end),
             (try_end),
           (else_try),
             (set_jump_mission, "mt_arena_melee_fight"),
             (try_begin),
               (this_or_next|eq, ":town_original_faction", "fac_kingdom_7"),
               (this_or_next|eq, ":town_original_faction", "fac_kingdom_1"),
               (eq, ":town_original_faction", "fac_kingdom_5"),
               (store_random_in_range, ":mod", 0, 4),
               (try_begin),
                 (eq, ":mod", 0),
                 (call_script, "script_set_items_for_tournament", 40, 80, 50, 20, 0, 0, 0, 0, "itm_light_brigandine_red_mail", "itm_tourney_helm_red"),
               (else_try),
                 (eq, ":mod", 1),
                 (call_script, "script_set_items_for_tournament", 40, 80, 50, 20, 40, 0, 0, 0, "itm_corrazina_red", "itm_tourney_helm_red"),
               (else_try),
                 (call_script, "script_set_items_for_tournament", 40, 80, 50, 20, 0, 0, 0, 0, "itm_brigandine_red", "itm_tourney_helm_red"),
               (try_end),               
             (else_try),
               (this_or_next|eq, ":town_original_faction", "fac_kingdom_8"),
               (eq, ":town_original_faction", "fac_kingdom_3"),
               #Khergit
               (call_script, "script_set_items_for_tournament", 100, 50, 25, 0, 0, 30, 50, 0, "itm_lamellar_vest", "itm_steppe_helmet_red"),
             (else_try),
               (this_or_next|eq, ":town_original_faction", "fac_kingdom_4"),
               (eq, ":town_original_faction", "fac_kingdom_10"),
               (call_script, "script_set_items_for_tournament", 100, 100, 0, 0, 0, 0, 0, 0, "itm_brigandine_red", "itm_tourney_helm_red"),
             (else_try),
               #Sarranids
               (call_script, "script_set_items_for_tournament", 50, 0, 60, 0, 30, 30, 0, 0, "itm_lamellar_vest", "itm_arena_turban_red"),
             (try_end),
           (try_end),
           (jump_to_scene, ":arena_scene"),
           (change_screen_mission),
        ]),
      ("leave_tournament",[],"Withdraw from the tournament.",
       [
           (jump_to_menu, "mnu_tournament_withdraw_verify"),
        ]),
    ]
  ),

  (
    "tournament_withdraw_verify",0,
    "Are you sure you want to withdraw from the tournament?",
    "none",
    [],
    [
      ("tournament_withdraw_yes", [], "Yes. This is a pointless affectation.",
       [(jump_to_menu, "mnu_town_tournament_won_by_another"),
        ]),
      ("tournament_withdraw_no", [], "No, not as long as there is a chance of victory!",
       [(jump_to_menu, "mnu_town_tournament"),
        ]),
    ]
  ),

  (
    "tournament_bet",0,
    "The odds against you are {reg5} to {reg6}.{reg1? You have already bet {reg1} denars on yourself, and if you win, you will earn {reg2} denars.:} How much do you want to bet?",
    "none",
    [
      (assign, reg1, "$g_tournament_bet_placed"),
      (store_add, reg2, "$g_tournament_bet_win_amount", "$g_tournament_bet_placed"),
      (call_script, "script_get_win_amount_for_tournament_bet"),
      (assign, ":player_odds", reg0),
      (assign, ":min_dif", 100000),
      (assign, ":min_dif_divisor", 1),
      (assign, ":min_dif_multiplier", 1),
      (try_for_range, ":cur_multiplier", 1, 50),
        (try_for_range, ":cur_divisor", 1, 50),
          (store_mul, ":result", 100, ":cur_multiplier"),
          (val_div, ":result", ":cur_divisor"),
          (store_sub, ":difference", ":player_odds", ":result"),
          (val_abs, ":difference"),
          (lt, ":difference", ":min_dif"),
          (assign, ":min_dif", ":difference"),
          (assign, ":min_dif_divisor", ":cur_divisor"),
          (assign, ":min_dif_multiplier", ":cur_multiplier"),
        (try_end),
      (try_end),
      (assign, reg5, ":min_dif_multiplier"),
      (assign, reg6, ":min_dif_divisor"),
      ],
    [
    
      ("bet_1000_denars_for_item", [(store_troop_gold, ":gold", "trp_player"),
                          (ge, ":gold", 1000),(eq, "$item_add", 0),
                          ],
       "bet_1000_denars_for_item.",
       [
         (troop_remove_gold, "trp_player", 1000),
         (assign, "$item_add", 2),
         (troop_clear_inventory, "trp_find_item_cheat"),
         (call_script, "script_get_melee_reward",1),
         (jump_to_menu, "mnu_tournament_bet"),
        ]),
    
      ("bet_500_denars", [(store_troop_gold, ":gold", "trp_player"),
                          (ge, ":gold", 500),
                          (ge, "$item_add", 0),
                          ],
       "500 denars.",
       [
         (assign, "$temp", 500),
         (jump_to_menu, "mnu_tournament_bet_confirm"),
        ]),
    
      ("bet_250_denars", [(store_troop_gold, ":gold", "trp_player"),
                          (ge, ":gold", 250),
                          (ge, "$item_add", 0),
                          ],
       "250 denars.",
       [
         (assign, "$temp", 250),
         (jump_to_menu, "mnu_tournament_bet_confirm"),
        ]),
        
        
      ("bet_100_denars", [(store_troop_gold, ":gold", "trp_player"),
                          (ge, ":gold", 100),
                          ],
       "100 denars.",
       [
         (assign, "$temp", 100),
         (jump_to_menu, "mnu_tournament_bet_confirm"),
        ]),
      ("bet_50_denars", [(store_troop_gold, ":gold", "trp_player"),
                         (ge, ":gold", 50),
                         ],
       "50 denars.",
       [
         (assign, "$temp", 50),
         (jump_to_menu, "mnu_tournament_bet_confirm"),
        ]),
      ("bet_20_denars", [(store_troop_gold, ":gold", "trp_player"),
                         (ge, ":gold", 20),
                         ],
       "20 denars.",
       [
         (assign, "$temp", 20),
         (jump_to_menu, "mnu_tournament_bet_confirm"),
        ]),
      ("bet_10_denars", [(store_troop_gold, ":gold", "trp_player"),
                         (ge, ":gold", 10),
                         (lt, "$item_add", 0),
                         ],
       "10 denars.",
       [
         (assign, "$temp", 10),
         (jump_to_menu, "mnu_tournament_bet_confirm"),
        ]),
      ("bet_5_denars", [(store_troop_gold, ":gold", "trp_player"),
                        (ge, ":gold", 5),
                        (lt, "$item_add", 0),
                        ],
       "5 denars.",
       [
         (assign, "$temp", 5),
         (jump_to_menu, "mnu_tournament_bet_confirm"),
        ]),
      ("go_back_dot", [], "Go back.",
       [
         (jump_to_menu, "mnu_town_tournament"),
        ]),
    ]
  ),

  (
    "tournament_bet_confirm",0,
    "If you bet {reg1} denars, you will earn {reg2} denars if you win the tournament. Is that all right?",
    "none",
    [
      (call_script, "script_get_win_amount_for_tournament_bet"),
      (assign, ":win_amount", reg0),
      (val_mul, ":win_amount", "$temp"),
      (val_div, ":win_amount", 100),
      (assign, reg1, "$temp"),
      (assign, reg2, ":win_amount"),
      ],
    [
      ("tournament_bet_accept", [],
       "Go ahead.",
       [
         (call_script, "script_tournament_place_bet", "$temp"),
         (jump_to_menu, "mnu_town_tournament"),
         ]),
      ("tournament_bet_cancel", [],
       "Forget it.",
       [
         (jump_to_menu, "mnu_tournament_bet"),
         ]),
    ]
  ),
  
  (
    "tournament_participants",0,
    "You ask one of the criers for the names of the tournament participants. They are:^{s11}",
    "none",
    [
        (str_clear, s11),
        (call_script, "script_sort_tournament_participant_troops"),
        (call_script, "script_get_num_tournament_participants"),
        (assign, ":num_participants", reg0),
        (try_for_range, ":cur_slot", 0, ":num_participants"),
          (troop_get_slot, ":troop_no", "trp_tournament_participants", ":cur_slot"),
          (str_store_troop_name, s12, ":troop_no"),
          (str_store_string, s11, "@{!}{s11}^{s12}"),
        (try_end),
        ],
    [
      ("go_back_dot", [], "Go back.",
       [(jump_to_menu, "mnu_town_tournament"),
        ]),
    ]
  ),


  (
    "collect_taxes",mnf_disable_all_keys,
    "As the party member with the highest trade skill ({reg2}), {reg3?you expect:{s1} expects} that collecting taxes from here will take {reg4} days...",
    "none",
    [(call_script, "script_get_max_skill_of_player_party", "skl_persuasion"),
     (assign, ":max_skill", reg0),
     (assign, reg2, reg0),
     (assign, ":max_skill_owner", reg1),
     (try_begin),
       (eq, ":max_skill_owner", "trp_player"),
       (assign, reg3, 1),
     (else_try),
       (assign, reg3, 0),
       (str_store_troop_name, s1, ":max_skill_owner"),
     (try_end),
     (assign, ":tax_quest_expected_revenue", 3000),
     (try_begin),
       (party_slot_eq, "$current_town", slot_party_type, spt_town),
       (assign, ":tax_quest_expected_revenue", 6000),
     (try_end),

     (try_begin),
       (quest_slot_eq, "qst_collect_taxes", slot_quest_current_state, 0),
       (store_add, ":max_skill_plus_thirty", ":max_skill", 30),
       (try_begin),
         (party_slot_eq, "$current_town", slot_party_type, spt_town),
         (store_div, "$qst_collect_taxes_total_hours", 24* 7 * 30, ":max_skill_plus_thirty"),
       (else_try),
         #Village
         (store_div, "$qst_collect_taxes_total_hours", 24 * 3 * 30, ":max_skill_plus_thirty"),
       (try_end),

       (call_script, "script_party_count_fit_for_battle", "p_main_party"),
       (val_add, reg0, 20),
       (val_mul, "$qst_collect_taxes_total_hours", 20),
       (val_div, "$qst_collect_taxes_total_hours", reg0),

     
       (quest_set_slot, "qst_collect_taxes", slot_quest_target_amount, "$qst_collect_taxes_total_hours"),
       (store_div, ":menu_begin_time", "$qst_collect_taxes_total_hours", 20),#between %5-%25
       (store_div, ":menu_end_time", "$qst_collect_taxes_total_hours", 4),
       (assign, ":unrest_begin_time", ":menu_end_time"),#between %25-%75
       (store_mul, ":unrest_end_time", "$qst_collect_taxes_total_hours", 3),
       (val_div, ":unrest_end_time", 4),

       (val_mul, ":tax_quest_expected_revenue", 2),
       (store_div, "$qst_collect_taxes_hourly_income", ":tax_quest_expected_revenue", "$qst_collect_taxes_total_hours"),
     
       (store_random_in_range, "$qst_collect_taxes_menu_counter", ":menu_begin_time", ":menu_end_time"),
       (store_random_in_range, "$qst_collect_taxes_unrest_counter", ":unrest_begin_time", ":unrest_end_time"),
       (assign, "$qst_collect_taxes_halve_taxes", 0),
     (try_end),
     (quest_get_slot, ":target_hours", "qst_collect_taxes", slot_quest_target_amount),
     (store_div, ":target_days", ":target_hours", 24),
     (val_mul, ":target_days", 24),
     (try_begin),
       (lt, ":target_days", ":target_hours"),
       (val_add, ":target_days", 24),
     (try_end),
     (val_div, ":target_days", 24),
     (assign, reg4, ":target_days"),
     ],
    [
      ("start_collecting", [], "Start collecting.",
       [(assign, "$qst_collect_taxes_currently_collecting", 1),
        (try_begin),
          (quest_slot_eq, "qst_collect_taxes", slot_quest_current_state, 0),
          (quest_set_slot, "qst_collect_taxes", slot_quest_current_state, 1),
        (try_end),
        (rest_for_hours_interactive, 1000, 5, 0), #rest while not attackable
        (assign,"$auto_enter_town","$current_town"),
        (assign, "$g_town_visit_after_rest", 1),
        (change_screen_return),
        ]),
      ("collect_later", [], "Put it off until later.",
       [(try_begin),
          (party_slot_eq, "$current_town", slot_party_type, spt_town),
          (jump_to_menu, "mnu_town"),
        (else_try),
          (jump_to_menu, "mnu_village"),
        (try_end),
        ]),
    ]
  ),

  (
    "collect_taxes_complete",mnf_disable_all_keys,
    "You've collected {reg3} denars in taxes from {s3}. {s19} will be expecting you to take the money to him.",
    "none",
    [(str_store_party_name, s3, "$current_town"),
     (quest_get_slot, ":quest_giver", "qst_collect_taxes", slot_quest_giver_troop),
     (str_store_troop_name, s19, ":quest_giver"),
     (quest_get_slot, reg3, "qst_collect_taxes", slot_quest_gold_reward),
     (try_begin),
       (eq, "$qst_collect_taxes_halve_taxes", 0),
       (call_script, "script_change_player_relation_with_center", "$current_town", -2),   
     (try_end),
     (call_script, "script_succeed_quest", "qst_collect_taxes"),
     ],
    [
      ("continue", [], "Continue...",
       [(change_screen_return),
        ]),
    ]
  ),

  (
    "collect_taxes_rebels_killed",0,
    "Your quick action and strong arm have successfully put down the revolt.\
 Surely, anyone with a mind to rebel against you will think better of it after this.",
    "none",
    [
    ],
    [
      ("continue", [], "Continue...",
       [(change_screen_map),
        ]),
    ]
  ),

  (
    "collect_taxes_failed",mnf_disable_all_keys,
    "You could collect only {reg3} denars as tax from {s3} before the revolt broke out.\
 {s1} won't be happy, but some silver will placate him better than nothing at all...",
    "none",
    [(str_store_party_name, s3, "$current_town"),
     (quest_get_slot, ":quest_giver", "qst_collect_taxes", slot_quest_giver_troop),
     (str_store_troop_name, s1, ":quest_giver"),
     (quest_get_slot, reg3, "qst_collect_taxes", slot_quest_gold_reward),
     (call_script, "script_fail_quest", "qst_collect_taxes"),
     (quest_set_slot, "qst_collect_taxes", slot_quest_current_state, 4),
     (rest_for_hours, 0, 0, 0), #stop resting
     ],
    [
      ("continue", [], "Continue...",
       [(change_screen_map),
        ]),
    ]
  ),

  (
    "collect_taxes_revolt_warning",0,
    "The people of {s3} are outraged at your demands and decry it as nothing more than extortion.\
 They're getting very restless, and they may react badly if you keep pressing them.",
    "none",
    [(str_store_party_name, s3, "$current_town"),
     ],
    [
      ("continue_collecting_taxes", [], "Ignore them and continue.",
       [
       (change_screen_return),]),
      ("halve_taxes", [(quest_get_slot, ":quest_giver_troop", "qst_collect_taxes", slot_quest_giver_troop),
                       (str_store_troop_name, s1, ":quest_giver_troop"),],
       "Agree to reduce your collection by half. ({s1} may be upset)",
       [(assign, "$qst_collect_taxes_halve_taxes", 1),
        (change_screen_return),
        ]),
    ]
  ),

  (
    "collect_taxes_revolt",0,
    "You are interrupted while collecting the taxes at {s3}. A large band of angry {reg9?peasants:townsmen} is marching nearer,\
 shouting about the exorbitant taxes and waving torches and weapons. It looks like they aim to fight you!",
    "none",
    [(str_store_party_name, s3, "$current_town"),
     
     (try_begin),
       (party_slot_eq, "$current_town", slot_party_type, spt_village),
       (assign, reg9, 1),
       (set_background_mesh, "mesh_pic_villageriot"),
     (else_try),
       (set_background_mesh, "mesh_pic_townriot"),
       (assign, reg9, 0),
     (try_end),
     ],

    [
      ("continue", [], "Continue...",
       [(set_jump_mission,"mt_back_alley_revolt"),
        (quest_get_slot, ":target_center", "qst_collect_taxes", slot_quest_target_center),
        (try_begin),
          (party_slot_eq, ":target_center", slot_party_type, spt_town),
          (party_get_slot, ":town_alley", ":target_center", slot_town_alley),
        (else_try),
          (party_get_slot, ":town_alley", ":target_center", slot_castle_exterior),
        (try_end),
        (modify_visitors_at_site,":town_alley"),
        (reset_visitors),
        (assign, ":num_rebels", 6),
        (store_character_level, ":level", "trp_player"),
        (val_div, ":level", 5),
        (val_add, ":num_rebels", ":level"),
        (set_visitors, 1, "trp_tax_rebel", ":num_rebels"),
        (jump_to_scene,":town_alley"),
        (change_screen_mission),
        ]),
    ]
  ),

# They must learn field discipline and the steadiness to follow orders in combat before they can be thought to use arms.",
  (
    "train_peasants_against_bandits",0,
    "As the party member with the highest training skill ({reg2}), {reg3?you expect:{s1} expects} that getting some peasants ready for practice will take {reg4} hours.",
    "none",
    [(call_script, "script_get_max_skill_of_player_party", "skl_trainer"),
      (try_begin),
         (this_or_next|eq,"$background_answer_3",cb3_squire),
         (this_or_next|eq,"$background_answer_2",cb2_page),
         (eq,"$background_type",cb_guard),
         (store_skill_level, ":squire_bonus", "skl_trainer", "trp_player"),
         (val_add, reg0, ":squire_bonus"),
      (try_end),
     (assign, ":max_skill", reg0),
     (assign, reg2, reg0),
     (assign, ":max_skill_owner", reg1),
     (try_begin),
       (eq, ":max_skill_owner", "trp_player"),
       (assign, reg3, 1),
     (else_try),
       (assign, reg3, 0),
       (str_store_troop_name, s1, ":max_skill_owner"),
     (try_end),
     (store_sub, ":needed_hours", 20, ":max_skill"),
     (val_mul, ":needed_hours", 3),
     (val_div, ":needed_hours", 5),
     (store_sub, reg4, ":needed_hours", "$qst_train_peasants_against_bandits_num_hours_trained"),
     ],
    [
      ("make_preparation", [], "Train them.",
       [
         (assign, "$qst_train_peasants_against_bandits_currently_training", 1),
         (rest_for_hours_interactive, 1000, 5, 0), #rest while not attackable
         (assign, "$auto_enter_town", "$current_town"),
         (assign, "$g_town_visit_after_rest", 1),
         (change_screen_return),
         ]),
      ("train_later", [], "Put it off until later.",
       [
         (jump_to_menu, "mnu_village"),
        ]),
    ]
  ), 

  (
    "train_peasants_against_bandits_ready",0,
    "You put the peasants through the basics of soldiering, discipline and obedience.\
 You think {reg0} of them {reg1?have:has} fully grasped the training and {reg1?are:is} ready for some practice.",
    "none",
    [
      (store_character_level, ":level", "trp_player"),
      (val_div, ":level", 10),
      (val_add, ":level", 1),
      (quest_get_slot, ":quest_target_amount", "qst_train_peasants_against_bandits", slot_quest_target_amount),
      (quest_get_slot, ":quest_current_state", "qst_train_peasants_against_bandits", slot_quest_current_state),
      (val_sub, ":quest_target_amount", ":quest_current_state"),
      (assign, ":max_random", ":level"),
      (val_min, ":max_random", ":quest_target_amount"),
      (val_add, ":max_random", 1),
      (store_random_in_range, ":random_number", 1, ":max_random"),
      (assign, "$g_train_peasants_against_bandits_num_peasants", ":random_number"),
      (assign, reg0, ":random_number"),
      (store_sub, reg1, ":random_number", 1),
      (str_store_troop_name_by_count, s0, "trp_trainee_peasant", ":random_number"),
     ],
    [
      ("peasant_start_practice", [], "Start the practice fight.",
       [
         (set_jump_mission,"mt_village_training"),
         (quest_get_slot, ":target_center", "qst_train_peasants_against_bandits", slot_quest_target_center),
         (party_get_slot, ":village_scene", ":target_center", slot_castle_exterior),
         (modify_visitors_at_site, ":village_scene"),
         (reset_visitors),
         (set_visitor, 0, "trp_player"),
         (set_visitors, 1, "trp_trainee_peasant", "$g_train_peasants_against_bandits_num_peasants"),
         (set_jump_entry, 11),
         (jump_to_scene, ":village_scene"),
         (jump_to_menu, "mnu_train_peasants_against_bandits_training_result"),
         (music_set_situation, 0),
         (change_screen_mission),
         ]),
      ]
    ),

  (
    "train_peasants_against_bandits_training_result",mnf_disable_all_keys,
    "{s0}",
    "none",
    [
      (assign, reg5, "$g_train_peasants_against_bandits_num_peasants"),
      (str_store_troop_name_by_count, s0, "trp_trainee_peasant", "$g_train_peasants_against_bandits_num_peasants"),
      (try_begin),
        (eq, "$g_train_peasants_against_bandits_training_succeeded", 0),
        (str_store_string, s0, "@You were beaten. The peasants are heartened by their success, but the lesson you wanted to teach them probably didn't get through..."),
      (else_try),
        (str_store_string, s0, "@After beating your last opponent, you explain to the peasants how to better defend themselves against such an attack. Hopefully they'll take the experience on board and will be prepared next time."),
        (quest_get_slot, ":quest_current_state", "qst_train_peasants_against_bandits", slot_quest_current_state),
        (val_add, ":quest_current_state", "$g_train_peasants_against_bandits_num_peasants"),
        (quest_set_slot, "qst_train_peasants_against_bandits", slot_quest_current_state, ":quest_current_state"),
      (try_end),
     ],
    [
      ("continue", [], "Continue...",
       [
         (try_begin),
           (quest_get_slot, ":quest_current_state", "qst_train_peasants_against_bandits", slot_quest_current_state),
           (quest_slot_eq, "qst_train_peasants_against_bandits", slot_quest_target_amount, ":quest_current_state"),
           (jump_to_menu, "mnu_train_peasants_against_bandits_attack"),
         (else_try),
           (change_screen_map),
         (try_end),
         ]),
      ]
    ),

  (
    "train_peasants_against_bandits_attack",0,
    "As you get ready to continue the training, a sentry from the village runs up to you, shouting alarums.\
 The bandits have been spotted on the horizon, riding hard for {s3}.\
 The elder begs that you organize your newly-trained militia and face them.",
    "none",
    [
	(str_store_party_name, s3, "$current_town"),
     ],
    [
      ("peasants_against_bandits_attack_resist", [], "Prepare for a fight!",
       [
        (call_script, "script_set_center_lair_type", "$current_town"),
        (store_random_in_range, ":random_no", 0, 3),
        (try_begin),
          (eq, ":random_no", 0),
          (assign, ":bandit_troop", "trp_bandit"),
        (else_try),
          (eq, ":random_no", 1),
          (assign, ":bandit_troop", "trp_mountain_bandit"),
        (else_try),
          (assign, ":bandit_troop", "trp_forest_bandit"),
        (try_end),
        
        (call_script, "script_set_village_infested_by_bandits", "$current_town"),
        (party_get_slot, ":bandit_troop_2", "$current_town", slot_center_has_bandits),
        (try_begin),
          (gt, ":bandit_troop_2", 1),
          (assign, ":bandit_troop", ":bandit_troop_2"),
        (try_end),
        (party_get_slot, ":scene_to_use", "$g_encountered_party", slot_castle_exterior),
        (modify_visitors_at_site, ":scene_to_use"),
        (reset_visitors),
        (store_character_level, ":level", "trp_player"),
        (val_div, ":level", 2),
        (store_add, ":min_bandits", ":level", 16),
        (store_add, ":max_bandits", ":min_bandits", 6),
        (store_random_in_range, ":random_no", ":min_bandits", ":max_bandits"),
        (set_visitors, 0, ":bandit_troop", ":random_no"),
        (assign, ":num_villagers", ":max_bandits"),
        (set_visitors, 2, "trp_trainee_peasant", ":num_villagers"),
        (set_party_battle_mode),
        (set_battle_advantage, 0),
        (assign, "$g_battle_result", 0),
        (set_jump_mission,"mt_village_attack_bandits"),
        (jump_to_scene, ":scene_to_use"),
        (assign, "$g_next_menu", "mnu_train_peasants_against_bandits_attack_result"),
        (jump_to_menu, "mnu_battle_debrief"),
        (assign, "$g_mt_mode", vba_after_training),
        (change_screen_mission),
        ]),
      ]
    ),

  (
    "train_peasants_against_bandits_attack_result",mnf_scale_picture|mnf_disable_all_keys,
    "{s9}",
    "none",
    [
      (try_begin),
        (eq, "$g_battle_result", 1),
        (str_store_string, s9, "@The bandits are broken!\
 Those few who remain alive and conscious run off with their tails between their legs,\
 terrified of the peasants and their new champion."),
	(call_script, "script_succeed_quest", "qst_train_peasants_against_bandits"),
        (jump_to_menu, "mnu_train_peasants_against_bandits_success"),
      (else_try),
        (call_script, "script_fail_quest", "qst_train_peasants_against_bandits"),
        (str_store_string, s9, "@Try as you might, you could not defeat the bandits.\
 Infuriated, they raze the village to the ground to punish the peasants,\
 and then leave the burning wasteland behind to find greener pastures to plunder."),
        (set_background_mesh, "mesh_pic_looted_village"),
      (try_end),
     ],
    [
      ("continue", [], "Continue...",
       [(try_begin),
          (call_script, "script_village_set_state",  "$current_town", svs_looted),
          (party_set_slot, "$current_town", slot_center_lair_build_type, 0),
          (party_set_slot, "$current_town", slot_village_raid_progress, 0),
          (party_set_slot, "$current_town", slot_village_recover_progress, 0),
          (call_script, "script_change_player_relation_with_center", "$g_encountered_party", -3),
          (call_script, "script_end_quest", "qst_train_peasants_against_bandits"),
        (try_end),
        (change_screen_map),
	 ]),
      ]
    ),

   (
    "train_peasants_against_bandits_success",mnf_disable_all_keys,
    "The bandits are broken!\
 Those few who remain run off with their tails between their legs,\
 terrified of the peasants and their new champion.\
 The villagers have little left in the way of wealth after their ordeal,\
 but they offer you all they can find to show their gratitude.",
    "none",
    [(party_clear, "p_temp_party"),
     (call_script, "script_end_quest", "qst_train_peasants_against_bandits"),
     (call_script, "script_change_player_relation_with_center", "$g_encountered_party", 4),

     (party_get_slot, ":merchant_troop", "$current_town", slot_town_elder),
     (try_for_range, ":slot_no", num_equipment_kinds ,max_inventory_items + num_equipment_kinds),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 50),
        (troop_set_inventory_slot, ":merchant_troop", ":slot_no", -1),
     (try_end),
     (call_script, "script_add_log_entry", logent_helped_peasants, "trp_player",  "$current_town", -1, -1),
    ],
    [
      ("village_bandits_defeated_accept",[],"Take it as your just due.",[(jump_to_menu, "mnu_auto_return_to_map"),
                                                                         (party_get_slot, ":merchant_troop", "$current_town", slot_town_elder),
                                                                         (troop_sort_inventory, ":merchant_troop"),
                                                                         (change_screen_loot, ":merchant_troop"),
                                                                       ]),
      ("village_bandits_defeated_cont",[],  "Refuse, stating that they need these items more than you do.",[
	  (call_script, "script_change_player_relation_with_center", "$g_encountered_party", 3),
      (call_script, "script_change_player_honor", 1),
      (change_screen_map)]),
    ],
  ),


  (
    "disembark",0,
    "Do you wish to disembark?",
    "none",
    [],
    [
      ("disembark_yes", [], "Yes.",
       [(assign, "$g_player_icon_state", pis_normal),
        (party_set_flags, "p_main_party", pf_is_ship, 0),
        (party_get_position, pos1, "p_main_party"),
        (party_set_position, "p_main_party", pos0),
        (try_begin),
          (le, "$g_main_ship_party", 0),
          (set_spawn_radius, 0),
          (spawn_around_party, "p_main_party", "pt_none"),
          (assign, "$g_main_ship_party", reg0),          
          (party_set_flags, "$g_main_ship_party", pf_is_static|pf_always_visible|pf_hide_defenders|pf_is_ship, 1),
          (str_store_troop_name, s1, "trp_player"),
          (party_set_name, "$g_main_ship_party", "@{s1}'s Ship"),
          (party_set_icon, "$g_main_ship_party", "icon_ship"),
          (party_set_slot, "$g_main_ship_party", slot_party_type, spt_ship),
        (try_end),
        (enable_party, "$g_main_ship_party"),
        (party_set_position, "$g_main_ship_party", pos0),
        (party_set_icon, "$g_main_ship_party", "icon_ship_on_land"),
        (assign, "$g_main_ship_party", -1),
        (change_screen_return),
        ]),
      ("disembark_no", [], "No.",
       [(change_screen_return),
        ]),
    ]
  ),

  (
    "ship_reembark",0,
    "Do you wish to embark?",
    "none",
    [],
    [
      ("reembark_yes", [], "Yes.",
       [(assign, "$g_player_icon_state", pis_ship),
        (party_set_flags, "p_main_party", pf_is_ship, 1),
        (party_get_position, pos1, "p_main_party"),
        (map_get_water_position_around_position, pos2, pos1, 6),
        (party_set_position, "p_main_party", pos2),
        (assign, "$g_main_ship_party", "$g_encountered_party"),
        (disable_party, "$g_encountered_party"),
        (change_screen_return),
        ]),
      ("reembark_no", [], "No.",
       [(change_screen_return),
        ]),
    ]
  ),

  (
    "center_reports",0,
    "Town Name: {s1}^Rent Income: {reg1} denars^Tariff Income: {reg2} denars^Food Stock: for {reg3} days",
    "none",
    [(party_get_slot, ":town_food_store", "$g_encountered_party", slot_party_food_store),
     (call_script, "script_center_get_food_consumption", "$g_encountered_party"),
     (assign, ":food_consumption", reg0),
     (try_begin),
       (gt, ":food_consumption", 0),
       (store_div, reg3, ":town_food_store", ":food_consumption"),
     (else_try),
       (assign, reg3, 9999),
     (try_end),
     (str_store_party_name, s1, "$g_encountered_party"),
     (party_get_slot, reg1, "$g_encountered_party", slot_center_accumulated_rents),
     (party_get_slot, reg2, "$g_encountered_party", slot_center_accumulated_tariffs),
     (set_background_mesh, "mesh_pic_tax_pay"),
     ],
    [
      ("to_price_and_productions", [], "Show prices and productions.",
       [(jump_to_menu, "mnu_price_and_production"),
        ]),
      
      ("go_back_dot",[],"Go back.",
       [(try_begin),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
          (jump_to_menu, "mnu_village"),
        (else_try),
          (jump_to_menu, "mnu_town"),
        (try_end),
        ]),
    ]
  ),
    
  (
    "price_and_production",0,
    "Productions are:^(Note: base/modified by raw materials/modified by materials plus prosperity)^{s1}^^Price factors are:^{s2}",
    "none",
    [
	
	 (assign, ":calradian_average_urban_hardship", 0),
	 (assign, ":calradian_average_rural_hardship", 0),

	 (try_for_range, ":center", towns_begin, towns_end),
        (call_script, "script_center_get_goods_availability", ":center"),
        (val_add, ":calradian_average_urban_hardship", reg0),
	 (try_end),

	 (try_for_range, ":center", villages_begin, villages_end),
        (call_script, "script_center_get_goods_availability", ":center"),
        (val_add, ":calradian_average_rural_hardship", reg0),
	 (try_end),	
	   
	 (val_div, ":calradian_average_rural_hardship", 110),
	 (val_div, ":calradian_average_urban_hardship", 22),


	   
	 (call_script, "script_center_get_goods_availability", "$g_encountered_party"),

	 (assign, reg1, ":calradian_average_urban_hardship"),
	 (assign, reg2, ":calradian_average_rural_hardship"),	      

	 (try_begin),
        (ge, "$cheat_mode", 1),
        (str_store_string, s1, "str___hardship_index_reg0_avg_towns_reg1_avg_villages_reg2__"),
        (display_message, "@{!}DEBUG - {s1}"),
	 (try_end),
	 
	 
     (try_for_range, ":cur_good", trade_goods_begin, trade_goods_end),
	   (neq, ":cur_good", "itm_pork"), #tied to price of grain
	   (neq, ":cur_good", "itm_chicken"), #tied to price of grain
	   (neq, ":cur_good", "itm_butter"), #tied to price of cheese
	   (neq, ":cur_good", "itm_cattle_meat"),
	   (neq, ":cur_good", "itm_cabbages"), #possibly include later
	 
	   (call_script, "script_center_get_production", "$g_encountered_party", ":cur_good"),
	   (assign, ":production", reg0),
	   (assign, ":base_production", reg2),
	   (assign, ":base_production_modded_by_raw_materials", reg1),

	   (call_script, "script_center_get_consumption", "$g_encountered_party", ":cur_good"),
	   (assign, ":consumer_consumption", reg2),
	   (assign, ":raw_material_consumption", reg1),
	   (assign, ":consumption", reg0),

       (store_sub, ":cur_good_price_slot", ":cur_good", trade_goods_begin),
       (val_add, ":cur_good_price_slot", slot_town_trade_good_prices_begin),
       (party_get_slot, ":price", "$g_encountered_party", ":cur_good_price_slot"),
	   
	   
	   (assign, ":total_centers", 0),
	   (assign, ":calradian_average_price", 0),
	   (assign, ":calradian_average_production", 0),
	   (assign, ":calradian_average_consumption", 0),

	   
	   (try_for_range, ":center", centers_begin, centers_end),
        (neg|is_between, ":center", castles_begin, castles_end),
	    (val_add, ":total_centers", 1),
        (call_script, "script_center_get_production", ":center", ":cur_good"),
        (assign, ":center_production", reg2),
        (call_script, "script_center_get_consumption", ":center", ":cur_good"),
        (store_add, ":center_consumption", reg1, reg2),
        
        (party_get_slot, ":center_price", ":center", ":cur_good_price_slot"),
	    (val_add, ":calradian_average_price", ":center_price"),
	    (val_add, ":calradian_average_production", ":center_production"),
	    (val_add, ":calradian_average_consumption", ":center_consumption"),
	   (try_end),

	   (assign, ":calradian_total_production", ":calradian_average_production"),
	   (assign, ":calradian_total_consumption", ":calradian_average_consumption"),
	   
	   (val_div, ":calradian_average_price", ":total_centers"),
	   (val_div, ":calradian_average_production", ":total_centers"),
	   (val_div, ":calradian_average_consumption", ":total_centers"),


       (str_store_item_name, s3, ":cur_good"),
	   
       (assign, reg1, ":base_production"),
       (assign, reg2, ":base_production_modded_by_raw_materials"),
       (assign, reg3, ":production"),
       (assign, reg4, ":price"),
	   
	   (assign, reg5, ":calradian_average_production"),
	   (assign, reg6, ":calradian_average_price"),

	   (assign, reg7, ":consumer_consumption"),
	   (assign, reg8, ":raw_material_consumption"),
	   (assign, reg9, ":consumption"),

	   (assign, reg10, ":calradian_average_consumption"),

	   (item_get_slot, ":production_slot", ":cur_good", slot_item_production_slot),
	   (party_get_slot, ":production_number", "$g_encountered_party", ":production_slot"),
	   (assign, reg11, ":production_number"),
	   (assign, reg12, ":calradian_total_production"),
	   (assign, reg13, ":calradian_total_consumption"),
	   
	   (item_get_slot, ":production_string", ":cur_good", slot_item_production_string),
	   (str_store_string, s4, ":production_string"),
	   
       (str_store_string, s1, "str___s3_price_=_reg4_calradian_average_reg6_capital_reg11_s4_base_reg1modified_by_raw_material_reg2modified_by_prosperity_reg3_calradian_average_production_base_reg5_total_reg12_consumed_reg7used_as_raw_material_reg8modified_total_reg9_calradian_consumption_base_reg10_total_reg13s1_"),

	   
	   
     (try_end),
	 
	 
     ],
    [
      ("go_back_dot",[],"Go back.",
       [(try_begin),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
          (jump_to_menu, "mnu_village"),
        (else_try),
          (jump_to_menu, "mnu_town"),
        (try_end),
        ]),
    ]
  ),
  
  (
    "town_trade",0,
    "You head towards the marketplace.",
    "none",
    [
    (play_sound,"snd_market"),
    (store_random_in_range, ":sound", "mesh_pic_market_1", "mesh_pic_market_4"),
    (set_background_mesh, ":sound"),
    
    ],
    [
    
      ("meet_with_guild_master",
       [
           (party_slot_eq,"$current_town",slot_party_type, spt_town),
        ],
         "Meet with the guild master.",
         [
           (try_begin),
             (call_script, "script_cf_enter_center_location_bandit_check"),
           (else_try),
             (party_get_slot, ":conversation_troop", "$current_town", slot_town_elder),
             (call_script, "script_setup_troop_meeting", ":conversation_troop", -1),
           (try_end),
          ]),
    ## CC
        
      ("meet_with_tavernkeeper",
       [
           (party_slot_eq,"$current_town",slot_party_type, spt_town),
        ],
         "Meet with the tavernkeeper.",
         [
           (try_begin),
             (call_script, "script_cf_enter_center_location_bandit_check"),
           (else_try),
             (party_get_slot, ":conversation_troop", "$current_town", slot_town_tavernkeeper),
             (call_script, "script_setup_troop_meeting", ":conversation_troop", -1),
           (try_end),
          ]),
        
      ("meet_with_ransom_broker",
       [
           (party_slot_eq,"$current_town",slot_party_type, spt_town),
           (party_get_slot, ":ransom_broker", "$current_town", slot_center_ransom_broker),
           (this_or_next|party_slot_eq, "$current_town", slot_center_lair_build_type, temple_of_the_fallen),
           (gt, ":ransom_broker", 0),
        ],
         "Meet with the ransom_broker.",
         [
           (try_begin),
             (call_script, "script_cf_enter_center_location_bandit_check"),
           (else_try),
             (party_slot_eq, "$current_town", slot_center_lair_build_type, temple_of_the_fallen),
             (call_script, "script_setup_troop_meeting", "trp_ramun_the_slave_trader", -1),
           (else_try),
             (party_get_slot, ":conversation_troop", "$current_town", slot_center_ransom_broker),
             (call_script, "script_setup_troop_meeting", ":conversation_troop", -1),
           (try_end),
          ]),
    
      ("auto_trade", [],
       "Trade automaticly.",
       [
          (start_presentation, "prsnt_auto_trade"),
        ]),
      
      ("assess_prices",
       [
         (store_faction_of_party, ":current_town_faction", "$current_town"),
         (store_relation, ":reln", ":current_town_faction", "fac_player_supporters_faction"),
         (ge, ":reln", 0),
         ],
       "Assess the local prices.",
       [
           (play_sound, "snd_town_ambiance"),
           (jump_to_menu,"mnu_town_trade_assessment_begin"),
        ]),
      ("trade_with_arms_merchant",[(party_slot_ge, "$current_town", slot_town_weaponsmith, 1)],
       "Trade with the arms merchant.",
       [
           (store_random_in_range, ":sound", "snd_draw_sword", "snd_put_back_other"),
           (play_sound, ":sound"),
           (party_get_slot, ":merchant_troop", "$current_town", slot_town_weaponsmith),
           (change_screen_trade, ":merchant_troop"),
        ]),
      ("trade_with_armor_merchant",[(party_slot_ge, "$current_town", slot_town_armorer, 1)],
       "Trade with the armor merchant.",
       [
           (play_sound, "snd_distant_blacksmith"),
           (party_get_slot, ":merchant_troop", "$current_town", slot_town_armorer),
           (change_screen_trade, ":merchant_troop"),
        ]),
      ("trade_with_horse_merchant",[(party_slot_ge, "$current_town", slot_town_horse_merchant, 1)],
       "Trade with the horse merchant.",
       [   
           (play_sound, "snd_neigh"),
           (party_get_slot, ":merchant_troop", "$current_town", slot_town_horse_merchant),
           (change_screen_trade, ":merchant_troop"),
        ]),
      ("trade_with_goods_merchant",[(party_slot_ge, "$current_town", slot_town_merchant, 1),
           #(eq,"$town_nighttime",0),
           (this_or_next|eq,"$entry_to_town_forbidden",0),
           (eq, "$sneaked_into_town",1),],
       "Trade with the goods merchant.",
       [
           (try_begin),
             (this_or_next|eq,"$all_doors_locked",1),
             (eq,"$town_nighttime",1),
             (display_message,"str_door_locked",0xFFFFAAAA),
           (else_try),
             (store_random_in_range, ":sound", "snd_distant_dog_bark", "snd_distant_blacksmith"),
             (play_sound, ":sound"),             
             (party_get_slot, ":merchant_troop", "$current_town", slot_town_merchant),
             (change_screen_trade, ":merchant_troop"),
           (try_end),
        ]),
         
        
      ("visit_bank",[
       (party_slot_eq,"$current_town",slot_party_type, spt_town),
       (call_script, "script_cf_center_bulid_need_level", "$g_encountered_party", slot_center_has_fish_pond, 2),
       (troop_slot_ge,"trp_player", slot_troop_player_class,4),
      ],
       "Go to the bank.",
       [
           (jump_to_menu,"mnu_bank"),
        ]),
        
      ("do_some_robbery",[
       (party_slot_eq,"$current_town",slot_party_type, spt_town),
       (this_or_next|eq,"$background_type",cb_thief),
       (this_or_next|eq,"$background_answer_2",cb2_urchin),
       (neg|troop_slot_ge,"trp_player", slot_troop_player_class,7),
      ],
       "do_some_robbery.",
       [
           (jump_to_menu,"mnu_oim_rich_visitor_meal"),
        ]),
        
        ("upgrade_item_blacksmith",
        [
         (party_slot_eq,"$current_town",slot_party_type, spt_town),
         (call_script, "script_cf_center_bulid_need_level", "$g_encountered_party", slot_center_has_blacksmith, 3),],
        "to_Blacksmith_Guild",
        [
            (party_get_slot, ":center_relation", "$g_encountered_party", slot_center_player_relation),
            (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
            (val_mul, ":persuasion_level", 2),
            (val_add, ":center_relation", ":persuasion_level"),
            (ge,  ":center_relation", 25),
            
            (try_begin),
               (this_or_next|troop_slot_ge,"trp_player", slot_troop_player_class,13),
               (ge, ":center_relation", 25),
               (jump_to_menu, "mnu_enter_blacksmith"),
            (else_try),
               (eq,"$background_answer_2",cb2_apprentice),
               (eq,"$background_answer_3",cb3_craftsman),
               (jump_to_menu, "mnu_enter_blacksmith"),
            (else_try),
               (jump_to_menu, "mnu_cannot_enter_blacksmith"),
            (try_end),   
        ]),
                
        ("upgrade_item_blacksmith_low",
        [(party_slot_eq,"$current_town",slot_party_type, spt_town),
         (call_script, "script_cf_center_bulid_need_level", "$g_encountered_party", slot_center_has_blacksmith, 2),
        ],
        "to_Blacksmith",
        [
            (try_begin),
               (this_or_next|party_slot_ge, "$current_town", slot_center_player_relation, 0),
               (this_or_next|eq,"$background_answer_3",cb3_craftsman),
               (eq,"$background_answer_2",cb2_apprentice),
               (jump_to_menu, "mnu_blacksmith"),
            (else_try),
               (jump_to_menu, "mnu_cannot_enter_blacksmith_low"),
            (try_end),   
        ]),
         
                
      
       ("donate", [],"Donate.",[(jump_to_menu, "mnu_donate"),]),
      
      ("trophies_2",[
                   (eq,"itm_trophy_a","itm_trophy_b"),
                   (this_or_next|player_has_item,"itm_trophy_a"),
                   (this_or_next|player_has_item,"itm_trophy_b"),
                   (player_has_item,"itm_trophy_c")],
       "Use trophies to get xp.",[(jump_to_menu,"mnu_trophy_trade_2"),]),        
      
      ("back_to_town_menu",[],"Head back.",[(jump_to_menu,"mnu_town"),]),
    ]
  ),
## CC
  # (
    # "trade_auto_sell_begin",0,
    # "Items in the inventory of companions\
 # which selected as the type for sell and their prices below {reg1} denars\
 # will be sold to {reg2?all merchants:the elder} in current {reg2?town:village} automaticly.\
 # Specifically foods, trade goods and books will never be sold.\
# ^^You can change some settings here freely. ",
    # "none",
  # [
    # (assign, reg1, "$g_auto_sell_price_limit"),
    # (try_begin),
      # (is_between, "$current_town", towns_begin, towns_end),
      # (assign, reg2, 1),
    # (else_try),
      # (assign, reg2, 0),
    # (try_end),
  # ],
  # [
    # ("continue",[],"Continue...",
    # [
      # (call_script, "script_auto_sell_all"),
      # (jump_to_menu, "$g_next_menu"),
      # ]),
    # ("change_settings",[],"Change settings.",[(start_presentation, "prsnt_auto_trade"),]),
    # ("go_back",[],"Go back",[(jump_to_menu, "$g_next_menu")]),
  # ]
  # ),

  # (
    # "trade_auto_buy_food_begin",0,
    # "You will buy food according to the shopping list of foods automaticly. Do you want to continue?^^You can view and configure the shopping list here.",
    # "none", [],
  # [
    # ("continue",[],"Continue...",
    # [
      # (call_script, "script_auto_buy_food"),
      # (jump_to_menu, "$g_next_menu"),
      # ]),
      
    # ("change_shopping_list_of_food",[],"Configure the shopping list of foods.",[(start_presentation, "prsnt_auto_trade"),]),
    # ("go_back",[],"Go back",[(jump_to_menu, "$g_next_menu")]),
   # ]
  # ),
## CC

  (
   "town_trade_assessment_begin",0, 
   #"You overhear the following details about the roads out of town :^(experimental feature -- this may go into dialogs)^{s42}^You also overhear several discussions about the price of trade goods across the local area.^You listen closely, trying to work out the best deals around.",
   "You overhear several discussions about the price of trade goods across the local area.^You listen closely, trying to work out the best deals around.",
    "none",
    [
	(str_clear, s42),
##	(call_script, "script_merchant_road_info_to_s42", "$g_encountered_party"),
	
    ],

    [
      ("continue",[],"Continue...",
       [
#chenwz         
         (try_begin),
            (this_or_next|eq,"$background_type",cb_merchant),
            (this_or_next|eq,"$background_answer_2",cb2_merchants_helper),
            (eq,"$background_answer_3",cb3_peddler),
            (jump_to_menu,"mnu_town_trade_assessment"),
         (else_try),  
           (assign,"$auto_enter_town", "$current_town"),
           (assign, "$g_town_assess_trade_goods_after_rest", 1),
           (call_script, "script_get_max_skill_of_player_party", "skl_trade"),
           (val_div, reg0, 5),
           (store_sub, ":num_hours", 3, reg0),
           (assign, "$g_last_rest_center", "$current_town"),
           (assign, "$g_last_rest_payment_until", -1),
           (rest_for_hours, ":num_hours", 5, 0), #rest while not attackable
           (change_screen_return),
         (try_end),
#chenwz  
           
          
        ]),
      ## CC
      ("go_back",[],"Go back",[(jump_to_menu,"mnu_town_trade")]),
      ## CC
    ]
  ),

  (
    "town_trade_assessment",mnf_disable_all_keys,
    "As the party member with the highest trade skill ({reg2}), {reg3?you try to figure out:{s1} tries to figure out} the best goods to trade in. {s2}",
    "none",
    [(call_script, "script_get_max_skill_of_player_party", "skl_trade"),
     (assign, ":max_skill", reg0),
     (assign, ":max_skill_owner", reg1),

     (assign, ":num_best_results", 0),
     (assign, ":best_result_1_item", -1),
     (assign, ":best_result_1_town", -1),
     (assign, ":best_result_1_profit", 0),
     (assign, ":best_result_2_item", -1),
     (assign, ":best_result_2_town", -1),
     (assign, ":best_result_2_profit", 0),
     (assign, ":best_result_3_item", -1),
     (assign, ":best_result_3_town", -1),
     (assign, ":best_result_3_profit", 0),
     (assign, ":best_result_4_item", -1),
     (assign, ":best_result_4_town", -1),
     (assign, ":best_result_4_profit", 0),
     (assign, ":best_result_5_item", -1),
     (assign, ":best_result_5_town", -1),
     (assign, ":best_result_5_profit", 0),

     (store_sub, ":num_towns", walled_centers_end, walled_centers_begin),
     (store_sub, ":num_goods", trade_goods_end, trade_goods_begin),
     (store_mul, ":max_iteration", ":num_towns", ":num_goods"),
     (val_mul, ":max_iteration", ":max_skill"),
     (val_div, ":max_iteration", 20),

     (assign, ":org_encountered_party", "$g_encountered_party"),

     (try_for_range, ":unused", 0, ":max_iteration"),
       (store_random_in_range, ":random_trade_good", trade_goods_begin, trade_goods_end),
       (store_random_in_range, ":random_town", towns_begin, towns_end),
	   
	   (party_get_slot, ":cur_merchant", ":org_encountered_party", slot_town_merchant),	   
	   (assign, ":num_items_in_town_inventory", 0),
       #(troop_get_inventory_capacity, ":inv_size", ":cur_merchant"),
       (try_for_range, ":i_slot", num_equipment_kinds, max_inventory_items + num_equipment_kinds),
         (troop_get_inventory_slot, ":slot_item", ":cur_merchant", ":i_slot"),
         (try_begin),
           (eq, ":slot_item", ":random_trade_good"),
           (val_add, ":num_items_in_town_inventory", 1),
         (try_end),
	   (try_end),
	   	   
       (ge, ":num_items_in_town_inventory", 1),
       (assign, ":already_best", 0),
       (try_begin),
         (eq, ":random_trade_good", ":best_result_1_item"),
         (eq, ":random_town", ":best_result_1_town"),
         (val_add, ":already_best", 1),
       (try_end),

	   (try_begin),
         (eq, ":random_trade_good", ":best_result_2_item"),
         (eq, ":random_town", ":best_result_2_town"),
         (val_add, ":already_best", 1),
       (try_end),

	   (try_begin),
         (eq, ":random_trade_good", ":best_result_3_item"),
         (eq, ":random_town", ":best_result_3_town"),
         (val_add, ":already_best", 1),
       (try_end),

	   (try_begin),
         (eq, ":random_trade_good", ":best_result_4_item"),
         (eq, ":random_town", ":best_result_4_town"),
         (val_add, ":already_best", 1),
       (try_end),

	   (try_begin),
         (eq, ":random_trade_good", ":best_result_5_item"),
         (eq, ":random_town", ":best_result_5_town"),
         (val_add, ":already_best", 1),
       (try_end),

       (le, ":already_best", 1),

       (store_item_value, ":random_trade_good_price", ":random_trade_good"),
       (assign, "$g_encountered_party", ":org_encountered_party"),
       (call_script, "script_game_get_item_buy_price_factor", ":random_trade_good"),
       (store_mul, ":random_trade_good_buy_price", ":random_trade_good_price", reg0),
       (val_div, ":random_trade_good_buy_price", 100),
       (val_max, ":random_trade_good_buy_price", 1),
       (assign, "$g_encountered_party", ":random_town"),
       (call_script, "script_game_get_item_sell_price_factor", ":random_trade_good"),
       (store_mul, ":random_trade_good_sell_price", ":random_trade_good_price", reg0),
       (val_div, ":random_trade_good_sell_price", 100),
       (val_max, ":random_trade_good_sell_price", 1),
       (store_sub, ":difference", ":random_trade_good_sell_price", ":random_trade_good_buy_price"),
       (try_begin),
	     (this_or_next|eq, ":best_result_1_item", ":random_trade_good"),
         (this_or_next|eq, ":best_result_2_item", ":random_trade_good"),
         (this_or_next|eq, ":best_result_3_item", ":random_trade_good"),
         (this_or_next|eq, ":best_result_4_item", ":random_trade_good"),
         (eq, ":best_result_5_item", ":random_trade_good"),

         (try_begin),
           (eq, ":best_result_1_item", ":random_trade_good"),
           (gt, ":difference", ":best_result_1_profit"),
           (assign, ":best_result_1_item", ":random_trade_good"),
           (assign, ":best_result_1_town", ":random_town"),
           (assign, ":best_result_1_profit", ":difference"),
         (else_try),
           (eq, ":best_result_2_item", ":random_trade_good"),
           (gt, ":difference", ":best_result_2_profit"),
           (assign, ":best_result_2_item", ":random_trade_good"),
           (assign, ":best_result_2_town", ":random_town"),
           (assign, ":best_result_2_profit", ":difference"),
         (else_try),
           (eq, ":best_result_3_item", ":random_trade_good"),
           (gt, ":difference", ":best_result_3_profit"),
           (assign, ":best_result_3_item", ":random_trade_good"),
           (assign, ":best_result_3_town", ":random_town"),
           (assign, ":best_result_3_profit", ":difference"),
         (else_try),
           (eq, ":best_result_4_item", ":random_trade_good"),
           (gt, ":difference", ":best_result_4_profit"),
           (assign, ":best_result_4_item", ":random_trade_good"),
           (assign, ":best_result_4_town", ":random_town"),
           (assign, ":best_result_4_profit", ":difference"),
         (else_try),
           (eq, ":best_result_5_item", ":random_trade_good"),
           (gt, ":difference", ":best_result_5_profit"),
           (assign, ":best_result_5_item", ":random_trade_good"),
           (assign, ":best_result_5_town", ":random_town"),
           (assign, ":best_result_5_profit", ":difference"),
         (try_end),
	   (else_try),
         (try_begin),
         (gt, ":difference", ":best_result_1_profit"),
         (val_add, ":num_best_results", 1),
           (val_min, ":num_best_results", 5),
           (assign, ":best_result_5_item", ":best_result_4_item"),
           (assign, ":best_result_5_town", ":best_result_4_town"),
           (assign, ":best_result_5_profit", ":best_result_4_profit"),
           (assign, ":best_result_4_item", ":best_result_3_item"),
           (assign, ":best_result_4_town", ":best_result_3_town"),
           (assign, ":best_result_4_profit", ":best_result_3_profit"),
         (assign, ":best_result_3_item", ":best_result_2_item"),
         (assign, ":best_result_3_town", ":best_result_2_town"),
         (assign, ":best_result_3_profit", ":best_result_2_profit"),
         (assign, ":best_result_2_item", ":best_result_1_item"),
         (assign, ":best_result_2_town", ":best_result_1_town"),
         (assign, ":best_result_2_profit", ":best_result_1_profit"),
         (assign, ":best_result_1_item", ":random_trade_good"),
         (assign, ":best_result_1_town", ":random_town"),
         (assign, ":best_result_1_profit", ":difference"),
       (else_try),
         (gt, ":difference", ":best_result_2_profit"),
         (val_add, ":num_best_results", 1),
           (val_min, ":num_best_results", 5),
           (assign, ":best_result_5_item", ":best_result_4_item"),
           (assign, ":best_result_5_town", ":best_result_4_town"),
           (assign, ":best_result_5_profit", ":best_result_4_profit"),
           (assign, ":best_result_4_item", ":best_result_3_item"),
           (assign, ":best_result_4_town", ":best_result_3_town"),
           (assign, ":best_result_4_profit", ":best_result_3_profit"),
         (assign, ":best_result_3_item", ":best_result_2_item"),
         (assign, ":best_result_3_town", ":best_result_2_town"),
         (assign, ":best_result_3_profit", ":best_result_2_profit"),
         (assign, ":best_result_2_item", ":random_trade_good"),
         (assign, ":best_result_2_town", ":random_town"),
         (assign, ":best_result_2_profit", ":difference"),
       (else_try),
         (gt, ":difference", ":best_result_3_profit"),
         (val_add, ":num_best_results", 1),
           (val_min, ":num_best_results", 5),
           (assign, ":best_result_5_item", ":best_result_4_item"),
           (assign, ":best_result_5_town", ":best_result_4_town"),
           (assign, ":best_result_5_profit", ":best_result_4_profit"),
           (assign, ":best_result_4_item", ":best_result_3_item"),
           (assign, ":best_result_4_town", ":best_result_3_town"),
           (assign, ":best_result_4_profit", ":best_result_3_profit"),
         (assign, ":best_result_3_item", ":random_trade_good"),
         (assign, ":best_result_3_town", ":random_town"),
         (assign, ":best_result_3_profit", ":difference"),
         (else_try),
           (gt, ":difference", ":best_result_4_profit"),
           (val_add, ":num_best_results", 1),
           (val_min, ":num_best_results", 5),
           (assign, ":best_result_5_item", ":best_result_4_item"),
           (assign, ":best_result_5_town", ":best_result_4_town"),
           (assign, ":best_result_5_profit", ":best_result_4_profit"),
           (assign, ":best_result_4_item", ":random_trade_good"),
           (assign, ":best_result_4_town", ":random_town"),
           (assign, ":best_result_4_profit", ":difference"),
         (else_try),
           (gt, ":difference", ":best_result_5_profit"),
           (val_add, ":num_best_results", 1),
           (val_min, ":num_best_results", 5),
           (assign, ":best_result_5_item", ":best_result_4_item"),
           (assign, ":best_result_5_town", ":best_result_4_town"),
           (assign, ":best_result_5_profit", ":best_result_4_profit"),
         (try_end),
       (try_end),
     (try_end),

     (assign, "$g_encountered_party", ":org_encountered_party"),

     (str_clear, s3),
     
     (assign, reg2, ":max_skill"),
     (try_begin),
       (eq, ":max_skill_owner", "trp_player"),
       (assign, reg3, 1),
     (else_try),
       (assign, reg3, 0),
       (str_store_troop_name, s1, ":max_skill_owner"),
     (try_end),
     (try_begin),
       (le, ":num_best_results", 0),
       (str_store_string, s2, "@However, {reg3?You are:{s1} is} unable to find any trade goods that would bring a profit."),
     (else_try),
       (try_begin),
         (ge, ":best_result_5_item", 0),
         (assign, reg6, ":best_result_5_profit"),
         (str_store_item_name, s4, ":best_result_5_item"),
         (str_store_party_name, s5, ":best_result_5_town"),
         (str_store_string, s3, "@^Buying {s4} here and selling it at {s5} would bring a profit of {reg6} denars per item.{s3}"),
       (try_end),
       (try_begin),
         (ge, ":best_result_4_item", 0),
         (assign, reg6, ":best_result_4_profit"),
         (str_store_item_name, s4, ":best_result_4_item"),
         (str_store_party_name, s5, ":best_result_4_town"),
         (str_store_string, s3, "@^Buying {s4} here and selling it at {s5} would bring a profit of {reg6} denars per item.{s3}"),
       (try_end),
       (try_begin),
         (ge, ":best_result_3_item", 0),
         (assign, reg6, ":best_result_3_profit"),
         (str_store_item_name, s4, ":best_result_3_item"),
         (str_store_party_name, s5, ":best_result_3_town"),
         (str_store_string, s3, "@^Buying {s4} here and selling it at {s5} would bring a profit of {reg6} denars per item.{s3}"),
       (try_end),
       (try_begin),
         (ge, ":best_result_2_item", 0),
         (assign, reg6, ":best_result_2_profit"),
         (str_store_item_name, s4, ":best_result_2_item"),
         (str_store_party_name, s5, ":best_result_2_town"),
         (str_store_string, s3, "@^Buying {s4} here and selling it at {s5} would bring a profit of {reg6} denars per item.{s3}"),
       (try_end),
       (try_begin),
         (ge, ":best_result_1_item", 0),
         (assign, reg6, ":best_result_1_profit"),
         (str_store_item_name, s4, ":best_result_1_item"),
         (str_store_party_name, s5, ":best_result_1_town"),
         (str_store_string, s3, "@^Buying {s4} here and selling it at {s5} would bring a profit of {reg6} denars per item.{s3}"),
       (try_end),
       (str_store_string, s2, "@{reg3?You find:{s1} finds} out the following:^{s3}"),
     (try_end),
     ],
    [
      ("continue",[],"Continue...",
       [
           (jump_to_menu,"mnu_town_trade"),
        ]),
    ]
  ),

  
  
  
  (
    "sneak_into_town_suceeded",0,
    "Disguised in the garments of a poor pilgrim, you fool the guards and make your way into the town.",
    "none",
    [],
    [
      ("continue",[],"Continue...",
       [
           (assign, "$sneaked_into_town",1),
           (jump_to_menu,"mnu_town"),
        ]),
    ]
  ),
  (
    "sneak_into_town_caught",0,
    "As you try to sneak in, one of the guards recognizes you and raises the alarm!\
 You must flee back through the gates before all the guards in the town come down on you!",
    "none",
    [
       (assign,"$auto_menu","mnu_captivity_start_castle_surrender"),
    ],
    [
      ("sneak_caught_fight",[],"Try to fight your way out!",
       [
           (assign,"$all_doors_locked",1),
           (party_get_slot, ":sneak_scene", "$current_town", slot_town_center), # slot_town_gate),
           (modify_visitors_at_site,":sneak_scene"),
           (reset_visitors),
           
           (try_begin),
             (this_or_next|eq, "$talk_context", tc_escape),
             (eq, "$talk_context", tc_prison_break),           
             (set_jump_entry, 7),                      
           (else_try),  
             (party_slot_eq, "$current_town", slot_party_type, spt_town),             
             #(set_visitor,0,"trp_player"),
             (set_jump_entry, 0),           
           (else_try),               
             #(set_visitor,1,"trp_player"),
             (set_jump_entry, 1),           
           (try_end),
                                 
           (set_jump_mission,"mt_sneak_caught_fight"),
           (set_passage_menu,"mnu_town"),
           (jump_to_scene,":sneak_scene"),
           (change_screen_mission),
        ]),
      ("sneak_caught_surrender",[],"Surrender.",
       [
           (assign, "$g_is_quick_battle", 0),
           (jump_to_menu,"mnu_captivity_start_castle_surrender"),
        ]),
    ]
  ),
  (
    "sneak_into_town_caught_dispersed_guards",0,
    "You drive off the guards and cover your trail before running off, easily losing your pursuers in the maze of streets.",
    "none",
    [],
    [
      ("continue",[(eq, "$g_is_quick_battle", 0),],"Continue...",
       [
           (assign, "$sneaked_into_town",1),
           (assign, "$town_entered", 1),
           (jump_to_menu,"mnu_town"),
        ]),
      ("continue",[(neq, "$g_is_quick_battle", 0),],"Continue...",
       [
           (assign, "$g_is_quick_battle",0),
           (assign, "$town_entered", 1),
           (change_screen_map),
           (rest_for_hours, 0, 5, 0),
        ]),
                
    ]
  ),
  
  (
    "sneak_into_town_caught_ran_away",0,
    "You make your way back through the gates and quickly retreat to the safety of the countryside.{s11}",
    "none",
    [
    
	(str_clear, s11),
	(assign, ":at_least_one_escaper_caught", 0),
	
	(assign, ":end_cond", kingdom_ladies_end),
	(try_for_range, ":prisoner", active_npcs_begin, ":end_cond"),
	  (try_begin),
        (troop_slot_eq, ":prisoner", slot_troop_mission_participation, mp_prison_break_escaped),
        (assign, "$talk_context", tc_hero_freed),
        (assign, reg14, ":prisoner"),
        (call_script, "script_setup_troop_meeting", ":prisoner", -1),
        (troop_set_slot, ":prisoner", slot_troop_mission_participation, -1),

        (troop_get_slot, ":prison_center", ":prisoner", slot_troop_prisoner_of_party),
        (party_remove_prisoners, ":prison_center", ":prisoner", 1),          
        (troop_set_slot, ":prisoner", slot_troop_prisoner_of_party, -1),

        (assign, ":end_cond", -1),
	  (else_try),	
        (troop_slot_eq, ":prisoner", slot_troop_mission_participation, mp_prison_break_caught),
        (str_store_troop_name, s12, ":prisoner"),
        (try_begin),
            (eq, ":at_least_one_escaper_caught", 0),
            (str_store_string, s11, "str_s11_unfortunately_s12_was_wounded_and_had_to_be_left_behind"),
        (else_try),
            (str_store_string, s11, "str_s11_also_s12_was_wounded_and_had_to_be_left_behind"),
        (try_end),	
        (assign, ":at_least_one_escaper_caught", 1),
	  (try_end),
	  
	  (troop_set_slot, ":prisoner", slot_troop_mission_participation, 0), #new
	(try_end),
	],
    [      
      ("continue",[(eq, "$g_is_quick_battle", 0),],"Continue...",
       [
           (assign,"$auto_menu",-1),
           (store_encountered_party,"$last_sneak_attempt_town"),
           (store_current_hours,"$last_sneak_attempt_time"),
           (change_screen_map),
        ]),
      ("continue",[(neq, "$g_is_quick_battle", 0),],"Continue...",
       [
           (assign,"$auto_menu",-1),
           (store_encountered_party,"$last_sneak_attempt_town"),
           (store_current_hours,"$last_sneak_attempt_time"),
           (change_screen_map),
           (assign, "$g_is_quick_battle", 0),
           (rest_for_hours, 0, 5, 0),
        ]),
        
    ]
  ),


  (
    "enemy_offer_ransom_for_prisoner",0,
    "{s2} offers you a sum of {reg12} denars in silver if you are willing to sell him {s1}.",
    "none",
    [(call_script, "script_calculate_ransom_amount_for_troop", "$g_ransom_offer_troop"),
     (assign, reg12, reg0),
     (str_store_troop_name, s1, "$g_ransom_offer_troop"),
     (store_troop_faction, ":faction_no", "$g_ransom_offer_troop"),
     (str_store_faction_name, s2, ":faction_no"),
     ],
    [
      ("ransom_accept",[],"Accept the offer.",
       [ ##diplomacy begin
        (try_begin),
          (gt, "$g_player_chamberlain", 0),
          (call_script, "script_dplmc_pay_into_treasury", reg12),
        (else_try),
        ##diplomacy end
          (troop_add_gold, "trp_player", reg12),
        ##diplomacy begin
        (try_end),
        ##diplomacy end
        (party_remove_prisoners, "$g_ransom_offer_party", "$g_ransom_offer_troop", 1),
        #(troop_set_slot, "$g_ransom_offer_troop", slot_troop_is_prisoner, 0),
        (call_script, "script_remove_troop_from_prison", "$g_ransom_offer_troop"),
        (change_screen_return),
        ]),
      ("ransom_reject",[],"Reject the offer.",
       [
        (call_script, "script_change_player_relation_with_troop", "$g_ransom_offer_troop", -4),
        (call_script, "script_change_player_honor", -1),
        (assign, "$g_ransom_offer_rejected", 1),
        (change_screen_return),
        ]),
    ]
  ),


  (
    "training_ground",0,
    "You approach a training field where you can practice your martial skills. What kind of training do you want to do?",
    "none",
    [
      (store_add, "$g_training_ground_melee_training_scene", "scn_training_ground_ranged_melee_1", "$g_encountered_party"),
      (val_sub, "$g_training_ground_melee_training_scene", training_grounds_begin),
      (try_begin),
        (ge, "$g_training_ground_training_count", 3),
        (assign, "$g_training_ground_training_count", 0),
        (rest_for_hours, 1, 5, 1), #rest while attackable
        (assign, "$auto_enter_town", "$g_encountered_party"),
        (change_screen_return),
      (try_end),
      ],
    [
      ("camp_trainer",
       [], "Speak with the trainer.",
       [
         (set_jump_mission, "mt_training_ground_trainer_talk"),
         (modify_visitors_at_site, "$g_training_ground_melee_training_scene"),
         (reset_visitors),
         (set_jump_entry, 5),
         (jump_to_scene, "$g_training_ground_melee_training_scene"),
         (change_screen_mission),
         (music_set_situation, 0),
         ]),
      ("camp_train_melee",
       [
         (neg|troop_is_wounded, "trp_player"),
         (call_script, "script_party_count_fit_for_battle", "p_main_party"),
         (gt, reg0, 1),
         ], "Sparring practice.",
       [
         (assign, "$g_mt_mode", ctm_melee),
         (jump_to_menu, "mnu_training_ground_selection_details_melee_1"),
         (music_set_situation, 0),
         ]),
      ("camp_train_archery",[], "Ranged weapon practice.",
       [
         (jump_to_menu, "mnu_training_ground_selection_details_ranged_1"),
         (music_set_situation, 0),
         ]),
      ("camp_train_mounted",[], "Horseback practice.",
       [
         (assign, "$g_mt_mode", ctm_mounted),
         (jump_to_menu, "mnu_training_ground_selection_details_mounted"),
         (music_set_situation, 0),
         ]),

      ("go_to_track",[(eq, "$cheat_mode", 1)],"{!}Cheat: Go to track.",
       [
         (set_jump_mission, "mt_ai_training"),
         (store_add, ":scene_no", "scn_training_ground_horse_track_1", "$g_encountered_party"),
         (val_sub, ":scene_no", training_grounds_begin),
         (jump_to_scene, ":scene_no"),
         (change_screen_mission),
        ]
       ),
      ("go_to_range",[(eq, "$cheat_mode", 1)],"{!}Cheat: Go to range.",
       [
         (set_jump_mission, "mt_ai_training"),
         (jump_to_scene, "$g_training_ground_melee_training_scene"),
         (change_screen_mission),
        ]
       ),
      ("leave",[],"Leave.",
       [(change_screen_return),
        ]),
    ]
  ),

  ("training_ground_selection_details_melee_1",0,
   "How many opponents will you go against?",
   "none",
   [
     (call_script, "script_write_fit_party_members_to_stack_selection", "p_main_party", 1),
     (troop_get_slot, "$temp", "trp_stack_selection_amounts", 1), #number of men fit
     (assign, "$temp_2", 1),
     ],
    [
      ("camp_train_melee_num_men_1",[(ge, "$temp", 1)], "One.",
       [
         (assign, "$temp", 1),
         (jump_to_menu, "mnu_training_ground_selection_details_melee_2"),
         ]),
      ("camp_train_melee_num_men_2",[(ge, "$temp", 2)], "Two.",
       [
         (assign, "$temp", 2),
         (jump_to_menu, "mnu_training_ground_selection_details_melee_2"),
         ]),
      ("camp_train_melee_num_men_3",[(ge, "$temp", 3)], "Three.",
       [
         (assign, "$temp", 3),
         (jump_to_menu, "mnu_training_ground_selection_details_melee_2"),
         ]),
      ("camp_train_melee_num_men_4",[(ge, "$temp", 4)], "Four.",
       [
         (assign, "$temp", 4),
         (jump_to_menu, "mnu_training_ground_selection_details_melee_2"),
         ]),
      ("go_back_dot",[],"Cancel.",
       [
         (jump_to_menu, "mnu_training_ground"),
        ]),
      ]
  ),

  ("training_ground_selection_details_melee_2",0,
   "Choose your opponent #{reg1}:",
   "none",
   [
     (assign, reg1, "$temp_2"),
     (troop_get_slot, "$temp_3", "trp_stack_selection_amounts", 0), #number of slots
     ],
    [
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 1),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 1),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 2),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 2),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 3),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 3),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 4),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 4),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 5),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 5),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 6),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 6),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 7),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 7),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 8),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 8),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 9),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 9),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 10),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 10),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 11),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 11),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 12),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 12),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 13),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 13),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 14),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 14),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 15),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 15),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 16),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 16),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 17),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 17),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 18),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 18),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 19),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 19),]),
      ("s0", [(call_script, "script_cf_training_ground_sub_routine_1_for_melee_details", 20),], "{s0}",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", 20),]),
      ("training_ground_selection_details_melee_random", [], "Choose randomly.",
       [(call_script, "script_training_ground_sub_routine_2_for_melee_details", -1),]),
      ("go_back_dot",[],"Go back.",
       [(jump_to_menu, "mnu_training_ground"),
        ]
       ),
      ]
  ),


  ("training_ground_selection_details_mounted",0,
   "What kind of weapon do you want to train with?",
   "none",
   [],
    [
      ("camp_train_mounted_details_1",[], "One handed weapon.",
       [
         (call_script, "script_start_training_at_training_ground", itp_type_one_handed_wpn, 0),
         ]),
      ("camp_train_mounted_details_2",[], "Polearm.",
       [
         (call_script, "script_start_training_at_training_ground", itp_type_polearm, 0),
         ]),
      ("camp_train_mounted_details_3",[], "Bow.",
       [
         (call_script, "script_start_training_at_training_ground", itp_type_bow, 0),
         ]),
      ("camp_train_mounted_details_4",[], "Thrown weapon.",
       [
         (call_script, "script_start_training_at_training_ground", itp_type_thrown, 0),
         ]),
      ("go_back_dot",[],"Go back.",
       [(jump_to_menu, "mnu_training_ground"),
        ]
       ),
      ]
  ),


  ("training_ground_selection_details_ranged_1",0,
   "What kind of ranged weapon do you want to train with?",
   "none",
   [],
    [
      ("camp_train_ranged_weapon_bow",[], "Bow and arrows.",
       [
         (assign, "$g_mt_mode", ctm_ranged),
         (assign, "$temp", itp_type_bow),
         (jump_to_menu, "mnu_training_ground_selection_details_ranged_2"),
         ]),
      ("camp_train_ranged_weapon_crossbow",[], "Crossbow.",
       [
         (assign, "$g_mt_mode", ctm_ranged),
         (assign, "$temp", itp_type_crossbow),
         (jump_to_menu, "mnu_training_ground_selection_details_ranged_2"),
         ]),
      ("camp_train_ranged_weapon_thrown",[], "Throwing Knives.",
       [
         (assign, "$g_mt_mode", ctm_ranged),
         (assign, "$temp", itp_type_thrown),
         (jump_to_menu, "mnu_training_ground_selection_details_ranged_2"),
         ]),
      ("go_back_dot",[],"Go back.",
       [(jump_to_menu, "mnu_training_ground"),
        ]
       ),
      ]
  ),


  ("training_ground_selection_details_ranged_2",0,
   "What range do you want to practice at?",
   "none",
   [],
    [
      ("camp_train_ranged_details_1",[], "10 yards.",
       [
         (call_script, "script_start_training_at_training_ground", "$temp", 10),
         ]),
      ("camp_train_ranged_details_2",[], "20 yards.",
       [
         (call_script, "script_start_training_at_training_ground", "$temp", 20),
         ]),
      ("camp_train_ranged_details_3",[], "30 yards.",
       [
         (call_script, "script_start_training_at_training_ground", "$temp", 30),
         ]),
      ("camp_train_ranged_details_4",[], "40 yards.",
       [
         (call_script, "script_start_training_at_training_ground", "$temp", 40),
         ]),
      ("camp_train_ranged_details_5",[(eq, "$g_mt_mode", ctm_ranged),], "50 yards.",
       [
         (call_script, "script_start_training_at_training_ground", "$temp", 50),
         ]),
      ("camp_train_ranged_details_6",[(eq, "$g_mt_mode", ctm_ranged),], "60 yards.",
       [
         (call_script, "script_start_training_at_training_ground", "$temp", 60),
         ]),
      ("camp_train_ranged_details_7",[(eq, "$g_mt_mode", ctm_ranged),], "70 yards.",
       [
         (call_script, "script_start_training_at_training_ground", "$temp", 70),
         ]),
      ("go_back_dot",[],"Go back.",
       [(jump_to_menu, "mnu_training_ground"),
        ]
       ),
      ]
  ),


  ("training_ground_description",0,
   "{s0}",
   "none",
   [],
    [
      ("continue", [], "Continue...",
       [
         (jump_to_scene, "$g_training_ground_training_scene"),
         (change_screen_mission),
        ]
       ),
      ]
  ),

  ("training_ground_training_result",mnf_disable_all_keys,
   "{s7}{s2}",
   "none",
   [
     (store_skill_level, ":trainer_skill", "skl_trainer", "trp_player"),
     (store_add, ":trainer_skill_multiplier", 5, ":trainer_skill"),
     (call_script, "script_write_fit_party_members_to_stack_selection", "p_main_party", 1),
     (str_clear, s2),
     (troop_get_slot, ":num_fit", "trp_stack_selection_amounts", 1),
     (troop_get_slot, ":num_slots", "trp_stack_selection_amounts", 0),
     (try_begin),
       (gt, "$g_training_ground_training_success_ratio", 0),
       (store_mul, ":xp_ratio_to_add", "$g_training_ground_training_success_ratio", "$g_training_ground_training_success_ratio"),
       (try_begin),
         (eq, "$g_training_ground_training_success_ratio", 100),
         (val_mul, ":xp_ratio_to_add", 2), #2x when perfect
       (try_end),
       (try_begin),
         (eq, "$g_mt_mode", ctm_melee),
         (val_div, ":xp_ratio_to_add", 2),
       (try_end),
       (val_div, ":xp_ratio_to_add", 10), # value over 1000
       (try_begin),
         (gt, ":num_fit", 8),
         (val_mul, ":xp_ratio_to_add", 3),
         (assign, ":divisor", ":num_fit"),
         (convert_to_fixed_point, ":divisor"),
         (store_sqrt, ":divisor", ":divisor"),
         (convert_to_fixed_point, ":xp_ratio_to_add"),
         (val_div, ":xp_ratio_to_add", ":divisor"),
       (try_end),
##       (assign, reg0, ":xp_ratio_to_add"),
##       (display_message, "@xp earn ratio: {reg0}/1000"),
       (store_mul, ":xp_ratio_to_add_with_trainer_skill", ":xp_ratio_to_add", ":trainer_skill_multiplier"),
       #(val_div, ":xp_ratio_to_add_with_trainer_skill", 10),
       (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
       (store_add, ":end_cond", ":num_slots", 2),
       (try_for_range, ":i_slot", 2, ":end_cond"),
         (troop_get_slot, ":amount", "trp_stack_selection_amounts", ":i_slot"),
         (troop_get_slot, ":troop_id", "trp_stack_selection_ids", ":i_slot"),
         (assign, ":end_cond_2", ":num_stacks"),
         (try_for_range, ":stack_no", 0, ":end_cond_2"),
           (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":stack_no"),
           (eq, ":stack_troop", ":troop_id"),
           (assign, ":end_cond_2", 0), #break
           (call_script, "script_cf_training_ground_sub_routine_for_training_result", ":troop_id", ":stack_no", ":amount", ":xp_ratio_to_add_with_trainer_skill"),
           (str_store_troop_name_by_count, s1, ":troop_id", ":amount"),
           (assign, reg1, ":amount"),
           (str_store_string, s2, "@{s2}^{reg1} {s1} earned {reg0} experience."),
         (try_end),
       (try_end),
       (try_begin),
         (eq, "$g_mt_mode", ctm_melee),
         (store_mul, ":special_xp_ratio_to_add", ":xp_ratio_to_add", 3),
         (val_div, ":special_xp_ratio_to_add", 2),
         (try_for_range, ":enemy_index", 0, "$g_training_ground_training_num_enemies"),
           (troop_get_slot, ":troop_id", "trp_temp_array_a", ":enemy_index"),
           (assign, ":end_cond_2", ":num_stacks"),
           (try_for_range, ":stack_no", 0, ":end_cond_2"),
             (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":stack_no"),
             (eq, ":stack_troop", ":troop_id"),
             (assign, ":end_cond_2", 0), #break
             (call_script, "script_cf_training_ground_sub_routine_for_training_result", ":troop_id", ":stack_no", 1, ":special_xp_ratio_to_add"),
             (str_store_troop_name, s1, ":troop_id"),
             (str_store_string, s2, "@{s2}^{s1} earned an additional {reg0} experience."),
           (try_end),
         (try_end),
       (try_end),
       (try_begin),
         (call_script, "script_cf_training_ground_sub_routine_for_training_result", "trp_player", -1, 1, ":xp_ratio_to_add"),
         (str_store_string, s2, "@^You earned {reg0} experience.{s2}"),
       (try_end),
     (try_end),
     (try_begin),
       (eq, "$g_training_ground_training_success_ratio", 0),
       (str_store_string, s7, "@The training didn't go well at all."),
     (else_try),
       (lt, "$g_training_ground_training_success_ratio", 25),
       (str_store_string, s7, "@The training didn't go well at all."),
     (else_try),
       (lt, "$g_training_ground_training_success_ratio", 50),
       (str_store_string, s7, "@The training didn't go very well."),
     (else_try),
       (lt, "$g_training_ground_training_success_ratio", 75),
       (str_store_string, s7, "@The training went quite well."),
     (else_try),
       (lt, "$g_training_ground_training_success_ratio", 99),
       (str_store_string, s7, "@The training went very well."),
     (else_try),
       (str_store_string, s7, "@The training went perfectly."),
     (try_end),
     
     ],
    [
      ("continue",[],"Continue...",
       [(jump_to_menu, "mnu_training_ground"),
        ]
       ),
      ]
   ),
  
  ("marshall_selection_candidate_ask",0,
   "{s15} will soon select a new marshall for {s23}. Some of the lords have suggested your name as a likely candidate.",
   "none",
   [
     (try_begin),
       (eq, "$g_presentation_marshall_selection_ended", 1),
       (change_screen_return),
     (try_end),
     (faction_get_slot, ":king", "$players_kingdom", slot_faction_leader),
     (str_store_troop_name, s15, ":king"),
     (str_store_faction_name, s23, "$players_kingdom"),
     ],
    [
      ("marshall_candidate_accept", [], "Let {s15} learn that you are willing to serve as marshall.",
       [
         (start_presentation, "prsnt_marshall_selection"),
        ]
       ),
      ("marshall_candidate_reject", [], "Tell everyone that you are too busy these days.",
       [
         (try_begin),
           (eq, "$g_presentation_marshall_selection_max_renown_2_troop", "trp_player"),
           (assign, "$g_presentation_marshall_selection_max_renown_2", "$g_presentation_marshall_selection_max_renown_3"),
           (assign, "$g_presentation_marshall_selection_max_renown_2_troop", "$g_presentation_marshall_selection_max_renown_3_troop"),
         (else_try),
           (assign, "$g_presentation_marshall_selection_max_renown_1", "$g_presentation_marshall_selection_max_renown_2"),
           (assign, "$g_presentation_marshall_selection_max_renown_1_troop", "$g_presentation_marshall_selection_max_renown_2_troop"),
           (assign, "$g_presentation_marshall_selection_max_renown_2", "$g_presentation_marshall_selection_max_renown_3"),
           (assign, "$g_presentation_marshall_selection_max_renown_2_troop", "$g_presentation_marshall_selection_max_renown_3_troop"),
         (try_end),
         (start_presentation, "prsnt_marshall_selection"),
        ]
       ),
      ]
  ),



  
##    [
##      ("renew_oath",[],"Renew your oath to {s1} for another month.",[
##          (store_current_day, ":cur_day"),
##          (store_add, "$g_oath_end_day", ":cur_day", 30),
##          (change_screen_return)]),
##      ("dont_renew_oath",[],"Become free of your bond.",[
##          (assign, "$players_kingdom",0),
##          (assign, "$g_player_permitted_castles", 0),
##          (change_screen_return)]),
##    ]
##  ),


#####################################################################
## Captivity....
#####################################################################
#####################################################################
#####################################################################
#####################################################################
  (
    "captivity_avoid_wilderness",0,
    "Suddenly all the world goes black around you.\
 Many hours later you regain your conciousness and find yourself at the spot you fell.\
 Your enemies must have taken you up for dead and left you there.\
 However, it seems that none of your wound were lethal,\
 and altough you feel awful, you find out that can still walk.\
 You get up and try to look for any other survivors from your party.",
    "none",
    [
      ],
    []
  ),

  (
    "captivity_start_wilderness",0,
    "Stub",
    "none",
    [
          (assign, "$g_player_is_captive", 1),
          (try_begin),
            (eq,"$g_player_surrenders",1),
            (jump_to_menu, "mnu_captivity_start_wilderness_surrender"), 
          (else_try),
            (jump_to_menu, "mnu_captivity_start_wilderness_defeat"), 
          (try_end),
      ],
    []
  ),
  
  (
    "captivity_start_wilderness_surrender",0,
    "Stub",
    "none",
    [
       (assign, "$g_player_is_captive", 1),
       (assign,"$auto_menu",-1), #We need this since we may come here by something other than auto_menu
       (assign, "$capturer_party", "$g_encountered_party"),
       (jump_to_menu, "mnu_captivity_wilderness_taken_prisoner"),
      ],
    []
  ),
  (
    "captivity_start_wilderness_defeat",0,
    "Your enemies take you prisoner.",
    "none",
    [
       (assign, "$g_player_is_captive", 1),
       (assign,"$auto_menu",-1),
       (assign, "$capturer_party", "$g_encountered_party"),
              
       (try_begin),
         (party_stack_get_troop_id, ":party_leader", "$g_encountered_party", 0),
         (is_between, ":party_leader", active_npcs_begin, active_npcs_end),
         (troop_slot_eq, ":party_leader", slot_troop_occupation, slto_kingdom_hero),
         (store_sub, ":kingdom_hero_id", ":party_leader", active_npcs_begin),
         (set_achievement_stat, ACHIEVEMENT_BARON_GOT_BACK, ":kingdom_hero_id", 1),
       (try_end),
       (jump_to_menu, "mnu_captivity_wilderness_taken_prisoner"),
    ],
    []
  ),
  (
    "captivity_start_castle_surrender",0,
    "Stub",
    "none",
    [
       (assign, "$g_player_is_captive", 1),
       (assign,"$auto_menu",-1),
       (assign, "$capturer_party", "$g_encountered_party"),
       (jump_to_menu, "mnu_captivity_castle_taken_prisoner"),
      ],
    []
  ),
  (
    "captivity_start_castle_defeat",0,
    "Stub",
    "none",
    [
       (assign, "$g_player_is_captive", 1),
       (assign,"$auto_menu",-1),
       (assign, "$capturer_party", "$g_encountered_party"),
       (jump_to_menu, "mnu_captivity_castle_taken_prisoner"),
      ],
    []
  ),
  (
    "captivity_start_under_siege_defeat",0,
    "Your enemies take you prisoner.",
    "none",
    [
       (assign, "$g_player_is_captive", 1),
       (assign,"$auto_menu",-1),
       (assign, "$capturer_party", "$g_encountered_party"),
       (jump_to_menu, "mnu_captivity_castle_taken_prisoner"),
    ],
    []
  ),
  
  (
    "captivity_wilderness_taken_prisoner",mnf_scale_picture,
    "Your enemies take you prisoner.",
    "none",
    [
        (set_background_mesh, "mesh_pic_prisoner_wilderness"),
     ],
    [
      ("continue",[],"Continue...",
       [
	     # Explanation of removing below code : heros are already being removed with 50% (was 75%, I decreased it) probability in mnu_total_defeat, why here there is additionally 30% removing of heros?
         # See codes linked to "mnu_captivity_start_wilderness_surrender" and "mnu_captivity_start_wilderness_defeat" which is connected with here they all also enter 
         # "mnu_total_defeat" and inside the "mnu_total_defeat" there is script_party_remove_all_companions which removes 50% (was 75%, I decreased it) of compainons from player party.        

         #(try_for_range, ":npc", companions_begin, companions_end),
         #  (main_party_has_troop, ":npc"),
         #  (store_random_in_range, ":rand", 0, 100),
         #  (lt, ":rand", 30),
         #  (remove_member_from_party, ":npc", "p_main_party"),
         #  (troop_set_slot, ":npc", slot_troop_occupation, 0),
         #  (troop_set_slot, ":npc", slot_troop_playerparty_history, pp_history_scattered),
         #  (assign, "$last_lost_companion", ":npc"),
         #  (store_faction_of_party, ":victorious_faction", "$g_encountered_party"),
         #  (troop_set_slot, ":npc", slot_troop_playerparty_history_string, ":victorious_faction"),
         #  (troop_set_health, ":npc", 100),
         #  (store_random_in_range, ":rand_town", towns_begin, towns_end),
         #  (troop_set_slot, ":npc", slot_troop_cur_center, ":rand_town"),
         #  (assign, ":nearest_town_dist", 1000),
         #  (try_for_range, ":town_no", towns_begin, towns_end),
         #    (store_faction_of_party, ":town_fac", ":town_no"),
         #    (store_relation, ":reln", ":town_fac", "fac_player_faction"),
         #    (ge, ":reln", 0),
         #    (store_distance_to_party_from_party, ":dist", ":town_no", "p_main_party"),
         #    (lt, ":dist", ":nearest_town_dist"),
         #    (assign, ":nearest_town_dist", ":dist"),
         #    (troop_set_slot, ":npc", slot_troop_cur_center, ":town_no"),
         #  (try_end),
         #(try_end),

         (set_camera_follow_party, "$capturer_party"),
         (assign, "$g_player_is_captive", 1),
         (store_random_in_range, ":random_hours", 18, 30),         
         (call_script, "script_event_player_captured_as_prisoner"),
         (call_script, "script_stay_captive_for_hours", ":random_hours"),
         (assign,"$auto_menu","mnu_captivity_wilderness_check"),
         (change_screen_return),
         ]),
      ]
  ),
  (
    "captivity_wilderness_check",0,
    "stub",
    "none",
    [(jump_to_menu,"mnu_captivity_end_wilderness_escape")],
    []
  ),
  (
    "captivity_end_wilderness_escape", mnf_scale_picture,
    "After painful days of being dragged about as a prisoner, you find a chance and escape from your captors!",
    "none",
    [
        (play_cue_track, "track_escape"),
        (troop_get_type, ":is_female", "trp_player"),
        (try_begin),
          (this_or_next|eq, ":is_female", tf_female_elf),
          (eq, ":is_female", 1),
          (set_background_mesh, "mesh_pic_escape_1_fem"),
        (else_try),
          (set_background_mesh, "mesh_pic_escape_1"),
        (try_end),
    ],
    [
      ("continue",[],"Continue...",
       [
           (assign, "$g_player_is_captive", 0),
           (try_begin),
             (party_is_active, "$capturer_party"),
             (party_relocate_near_party, "p_main_party", "$capturer_party", 2),
           (try_end),
           (call_script, "script_set_parties_around_player_ignore_player", 8, 12), #it was radius:2 and hours:4, but players make lots of complains about consequent battle losses after releases from captivity then I changed this.
           (assign, "$g_player_icon_state", pis_normal),
           (set_camera_follow_party, "p_main_party"),
           (rest_for_hours, 0, 0, 0), #stop resting
           (change_screen_return),
        ]),
    ]
  ),
  (
    "captivity_castle_taken_prisoner",0,
    "You are quickly surrounded by guards who take away your weapons. With curses and insults, they throw you into the dungeon where you must while away the miserable days of your captivity.",
    "none",
    [
        (troop_get_type, ":is_female", "trp_player"),
        (try_begin),
          (this_or_next|eq, ":is_female", tf_female_elf),
          (eq, ":is_female", 1),
          (set_background_mesh, "mesh_pic_prisoner_fem"),
        (else_try),
          (set_background_mesh, "mesh_pic_prisoner_man"),
        (try_end),
    ],
    [
      ("continue",[],"Continue...",
       [
           (assign, "$g_player_is_captive", 1),
           (store_random_in_range, ":random_hours", 16, 22),
           (call_script, "script_event_player_captured_as_prisoner"),
           (call_script, "script_stay_captive_for_hours", ":random_hours"),
           (assign,"$auto_menu", "mnu_captivity_castle_check"),
           (change_screen_return)
        ]),
    ]
  ),
  (
    "captivity_rescue_lord_taken_prisoner",0,
    "You remain in disguise for as long as possible before revealing yourself.\
 The guards are outraged and beat you savagely before throwing you back into the cell for God knows how long...",
    "none",
    [
        (troop_get_type, ":is_female", "trp_player"),
        (try_begin),
          (this_or_next|eq, ":is_female", tf_female_elf),
          (eq, ":is_female", 1),
          (set_background_mesh, "mesh_pic_prisoner_fem"),
        (else_try),
          (set_background_mesh, "mesh_pic_prisoner_man"),
        (try_end),
   ],
    [
      ("continue",[],"Continue...",
       [
           (assign, "$g_player_is_captive", 1),
           (store_random_in_range, ":random_hours", 16, 22),
           (call_script, "script_event_player_captured_as_prisoner"),
           (call_script, "script_stay_captive_for_hours", ":random_hours"),
           (assign,"$auto_menu", "mnu_captivity_castle_check"),
           (change_screen_return),
        ]),
    ]
  ),
  (
    "captivity_castle_check",0,
    "stub",
    "none",
    [
        (store_random_in_range, reg(7), 0, 10),
        (try_begin),
          (party_is_active, "$capturer_party"),
          (store_faction_of_party, ":capturer_faction", "$capturer_party"),
          (is_between, ":capturer_faction", kingdoms_begin, kingdoms_end),
          (store_relation, ":relation_w_player_faction", ":capturer_faction", "fac_player_faction"),
#chenwz         
         (try_begin),
            (this_or_next|eq,"$background_answer_3",cb3_squire),
            (eq,"$background_answer_3",cb3_lady_in_waiting),
            (val_add, ":relation_w_player_faction",40),
         (try_end),
#chenwz         
          (ge, ":relation_w_player_faction", 0),
          (jump_to_menu,"mnu_captivity_end_exchanged_with_prisoner"),
        (else_try),
          (lt, reg(7), 4),
                              
          (store_character_level, ":player_level", "trp_player"),
          (store_mul, "$player_ransom_amount", ":player_level", 50),
          (val_add, "$player_ransom_amount", 100),                    
          (store_troop_gold, reg3, "trp_player"),          
          (store_div, ":player_gold_div_20", reg3, 20),
          (val_add, "$player_ransom_amount", ":player_gold_div_20"),          
          
          (gt, reg3, "$player_ransom_amount"),
          (jump_to_menu,"mnu_captivity_end_propose_ransom"),
        (else_try),
          (lt, reg7, 7),
          (jump_to_menu,"mnu_captivity_end_exchanged_with_prisoner"),
        (else_try),
          (jump_to_menu,"mnu_captivity_castle_remain"),
        (try_end),
    ],
    []
  ),
  (
    "captivity_end_exchanged_with_prisoner",0,
    "After days of imprisonment, you are finally set free when your captors exchange you with another prisoner.",
    "none",
    [
      (play_cue_track, "track_escape"),
      ],
    [
      ("continue",[],"Continue...",
       [
           (assign, "$g_player_is_captive", 0),
           (try_begin),
             (party_is_active, "$capturer_party"),
             (party_relocate_near_party, "p_main_party", "$capturer_party", 2),
           (try_end),
           (call_script, "script_set_parties_around_player_ignore_player", 8, 12), #it was radius:2 and hours:12, but players make lots of complains about consequent battle losses after releases from captivity then I changed this.
           (assign, "$g_player_icon_state", pis_normal),
           (set_camera_follow_party, "p_main_party"),
           (rest_for_hours, 0, 0, 0), #stop resting
           (change_screen_return),
        ]),
    ]
  ),
  (
    "captivity_end_propose_ransom",0,
    "You spend long hours in the sunless dank of the dungeon, more than you can count.\
 Suddenly one of your captors enters your cell with an offer;\
 he proposes to free you in return for {reg5} denars of your hidden wealth. You decide to...",
    "none",
    [
      (assign, reg5, "$player_ransom_amount"),
    ],
    [
      ("captivity_end_ransom_accept",
      [
        (store_troop_gold,":player_gold", "trp_player"),
        (ge, ":player_gold","$player_ransom_amount")
      ],"Accept the offer.",
      [
        (play_cue_track, "track_escape"),
        (assign, "$g_player_is_captive", 0),
        (troop_remove_gold, "trp_player", "$player_ransom_amount"), 
        (try_begin),
          (party_is_active, "$capturer_party"),
          (party_relocate_near_party, "p_main_party", "$capturer_party", 1),
        (try_end),
        (call_script, "script_set_parties_around_player_ignore_player", 8, 12), #it was radius:2 and hours:6, but players make lots of complains about consequent battle losses after releases from captivity then I changed this.
        (assign, "$g_player_icon_state", pis_normal),
        (set_camera_follow_party, "p_main_party"),
        (rest_for_hours, 0, 0, 0), #stop resting
        (change_screen_return),
      ]),
      ("captivity_end_ransom_deny",
      [
      ],"Refuse him, wait for something better.",
      [
        (assign, "$g_player_is_captive", 1),
        (store_random_in_range, reg(8), 16, 22),
        (call_script, "script_stay_captive_for_hours", reg8),
        (assign,"$auto_menu", "mnu_captivity_castle_check"),
        (change_screen_return),
      ]),
    ]
  ),
  (
    "captivity_castle_remain",mnf_scale_picture|mnf_disable_all_keys,
    "More days pass in the darkness of your cell. You get through them as best you can,\
 enduring the kicks and curses of the guards, watching your underfed body waste away more and more...",
    "none",
    [
        (troop_get_type, ":is_female", "trp_player"),
        (try_begin),
          (this_or_next|eq, ":is_female", tf_female_elf),
          (eq, ":is_female", 1),
          (set_background_mesh, "mesh_pic_prisoner_fem"),
        (else_try),
          (set_background_mesh, "mesh_pic_prisoner_man"),
        (try_end),
        (store_random_in_range, ":random_hours", 16, 22),
        (call_script, "script_stay_captive_for_hours", ":random_hours"),
        (assign,"$auto_menu", "mnu_captivity_castle_check"),
        
    ],
    [
      ("continue",[],"Continue...",
       [
           (assign, "$g_player_is_captive", 1),
           (change_screen_return),
        ]),
    ]
  ),

  (
    "kingdom_army_quest_report_to_army",mnf_scale_picture,
    "{s8} sends word that he wishes you to join {reg4?her:his} new military campaign.\
 You need to bring at least {reg13} troops to the army,\
 and are instructed to raise more men with all due haste if you do not have enough.",
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        (quest_get_slot, ":quest_target_troop", "qst_report_to_army", slot_quest_target_troop),
        (quest_get_slot, ":quest_target_amount", "qst_report_to_army", slot_quest_target_amount),
        (call_script, "script_get_information_about_troops_position", ":quest_target_troop", 0),
        (str_clear, s9),
        (try_begin),
          (eq, reg0, 1), #troop is found and text is correct
          (str_store_string, s9, s1),
        (try_end),
        (str_store_troop_name, s8, ":quest_target_troop"),
        (assign, reg13, ":quest_target_amount"),
        (troop_get_type, reg4, ":quest_target_troop"),
      (try_begin),
        (this_or_next|eq, reg4, tf_female_elf),
        (eq, reg4, tf_female),
        (assign, reg4, tf_female), 
      (else_try),
        (assign, reg4, tf_male), 
      (try_end),
      ],
    [
      ("continue",[],"Continue...",
       [
           (quest_get_slot, ":quest_target_troop", "qst_report_to_army", slot_quest_target_troop),
           (quest_get_slot, ":quest_target_amount", "qst_report_to_army", slot_quest_target_amount),
           (str_store_troop_name_link, s13, ":quest_target_troop"),
           (assign, reg13, ":quest_target_amount"),
           (setup_quest_text, "qst_report_to_army"),
           (str_store_string, s2, "@{s13} asked you to report to him with at least {reg13} troops."),
           (call_script, "script_start_quest", "qst_report_to_army", ":quest_target_troop"),
           (call_script, "script_report_quest_troop_positions", "qst_report_to_army", ":quest_target_troop", 3),
           (change_screen_return),
        ]),
     ]
  ),

  (
    "kingdom_army_quest_messenger",mnf_scale_picture,
    "{s8} sends word that he wishes to speak with you about a task he needs performed.\
 He requests you to come and see him as soon as possible.",
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        (faction_get_slot, ":faction_marshall", "$players_kingdom", slot_faction_marshall),
        (str_store_troop_name, s8, ":faction_marshall"),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),

  (
    "kingdom_army_quest_join_siege_order",mnf_scale_picture,
    "{s8} sends word that you are to join the siege of {s9} in preparation for a full assault.\
 Your troops are to take {s9} at all costs.",
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        (faction_get_slot, ":faction_marshall", "$players_kingdom", slot_faction_marshall),
        (quest_get_slot, ":quest_target_center", "qst_join_siege_with_army", slot_quest_target_center),
        (str_store_troop_name, s8, ":faction_marshall"),
        (str_store_party_name, s9, ":quest_target_center"),
      ],
    [
      ("continue",[],"Continue...",
       [
           (call_script, "script_end_quest", "qst_follow_army"),
           (quest_get_slot, ":quest_target_center", "qst_join_siege_with_army", slot_quest_target_center),
           (faction_get_slot, ":faction_marshall", "$players_kingdom", slot_faction_marshall),
           (str_store_troop_name_link, s13, ":faction_marshall"),
           (str_store_party_name_link, s14, ":quest_target_center"),
           (setup_quest_text, "qst_join_siege_with_army"),
           (str_store_string, s2, "@{s13} ordered you to join the assault against {s14}."),
           (call_script, "script_start_quest", "qst_join_siege_with_army", ":faction_marshall"),
           (change_screen_return),
        ]),
     ]
  ),

  (
    "kingdom_army_follow_failed",mnf_scale_picture,
    "You have failed to follow {s8}. The marshal assumes that you were otherwise engaged, but would have appreciated your support.",
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        (faction_get_slot, ":faction_marshall", "$players_kingdom", slot_faction_marshall),
        (str_store_troop_name, s8, ":faction_marshall"),
        (call_script, "script_abort_quest", "qst_follow_army", 1),
#        (call_script, "script_change_player_relation_with_troop", ":faction_marshall", -3),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),


  (
    "invite_player_to_faction_without_center",mnf_scale_picture,
    "You receive an offer of vassalage!^^\
 {s8} of {s9} has sent a royal herald to bring you an invititation in his own hand.\
 You would be granted the honour of becoming a vassal {lord/lady} of {s9},\
 and in return {s8} asks you to swear an oath of homage to him and fight in his military campaigns,\
 although he offers you no lands or titles.\
 He will surely be offended if you do not take the offer...",
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        (faction_get_slot, "$g_invite_faction_lord", "$g_invite_faction", slot_faction_leader),
        (str_store_troop_name, s8, "$g_invite_faction_lord"),
        (str_store_faction_name, s9, "$g_invite_faction"),
      ],
    [
      ("faction_accept",[],"Accept!",
       [(str_store_troop_name,s1,"$g_invite_faction_lord"),
        (setup_quest_text,"qst_join_faction"),

        (str_store_troop_name_link, s3, "$g_invite_faction_lord"),
        (str_store_faction_name_link, s4, "$g_invite_faction"),
        (quest_set_slot, "qst_join_faction", slot_quest_giver_troop, "$g_invite_faction_lord"),
        (quest_set_slot, "qst_join_faction", slot_quest_expiration_days, 30),
        (quest_set_slot, "qst_join_faction", slot_quest_failure_consequence, 0),
        
        (str_store_string, s2, "@Find and speak with {s3} of {s4} to give him your oath of homage."),
        (call_script, "script_start_quest", "qst_join_faction", "$g_invite_faction_lord"),
        (call_script, "script_report_quest_troop_positions", "qst_join_faction", "$g_invite_faction_lord", 3),
        (jump_to_menu, "mnu_invite_player_to_faction_accepted"),
        ]),
      ("faction_reject",[],"Decline the invitation.",
       [(call_script, "script_change_player_relation_with_troop", "$g_invite_faction_lord", -3),
        (call_script, "script_change_player_relation_with_faction", "$g_invite_faction", -10),
        (assign, "$g_invite_faction", 0),
        (assign, "$g_invite_faction_lord", 0),
        (assign, "$g_invite_offered_center", 0),
        (change_screen_return),
        ]),
     ]
  ),
  

  (
    "invite_player_to_faction",mnf_scale_picture,
    "You receive an offer of vassalage!^^\
 {s8} of {s9} has sent a royal herald to bring you an invititation in his own hand.\
 You would be granted the honour of becoming a vassal {lord/lady} of {s9},\
 and in return {s8} asks you to swear an oath of homage to him and fight in his military campaigns,\
 offering you the fief of {s2} for your loyal service.\
 He will surely be offended if you do not take the offer...",
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        (faction_get_slot, "$g_invite_faction_lord", "$g_invite_faction", slot_faction_leader),
        (str_store_troop_name, s8, "$g_invite_faction_lord"),
        (str_store_faction_name, s9, "$g_invite_faction"),
        (str_store_party_name, s2, "$g_invite_offered_center"),
      ],
    [
      ("faction_accept",[],"Accept!",
       [(str_store_troop_name,s1,"$g_invite_faction_lord"),
        (setup_quest_text,"qst_join_faction"),

        (str_store_troop_name_link, s3, "$g_invite_faction_lord"),
        (str_store_faction_name_link, s4, "$g_invite_faction"),
        (quest_set_slot, "qst_join_faction", slot_quest_giver_troop, "$g_invite_faction_lord"),
        (quest_set_slot, "qst_join_faction", slot_quest_expiration_days, 30),
        (str_store_string, s2, "@Find and speak with {s3} of {s4} to give him your oath of homage."),
        (call_script, "script_start_quest", "qst_join_faction", "$g_invite_faction_lord"),
        (call_script, "script_report_quest_troop_positions", "qst_join_faction", "$g_invite_faction_lord", 3),
        (jump_to_menu, "mnu_invite_player_to_faction_accepted"),
        ]),
      ("faction_reject",[],"Decline the invitation.",
       [(call_script, "script_change_player_relation_with_troop", "$g_invite_faction_lord", -3),
        (assign, "$g_invite_faction", 0),
        (assign, "$g_invite_faction_lord", 0),
        (assign, "$g_invite_offered_center", 0),
        (change_screen_return),
        ]),
     ]
  ),
  
  (
    "invite_player_to_faction_accepted",0,
    "In order to become a vassal, you must swear an oath of homage to {s3}.\
 You shall have to find him and give him your oath in person. {s5}",
    "none",
    [
        (call_script, "script_get_information_about_troops_position", "$g_invite_faction_lord", 0),
        (str_store_troop_name, s3, "$g_invite_faction_lord"),
        (str_store_string, s5, "@{!}{s1}"),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),

  (
    "question_peace_offer",0,
    "You Receive a Peace Offer^^The {s1} offers you a peace agreement. What is your answer?",
    "none",
    [
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      (store_relation,  ":relation", "fac_player_supporters_faction", "$g_notification_menu_var1"),
      (try_begin),
        (ge, ":relation", 0),
        (change_screen_return),
      (try_end),
      ],
    [
      ("peace_offer_accept",[],"Accept",
       [
         (call_script, "script_diplomacy_start_peace_between_kingdoms", "fac_player_supporters_faction", "$g_notification_menu_var1", 1),
         (change_screen_return),
        ]),
        ##diplomacy begin
      ("dplmc_peace_offer_terms",[],"Dictate the peace terms",
       [
        (start_presentation, "prsnt_dplmc_peace_terms"),
        ]),
        ##diplomacy end
      ("peace_offer_reject",[],"Reject",
       [
         (call_script, "script_change_player_relation_with_faction", "$g_notification_menu_var1", -5),
         (change_screen_return),
        ]),
     ]
  ),

  (
    "notification_truce_expired",0,
    "Truce Has Expired^^The truce between {s1} and {s2} has expired.",
    "none",
    [
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
	  
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      ],
    [
      ("continue",[],"Continue",
       [
	   (change_screen_return),
        ]),
     ]
  ),
  
  (
    "notification_feast_quest_expired",0,
    "{s10}",
    "none",
    [
    (str_store_string, s10, "str_feast_quest_expired"),
    ],
    [
      ("continue",[],"Continue",
       [
	   (change_screen_return),
        ]),
     ]
  ),

  (
    "notification_sortie_possible",0,
    "Enemy Sighted: Enemies have been sighted outside the walls of {s4}, and {s5} and others are preparing for a sortie. You may join them if you wish.",
    "none",
    [
	(str_store_party_name, s4, "$g_notification_menu_var1"),
	(party_stack_get_troop_id, ":leader", "$g_notification_menu_var2", 0),
	(str_store_troop_name, s5, ":leader"),
      ],
    [
      ("continue",[],"Continue",
       [
	   #stop auto-clock
	   
	   (change_screen_return),
        ]),
     ]
  ),
  
  
  
  
  (
    "notification_casus_belli_expired",0,
    "Kingdom Fails to Respond^^The {s1} has not responded to the {s2}'s provocations, and {s3} suffers a loss of face among {reg4?her:his} more bellicose subjects...^",
    "none",
    [
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
	  (faction_get_slot, ":faction_leader", "$g_notification_menu_var1", slot_faction_leader),
      (str_store_troop_name, s3, ":faction_leader"),
	  (troop_get_type, reg4, ":faction_leader"),
      (try_begin),
        (this_or_next|eq, reg4, tf_female_elf),
        (eq, reg4, tf_female),
        (assign, reg4, tf_female), 
      (else_try),
        (assign, reg4, tf_male), 
      (try_end),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      ],
    [
      ("continue",[],"Continue",
       [
	   (call_script, "script_faction_follows_controversial_policy", "$g_notification_menu_var1", logent_policy_ruler_ignores_provocation),
	   (change_screen_return),
        ]),
     ]
  ),

  (
    "notification_lord_defects",0,
    "Defection: {s4} has abandoned the {s5} and joined the {s7}, taking {reg4?her:his} his fiefs with him",
    "none",
	[
	  (assign, ":defecting_lord", "$g_notification_menu_var1"),
	  (assign, ":old_faction", "$g_notification_menu_var2"),
	  (str_store_troop_name, s4, ":defecting_lord"),
	  (str_store_faction_name, s5, ":old_faction"),
	  (store_faction_of_troop, ":new_faction", ":defecting_lord"),
	  (str_store_faction_name, s7, ":new_faction"),
	  (troop_get_type, reg4, ":defecting_lord"),
      (try_begin),
        (this_or_next|eq, reg4, tf_female_elf),
        (eq, reg4, tf_female),
        (assign, reg4, tf_female), 
      (else_try),
        (assign, reg4, tf_male), 
      (try_end),
	],
    [
      ("continue",[],"Continue",
       [
	   (change_screen_return),
        ]),
     ]
	),
	
	
  (
    "notification_treason_indictment",0,
    "Treason Indictment^^{s9}",
    "none",
    [
	  (assign, ":indicted_lord", "$g_notification_menu_var1"),
	  (assign, ":former_faction", "$g_notification_menu_var2"),
	  (faction_get_slot, ":former_faction_leader", ":former_faction", slot_faction_leader),
	  
	  #Set up string
	  (try_begin),
            (eq, ":indicted_lord", "trp_player"),
            (str_store_troop_name, s7, ":former_faction_leader"),
            (str_store_string, s9, "str_you_have_been_indicted_for_treason_to_s7_your_properties_have_been_confiscated_and_you_would_be_well_advised_to_flee_for_your_life"),
	  (else_try),	
            (str_store_troop_name, s4, ":indicted_lord"),
            (str_store_faction_name, s5, ":former_faction"),
            (str_store_troop_name, s6, ":former_faction_leader"),
        
            (troop_get_type, reg4, ":indicted_lord"),
      (try_begin),
        (this_or_next|eq, reg4, tf_female_elf),
        (eq, reg4, tf_female),
        (assign, reg4, tf_female), 
      (else_try),
        (assign, reg4, tf_male), 
      (try_end),
            (store_faction_of_troop, ":new_faction", ":indicted_lord"),
            (try_begin),
            	(is_between, ":new_faction", kingdoms_begin, kingdoms_end),
            	(str_store_faction_name, s10, ":new_faction"),
            	(str_store_string, s11, "str_with_the_s10"),
            (else_try),
            	(str_store_string, s11, "str_outside_calradia"),
            (try_end),
            (str_store_string, s9, "str_by_order_of_s6_s4_of_the_s5_has_been_indicted_for_treason_the_lord_has_been_stripped_of_all_reg4herhis_properties_and_has_fled_for_reg4herhis_life_he_is_rumored_to_have_gone_into_exile_s11"),
        (try_end),
	  
	  
	],
    [
      ("continue",[],"Continue",
       [
	   (change_screen_return),
        ]),
     ]
	),


	
  (
    "notification_border_incident",0,
    "Border incident^^Word reaches you that {s9}. Though you don't know whether or not the rumors are true, you do know one thing -- this seemingly minor incident has raised passions among the {s4}, making it easier for them to go to war against the {s3}, if they want it...",
    "none",
    [
	  (assign, ":acting_village", "$g_notification_menu_var1"),
	  (assign, ":target_village", "$g_notification_menu_var2"),
	  (store_faction_of_party, ":acting_faction", ":acting_village"),
	  
	  (try_begin),
            (eq, ":target_village", -1),
            (party_get_slot, ":target_faction", ":acting_village", slot_center_original_faction),
            (try_begin),
            	(this_or_next|eq, ":target_faction", ":acting_faction"),
                                      (neg|faction_slot_eq, ":target_faction", slot_faction_state, sfs_active),
            	(party_get_slot, ":target_faction", ":acting_village", slot_center_ex_faction),
            (try_end),

            (str_store_party_name, s1, ":acting_village"),
            (str_store_faction_name, s3, ":acting_faction"),
            (str_store_faction_name, s4, ":target_faction"),
            (faction_get_slot, ":target_leader", ":target_faction", slot_faction_leader),
            (str_store_troop_name, s5, ":target_leader"),
            
            (str_store_string, s9, "str_local_notables_from_s1_a_village_claimed_by_the_s4_have_been_mistreated_by_their_overlords_from_the_s3_and_petition_s5_for_protection"),
            (display_log_message, "@There has been an alleged border incident: {s9}"),
            
            (call_script, "script_add_log_entry", logent_border_incident_subjects_mistreated, ":acting_village", -1, -1, ":acting_faction"),
            
	
      (else_try),	
            (store_faction_of_party, ":target_faction", ":target_village"),
          
            (str_store_party_name, s1, ":acting_village"),
            (str_store_party_name, s2, ":target_village"),
              
            (store_random_in_range, ":random", 0, 3),
            (try_begin),
            	(eq, ":random", 0),

            	(str_store_string, s9, "str_villagers_from_s1_stole_some_cattle_from_s2"),
            	(display_log_message, "@There has been an alleged border incident: {s9}"),
            	
            	(call_script, "script_add_log_entry", logent_border_incident_cattle_stolen, ":acting_village", ":target_village", -1,":acting_faction"),
            	
            (else_try),
            	(eq, ":random", 1),

            	(str_store_string, s9, "str_villagers_from_s1_abducted_a_woman_from_a_prominent_family_in_s2_to_marry_one_of_their_boys"),
            	(display_log_message, "@There has been an alleged border incident: {s9}"),
            	
            	(call_script, "script_add_log_entry", logent_border_incident_bride_abducted, ":acting_village", ":target_village", -1, ":acting_faction"),
            (else_try),	
            	(eq, ":random", 2),
            	
            	(str_store_string, s9, "str_villagers_from_s1_killed_some_farmers_from_s2_in_a_fight_over_the_diversion_of_a_stream"),
            	(display_log_message, "@There has been an alleged border incident: {s9}"),
            	
                (call_script, "script_add_log_entry", logent_border_incident_villagers_killed, ":acting_village", ":target_village", -1,":acting_faction"),
            (try_end),
	  
	  (try_end),
	  
	  (str_store_faction_name, s3, ":acting_faction"),
	  (str_store_faction_name, s4, ":target_faction"),
	  
	  (store_add, ":slot_provocation_days", ":acting_faction", slot_faction_provocation_days_with_factions_begin),
	  (val_sub, ":slot_provocation_days", kingdoms_begin),
	  (faction_set_slot, ":target_faction", ":slot_provocation_days", 30),
	  
      ],
    [
      ("continue",[],"Continue",
       [
	   (change_screen_return),
        ]),
     ]
  ),
  
  
  
  
  (
    "notification_player_faction_active",0,
    "You now possess land in your name, without being tied to any kingdom. This makes you a monarch in your own right, with your court temporarily located at {s12}. However, the other kings in Calradia will at first consider you a threat, for if any upstart warlord can grab a throne, then their own legitimacy is called into question.^^You may find it desirable at this time to pledge yourself to an existing kingdom. If you want to continue as a sovereign monarch, then your first priority should be to establish an independent right to rule. You can establish your right to rule through several means -- marrying into a high-born family, recruiting new lords, governing your lands, treating with other kings, or dispatching your companions on missions.^^At any rate, your first step should be to appoint a chief minister from among your companions, to handle affairs of state. Different companions have different capabilities.^You may appoint new ministers from time to time. You may also change the location of your court, by speaking to the minister.",
    "none",
    [
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "fac_player_supporters_faction", pos0),
      (unlock_achievement, ACHIEVEMENT_CALRADIAN_TEA_PARTY),
      (play_track, "track_coronation"),
	  
	  (try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
	    (lt, "$g_player_court", walled_centers_begin),
        (store_faction_of_party, ":walled_center_faction", ":walled_center"),
	    (eq, ":walled_center_faction", "fac_player_supporters_faction"),
        (assign, "$g_player_court", ":walled_center"),
        
        (try_begin),
            (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
            (is_between, ":spouse", kingdom_ladies_begin, kingdom_ladies_end),
            (troop_set_slot, ":spouse", slot_troop_cur_center, "$g_player_court"),
        (try_end),
        
         (troop_get_slot, ":player_class", "trp_player", slot_troop_player_class),
         (try_begin),
           (le, ":player_class", 9),
           (troop_set_slot, "trp_player", slot_troop_player_class, 10),
         (try_end),
         (call_script,"script_change_player_effect", 100),
         
        (str_store_party_name, s12, "$g_player_court"),
	  (try_end),
	  
      ],
    [
      ("appoint_spouse",[
	  (troop_slot_ge, "trp_player", slot_troop_spouse, 1),
	  (troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
	  (neg|troop_slot_eq, ":player_spouse", slot_troop_occupation, slto_kingdom_hero),
	  (str_store_troop_name, s10, ":player_spouse"),
	  ],"Appoint your wife, {s10}...",
       [
	   (troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),
	   (assign, "$g_player_minister", ":player_spouse"),
	   (jump_to_menu, "mnu_minister_confirm"),
	   ]),
	 ]+

      [("appoint_npc"+str(x), [
	  (main_party_has_troop, "trp_npc"+str(x)),
	  (str_store_troop_name, s10, "trp_npc"+str(x)),
	  ],"Appoint {s10}", [
	   (assign, "$g_player_minister", "trp_npc"+str(x)),
	   (jump_to_menu, "mnu_minister_confirm"),
	  ]) for x in range (1, 16)]

  +[ ("appoint_default",[],"Appoint a prominent citizen from the area...",
       [
	   (assign, "$g_player_minister", "trp_temporary_minister"),
	   (troop_set_faction, "trp_temporary_minister", "fac_player_supporters_faction"),
	   (jump_to_menu, "mnu_minister_confirm"),
        ]),            	
     ]
  ),  

  (
    "minister_confirm",0,
    "{s9}can be found at your court in {s12}. You should consult periodically, to avoid the accumulation of unresolved issues that may sap your authority...",
    "none",
    [
    (try_begin),
        (eq, "$players_kingdom_name_set", 1),
        (change_screen_return),
    (try_end),
	  
	(try_begin),
        (eq, "$g_player_minister", "trp_temporary_minister"),
        (str_store_string, s9, "str_your_new_minister_"),
	(else_try),	
        (str_store_troop_name, s10, "$g_player_minister"),
        (str_store_string, s9, "str_s10_is_your_new_minister_and_"),
	(try_end),
	
	(try_begin),
        (main_party_has_troop, "$g_player_minister"),
        (remove_member_from_party, "$g_player_minister", "p_main_party"),
	(try_end),
	],
    [
      ("continue",[],"Continue...",
       [
         (start_presentation, "prsnt_name_kingdom"),
        ]),
     ]
  ),  
  
  
  
  (
  "notification_court_lost",0,
  "{s12}",
  "none",
  [
    (try_begin),
        (is_between, "$g_player_court", centers_begin, centers_end),
        (str_store_party_name, s10, "$g_player_court"),
        (str_store_party_name, s11, "$g_player_court"),
	(else_try),
        (str_store_string, s10, "str_your_previous_court_some_time_ago"),
        (str_store_string, s11, "str_your_previous_court_some_time_ago"),
	(try_end),	
	
	(assign, "$g_player_court", -1),
	(str_store_string, s14, "str_after_to_the_fall_of_s11_your_court_has_nowhere_to_go"),
	(try_begin),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
        (str_store_string, s14, "str_as_you_no_longer_maintain_an_independent_kingdom_you_no_longer_maintain_a_court"),
	(try_end),
	
	(try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
        (eq, "$g_player_court", -1),
    ##diplomacy begin
    (neg|party_slot_eq, ":walled_center", slot_village_infested_by_bandits, "trp_peasant_woman"),
    ##diplomacy end
        (store_faction_of_party, ":walled_center_faction", ":walled_center"),
        (eq, ":walled_center_faction", "fac_player_supporters_faction"),
        (neg|party_slot_ge, ":walled_center", slot_town_lord, active_npcs_begin),
        
        (assign, "$g_player_court", ":walled_center"),
        (try_begin),
            (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
            (is_between, ":spouse", kingdom_ladies_begin, kingdom_ladies_end),
            (troop_set_slot, ":spouse", slot_troop_cur_center, "$g_player_court"),
            (str_store_party_name, s11, "$g_player_court"),
        (try_end),
        
        (str_store_string, s14, "str_due_to_the_fall_of_s10_your_court_has_been_relocated_to_s12"),
	(try_end),

	(try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
        (eq, "$g_player_court", -1),
        
        (store_faction_of_party, ":walled_center_faction", ":walled_center"),
        (eq, ":walled_center_faction", "fac_player_supporters_faction"),
        
        (assign, "$g_player_court", ":walled_center"),
        
        (try_begin),
            (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
            (is_between, ":spouse", kingdom_ladies_begin, kingdom_ladies_end),
            (troop_set_slot, ":spouse", slot_troop_cur_center, "$g_player_court"),
        (try_end),

        (party_get_slot, ":town_lord", ":walled_center", slot_town_lord),
        (str_store_party_name, s11, "$g_player_court"),
        (str_store_troop_name, s9, ":town_lord"),
        (str_store_string, s14, "str_after_to_the_fall_of_s10_your_faithful_vassal_s9_has_invited_your_court_to_s11_"),
	(try_end),
	
	(try_begin),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
        (str_store_string, s14, "str_as_you_no_longer_maintain_an_independent_kingdom_you_no_longer_maintain_a_court"),
	(try_end),
	(str_store_string, s12, s14),
  ],
  [
      ("continue",[],"Continue...",[
	  (change_screen_return),
	  ]),
     ],
  ),
  
  
  
  (
    "notification_player_faction_deactive",0,
    "Your kingdom no longer holds any land.",
    "none",
    [
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "fac_player_supporters_faction", pos0),
      ],
    [
      ("continue",[],"Continue...",
       [
	   
	   (try_begin),
	   
	   
	   (try_end),
	   (assign, "$g_player_minister", -1),
	   (change_screen_return),
        ]),
     ]
  ),

  

  
  
  
  (
    "notification_player_wedding_day",mnf_scale_picture,
    "{s8} wishes to inform you that preparations for your wedding at {s10} have been complete, and that your presence is expected imminently .",
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        (str_store_troop_name, s8, "$g_notification_menu_var1"),
        (str_store_party_name, s10, "$g_notification_menu_var2"),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),  
  
  
  (
    "notification_player_kingdom_holds_feast",mnf_scale_picture,
    "{s11}",
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        
        (str_store_troop_name, s8, "$g_notification_menu_var1"),
        (store_faction_of_troop, ":host_faction", "$g_notification_menu_var1"),
        (str_store_faction_name, s9, ":host_faction"),
#        (str_store_faction_name, s9, "$players_kingdom"),
        (str_store_party_name, s10, "$g_notification_menu_var2"),
        
        (str_clear, s12),
        (try_begin),
            (check_quest_active, "qst_wed_betrothed"),
            (quest_get_slot, ":giver_troop", "qst_wed_betrothed", slot_quest_giver_troop),
            (store_faction_of_troop, ":giver_troop_faction", ":giver_troop"),
            (eq, ":giver_troop_faction", "$players_kingdom"),
            (str_store_string, s12, "str_feast_wedding_opportunity"),
        (try_end),
        
        
        
        (str_store_string, s11, "str_s8_wishes_to_inform_you_that_the_lords_of_s9_will_be_gathering_for_a_feast_at_his_great_hall_in_s10_and_invites_you_to_be_part_of_this_august_assembly"),
        (try_begin),
            (eq, "$g_notification_menu_var1", 0),
            (str_store_string, s11, "str_the_great_lords_of_your_kingdom_plan_to_gather_at_your_hall_in_s10_for_a_feast"),
        (try_end),
        (str_store_string, s11, "@{!}{s11}{s12}"),
        
        (try_begin),
            (ge, "$cheat_mode", 1),
            (store_current_hours, ":hours_since_last_feast"),
            (faction_get_slot, ":last_feast_start_time", "$players_kingdom", slot_faction_last_feast_start_time),
            (val_sub, ":hours_since_last_feast", ":last_feast_start_time"),        
            (assign, reg4, ":hours_since_last_feast"),
            (display_message, "@{!}DEBUG -- Hours since last feast started: {reg4}"),
        (try_end),
        
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),  
  
  
  (
    "notification_center_under_siege",0,
    "{s1} has been besieged by {s2} of {s3}!",
    "none",
    [
      (str_store_party_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
      (store_troop_faction, ":troop_faction", "$g_notification_menu_var2"),
      (str_store_faction_name, s3, ":troop_faction"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 62),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_center_note_mesh", "$g_notification_menu_var1", pos0),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),  

  (
    "notification_center_under_siege_special",0,
    "{s1} is under attack by {s2} of {s3}!",
    "none",
    [
      (str_store_party_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
      (store_troop_faction, ":troop_faction", "$g_notification_menu_var2"),
      (str_store_faction_name, s3, ":troop_faction"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 62),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_center_note_mesh", "$g_notification_menu_var1", pos0),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),  

  (
    "notification_village_raided",0,
    "Enemies have Laid Waste to a Fief^^{s1} has been raided by {s2} of {s3}!",
    "none",
    [
      (str_store_party_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
      (store_troop_faction, ":troop_faction", "$g_notification_menu_var2"),
      (str_store_faction_name, s3, ":troop_faction"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 62),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_center_note_mesh", "$g_notification_menu_var1", pos0),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),  

  (
    "notification_village_raid_started",0,
    "Your Village is under Attack!^^{s2} of {s3} is laying waste to {s1}.",
    "none",
    [
      (str_store_party_name, s1, "$g_notification_menu_var1"),
      (str_store_troop_name, s2, "$g_notification_menu_var2"),
      (store_troop_faction, ":troop_faction", "$g_notification_menu_var2"),
      (str_store_faction_name, s3, ":troop_faction"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 62),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_center_note_mesh", "$g_notification_menu_var1", pos0),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),

  (
    "notification_one_faction_left",0,
    "Calradia Conquered by One Kingdom^^{s1} has defeated all rivals and stands as the sole kingdom.",
    "none",
    [
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (try_begin),
        (is_between, "$g_notification_menu_var1", "fac_kingdom_1", kingdoms_end), #Excluding player kingdom
        (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_for_menu", "$g_notification_menu_var1", pos0),
      (else_try),
        (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      (try_end),
	  (try_begin),
        (faction_slot_eq, "$g_notification_menu_var1", slot_faction_leader, "trp_player"),
        (unlock_achievement, ACHIEVEMENT_THE_GOLDEN_THRONE),
	  (else_try),
        (unlock_achievement, ACHIEVEMENT_MANIFEST_DESTINY),
	  (try_end),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),
  
  (
    "notification_oath_renounced_faction_defeated",0,
    "Your Old Faction was Defeated^^You won the battle against {s1}! This ends your struggle which started after you renounced your oath to them.",
    "none",
    [
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (try_begin),
        (is_between, "$g_notification_menu_var1", "fac_kingdom_1", kingdoms_end), #Excluding player kingdom
        (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_for_menu", "$g_notification_menu_var1", pos0),
      (else_try),
        (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      (try_end),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),

  (
    "notification_center_lost",0,
    "An Estate was Lost^^You have lost {s1} to {s2}.",
    "none",
    [
      (str_store_party_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 62),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_center_note_mesh", "$g_notification_menu_var1", pos0),
      (call_script,"script_change_player_effect", -100),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),
  (
    "notification_center_sacked",0,
    "An Estate was Sacked^^{s1} was sacked by the {s2}.",
    "none",
    [
      (str_store_party_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 62),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_center_note_mesh", "$g_notification_menu_var1", pos0),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),

  (
    "notification_troop_left_players_faction",0,
    "Betrayal!^^{s1} has left {s2} and joined {s3}.",
    "none",
    [
      (str_store_troop_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$players_kingdom"),
      (str_store_faction_name, s3, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 55),
      (position_set_y, pos0, 20),
      (position_set_z, pos0, 100),
      (set_game_menu_tableau_mesh, "tableau_troop_note_mesh", "$g_notification_menu_var1", pos0),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),

  (
    "notification_troop_joined_players_faction",0,
    "Good news!^^ {s1} has left {s2} and joined {s3}.",
    "none",
    [
      (str_store_troop_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
      (str_store_faction_name, s3, "$players_kingdom"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 55),
      (position_set_y, pos0, 20),
      (position_set_z, pos0, 100),
      (set_game_menu_tableau_mesh, "tableau_troop_note_mesh", "$g_notification_menu_var1", pos0),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),

  (
    "notification_war_declared",0,
    "Declaration of War^^{s1} has declared war against {s2}!",
    "none",
    [

#	  (try_begin),
#        (eq, "$g_include_diplo_explanation", "$g_notification_menu_var1"),
#        (assign, "$g_include_diplo_explanation", 0),
#        (str_store_string, s57, "$g_notification_menu_var1"),
#	  (else_try),
#	    (str_clear, s57),
#	  (try_end),

	
	#to do the reason, have war_damage = 0 yield pre-war reasons
      (try_begin),
#        (eq, "$g_notification_menu_var1", "fac_player_supporters_faction"),
#        (str_store_faction_name, s1, "$g_notification_menu_var2"),
#        (str_store_string, s2, "@you"),
#      (else_try),
#        (eq, "$g_notification_menu_var2", "fac_player_supporters_faction"),
#        (str_store_faction_name, s1, "$g_notification_menu_var1"),
#        (str_store_string, s2, "@you"),
#      (else_try),
        (str_store_faction_name, s1, "$g_notification_menu_var1"),
        (str_store_faction_name, s2, "$g_notification_menu_var2"),
      (try_end),
	  
	  
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (store_sub, ":faction_1", "$g_notification_menu_var1", kingdoms_begin),
      (store_sub, ":faction_2", "$g_notification_menu_var2", kingdoms_begin),
      (val_mul, ":faction_1", 128),
      (val_add, ":faction_1", ":faction_2"),
      (set_game_menu_tableau_mesh, "tableau_2_factions_mesh", ":faction_1", pos0),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),

  (
    "notification_peace_declared",0,
    "Peace Agreement^^{s1} and {s2} have made peace!^{s57}",
    "none",
    [

	  (try_begin),
        (eq, 1, 0), #Alas, this does not seem to work
        (eq, "$g_include_diplo_explanation", "$g_notification_menu_var1"),
        (assign, "$g_include_diplo_explanation", 0),
	  (else_try),
	    (str_clear, s57),
	  (try_end),
	
	  (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (store_sub, ":faction_1", "$g_notification_menu_var1", kingdoms_begin),
      (store_sub, ":faction_2", "$g_notification_menu_var2", kingdoms_begin),
      (val_mul, ":faction_1", 128),
      (val_add, ":faction_1", ":faction_2"),
      (set_game_menu_tableau_mesh, "tableau_2_factions_mesh", ":faction_1", pos0),
      ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),

  
  (
    "notification_faction_defeated",0,
    "Faction Eliminated^^{s1} is no more!",
    "none",
    [
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (try_begin),
        (is_between, "$g_notification_menu_var1", "fac_kingdom_1", kingdoms_end), #Excluding player kingdom
        (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_for_menu", "$g_notification_menu_var1", pos0),
      (else_try),
        (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      (try_end),
      ],
    [
      ("continue",[],"Continue...",
       [
         (try_begin),
           (is_between, "$supported_pretender", pretenders_begin, pretenders_end),
           (troop_slot_eq, "$supported_pretender", slot_troop_original_faction, "$g_notification_menu_var1"),
           
           #All rebels switch to kingdom
           (try_for_range, ":cur_troop", active_npcs_begin, active_npcs_end),
           (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
             (store_troop_faction, ":cur_faction", ":cur_troop"),
             (eq, ":cur_faction", "fac_player_supporters_faction"),
             (troop_set_faction, ":cur_troop", "$g_notification_menu_var1"),
             (call_script, "script_troop_set_title_according_to_faction", ":cur_troop", "$g_notification_menu_var1"),
             (try_begin),
               (this_or_next|eq, "$g_notification_menu_var1", "$players_kingdom"),
               (eq, "$g_notification_menu_var1", "fac_player_supporters_faction"),
               (call_script, "script_check_concilio_calradi_achievement"),
             (try_end),
           (else_try), #all loyal lords gain a small bonus with the player	 
             (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
             (store_troop_faction, ":cur_faction", ":cur_troop"),
             (eq, ":cur_faction", "$g_notification_menu_var1"),
             (call_script, "script_troop_change_relation_with_troop", ":cur_troop", "trp_player", 5),
           (try_end),
           
           (try_for_parties, ":cur_party"),
             (store_faction_of_party, ":cur_faction", ":cur_party"),
             (eq, ":cur_faction", "fac_player_supporters_faction"),
             (party_set_faction, ":cur_party", "$g_notification_menu_var1"),
           (try_end),
           
           (assign, "$players_kingdom", "$g_notification_menu_var1"),
           (try_begin),
             (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
             (is_between, ":spouse", kingdom_ladies_begin, kingdom_ladies_end),
             (troop_set_faction, ":spouse", "$g_notification_menu_var1"),
           (try_end),
           
           
           (call_script, "script_add_notification_menu", "mnu_notification_rebels_switched_to_faction", "$g_notification_menu_var1", "$supported_pretender"),
           
           (faction_set_slot, "$g_notification_menu_var1", slot_faction_state, sfs_active),
           (faction_set_slot, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
           
           (faction_get_slot, ":old_leader", "$g_notification_menu_var1", slot_faction_leader),
           (troop_set_slot, ":old_leader", slot_troop_change_to_faction, "fac_commoners"),
           
           (faction_set_slot, "$g_notification_menu_var1", slot_faction_leader, "$supported_pretender"),
           (troop_set_faction, "$supported_pretender", "$g_notification_menu_var1"),

           (faction_get_slot, ":old_marshall", "$g_notification_menu_var1", slot_faction_marshall),
           (try_begin),
             (ge, ":old_marshall", 0),
             (troop_get_slot, ":old_marshall_party", ":old_marshall", slot_troop_leaded_party),
             (party_is_active, ":old_marshall_party"),
             (party_set_marshall, ":old_marshall_party", 0),
           (try_end),  

           (faction_set_slot, "$g_notification_menu_var1", slot_faction_marshall, "trp_player"),
           (faction_set_slot, "$g_notification_menu_var1", slot_faction_ai_state, sfai_default),
           (faction_set_slot, "$g_notification_menu_var1", slot_faction_ai_object, -1),
           (troop_set_slot, "$supported_pretender", slot_troop_occupation, slto_kingdom_hero),
           (troop_set_slot, "$supported_pretender", slot_troop_renown, 1000),
           
           (party_remove_members, "p_main_party", "$supported_pretender", 1),
           (call_script, "script_set_player_relation_with_faction", "$g_notification_menu_var1", 0),
           (try_for_range, ":cur_kingdom", kingdoms_begin, kingdoms_end),
             (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
             (neq, ":cur_kingdom", "$g_notification_menu_var1"),
             (store_relation, ":reln", ":cur_kingdom", "fac_player_supporters_faction"),
             (set_relation, ":cur_kingdom", "$g_notification_menu_var1", ":reln"),
           (try_end),
           (assign, "$supported_pretender", 0),
           (assign, "$supported_pretender_old_faction", 0),
           (assign, "$g_recalculate_ais", 1),
           (call_script, "script_update_all_notes"),
         (try_end),
         (change_screen_return),
        ]),
     ]
  ),

  
## CC
  (
    "notification_kingdom_restoration",0,
    "Restoration^^{s10} and another {reg1} lords have renounced their allegiance to their current faction and restorated their home kingdom: {s11}. Their leader, {s9} will also come back.",
    "none",
    [
      (faction_get_slot, ":original_king", "$g_notification_menu_var1", slot_faction_leader),
      (str_store_troop_name, s9, ":original_king"),
      
      (assign, ":num_lords_sub_one", -1),
      (try_for_range, ":cur_troop", lords_begin, lords_end),
        (troop_get_slot, ":troop_original_faction", ":cur_troop", slot_troop_original_faction),
        (eq, ":troop_original_faction", "$g_notification_menu_var1"),
        (store_troop_faction, ":troop_cur_faction", ":cur_troop"),
        (neq, ":troop_cur_faction", "fac_player_supporters_faction"), # player's faction is not include 
        (store_relation, ":cur_relation", ":troop_cur_faction", "$g_notification_menu_var2"),
        (this_or_next|eq, ":troop_cur_faction", "$g_notification_menu_var2"),
        (this_or_next|eq, ":troop_cur_faction", "$g_notification_menu_var1"),
        (this_or_next|eq, ":troop_cur_faction", "fac_outlaws"),
        (lt, ":cur_relation", 0),
        (call_script, "script_change_troop_faction", ":cur_troop", "$g_notification_menu_var1"),
        (troop_set_slot, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
        
        # add wealth
        (troop_get_slot, ":cur_wealth", ":cur_troop", slot_troop_wealth),
        (val_add, ":cur_wealth", 5000),
        (troop_set_slot, ":cur_troop", slot_troop_wealth, ":cur_wealth"),
        
        # add relation
        (call_script, "script_troop_get_relation_with_troop", ":cur_troop", ":original_king"),
        (store_add, ":new_relation", reg0, 30),
        (val_clamp, ":new_relation", 10, 101),
        (store_add, ":troop1_slot_for_troop2", ":cur_troop", slot_troop_relations_begin),
        (troop_set_slot, ":cur_troop", ":troop1_slot_for_troop2", ":new_relation"),
        (store_add, ":troop2_slot_for_troop1", ":original_king", slot_troop_relations_begin),
        (troop_set_slot, ":original_king", ":troop2_slot_for_troop1", ":new_relation"),
        
        (troop_set_slot, ":cur_troop", slot_troop_spawned_before, 0),
        (val_add, ":num_lords_sub_one", 1),
        (try_begin),
          (eq, ":num_lords_sub_one", 0),
          (str_store_troop_name, s10, ":cur_troop"),
        (try_end),
      (try_end),
      (troop_set_slot, ":original_king", slot_troop_spawned_before, 0),
      (assign, reg1, ":num_lords_sub_one"),

      ## redistribute centers to lords and kings
      (call_script, "script_redistribute_centers_of_faction", "$g_notification_menu_var1"),
      
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_for_menu", "$g_notification_menu_var1", pos0),
      
      (str_store_faction_name, s11, "$g_notification_menu_var1"), # restored faction
      (str_store_faction_name, s12, "$g_notification_menu_var2"), # fitful faction
      ],
    [
      ("continue",[],"Continue...", 
        [
          ## start peace
          (try_for_range, ":cur_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
            (neq, ":cur_kingdom", "$g_notification_menu_var1"),
            (neq, ":cur_kingdom", "$g_notification_menu_var2"),
            (call_script, "script_diplomacy_start_peace_between_kingdoms", ":cur_kingdom", "$g_notification_menu_var1", 0),
            (call_script, "script_set_truce_and_provocation_days", ":cur_kingdom", "$g_notification_menu_var1", 0, 0),
            (call_script, "script_set_truce_and_provocation_days", "$g_notification_menu_var1", ":cur_kingdom", 0, 0),
          (try_end),
          ## start war
          (call_script, "script_diplomacy_start_war_between_kingdoms", "$g_notification_menu_var1", "$g_notification_menu_var2", 1),
          (call_script, "script_update_all_notes"),
          ## CC
          (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
            (neq, ":faction_no", "fac_player_supporters_faction"),
            (store_relation, ":player_relation", ":faction_no", "fac_player_supporters_faction"),
            (set_relation, ":faction_no", "fac_player_faction", ":player_relation"),
          (try_end),
          ## CC
          (change_screen_return),
        ]),
     ]
  ),
## CC
  (
    "notification_rebels_switched_to_faction",0,
    "Rebellion Success^^ Your rebellion is victorious! Your faction now has the sole claim to the title of {s11}, with {s12} as the single ruler.",
    "none",
    [
      (str_store_faction_name, s11, "$g_notification_menu_var1"),
      (str_store_troop_name, s12, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (try_begin),
        (is_between, "$g_notification_menu_var1", "fac_kingdom_1", kingdoms_end), #Excluding player kingdom
        (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_for_menu", "$g_notification_menu_var1", pos0),
      (else_try),
        (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      (try_end),
      ],
    [
      ("continue",[],"Continue...",
       [
         (assign, "$talk_context", tc_rebel_thanks),
         (start_map_conversation, "$g_notification_menu_var2", -1),
         (change_screen_return),
        ]),
     ]
  ),


  (
    "notification_player_should_consult",0,
    "Your minister send words that there are problems brewing in the realm which, if left untreated, could sap your authority. You should consult with him at your earliest convenience",
    "none",
    [
      ],
    [
      ("continue",[],"Continue...",
       [
	    (setup_quest_text, "qst_consult_with_minister"),

        (str_store_troop_name, s11, "$g_player_minister"),
        (str_store_party_name, s12, "$g_player_court"),
	   
        (str_store_string, s2, "str_consult_with_s11_at_your_court_in_s12"),
	    (call_script, "script_start_quest", "qst_consult_with_minister", -1),
        
        
        (quest_set_slot, "qst_consult_with_minister", slot_quest_expiration_days, 30),
        (quest_set_slot, "qst_consult_with_minister", slot_quest_giver_troop, "$g_player_minister"),


	    (change_screen_return),
        ]),
     ]
  ),






  
  (
    "notification_player_feast_in_progress",0,
    "Feast in Preparation^^Your wife has started preparations for a feast in your hall in {s11}",
    "none",
    [
    (str_store_party_name, s11, "$g_notification_menu_var1"),
    ],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),
  

  (
    "notification_lady_requests_visit",0, #add this once around seven days after the last visit, or three weeks, or three months
    "An elderly woman approaches your party and passes one of your men a letter, sealed in plain wax. It is addressed to you. When you break the seal, you see it is from {s15}. It reads, 'I so enjoyed your last visit. {s14} I am currently in {s10}.{s12}'",
    "none",
    [

	  (assign, ":lady_no", "$g_notification_menu_var1"),
	  (assign, ":center_no", "$g_notification_menu_var2"),

      (str_store_troop_name, s15, ":lady_no"),
      (str_store_party_name, s10, ":center_no"),
	  
	  (store_current_hours, ":hours_since_last_visit"),
	  (troop_get_slot, ":last_visit_hours", ":lady_no", slot_troop_last_talk_time),
	  (val_sub, ":hours_since_last_visit", ":last_visit_hours"),
	  
	  (call_script, "script_get_kingdom_lady_social_determinants", ":lady_no"),
	  (assign, ":lady_guardian", reg0),
	  
	  (str_store_troop_name, s16, ":lady_guardian"),
	  (call_script, "script_troop_get_family_relation_to_troop", ":lady_guardian", ":lady_no"),
	  
	  (str_clear, s14), 
	  (try_begin),
	    (lt, ":hours_since_last_visit", 336),
        (try_begin),
            (troop_slot_eq, ":lady_no", slot_lord_reputation_type, lrep_otherworldly),
            (str_store_string, s14, "str_as_brief_as_our_separation_has_been_the_longing_in_my_heart_to_see_you_has_made_it_seem_as_many_years"),
        (else_try),
            (str_store_string, s14, "str_although_it_has_only_been_a_short_time_since_your_departure_but_i_would_be_most_pleased_to_see_you_again"),
        (try_end),
	  (else_try),
	    (ge, ":hours_since_last_visit", 336),
        (try_begin),
            (troop_slot_eq, ":lady_no", slot_lord_reputation_type, lrep_ambitious),
            (str_store_string, s14, "str_although_i_have_received_no_word_from_you_for_quite_some_time_i_am_sure_that_you_must_have_been_very_busy_and_that_your_failure_to_come_see_me_in_no_way_indicates_that_your_attentions_to_me_were_insincere_"),
        (else_try),
            (troop_slot_eq, ":lady_no", slot_lord_reputation_type, lrep_moralist),
            (str_store_string, s14, "str_i_trust_that_you_have_comported_yourself_in_a_manner_becoming_a_gentleman_during_our_long_separation_"),
        (else_try),
            (str_store_string, s14, "str_it_has_been_many_days_since_you_came_and_i_would_very_much_like_to_see_you_again"),
	    (try_end),
	  (try_end),

	  
	  (str_clear, s12), 
	  (str_clear, s18),
	  (try_begin),
	    (troop_slot_eq, ":lady_guardian", slot_lord_granted_courtship_permission, 0),
        (str_store_string, s12, "str__you_should_ask_my_s11_s16s_permission_but_i_have_no_reason_to_believe_that_he_will_prevent_you_from_coming_to_see_me"),
        (str_store_string, s18, "str__you_should_first_ask_her_s11_s16s_permission"),
	  (else_try),
	    (troop_slot_eq, ":lady_guardian", slot_lord_granted_courtship_permission, -1),
        (str_store_string, s12, "str__alas_as_we_know_my_s11_s16_will_not_permit_me_to_see_you_however_i_believe_that_i_can_arrange_away_for_you_to_enter_undetected"),
	  (else_try),
	    (troop_slot_eq, ":lady_guardian", slot_lord_granted_courtship_permission, 1),
        (str_store_string, s12, "str__as_my_s11_s16_has_already_granted_permission_for_you_to_see_me_i_shall_expect_your_imminent_arrival"),
	  (try_end),

      ],
    [
	
      ("continue_visit_yes",[],"Tell the woman to inform her mistress that you will come shortly", ## CC
       [

     	(assign, ":lady_to_visit", "$g_notification_menu_var1"),
	    (str_store_troop_name_link, s3, ":lady_to_visit"),
	    (str_store_party_name_link, s4, "$g_notification_menu_var2"),
        
        (str_store_string, s2, "str_visit_s3_who_was_last_at_s4s18"),
	    (call_script, "script_start_quest", "qst_visit_lady", ":lady_to_visit"),
        (quest_set_slot, "qst_visit_lady", slot_quest_giver_troop, ":lady_to_visit"), #don't know why this is necessary
        
        (try_begin),
            (eq, "$cheat_mode", 1),
            (quest_get_slot, ":giver_troop", "qst_visit_lady", slot_quest_giver_troop),
            (str_store_troop_name, s2, ":giver_troop"),
            (display_message, "str_giver_troop_=_s2"),
        (try_end),	
        
        (quest_set_slot, "qst_visit_lady", slot_quest_expiration_days, 30),
	    (change_screen_return),
        ]),
	
      ("continue_visit_no",[],"Tell the woman to inform her mistress that you are indisposed", ## CC
       [
	    (troop_set_slot, "$g_notification_menu_var1", slot_lady_no_messages, 1),
	    (change_screen_return),
        ]),
     ]
  ),

  
  
  ( #pre lady visit
    "garden",0,
    "{s12}",
    "none",
    [
	
    (call_script, "script_get_kingdom_lady_social_determinants", "$love_interest_in_town"),
	(assign, ":guardian_lord", reg0),
	(str_store_troop_name, s11, "$love_interest_in_town"),
	
	(try_begin),
        (call_script, "script_npc_decision_checklist_male_guardian_assess_suitor", ":guardian_lord", "trp_player"),
        (lt, reg0, 0),
        (troop_set_slot, ":guardian_lord", slot_lord_granted_courtship_permission, -1),
	(try_end),
	
	(assign, "$nurse_assists_entry", 0),
	(try_begin),
        (troop_slot_eq, ":guardian_lord", slot_lord_granted_courtship_permission, 1),
        (str_store_string, s12, "str_the_guards_at_the_gate_have_been_ordered_to_allow_you_through_you_might_be_imagining_things_but_you_think_one_of_them_may_have_given_you_a_wink"),
	(else_try), #the circumstances under which the lady arranges for a surreptitious entry
        (call_script, "script_troop_get_relation_with_troop", "trp_player", "$love_interest_in_town"),
        (gt, reg0, 0),
        
        (assign, ":player_completed_quest", 0),
        (try_begin),
            (check_quest_active, "qst_visit_lady"),
            (quest_slot_eq, "qst_visit_lady", slot_quest_giver_troop, "$love_interest_in_town"),
            (assign, ":player_completed_quest", 1),
        (else_try),
            (check_quest_active, "qst_formal_marriage_proposal"),
            (quest_slot_eq, "qst_formal_marriage_proposal", slot_quest_giver_troop, "$love_interest_in_town"),
            (this_or_next|check_quest_succeeded, "qst_formal_marriage_proposal"),
            	(check_quest_failed, "qst_formal_marriage_proposal"),
            (assign, ":player_completed_quest", 1),
        (else_try),
            (check_quest_active, "qst_duel_courtship_rival"),
            (quest_slot_eq, "qst_duel_courtship_rival", slot_quest_giver_troop, "$love_interest_in_town"),
            (this_or_next|check_quest_succeeded, "qst_duel_courtship_rival"),
            	(check_quest_failed, "qst_duel_courtship_rival"),
            (assign, ":player_completed_quest", 1),
        (try_end),

        (try_begin),
            (store_current_hours, ":hours_since_last_visit"),
            (troop_get_slot, ":last_visit_time", "$love_interest_in_town", slot_troop_last_talk_time),
            (val_sub, ":hours_since_last_visit", ":last_visit_time"),
            (this_or_next|ge, ":hours_since_last_visit", 96), #at least four days
            	(eq, ":player_completed_quest", 1),
            	
            (try_begin),
            	(is_between, "$g_encountered_party", towns_begin, towns_end),
            	(str_store_string, s12, "str_the_guards_glare_at_you_and_you_know_better_than_to_ask_permission_to_enter_however_as_you_walk_back_towards_your_lodgings_an_elderly_lady_dressed_in_black_approaches_you_i_am_s11s_nurse_she_whispers_urgently_don_this_dress_and_throw_the_hood_over_your_face_i_will_smuggle_you_inside_the_castle_to_meet_her_in_the_guise_of_a_skullery_maid__the_guards_will_not_look_too_carefully_but_i_beg_you_for_all_of_our_sakes_be_discrete"),
            	(assign, "$nurse_assists_entry", 1),
            (else_try),
            	(str_store_string, s12, "str_the_guards_glare_at_you_and_you_know_better_than_to_ask_permission_to_enter_however_as_you_walk_back_towards_your_lodgings_an_elderly_lady_dressed_in_black_approaches_you_i_am_s11s_nurse_she_whispers_urgently_wait_for_a_while_by_the_spring_outside_the_walls_i_will_smuggle_her_ladyship_out_to_meet_you_dressed_in_the_guise_of_a_shepherdess_but_i_beg_you_for_all_of_our_sakes_be_discrete"),
            	(assign, "$nurse_assists_entry", 2),
            (try_end),
        (else_try),	
            (str_store_string, s12, "str_the_guards_glare_at_you_and_you_know_better_than_to_ask_permission_to_enter_however_as_you_walk_back_towards_your_lodgings_an_elderly_lady_dressed_in_black_approaches_you_i_am_s11s_nurse_she_whispers_urgently_her_ladyship_asks_me_to_say_that_yearns_to_see_you_but_that_you_should_bide_your_time_a_bit_her_ladyship_says_that_to_arrange_a_clandestine_meeting_so_soon_after_your_last_encounter_would_be_too_dangerous"),
        (try_end),
	(else_try),
        (str_store_string, s12, "str_the_guards_glare_at_you_and_you_know_better_than_to_ask_permission_to_enter"),
	(try_end),
	
	],
    [

	("enter",
	[
    (call_script, "script_get_kingdom_lady_social_determinants", "$love_interest_in_town"),
	(troop_slot_eq, reg0, slot_lord_granted_courtship_permission, 1)
	], "Enter",
	[
	(jump_to_menu, "mnu_town"),
	(call_script, "script_setup_meet_lady", "$love_interest_in_town", "$g_encountered_party"),
	]
	),
     
	("nurse_1", ## CC
	[
    (eq, "$nurse_assists_entry", 1),
	], "Go with the nurse",
	[
	(jump_to_menu, "mnu_town"),
	(call_script, "script_setup_meet_lady", "$love_interest_in_town", "$g_encountered_party"),
	]
	),

	
	("nurse_2", ## CC
	[
    (eq, "$nurse_assists_entry", 2),
	], "Wait by the spring",
	[
	(jump_to_menu, "mnu_town"),
	(call_script, "script_setup_meet_lady", "$love_interest_in_town", "$g_encountered_party"),
	]
	),
	
	("leave",
	[], 
	"Leave",
	[(jump_to_menu, "mnu_town")]),

    ]
 
	 
  ),
  
  
    (
    "kill_local_merchant_begin",0,
    "You spot your victim and follow him, observing as he turns a corner into a dark alley.\
 This will surely be your best opportunity to attack him.",
    "none",
    [
    ],
    [
      ("continue",[],"Continue...",
       [(set_jump_mission,"mt_back_alley_kill_local_merchant"),
        (party_get_slot, ":town_alley", "$qst_kill_local_merchant_center", slot_town_alley),
        (modify_visitors_at_site,":town_alley"),
        (reset_visitors),
        (set_visitor, 0, "trp_player"),
        (set_visitor, 1, "trp_local_merchant"),
        (jump_to_menu, "mnu_town"),
        (jump_to_scene,":town_alley"),
        (change_screen_mission),
        ]),
     ]
  ),

  
    (
    "debug_alert_from_s65",0,
    "DEBUG ALERT: {s65}",
    "none",
    [
    ],
    [
      ("continue",[],"Continue...",
       [
        (assign, "$debug_message_in_queue", 0),
        (change_screen_return),
        ]),
     ]
  ),
      
  (
    "auto_return_to_map",0,
    "stub",
    "none",
    [(change_screen_map)],
    []
  ),

    (
    "bandit_lair",0,
    "{s3}",
    "none",
    [
      (try_begin),
        (eq, "$loot_screen_shown", 1),
        
        (try_for_range, ":bandit_template", bandit_party_template_begin, bandit_party_template_end), ## CC
          (party_template_slot_eq, ":bandit_template", slot_party_template_lair_party, "$g_encountered_party"),
          (party_template_set_slot, ":bandit_template", slot_party_template_lair_party, 0),
        (try_end),
        
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          (party_get_template_id, ":template", "$g_encountered_party"),  
          (try_begin),
            (is_between, ":template", "pt_farm", "pt_bandit_lair_templates_end"),
            (party_get_slot, ":bound_center", "$g_encountered_party", slot_village_bound_center),
            (party_set_slot, ":bound_center", slot_center_lair_build_type, 0),
            (party_set_extra_text,  ":bound_center", "str_empty_string"),
          (try_end),
          (neq, ":template", "pt_looter_lair"),
          (remove_party, "$g_encountered_party"),
        (try_end),  
        (assign, "$g_mt_mode", 0),
        (assign, "$g_leave_encounter", 0),
        (change_screen_return),
        
      (else_try),        
        (party_stack_get_troop_id, ":bandit_type", "$g_encountered_party", 0),
        (str_store_troop_name_plural, s4, ":bandit_type"),
        (str_store_string, s5, "str_bandit_approach_defile"),
                
        (try_begin),
          (this_or_next|eq, ":bandit_type", "trp_marinid_camel_2"),
          (eq, ":bandit_type", "trp_desert_bandit"),
          (str_store_string, s5, "str_bandit_approach_defile"),
        (else_try),
          (this_or_next|eq, ":bandit_type", "trp_teutonic_sword"),
          (eq, ":bandit_type", "trp_mountain_bandit"),
          (str_store_string, s5, "str_bandit_approach_cliffs"),
        (else_try),
          (eq, ":bandit_type", "trp_forest_bandit"),
          (str_store_string, s5, "str_bandit_approach_swamp"),
        (else_try),
          (this_or_next|eq, ":bandit_type", "trp_rus_cossack"),
          (eq, ":bandit_type", "trp_taiga_bandit"),
          (str_store_string, s5, "str_bandit_approach_swamp"),
        (else_try),
          (eq, ":bandit_type", "trp_steppe_bandit"),
          (str_store_string, s5, "str_bandit_approach_thickets"),
        (else_try),
          (this_or_next|eq, ":bandit_type", "trp_nord_raider"),
          (eq, ":bandit_type", "trp_nord_warrior"),
          (str_store_string, s5, "str_bandit_approach_cove"),
        (try_end),
      
        (party_get_template_id, ":template", "$g_encountered_party"),
        (try_begin),
          (this_or_next|eq, ":template", "pt_camel_cavalry_lair"),
          (eq, ":template", "pt_desert_bandit_lair"),
          (str_store_string, s5, "str_bandit_approach_defile"),
        (else_try),
          (this_or_next|eq, ":template", "pt_dark_knight_lair"),
          (eq, ":template", "pt_mountain_bandit_lair"),
          (str_store_string, s5, "str_bandit_approach_cliffs"),
        (else_try),
          (this_or_next|eq, ":template", "pt_forest_ranger_lair"),
          (eq, ":template", "pt_forest_bandit_lair"),
          (str_store_string, s5, "str_bandit_approach_swamp"),
        (else_try),
          (this_or_next|eq, ":template", "pt_cossack_lair"),
          (eq, ":template", "pt_taiga_bandit_lair"),
          (str_store_string, s5, "str_bandit_approach_swamp"),
        (else_try),
          (eq, ":template", "pt_steppe_bandit_lair"),
          (str_store_string, s5, "str_bandit_approach_thickets"),
        (else_try),
        
          (this_or_next|eq, ":template", "pt_norman_cavalry_lair"),
          (eq, ":template", "pt_sea_raider_lair"),
          (str_store_string, s5, "str_bandit_approach_cove"),
        (else_try),
          (eq, ":template", "pt_nomad_tent"),
          (call_script,"script_get_village_type","$g_encountered_party"),
          (assign,":village_type",reg0),
          (try_begin),
            (eq,":village_type",snow_village),
            (str_store_troop_name_plural, s4, "trp_rus_cossack_1"),
            (str_store_string, s5, "str_bandit_approach_swamp"),
          (else_try),
            (eq,":village_type",desert_village),
            (str_store_troop_name_plural, s4, "trp_saracen_cav_1"),
            (str_store_string, s5, "str_bandit_approach_defile"),
          (else_try),
            #(eq,":village_type",steppe_village),
            (str_store_troop_name_plural, s4, "trp_steppe_tribesman"),
            (str_store_string, s5, "str_bandit_approach_thickets"),
          (try_end),
        (else_try),
          (eq, ":template", "pt_rogue_hideout"),
          (call_script,"script_get_village_type","$g_encountered_party"),
          (assign,":village_type",reg0),
          (party_get_position, pos4, "$g_encountered_party"),
          (position_get_z, ":elevation", pos4),
          (try_begin),
            (gt, ":elevation", 125),
            (str_store_troop_name_plural, s4, "trp_strange_warrior"),
            (str_store_string, s5, "str_bandit_approach_cliffs"),
          (else_try),
            (eq,":village_type",plain_village),
            (str_store_troop_name_plural, s4, "trp_forest_brigand"),
            (str_store_string, s5, "str_bandit_approach_swamp"),
          (else_try),
            (eq,":village_type",snow_village),
            (str_store_troop_name_plural, s4, "trp_taiga_bandit"),
            (str_store_string, s5, "str_bandit_approach_swamp"),
          (else_try),
            (eq,":village_type",steppe_village),
            (str_store_troop_name_plural, s4, "trp_black_khergit_horseman"),
            (str_store_string, s5, "str_bandit_approach_thickets"),
          (else_try),
            #(eq,":village_type",desert_village),
            (str_store_troop_name_plural, s4, "trp_bedouin_camel_gunnner"),
            (str_store_string, s5, "str_bandit_approach_defile"),
          (try_end),
        (else_try),
          (eq, ":template", "pt_wolf_pen"),
          (call_script,"script_get_village_type","$g_encountered_party"),
          (assign,":village_type",reg0),
          (str_store_string, s5, "str_bandit_approach_cove"),
        (else_try),
          (this_or_next|eq, ":template", "pt_gobin_slum"),
          (eq, ":template", "pt_graveyard"),
          (str_store_string, s5, "str_bandit_approach_thickets"),
        (else_try),
          (this_or_next|eq, ":template", "pt_elf_homestead"),
          (eq, ":template", "pt_treant_alcove"),
          (str_store_string, s5, "str_bandit_approach_swamp"),
        (else_try),
          (this_or_next|eq, ":template", "pt_ogre_fort"),
          (this_or_next|eq, ":template", "pt_vampire_estate"),
          (this_or_next|eq, ":template", "pt_clan_halls"),
          (this_or_next|eq, ":template", "pt_dwarf_cottage"),
          (this_or_next|eq, ":template", "pt_labyrinth"),
          (eq, ":template", "pt_keep"),
          (str_store_string, s5, "str_bandit_approach_cliffs"),
        (else_try),
          (call_script,"script_get_village_type","$g_encountered_party"),
          (assign,":village_type",reg0),
          (party_get_position, pos4, "$g_encountered_party"),
          (position_get_z, ":elevation", pos4),
          (try_begin),
            (this_or_next|eq, ":template", "pt_tomb_of_curses"),
            (this_or_next|eq, ":template", "pt_imp_cache"),
            (this_or_next|eq, ":template", "pt_demon_gate"),
            (eq, ":template", "pt_longhouse"),
            (map_get_water_position_around_position, pos5, pos4, 3),
            (gt, pos5, 0),
            (str_store_string, s5, "str_bandit_approach_cove"),
          (else_try),
            (gt, ":elevation", 125),
            (str_store_string, s5, "str_bandit_approach_cliffs"),
          (else_try),
            (eq,":village_type",plain_village),
            (str_store_string, s5, "str_bandit_approach_swamp"),
          (else_try),
            (eq,":village_type",snow_village),
            (str_store_string, s5, "str_bandit_approach_swamp"),
          (else_try),
            (eq,":village_type",steppe_village),
            (str_store_string, s5, "str_bandit_approach_thickets"),
          (else_try),
            #(eq,":village_type",desert_village),
            (str_store_string, s5, "str_bandit_approach_defile"),
          (try_end),
        (try_end),
                  
        (try_begin),
          (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0), #used in place of global variable
          (str_store_string, s3, "str_bandit_hideout_preattack"),
        (else_try),
          (party_get_template_id, ":template", "$g_encountered_party"),        
          (eq, ":template", "pt_looter_lair"),
          (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 1), #used in place of global variable
          (str_store_string, s3, "str_lost_startup_hideout_attack"),
        (else_try),
          (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 1), #used in place of global variable
          (str_store_string, s3, "str_bandit_hideout_failure"),
        (else_try),
          (party_get_template_id, ":template", "$g_encountered_party"),  
          (is_between, ":template", "pt_farm", "pt_bandit_lair_templates_end"),
          (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2), #used in place of global variable
          (str_store_string, s3, "str_bandit_hideout_success_2"),
        (else_try),
          (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2), #used in place of global variable
          (str_store_string, s3, "str_bandit_hideout_success"),
        (try_end),	
      (try_end),      
    ],
    [
      ("continue_1",
      [
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0), #used in place of global variable
      ],
      "Attack the hideout...",
      
      [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 1),
        (party_get_template_id, ":template", "$g_encountered_party"),
        (assign, "$g_enemy_party", "$g_encountered_party"),
        (call_script, "script_encounter_calculate_fit"),
        (call_script, "script_encounter_init_variables"),
        (try_begin),
          (eq, ":template", "pt_sea_raider_lair"),
          (assign, ":bandit_troop", "trp_nord_warrior"),
          (assign, ":scene_to_use", "scn_lair_sea_raiders"),
        (else_try),	
          (eq, ":template", "pt_forest_bandit_lair"),
          (assign, ":bandit_troop", "trp_forest_bandit"),
          (assign, ":scene_to_use", "scn_lair_forest_bandits"),
        (else_try),
          (eq, ":template", "pt_desert_bandit_lair"),
          (assign, ":bandit_troop", "trp_desert_bandit"),
          (assign, ":scene_to_use", "scn_lair_desert_bandits"),
        (else_try),
          (eq, ":template", "pt_norman_cavalry_lair"),
          (assign, ":bandit_troop", "trp_nord_raider"),
          (assign, ":scene_to_use", "scn_lair_sea_raiders"),
        (else_try),	
          (eq, ":template", "pt_forest_ranger_lair"),
          (assign, ":bandit_troop", "trp_welsh_longbowm_1"),
          (assign, ":scene_to_use", "scn_lair_forest_bandits"),
        (else_try),
          (eq, ":template", "pt_camel_cavalry_lair"),
          (assign, ":bandit_troop", "trp_marinid_camel_2"),
          (assign, ":scene_to_use", "scn_lair_desert_bandits"),
        (else_try),
          (eq, ":template", "pt_mountain_bandit_lair"),
          (assign, ":bandit_troop", "trp_mountain_bandit"),
          (assign, ":scene_to_use", "scn_lair_mountain_bandits"),
        (else_try),
          (eq, ":template", "pt_taiga_bandit_lair"),
          (assign, ":bandit_troop", "trp_taiga_bandit"),
          (assign, ":scene_to_use", "scn_lair_taiga_bandits"),
        (else_try),
          (eq, ":template", "pt_cossack_lair"),
          (assign, ":bandit_troop", "trp_rus_cossack"),
          (assign, ":scene_to_use", "scn_lair_taiga_bandits"),
        (else_try),
          (eq, ":template", "pt_dark_knight_lair"),
          (assign, ":bandit_troop", "trp_teutonic_sword"),
          (assign, ":scene_to_use", "scn_lair_dark"),
        (else_try),
          (eq, ":template", "pt_steppe_bandit_lair"),
          (assign, ":bandit_troop", "trp_steppe_bandit"),
          (assign, ":scene_to_use", "scn_lair_steppe_bandits"),
        (else_try),
          (eq, ":template", "pt_nomad_tent"),
          (call_script,"script_get_village_type","$g_encountered_party"),
          (assign,":village_type",reg0),
          (try_begin),
            (eq,":village_type",snow_village),
            (assign, ":bandit_troop", "trp_rus_cossack_1"),
            (assign, ":scene_to_use", "scn_lair_taiga_bandits"),
          (else_try),
            (eq,":village_type",desert_village),
            (assign, ":bandit_troop", "trp_saracen_cav_1"),
            (assign, ":scene_to_use", "scn_lair_desert_bandits"),
          (else_try),
            #(eq,":village_type",steppe_village),
            (assign, ":bandit_troop", "trp_steppe_tribesman"),
            (assign, ":scene_to_use", "scn_lair_steppe_bandits"),
          (try_end),
        (else_try),
          (eq, ":template", "pt_rogue_hideout"),
          (call_script,"script_get_village_type","$g_encountered_party"),
          (assign,":village_type",reg0),
          (party_get_position, pos4, "$g_encountered_party"),
          (position_get_z, ":elevation", pos4),
          (try_begin),
            (gt, ":elevation", 200),
            (assign, ":bandit_troop", "trp_mountain_bandit"),
            (assign, ":scene_to_use", "scn_lair_mountain_bandits"),
          (else_try),
            (eq,":village_type",plain_village),
            (assign, ":bandit_troop", "trp_forest_bandit"),
            (assign, ":scene_to_use", "scn_lair_forest_bandits"),
          (else_try),
            (eq,":village_type",snow_village),
            (assign, ":bandit_troop", "trp_taiga_bandit"),
            (assign, ":scene_to_use", "scn_lair_taiga_bandits"),
          (else_try),
            (eq,":village_type",steppe_village),
            (assign, ":bandit_troop", "trp_steppe_bandit"),
            (assign, ":scene_to_use", "scn_lair_forest_bandits"),
          (else_try),
            #(eq,":village_type",desert_village),
            (assign, ":bandit_troop", "trp_desert_bandit"),
            (assign, ":scene_to_use", "scn_lair_desert_bandits"),
          (try_end),
        (else_try),
          (this_or_next|eq, ":template", "pt_elf_homestead"),
          (eq, ":template", "pt_treant_alcove"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (assign, ":scene_to_use", "scn_Forest_Hideout"),
        (else_try),
          (this_or_next|eq, ":template", "pt_vampire_estate"),
          (eq, ":template", "pt_magic_guild"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (assign, ":scene_to_use", "scn_dungeons_tower"),
        (else_try),
          (this_or_next|eq, ":template", "pt_gobin_slum"),
          (eq, ":template", "pt_graveyard"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (assign, ":scene_to_use", "scn_Ruins"),
        (else_try),
          (this_or_next|eq, ":template", "pt_clan_halls"),
          (eq, ":template", "pt_demon_gate"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (assign, ":scene_to_use", "scn_Volcanic_cave"),
        (else_try),
          (eq, ":template", "pt_labyrinth"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (assign, ":scene_to_use", "scn_dungeons_pass"),
          
          
          
        (else_try),
          (eq, ":template", "pt_dwarf_cottage"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (assign, ":scene_to_use", "scn_Canyon"),
        (else_try),
          (eq, ":template", "pt_ogre_fort"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (assign, ":scene_to_use", "scn_Ruined_Fort"),
        (else_try),
          (eq, ":template", "pt_cathedral"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (assign, ":scene_to_use", "scn_street_battle"),
        (else_try),
          (eq, ":template", "pt_longhouse"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (try_begin),
            (map_get_water_position_around_position, pos5, pos4, 3),
            (gt, pos5, 0),
            (assign, ":scene_to_use", "scn_lair_sea_raiders"),
          (else_try),
            (eq,":village_type",desert_village),
            (assign, ":scene_to_use", "scn_Volcanic_cave"),
          (else_try),
            (assign, ":scene_to_use", "scn_lair_sea_raiders_2"),
          (try_end),
        (else_try),
          (eq, ":template", "pt_tomb_of_curses"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (assign, ":scene_to_use", "scn_dungeon"),
        (else_try),
          (eq, ":template", "pt_wolf_pen"),
          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),
          (call_script,"script_get_village_type","$g_encountered_party"),
          (assign,":village_type",reg0),
          (party_get_position, pos4, "$g_encountered_party"),
          (try_begin),
            (map_get_water_position_around_position, pos5, pos4, 3),
            (gt, pos5, 0),
            (assign, ":scene_to_use", "scn_Ruined_Fort_island"),
          (else_try),
            (eq,":village_type",snow_village),
            (assign, ":scene_to_use", "scn_dungeons_pass"),
          (else_try),
            (eq,":village_type",steppe_village),
            (assign, ":scene_to_use", "scn_dungeons_pass"),
          (else_try),
            (assign, ":scene_to_use", "scn_Swamp_Bridge"),
          (try_end),
        (else_try),

          (party_stack_get_troop_id, ":bandit_troop", "$g_encountered_party", 0),

          (call_script,"script_get_village_type","$g_encountered_party"),
          (assign,":village_type",reg0),
          (party_get_position, pos4, "$g_encountered_party"),
          (position_get_z, ":elevation", pos4),
          (try_begin),
            (gt, ":elevation", 500),
            (assign, ":scene_to_use", "scn_lair_mountain_bandits"),
          (else_try),
            (eq,":village_type",plain_village),
            (assign, ":scene_to_use", "scn_lair_forest_bandits"),
          (else_try),
            (eq,":village_type",snow_village),
            (assign, ":scene_to_use", "scn_lair_taiga_bandits"),
          (else_try),
            (eq,":village_type",desert_village),
            (assign, ":scene_to_use", "scn_lair_desert_bandits"),
          (else_try),
            #(eq,":village_type",steppe_village),
            (assign, ":scene_to_use", "scn_lair_steppe_bandits"),
          (try_end),

        (else_try),
          (eq, ":template", "pt_looter_lair"),
          (assign, ":bandit_troop", "trp_looter"),
          (store_faction_of_party, ":starting_town_faction", "$g_starting_town"),
          (try_begin),
            (this_or_next|eq, ":starting_town_faction", "fac_kingdom_13"),
            (this_or_next|eq, ":starting_town_faction", "fac_kingdom_7"),
            (eq, ":starting_town_faction", "fac_kingdom_1"), #player selected swadian city as starting town.
            (assign, ":scene_to_use", "scn_lair_forest_bandits"),        
          (else_try),
            (this_or_next|eq, ":starting_town_faction", "fac_kingdom_14"),
            (this_or_next|eq, ":starting_town_faction", "fac_kingdom_8"),
            (eq, ":starting_town_faction", "fac_kingdom_2"), #player selected Vaegir city as starting town.
            (assign, ":scene_to_use", "scn_lair_taiga_bandits"),        
          (else_try),
            (this_or_next|eq, ":starting_town_faction", "fac_kingdom_9"),
            (eq, ":starting_town_faction", "fac_kingdom_3"), #player selected Khergit city as starting town.
            (assign, ":scene_to_use", "scn_lair_steppe_bandits"),        
          (else_try),
            (this_or_next|eq, ":starting_town_faction", "fac_kingdom_10"),
            (eq, ":starting_town_faction", "fac_kingdom_4"), #player selected Nord city as starting town.
            (assign, ":scene_to_use", "scn_lair_sea_raiders"),
          (else_try),
            (this_or_next|eq, ":starting_town_faction", "fac_kingdom_11"),
            (eq, ":starting_town_faction", "fac_kingdom_5"), #player selected Rhodok city as starting town.
            (assign, ":scene_to_use", "scn_lair_mountain_bandits"),
          (else_try),
            (this_or_next|eq, ":starting_town_faction", "fac_kingdom_12"),
            (eq, ":starting_town_faction", "fac_kingdom_6"), #player selected Sarranid city as starting town.
            (assign, ":scene_to_use", "scn_lair_desert_bandits"),        
          (try_end),  
        (try_end),
        
        (modify_visitors_at_site,":scene_to_use"),
        (reset_visitors),        

        (store_character_level, ":player_level", "trp_player"),    
        (val_min, ":player_level", 63), ## CC
        (store_add, ":number_of_bandits_will_be_spawned_at_each_period", 5, ":player_level"),
        (val_div, ":number_of_bandits_will_be_spawned_at_each_period", 3),
        
        (try_for_range, ":unused", 0, ":number_of_bandits_will_be_spawned_at_each_period"),
          (store_random_in_range, ":random_entry_point", 2, 10),          
          (set_visitor, ":random_entry_point", ":bandit_troop", 1),          
        (try_end),
        
        (party_clear, "p_temp_casualties"),

        (set_party_battle_mode),
        (set_battle_advantage, 0),
        (assign, "$g_battle_result", 0),
        (assign, "$g_mt_mode", abm_tournament),

          (try_begin),
            (is_between, ":template", "pt_farm", "pt_bandit_lair_templates_end"),
            (set_jump_mission,"mt_bandit_lair_2"),
          (else_try),
            #(eq,":village_type",desert_village),
            (set_jump_mission,"mt_bandit_lair"),
          (try_end),
        
        #(set_jump_mission,"mt_bandit_lair"),
        
        (jump_to_scene, ":scene_to_use"),        
        (change_screen_mission),        
	  ]),
        
      #("enter_lair",
      #[
	    #(party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
        #(store_relation, ":center_relation", "fac_player_faction", "$g_encountered_party_faction"),
        #(party_get_num_companions, ":num_men", "p_main_party"),
        #(ge, ":center_relation", 0),
        #(this_or_next|ge, ":center_relation", 60),
        #(le, ":num_men", 100),
	  #],
	  #"enter...",
      #[
       #(jump_to_menu, "mnu_enter_lair"),
      #]),            
        
      ("leave_no_attack",
      [
	    (neg|party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 1),
	    (neg|party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2),
	    (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
	  ],
	  "Leave...",
      [
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          (party_get_template_id, ":template", "$g_encountered_party"),	 
          (is_between, ":template", "pt_farm", "pt_bandit_lair_templates_end"),
          
          (remove_party, "$g_encountered_party"),
        (try_end),   
        (assign, "$g_mt_mode", 0),
        #(assign,"$auto_menu",-1),
        (change_screen_map),
      ]),            
        
	  ("leave_victory",
	  [
	    (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2),
	  ],
	  "loot_enemy...",
      [      
        (try_for_range, ":bandit_template", bandit_party_template_begin, bandit_party_template_end), ## CC
          (party_template_slot_eq, ":bandit_template", slot_party_template_lair_party, "$g_encountered_party"),
          (party_template_set_slot, ":bandit_template", slot_party_template_lair_party, 0),
        (try_end),
         
        (party_get_template_id, ":template", "$g_encountered_party"),
        (try_begin),
          (neq, ":template", "pt_looter_lair"),
          (check_quest_active, "qst_destroy_bandit_lair"),
          (quest_slot_eq, "qst_destroy_bandit_lair", slot_quest_target_party, "$g_encountered_party"),
          (call_script, "script_succeed_quest", "qst_destroy_bandit_lair"),
        (try_end),
        (assign, "$g_mt_mode", 0),
        (assign, "$g_leave_encounter", 0),
        #(assign,"$auto_menu",-1),
        (change_screen_map),

        (try_begin),
          (eq, "$loot_screen_shown", 0),
          (assign, "$loot_screen_shown", 1),
          (try_begin),
            (gt, "$g_ally_party", 0),
            (call_script, "script_party_add_party", "$g_ally_party", "p_temp_party"), #Add remaining prisoners to ally TODO: FIX it.
          (else_try),
            (party_get_num_attached_parties, ":num_quick_attachments", "p_main_party"),
            (gt, ":num_quick_attachments", 0),
            (party_get_attached_party_with_rank, ":helper_party", "p_main_party", 0),
            (call_script, "script_party_add_party", ":helper_party", "p_temp_party"), #Add remaining prisoners to our reinforcements
          (try_end),
          (troop_clear_inventory, "trp_temp_troop"),
          
          (party_get_num_companion_stacks, ":num_stacks", "p_temp_casualties"), 
          (try_for_range, ":stack_no", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":stack_troop", "p_temp_casualties", ":stack_no"), 
            (try_begin),              
              (party_stack_get_size, ":stack_size", "p_temp_casualties", ":stack_no"),
              (party_stack_get_troop_id, ":stack_troop", "p_temp_casualties", ":stack_no"),
              (gt, ":stack_size", 0),              
              (party_add_members, "p_total_enemy_casualties", ":stack_troop", ":stack_size"), #addition_to_p_total_enemy_casualties
              (party_stack_get_num_wounded, ":stack_wounded_size", "p_temp_casualties", ":stack_no"),
              (gt, ":stack_wounded_size", 0),
              (party_wound_members, "p_total_enemy_casualties", ":stack_troop", ":stack_wounded_size"),
            (try_end),
          (try_end),
                    
          (call_script, "script_party_calculate_loot", "p_total_enemy_casualties"), #p_encountered_party_backup changed to total_enemy_casualties          
          #(gt, reg0, 0),          
          (troop_sort_inventory, "trp_temp_troop"),
          ## CC
          # Autoloot: Instead of just displaying the loot screen, we display a loot management menu instead
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_companions", reg0),
          (try_begin),
            (gt, ":num_companions", 1),
            (assign, "$return_menu", "mnu_bandit_lair"),
            (jump_to_menu, "mnu_manage_loot_pool"),
          (else_try),
            (change_screen_loot, "trp_temp_troop"),
          (try_end),
          #end Autoloot
          ## CC
        (try_end),
        
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          (party_get_template_id, ":template", "$g_encountered_party"),	 
          (try_begin),
            (is_between, ":template", "pt_farm", "pt_bandit_lair_templates_end"),
            (party_get_slot, ":bound_center", "$g_encountered_party", slot_village_bound_center),
            (party_set_slot, ":bound_center", slot_center_lair_build_type, 0),
            (party_set_extra_text,  ":bound_center", "str_empty_string"),
            (store_current_hours, ":hours"),
            (assign, ":hours_needed", 24),
            (val_mul, ":hours_needed", 7),
            (store_add, ":dest_time", ":hours", ":hours_needed"),
            (party_set_slot, ":bound_center", slot_center_lair_attack_cooldown, ":dest_time"),
          (try_end),
          (this_or_next|is_between, ":template", "pt_farm", "pt_bandit_lair_templates_end"),
          (eq, ":template", "pt_looter_lair"),
          (remove_party, "$g_encountered_party"),
        (try_end),          
      ]),
        
	  ("leave_victory_troop",
	  [
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2),
        (party_get_template_id, ":lair_type", "$g_encountered_party"),
        (is_between, ":lair_type", "pt_farm", "pt_bandit_lair_templates_end"),

	  ],
	  "froce_enemy_join_your_party...",
      [      
        (try_for_range, ":bandit_template", bandit_party_template_begin, bandit_party_template_end), ## CC
          (party_template_slot_eq, ":bandit_template", slot_party_template_lair_party, "$g_encountered_party"),
          (party_template_set_slot, ":bandit_template", slot_party_template_lair_party, 0),
        (try_end),
         
        (party_get_template_id, ":template", "$g_encountered_party"),
        (try_begin),
          (neq, ":template", "pt_looter_lair"),
          (check_quest_active, "qst_destroy_bandit_lair"),
          (quest_slot_eq, "qst_destroy_bandit_lair", slot_quest_target_party, "$g_encountered_party"),
          (call_script, "script_succeed_quest", "qst_destroy_bandit_lair"),
        (try_end),
         
          (eq, "$loot_screen_shown", 0),
          (assign, "$loot_screen_shown", 1),
        (party_get_template_id, ":lair_type", "$g_encountered_party"),
        (is_between, ":lair_type", "pt_farm", "pt_bandit_lair_templates_end"),
        (call_script,"script_get_village_type","$g_encountered_party"),
        (assign,":village_type",reg0),

        (party_clear, "p_temp_party"),
        (try_begin),
          (ge, "$g_arena_training_kills", 3),
          (party_add_template, "p_temp_party", ":lair_type"),
          (ge, "$g_arena_training_kills", 4),
          (party_add_template, "p_temp_party", ":lair_type"),
        (else_try),
          (ge, "$g_arena_training_kills", 1),
          (try_begin),
            (assign, ":reinforcement", -1),
            (assign, ":size", 0),
            (try_begin),
              (eq, ":lair_type", nomad_tent),
              (assign, ":reinforcement", "trp_steppe_tribesman"),
              (store_random_in_range, ":size", 15, 25),
              (try_begin),
                (eq,":village_type",snow_village),
                (assign, ":reinforcement", "trp_rus_cossack_1"),
                (store_random_in_range, ":size", 5, 15),
              (else_try),
                (eq,":village_type",desert_village),
                (assign, ":reinforcement", "trp_marinid_camel_1"),
                (store_random_in_range, ":size", 5, 15),
              (try_end),
            (else_try),
              (eq, ":lair_type", graveyard),
              (store_random_in_range, ":random_value", 0, 15),
              (try_begin),
                (eq, ":random_value", 0),
                (assign, ":reinforcement", "trp_wraith"),
                (assign, ":size", 1),
              (else_try),
                (is_between, ":random_value", 1, 5),
                (assign, ":reinforcement", "trp_wight"),
                (assign, ":size", 5),
              (else_try),
                (assign, ":reinforcement", "trp_skeleton"),
                (store_random_in_range, ":size", 15, 40),
              (try_end),
            (else_try),
              (eq, ":lair_type", gobin_slum),
              (store_random_in_range, ":random_value", 0, 15),
              (try_begin),
                (eq, ":random_value", 0),
                (assign, ":reinforcement", "trp_troll_1"),
                (store_random_in_range, ":size", 1, 3),
              (else_try),
                (assign, ":reinforcement", "trp_goblin"),
                (store_random_in_range, ":size", 25, 75),
              (try_end),
            (else_try),
              (eq, ":lair_type", imp_cache),
              (store_random_in_range, ":random_value", 0, 15),
              (try_begin),
                (eq, ":random_value", 0),
                (assign, ":reinforcement", "trp_demon_6"),
                (store_random_in_range, ":size", 1, 3),
              (else_try),
                (store_random_in_range, ":reinforcement", "trp_demon_1", "trp_demon_2"),
                (store_random_in_range, ":size", 10, 15),
              (try_end),
            (else_try),
              (eq, ":lair_type", rogue_hideout),
              (assign, ":reinforcement", "trp_assassin"),
              (store_random_in_range, ":size", 10, 15),
              (try_begin),
                (eq,":village_type",desert_village),
                (assign, ":reinforcement", "trp_sarranid_assasin"),
                (assign, ":size", 7),
              (try_end),
            (else_try),
              (eq, ":lair_type", longhouse),
              (assign, ":reinforcement", "trp_mercenary_berserker"),
              (store_random_in_range, ":size", 7, 15),
              (try_begin),
                (eq,":village_type",snow_village),
                (assign, ":reinforcement", "trp_mercenary_berserker"),
              (try_end),
            (else_try),
              (eq, ":lair_type", dwarf_cottage),
              (assign, ":reinforcement", "trp_dwarf_miner"),
              (store_random_in_range, ":size", 10, 15),
            (else_try),
              (eq, ":lair_type", elf_homestead),
              (assign, ":reinforcement", "trp_woodelf_recruit"),
              (store_random_in_range, ":size", 10, 15),
            (else_try),
              (eq, ":lair_type", monastery),
              (assign, ":reinforcement", "trp_monk"),
              (assign, ":size", 8),
              (try_begin),
                (eq,":village_type",desert_village),
                (assign, ":reinforcement", "trp_ghazis_1"),
                (store_random_in_range, ":size", 25, 50),
              (try_end),
            (else_try),
              (eq, ":lair_type", magic_guild),
              (assign, ":reinforcement", "trp_human_magic_1"),
              (assign, ":size", 6),
            (else_try),
              (eq, ":lair_type", cathedral),
              (assign, ":reinforcement", "trp_sissofbattle"),
              (assign, ":size", 3),
              (try_begin),
                (eq,":village_type",snow_village),
                (assign, ":reinforcement", "trp_god_choosen_berserker"),
                (assign, ":size", 14),
              (try_end),
            (else_try),
              (eq, ":lair_type", demon_gate),
              (assign, ":reinforcement", "trp_demon_3"),
              (store_random_in_range, ":size", 5, 8),
            (else_try),
              (eq, ":lair_type", clan_halls),
              (store_random_in_range, ":random_value", 0, 15),
              (try_begin),
                (eq, ":random_value", 0),
                (store_random_in_range, ":reinforcement", "trp_giant_2", "trp_mummy_1"),
                (store_random_in_range, ":size", 1, 3),
              (else_try),
                (assign, ":reinforcement", "trp_giant_1"),
                (store_random_in_range, ":size", 3, 14),
              (try_end),
            (else_try),
              (eq, ":lair_type", vampire_estate),
              (store_random_in_range, ":random_value", 0, 2),
              (try_begin),
                (eq, ":random_value", 0),
                (assign, ":reinforcement", "trp_undead_horse_1"),
                (store_random_in_range, ":size", 2, 6),
              (else_try),
                (assign, ":reinforcement", "trp_vampire_1"),
                (store_random_in_range, ":size", 5, 8),
              (try_end),
            (else_try),
              (eq, ":lair_type", ogre_fort),
              (assign, ":reinforcement", "trp_ogre"),
              (store_random_in_range, ":size", 15, 18),
            (else_try),
              (eq, ":lair_type", wolf_pen),
              (assign, ":reinforcement", "trp_scottish_jav"),
              (store_random_in_range, ":size", 10, 25),
            (else_try),
              (eq, ":lair_type", labyrinth),
              (assign, ":reinforcement", "trp_minotaur_1"),
              (store_random_in_range, ":size", 5, 14),
            (else_try),
              (eq, ":lair_type", tomb_of_curses),
              (assign, ":reinforcement", "trp_mummy_1"),
              (assign, ":size", 7),
            (else_try),
              (eq, ":lair_type", treant_alcove),
              (assign, ":reinforcement", "trp_ent_1"),
              (assign, ":size", 2),
            (try_end),
                                  
            (try_begin),
              (gt, ":reinforcement", 0),
              (gt, ":size", 0),
              (party_add_members, "p_temp_party", ":reinforcement", ":size"),
              (party_upgrade_with_xp, "p_temp_party", 500),
            (try_end),
            (try_begin),
              (ge, "$g_arena_training_kills", 2),
              (gt, ":reinforcement", 0),
              (gt, ":size", 0),
              (party_add_members, "p_temp_party", ":reinforcement", ":size"),
              (party_upgrade_with_xp, "p_temp_party", 500),
            (try_end),
          (try_end),
        (try_end),
        
        (assign, "$g_mt_mode", 0),
        (assign, "$g_leave_encounter", 0),
        #(assign,"$auto_menu",-1),
        (change_screen_map),
        
        (try_begin),
          (party_get_num_companions, ":num_rescued_prisoners", "p_temp_party"),
          (party_get_num_prisoners,  ":num_captured_enemies", "p_temp_party"),
          (store_add, ":total_capture_size", ":num_rescued_prisoners", ":num_captured_enemies"),
          (gt, ":total_capture_size", 0),          
          (assign, ":prisoner_party", "p_temp_party"),
          (change_screen_exchange_with_party, ":prisoner_party"),
        (try_end),
          
        
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          (party_get_template_id, ":template", "$g_encountered_party"),	 
          (try_begin),
            (is_between, ":template", "pt_farm", "pt_bandit_lair_templates_end"),
            (party_get_slot, ":bound_center", "$g_encountered_party", slot_village_bound_center),
            (party_set_slot, ":bound_center", slot_center_lair_build_type, 0),
            (party_set_extra_text,  ":bound_center", "str_empty_string"),
            (store_current_hours, ":hours"),
            (assign, ":hours_needed", 24),
            (val_mul, ":hours_needed", 7),
            (store_add, ":dest_time", ":hours", ":hours_needed"),
            (party_set_slot, ":bound_center", slot_center_lair_attack_cooldown, ":dest_time"),
          (try_end),
          (this_or_next|is_between, ":template", "pt_farm", "pt_bandit_lair_templates_end"),
          (eq, ":template", "pt_looter_lair"),
          (remove_party, "$g_encountered_party"),
        (try_end),          
      ]),
        
	  ("leave_defeat",
	  [
	    (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 1),
	  ],
	  "Continue...",
      [
        (try_for_range, ":bandit_template", bandit_party_template_begin, bandit_party_template_end), ## CC
          (party_template_slot_eq, ":bandit_template", slot_party_template_lair_party, "$g_encountered_party"),
          (party_template_set_slot, ":bandit_template", slot_party_template_lair_party, 0),
        (try_end),
        
        
        
        (try_begin),
          (party_get_template_id, ":template", "$g_encountered_party"),
          (neq, ":template", "pt_looter_lair"),
          (check_quest_active, "qst_destroy_bandit_lair"),
          (quest_slot_eq, "qst_destroy_bandit_lair", slot_quest_target_party, "$g_encountered_party"),
          (call_script, "script_fail_quest", "qst_destroy_bandit_lair"),
        (try_end),
        
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          (party_get_template_id, ":template", "$g_encountered_party"),	    
          (try_begin),
            (is_between, ":template", "pt_farm", "pt_bandit_lair_templates_end"),
            (party_get_slot, ":bound_center", "$g_encountered_party", slot_village_bound_center),
            
            (store_current_hours, ":hours"),
            (assign, ":hours_needed", 24),
            (val_mul, ":hours_needed", 7),
            (store_add, ":dest_time", ":hours", ":hours_needed"),
            (party_set_slot, ":bound_center", slot_center_lair_attack_cooldown, ":dest_time"),
        
            (party_set_slot, ":bound_center", slot_center_lair_build_type, 0),
            (party_set_extra_text,  ":bound_center", "str_empty_string"),
          (try_end),
	      (neq, ":template", "pt_looter_lair"),
          (remove_party, "$g_encountered_party"),
        (try_end),  

        (assign, "$g_leave_encounter", 0),
        
        (try_begin),
            (party_is_active, "$g_encountered_party"),
            (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 0),
        (try_end),
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
         # (party_get_template_id, ":template", "$g_encountered_party"),	 
         # (is_between, ":template", "pt_farm", "pt_bandit_lair_templates_end"),
         # (party_get_slot, ":bound_center", "$g_encountered_party", slot_village_bound_center),
         # (party_set_slot, ":bound_center", slot_center_lair_build_type, 0),
         # (party_set_extra_text,  ":bound_center", "str_empty_string"),
         # (remove_party, "$g_encountered_party"),
        (try_end),       
        (assign, "$g_mt_mode", 0),
        (assign,"$auto_menu",-1),
        (change_screen_map),
        ]),
        
     ]
  ),


     #("enter_lair", 0, "What do you want to do?", "none",[],
     #[     
        #("village_station_troops",
        #[
        #(store_relation, ":talk_faction", "fac_player_faction", "$g_encountered_party_faction"),
        #(ge, ":center_relation", 40),
        #],
        #"Station a garrison here...",
        #[
            #(set_mercenary_source_party,"$g_encountered_party"),(change_screen_buy_mercenaries)
        #]),
  
        #("village_station_troops",
        #[
        #(store_relation, ":center_relation", "fac_player_faction", "$g_encountered_party_faction"),
        #(ge, ":center_relation", 40),
        #],
        #"Station a garrison here...",
        #[
            #(change_screen_exchange_members, 1),
        #]),
  
      #("sell_prisoners_all",
      #[(store_num_regular_prisoners,reg(0)),(ge,reg(0),1)],
	  #"sell_prisoners_all",
      #[
       #(call_script, "script_sell_all_prisoners_party"),
       #(jump_to_menu, "mnu_enter_lair"),
      #]),            
  
      #("lair_wait",[],"Wait here for some time.",
      #[(rest_for_hours_interactive, 24 * 7, 5, 0),  
        #(assign, "$auto_enter_menu_in_center", "mnu_enter_lair"),
        #(change_screen_return),]),

       #("back_to_town_menu", [], "Return.", [(change_screen_return)]),
     #]),



  (
    "notification_player_faction_political_issue_resolved",0,
    "After consulting with the peers of the realm, {s10} has decided to confer {s11} on {s12}.",
    "none",
    [
	(assign, ":faction_issue_resolved", "$g_notification_menu_var1"),
	(assign, ":faction_decision", "$g_notification_menu_var2"),
	(faction_get_slot, ":leader", "$players_kingdom", slot_faction_leader),
	(str_store_troop_name, s10, ":leader"),
	(try_begin),
        (eq, ":faction_issue_resolved", 1),
        (str_store_string, s11, "str_the_marshalship"),
	(else_try),
        (str_store_party_name, s11, ":faction_issue_resolved"),
     ## CC
     (set_fixed_point_multiplier, 100),
     (position_set_x, pos0, 62),
     (position_set_y, pos0, 30),
     (position_set_z, pos0, 170),
     (set_game_menu_tableau_mesh, "tableau_center_note_mesh", ":faction_issue_resolved", pos0),
     ## CC
	(try_end),
	(str_store_troop_name, s12, ":faction_decision"),

	],
    [
	   ("continue",
	   [],"Continue...",
       [
        (change_screen_return),
        ]),        
	
	
	]
  ),
  
  (
    "notification_player_faction_political_issue_resolved_for_player",0,
    "After consulting with the peers of the realm, {s10} has decided to confer {s11} on you. You may decline the honor, but it will probably mean that you will not receive other awards for a little while.{s12}",
    "none",
    [
	(faction_get_slot, ":leader", "$players_kingdom", slot_faction_leader),
	(str_store_troop_name, s10, ":leader"),
	(faction_get_slot, ":issue", "$players_kingdom", slot_faction_political_issue),
	(try_begin),
        (eq, ":issue", 1),
        (str_store_string, s11, "str_the_marshalship"),
        (str_store_string, s12, "@^^Note that so long as you remain marshal, the lords of the realm will be expecting you to lead them on campaign. So, if you are awaiting a feast, either for a wedding or for other purposes, you may wish to resign the marshalship by speaking to your liege."),
	(else_try),
        (str_clear, s12),
        (str_store_party_name, s11, ":issue"),
     ## CC
     (set_fixed_point_multiplier, 100),
     (position_set_x, pos0, 62),
     (position_set_y, pos0, 30),
     (position_set_z, pos0, 170),
     (set_game_menu_tableau_mesh, "tableau_center_note_mesh", ":issue", pos0),
     ## CC
	(try_end),	
	],
    [
	   ("accept",
	   [],"Accept the honor",
       [
	    (faction_get_slot, ":issue", "$players_kingdom", slot_faction_political_issue),
        
        (try_begin),
            (eq, ":issue", 1),
            (call_script, "script_check_and_finish_active_army_quests_for_faction", "$players_kingdom"),       
            (call_script, "script_appoint_faction_marshall", "$players_kingdom", "trp_player"), 
            (unlock_achievement, ACHIEVEMENT_AUTONOMOUS_COLLECTIVE),
        (else_try),
            (call_script, "script_give_center_to_lord", ":issue", "trp_player", 0), #Zero means don't add garrison
        (try_end),
            	
        (faction_set_slot, "$players_kingdom", slot_faction_political_issue, 0),
        (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
            (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
            (eq, ":active_npc_faction", "$players_kingdom"),
            (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
        (try_end),
        (change_screen_return),
        ]),	

	   ("decline",
	   [],"Decline the honor",
       [
	    (faction_get_slot, ":issue", "$players_kingdom", slot_faction_political_issue),
        (try_begin),
            (is_between, ":issue", centers_begin, centers_end),
            (assign, "$g_dont_give_fief_to_player_days", 30),
        (else_try),
            (assign, "$g_dont_give_marshalship_to_player_days", 30),
        (try_end),
        
        (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
            (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
            (eq, ":active_npc_faction", "$players_kingdom"),
            (troop_set_slot, ":active_npc", slot_troop_stance_on_faction_issue, -1),
        (try_end),
        (change_screen_return),
        ]),            
	]
  ),
  
  ("start_phase_2_5",mnf_disable_all_keys,
    "{!}{s16}",
    "none",
    [
      (str_store_party_name, s1, "$g_starting_town"),
      (str_store_string, s16, "@You came by caravan through the heartland of Europe. Green shoots of wheat, barley and oats are beginning to push through the dark soil of the rolling hills, and on the lower slopes of the snowcapped mountains, herds of cattle and sheep are grazing on the spring grass. Occasionally, too, you catch sight of one of the great warhorses that are the pride of the Swadian nobility. The land here is rich -- but also troubled, as the occasional burnt-out farm bears witness. You keep a wide berth of the forests, where desperate men have taken refuge, and it is some relief when you crest a ridge and catch sight of the great city of {s1}, its rooftops made golden by the last rays of the setting sun."),
      #(str_store_string, s16, "$g_journey_string"),
      
    ],
    [
      ("continue",[], "Continue...",
       [
         (jump_to_menu, "mnu_start_phase_3"),
       ]),
       
       
    ]
  ),
  
  ("start_king", 0,
    "Do you wanted to star as a king of this faction?", "none", [],
    [
      ("yes", [], "Yes",
        [
         (assign, "$g_starting_town", "$current_town"),
         (call_script, "script_player_arrived"),
         (party_set_morale, "p_main_party", 100),
         (call_script, "script_to_be_king"),
         (party_relocate_near_party, "p_main_party", "$current_town", 2),  
         (call_script, "script_add_notification_menu", "mnu_notification_player_faction_active", 0, 0),
         (call_script, "script_add_notification_menu", "mnu_dplmc_domestic_policy", 0, 0),
         (troop_set_slot, "trp_player", slot_troop_player_effect, 5000),
         (change_screen_return),
        ]
      ),
      ("no", [], "No",
        [
        (jump_to_menu,"mnu_start_phase_2"),
        ]
      ),
    ]),
  
  ("start_knight", 0,
    "Do you wanted to star as a vassalage?", "none", [],
    [
      ("yes", [], "Yes",
        [
         (assign, "$g_starting_town", "$current_town"),
         (call_script, "script_player_arrived"),
         (party_set_morale, "p_main_party", 100),
         (set_encountered_party, "$current_town"),
         (assign, "$auto_enter_town", "$current_town"),                  
         (troop_set_slot, "trp_player", slot_troop_player_effect, 2500),
         (call_script, "script_begin_as_knight"),
         (party_relocate_near_party, "p_main_party", "$current_town", 2),  
         (change_screen_return),
        ]
      ),
      ("no", [], "No",
        [
        (jump_to_menu,"mnu_start_phase_2"),
        ]
      ),
    ]),
  
  ("start_phase_3",mnf_disable_all_keys,
    "{s16}^^You are exhausted by the time you find the inn in {s1}, and fall asleep quickly. However, you awake before dawn and are eager to explore your surroundings. You venture out onto the streets, which are still deserted. All of a sudden, you hear a sound that stands the hairs of your neck on end -- the rasp of a blade sliding from its scabbard...",
    "none",
    [      
      (assign, ":continue", 1),
      (try_begin),
        (eq, "$current_startup_quest_phase", 1),
        (try_begin),
          (eq, "$g_killed_first_bandit", 1),
          (str_store_string, s11, "str_killed_bandit_at_alley_fight"),                    
        (else_try),
          (str_store_string, s11, "str_wounded_by_bandit_at_alley_fight"),
        (try_end),
        (jump_to_menu, "mnu_start_phase_4"),
        (assign, ":continue", 0),
      (else_try),  
        (eq, "$current_startup_quest_phase", 3),
        (try_begin),
          (eq, "$g_killed_first_bandit", 1),
          (str_store_string, s11, "str_killed_bandit_at_alley_fight"),                    
        (else_try),
          (str_store_string, s11, "str_wounded_by_bandit_at_alley_fight"),
        (try_end),
        (jump_to_menu, "mnu_start_phase_4"),
        (assign, ":continue", 0),      
      (try_end),  
      
      (str_store_party_name, s1, "$g_starting_town"),
      (str_clear, s16),
      (eq, ":continue", 1),
    ],
    [
      ("continue",[], "Continue...",
       [         
         (assign, "$g_starting_town", "$current_town"),
         (call_script, "script_player_arrived"),
         (party_set_morale, "p_main_party", 100),
         (set_encountered_party, "$current_town"),
         (call_script, "script_prepare_alley_to_fight"),

       ]),
    ]
  ),

  ("start_phase_4",mnf_disable_all_keys,
    "{s11}",
    "none",
    [      
      (assign, ":continue", 1),
      (try_begin),  
        (eq, "$current_startup_quest_phase", 2),
        (change_screen_return),       
        (assign, ":continue", 0),
      (else_try),
        (eq, "$current_startup_quest_phase", 3),
        (str_store_string, s11, "str_merchant_and_you_call_some_townsmen_and_guards_to_get_ready_and_you_get_out_from_tavern"),
      (else_try),
        (eq, "$current_startup_quest_phase", 4),
        (try_begin),
          (eq, "$g_killed_first_bandit", 1),
          (str_store_string, s11, "str_town_fight_ended_you_and_citizens_cleaned_town_from_bandits"),
        (else_try),  
          (str_store_string, s11, "str_town_fight_ended_you_and_citizens_cleaned_town_from_bandits_you_wounded"),
        (try_end),
      (try_end),            
          
      (eq, ":continue", 1),
    ],
    [
      ("continue",
      [
        (this_or_next|eq, "$current_startup_quest_phase", 1),
        (eq, "$current_startup_quest_phase", 4),
      ],
      "Continue...",
      [         
        (assign, "$town_entered", 1),
         
        #(try_begin),
          #(eq, "$current_town", "p_town_1"),
          #(assign, ":town_merchant", "trp_nord_merchant"),
          #(assign, ":town_room_scene", "scn_town_1_room"),
        #(else_try),  
          #(eq, "$current_town", "p_town_5"),
          #(assign, ":town_merchant", "trp_rhodok_merchant"),
          #(assign, ":town_room_scene", "scn_town_5_room"),
        #(else_try),  
          #(this_or_next|eq, "$current_town", "p_town_6"),        
          #(eq, "$current_town", "p_town_6"),
          #(assign, ":town_merchant", "trp_swadian_merchant"),
          #(assign, ":town_room_scene", "scn_town_6_room"),
        #(else_try),  
          #(eq, "$current_town", "p_town_8"),
          #(assign, ":town_merchant", "trp_vaegir_merchant"),
          #(assign, ":town_room_scene", "scn_town_8_room"),
        #(else_try),  
          #(eq, "$current_town", "p_town_10"),
          #(assign, ":town_merchant", "trp_khergit_merchant"),
          #(assign, ":town_room_scene", "scn_town_10_room"),
        #(else_try),  
          #(eq, "$current_town", "p_town_19"),
          #(assign, ":town_merchant", "trp_sarranid_merchant"),
          #(assign, ":town_room_scene", "scn_town_19_room"),
        #(try_end),        
          
        (assign, ":town_merchant", "trp_swadian_merchant"),
        (assign, ":town_room_scene", "scn_town_6_room"),
          
        (modify_visitors_at_site, ":town_room_scene"),     
        (reset_visitors),
        (set_visitor, 0, "trp_player"),                    
        (set_visitor, 9, ":town_merchant"),
        
        (assign, "$talk_context", tc_merchants_house),
                  
        (assign, "$dialog_with_merchant_ended", 0),                  
                  
        (set_jump_mission, "mt_meeting_merchant"),

        (jump_to_scene, ":town_room_scene"),
        (change_screen_mission),         
      ]),       

      ("continue",
      [
        (eq, "$current_startup_quest_phase", 3),
      ],
      "Continue...",
      [         
        (call_script, "script_prepare_town_to_fight"),
      ]),              
    ]
  ),
 

  ("lost_tavern_duel",mnf_disable_all_keys,
    "{s11}",
    "none",
    [
    (agent_get_troop_id, ":type", "$g_main_attacker_agent"),
	(try_begin),
        #(eq, ":type", "trp_belligerent_drunk"),
        #(str_store_string, s11, "str_lost_tavern_duel_ordinary"),
	#(else_try),        
        (eq, ":type", "trp_hired_assassin"),
        (str_store_string, s11, "str_lost_tavern_duel_assassin"),
	(else_try),        
        (str_store_string, s11, "str_lost_tavern_duel_ordinary"),
	(try_end),
	(troop_set_slot, "trp_hired_assassin", slot_troop_cur_center, -1),
    ],
    [
      ("continue",[],"Continue...",
       [         
        (store_random_in_range, ":random_no", 0, 100),
        (try_begin),
            (ge, ":random_no", "$g_player_luck"),
            (assign, "$g_next_menu", "mnu_town"),
            (jump_to_menu, "mnu_permanent_damage"),
        (else_try),
            (jump_to_menu, "mnu_town"),
        (try_end),
       ]),       
    ]
  ),


  ("establish_court",mnf_disable_all_keys,
    "To establish {s4} as your court will require a small refurbishment. In particular, you will need a set of tools and a bolt of velvet. it may also take a short while for some of your followers to relocate here. Do you wish to proceed?",
    "none",
    [
	(str_store_party_name, s4, "$g_encountered_party"),
	],
	
    [
      ("establish",[
	  (player_has_item, "itm_tools"),
	  (player_has_item, "itm_velvet"),
	  ],"Establish {s4} as your court",
       [         
        (assign, "$g_player_court", "$current_town"),
	    (troop_remove_item, "trp_player", "itm_tools"),
	    (troop_remove_item, "trp_player", "itm_velvet"),
        (jump_to_menu, "mnu_town"),         
       ]),       
	
	
      ("continue",[],"Hold off...",
       [         
         (jump_to_menu, "mnu_town"),         
       ]),       
    ]
  ),

  ("notification_relieved_as_marshal", mnf_disable_all_keys,
    "{s4} wishes to inform you that your services as marshal are no longer required. In honor of valiant efforts on behalf of the realm over the last {reg4} days, however, {reg8?she:he} offers you a purse of {reg5} denars.",
    "none",
    [
	(assign, reg4, "$g_player_days_as_marshal"),
	

	
	(store_div, ":renown_gain", "$g_player_days_as_marshal",4),
	(val_min, ":renown_gain", 20),
	(store_mul, ":denar_gain", "$g_player_days_as_marshal", 50),
	(val_max, ":denar_gain", 200),
	(val_min, ":denar_gain", 4000),
	(troop_add_gold, "trp_player", ":denar_gain"),
	(call_script, "script_change_troop_renown", "trp_player", ":renown_gain"),
	(assign, "$g_player_days_as_marshal", 0),
	(assign, "$g_dont_give_marshalship_to_player_days", 15),
	(assign, reg5, ":denar_gain"),
	
	(faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
	(str_store_troop_name, s4, ":faction_leader"),
	(troop_get_type, reg8, ":faction_leader"),
      (try_begin),
        (this_or_next|eq, reg8, tf_female_elf),
        (eq, reg8, tf_female),
        (assign, reg8, tf_female), 
      (else_try),
        (assign, reg8, tf_male), 
      (try_end),
	],
	
	 [
      ("continue",[],"Continue",
       [         
         (change_screen_return),         
       ]),         
    ]
  ),

########################################################
# Autoloot Game Menus Begin
########################################################

##########################################################
# Inventory allocation / Loot allocation Game Menu  -  by Fisheye
# Parameters:
# $return_menu : return to this menu after managing loot.  0 if this menu is called via random encounter
  ("manage_loot_pool",
    0,
    "{s10}",
    "none",
    [
      (assign, "$pool_troop", "trp_temp_troop"),
      (assign, reg20,0),
      (troop_get_inventory_capacity, ":inv_cap", "$pool_troop"),
        (try_for_range, ":i_slot", 0, ":inv_cap"),
          (troop_get_inventory_slot, ":item_id", "$pool_troop", ":i_slot"),
          (ge, ":item_id", 0),
          (val_add, reg20,1),
      (try_end),
    ## CC
      (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end),
        (troop_get_inventory_capacity, ":inv_cap", ":cur_troop"),
        (try_for_range, ":i_slot", 10, ":inv_cap"),
          (troop_get_inventory_slot, ":item_id", ":cur_troop", ":i_slot"),
          (ge, ":item_id", 0),
          (val_add, reg20,1),
        (try_end),
      (try_end),
    ## CC
      # reg20 now contains number of items in loot pool
        (try_begin),
          (eq, reg20, 0),
          (str_store_string, 10, "str_item_pool_no_items"),
          (str_store_string, 20, "str_item_pool_leave"),
        (else_try),
          (eq, reg20, 1),
          (str_store_string, 10, "str_item_pool_one_item"),
          (str_store_string, 20, "str_item_pool_abandon"),
        (else_try),
          (str_store_string, 10, "str_item_pool_many_items"),
          (str_store_string, 20, "str_item_pool_abandon"),
        (try_end),
    ],
    [
      ("check_bonus_item_box",[],"check the bonus item box.",[(change_screen_loot, "trp_find_item_cheat"),]),
      
      ("equip_npcs", [],
        "Equip all npcs.", 
        [
          (call_script, "script_all_toggle_weapons_set", 1),

          (assign, "$g_prsnt_param_1", "trp_player"),
          (assign, "$g_prsnt_param_2", 0),
          (start_presentation, "prsnt_equip_npcs"),
        ]
      ),
      
      ("loot", [],
        "Access the item pools.", [(jump_to_menu, "mnu_auto_loot_item_pools"),]
      ),
      ## CC
      ("auto_loot_upgrade_management", [(eq, 1, 10),],
        "Upgrade management of the NPC's equipments.", 
        [
          (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
          (try_for_range, ":stack_no", 0, ":num_stacks"),
            (party_stack_get_troop_id,   ":stack_troop", "p_main_party", ":stack_no"),
            (is_between, ":stack_troop", companions_begin, quick_battle_troops_end),
            (assign, "$temp", ":stack_troop"),
            (assign, ":num_stacks", 0),
          (try_end),
          #(start_presentation, "prsnt_autoloot_upgrade_management"),
        ]
      ),
      
      
      ("auto_loot_set_price_threshold", [],
        "Set the price threshold for picking.",
        [
          (start_presentation, "prsnt_set_price_threshold"),
        ]
      ),
      
      ("auto_loot_leave_with_nothing", 
        [
          (gt, reg20, 0),
          (assign, reg1, "$g_price_threshold_for_picking"),
          (gt, reg1, 0),
        ],
        "Pick the items which price higher than {reg1} denars and continue.",
        [
          (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
          (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id,":stack_troop","p_main_party",":i_stack"),
            (troop_is_hero, ":stack_troop"),
            (neq, ":stack_troop", "trp_player"),
            (call_script, "script_transfer_special_inventory", "$pool_troop", ":stack_troop"), #special items
            (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end),
              (call_script, "script_transfer_special_inventory", ":cur_troop", ":stack_troop"), #special items
            (try_end),
          (try_end),
          (call_script, "script_sort_food", "trp_player"),
          (jump_to_menu, "$return_menu"),
        ]
      ),
      ("auto_loot_leave", [],
        "{s20}",
        [
          (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
          (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id,":stack_troop","p_main_party",":i_stack"),
            (troop_is_hero, ":stack_troop"),
            (neq, ":stack_troop", "trp_player"),
            (call_script, "script_transfer_inventory", "$pool_troop", ":stack_troop", 1), #include book
            (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end),
              (call_script, "script_transfer_inventory", ":cur_troop", ":stack_troop", 1), #include book
            (try_end),
          (try_end),
          (call_script, "script_sort_food", "trp_player"),
          (jump_to_menu, "$return_menu"),
        ]
      ),
################################################################
##### Custom Commander(CC)
################################################################
    ]
  ),
  ("auto_loot", 0,
    "Your heroes will automatically grab items from the item pool based on their pre-selected upgrade options. Heroes listed first in the party order will have first pick. Any equipment no longer needed will be placed back into the item pool. Are you sure you wish to do this?",
    "none", [],
    [
      ("No", [],
        "No, I've changed my mind.",
        [(jump_to_menu, "mnu_manage_loot_pool")]
      ),
      ("Yes", [],
        "Yes, perform the upgrading.",
        [
          (call_script, "script_auto_loot_all"),
          ## CC
          (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
          (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":this_hero","p_main_party",":i_stack"),
            (is_between, ":this_hero", companions_begin, quick_battle_troops_end),
            (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end),
              (call_script, "script_transfer_inventory", ":this_hero", ":cur_troop", 0),
            (try_end),
          (try_end),
          
          (call_script, "script_transfer_best_items_to_dest_troop_by_price", "trp_temp_troop", pool_troops_begin, pool_troops_end, 86),
          # sort the rest items for  begin_troop - end_troop
          (try_for_range, ":cur_troop", pool_troops_begin, pool_troops_end_minus_one),
            (store_add, ":new_begin_troop", ":cur_troop", 1),
            (call_script, "script_transfer_best_items_to_dest_troop_by_price", ":cur_troop", ":new_begin_troop", pool_troops_end, 96),
          (try_end),
          ## CC
          (jump_to_menu, "mnu_manage_loot_pool"),
        ]
      ),
    ]
  ),
  
## CC
  ("auto_loot_item_pools", 0,
    "Choose an item pool below to check it out.",
    "none", [],
    [
      ("item_pools_back", [],
        "Go back.",
        [(jump_to_menu, "mnu_manage_loot_pool")]
      ),
      ("item_pools_1", [],
        "Item pool-1",
        [
          (change_screen_loot, "trp_temp_troop"),
        ]
      ),
    ]+[("item_pools_"+str(x+2),
        [
          (store_add, ":dest_troop", pool_troops_begin, x),
          (store_free_inventory_capacity, ":free_space", ":dest_troop"),
          (lt, ":free_space", 96),
        ], "Item_pool-"+str(x+2),
        [
          (store_add, ":dest_troop", pool_troops_begin, x),
          (troop_sort_inventory, ":dest_troop"),
          (change_screen_loot, ":dest_troop"),
        ]) for x in range(0, 10)
      ]
  ),
## CC
########################################################
# Autoloot Game Menus end
########################################################
  
  
  
## CC
    ("donate", 0,
    "{s10}'s prosperity: {reg10}, relation: {reg11}. What do you want to do?",
    "none",
    [
        (str_store_party_name, s10, "$current_town"),
        (party_get_slot, reg10, "$current_town", slot_town_prosperity),
        (party_get_slot, reg11, "$current_town", slot_center_player_relation),
        (store_mul, ":gold", reg10, 20),
        (val_add, ":gold", 1200),
        (assign, reg12, 0),# is town
        (assign, reg13, ":gold"),# town donate gold
        (try_begin),
            (party_slot_eq, "$current_town", slot_party_type, spt_village),
            (assign, reg12, 1),# is village
            (val_sub, ":gold", 500),
            (assign, reg13, ":gold"),# village donate gold
        (try_end),

    ],
    [
        ("donate_gold",
        [
            (store_troop_gold, reg1, "trp_player"),
            (try_begin),
                (lt, reg1, reg13),
                (disable_menu_option),
            (try_end),
        ],
        "Donate {reg13} denars.",
        [(troop_remove_gold, "trp_player", reg13), (call_script, "script_donate_effect", 1)]),
        ("donate_cattle",
        [
            (eq, reg12, 1),
            (assign, reg1, 0),
            (try_for_parties, ":cur_party"),
                (party_slot_eq, ":cur_party", slot_party_type, spt_cattle_herd),
                (party_slot_eq, ":cur_party", slot_cattle_driven_by_player, 1),
                (neg|quest_slot_eq, "qst_move_cattle_herd", slot_quest_target_party, ":cur_party"),
                (party_get_num_companions, reg2, ":cur_party"),
                (ge, reg2, 5),
                (assign, reg1, ":cur_party"),
            (end_try),

            (try_begin),
                (eq, reg1, 0),
                (disable_menu_option),
            (try_end),
        ],
        "Donate 5 Cattle.",
        [(call_script, "script_kill_cattle_from_herd", reg1, 5), (call_script, "script_donate_effect", 1)]),
        ("donate_prisoner",
        [
            (eq, reg12, 0),
            (try_begin),
                (store_num_regular_prisoners, ":num_regular_prisoners"),
                (lt, ":num_regular_prisoners", 5),
                (disable_menu_option),
            (try_end),
        ],
        "Donate 5 Prisoners.",
        [
            (assign, ":remain", 5),

            (assign, ":prisoner_price", 0),

            (try_for_range, ":unused", 0, 5),
                (gt, ":remain", 0),
                (assign, ":lowest_level", 9999),
                (assign, ":lowest_troop", 0),
                (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
                (try_for_range, ":i_stack", 0, ":num_stacks"),
                    (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
                    (neg|troop_is_hero, ":stack_troop"),
                    (store_character_level, ":troop_level", ":stack_troop"),
                    (try_begin),
                        (lt, ":troop_level", ":lowest_level"),
                        (assign, ":lowest_level", ":troop_level"),
                        (assign, ":lowest_troop", ":stack_troop"),
                    (try_end),
                (try_end),
                (party_count_prisoners_of_type, ":num_prisoners", "p_main_party", ":lowest_troop"),
                (val_min, ":num_prisoners", ":remain"),
                (remove_troops_from_prisoners, ":lowest_troop", ":num_prisoners"),

                (call_script, "script_game_get_prisoner_price", ":lowest_troop"),
                (assign, ":sell_price", reg0),
                (val_mul, ":sell_price", ":num_prisoners"),
                (val_add, ":prisoner_price", ":sell_price"),

                (val_sub, ":remain", ":num_prisoners"),
                (assign, reg1, ":num_prisoners"),
                (str_store_troop_name, s1, ":lowest_troop"),
                (display_message, "@Donated {reg1} {s1} as slaves."),
            (try_end),

            #(store_mul, ":gold_4", reg13,3),
            (store_mul, ":gold_4", reg13,2),
            (assign, ":gold_3", reg13),
            (store_div, ":gold_2", reg13,2),
            (store_div, ":gold_1", reg13,4),


            (try_begin),
              (ge, ":prisoner_price", ":gold_4"),
              (call_script, "script_donate_effect", 4),
            (else_try),
              (ge, ":prisoner_price", ":gold_3"),
              (call_script, "script_donate_effect", 3),
            (else_try),
              (ge, ":prisoner_price", ":gold_2"),
              (call_script, "script_donate_effect", 2),
            (else_try),
              (ge, ":prisoner_price", ":gold_1"),
              (call_script, "script_donate_effect", 1),
            (else_try),
              (call_script, "script_donate_effect", 0),
            (try_end),

        ]),
        ("back_to_town_menu", [], "Return.",
        [
            (try_begin),
                (eq, reg12, 1),
                (jump_to_menu, "mnu_village"),
            (else_try),
                (jump_to_menu, "mnu_town"),
            (try_end),
        ]),
    ]),
#zs:blacksmith
("blacksmith", 0, "What do you want to do?", "none",
[    (set_background_mesh, "mesh_pic_market_3"),
    (play_sound,"snd_blacksmith"),
],
[       
        ("upgrade_item",[],"upgrade_item",[(jump_to_menu, "mnu_blacksmith_item_low"),]),
        
        #("upgrade_item",
        #[],
        #"upgrade_item",
        #[
            #(jump_to_menu, "mnu_blacksmith_item_high"),
        #]),
                
       ("back_to_town_menu", [], "Return.", [(jump_to_menu, "mnu_town")]),
 ]),
 

 
 
("blacksmith_item_high", 0, "What do you want to do?", "none",
[    (set_background_mesh, "mesh_pic_market_3"),
    (play_sound,"snd_blacksmith"),

    (assign, reg11, -1),(assign, reg12, -1),(assign, reg13, -1),
    (assign, reg14, -1),(assign, reg15, -1),(assign, reg16, -1),
    (assign, reg17, -1),(assign, reg18, -1),(assign, reg19, -1),
    (store_mul, ":hero_pos1", "$cur_page", 9),# current page should begin with the $cur_page*9+1 hero.
    (val_add, ":hero_pos1", 1),
    (store_add, ":hero_pos2", ":hero_pos1", 1),(store_add, ":hero_pos3", ":hero_pos1", 2),
    (store_add, ":hero_pos4", ":hero_pos1", 3),(store_add, ":hero_pos5", ":hero_pos1", 4),
    (store_add, ":hero_pos6", ":hero_pos1", 5),(store_add, ":hero_pos7", ":hero_pos1", 6),
    (store_add, ":hero_pos8", ":hero_pos1", 7),(store_add, ":hero_pos9", ":hero_pos1", 8),
    (assign, ":hero_cnt", 0),
    (party_get_num_companion_stacks, ":stack_cnt", "p_main_party"),
    (try_for_range, ":stack_i", 0, ":stack_cnt"),
        (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":stack_i"),
        (this_or_next|eq, ":stack_troop", "trp_player"),
        (is_between, ":stack_troop", companions_begin, quick_battle_troops_end),
        (val_add, ":hero_cnt", 1),
        (try_begin), (eq, ":hero_cnt", ":hero_pos1"), (assign, reg11, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos2"), (assign, reg12, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos3"), (assign, reg13, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos4"), (assign, reg14, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos5"), (assign, reg15, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos6"), (assign, reg16, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos7"), (assign, reg17, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos8"), (assign, reg18, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos9"), (assign, reg19, ":stack_troop"),
        (try_end),
    (try_end),
    (store_div, reg20, ":hero_cnt", 10),# reg20 = the last page index
],
[
    ("blacksmith_hero1",[(ge, reg11, 0), (str_store_troop_name, s10, reg11)], "{s10}", [(assign, "$temp", reg11), (jump_to_menu, "mnu_blacksmith2")]),
    ("blacksmith_hero2",[(ge, reg12, 0), (str_store_troop_name, s10, reg12)], "{s10}", [(assign, "$temp", reg12), (jump_to_menu, "mnu_blacksmith2")]),
    ("blacksmith_hero3",[(ge, reg13, 0), (str_store_troop_name, s10, reg13)], "{s10}", [(assign, "$temp", reg13), (jump_to_menu, "mnu_blacksmith2")]),
    ("blacksmith_hero4",[(ge, reg14, 0), (str_store_troop_name, s10, reg14)], "{s10}", [(assign, "$temp", reg14), (jump_to_menu, "mnu_blacksmith2")]),
    ("blacksmith_hero5",[(ge, reg15, 0), (str_store_troop_name, s10, reg15)], "{s10}", [(assign, "$temp", reg15), (jump_to_menu, "mnu_blacksmith2")]),
    ("blacksmith_hero6",[(ge, reg16, 0), (str_store_troop_name, s10, reg16)], "{s10}", [(assign, "$temp", reg16), (jump_to_menu, "mnu_blacksmith2")]),
    ("blacksmith_hero7",[(ge, reg17, 0), (str_store_troop_name, s10, reg17)], "{s10}", [(assign, "$temp", reg17), (jump_to_menu, "mnu_blacksmith2")]),
    ("blacksmith_hero8",[(ge, reg18, 0), (str_store_troop_name, s10, reg18)], "{s10}", [(assign, "$temp", reg18), (jump_to_menu, "mnu_blacksmith2")]),
    ("blacksmith_hero9",[(ge, reg19, 0), (str_store_troop_name, s10, reg19)], "{s10}", [(assign, "$temp", reg19), (jump_to_menu, "mnu_blacksmith2")]),
    ("prev_page", [(gt, "$cur_page", 0)], "Previous page.", [(val_sub, "$cur_page", 1)]),
    ("next_page", [(lt, "$cur_page", reg20)], "Next page.", [(val_add, "$cur_page", 1)]),
    ("back_to_town_menu", [], "Return.", [(jump_to_menu, "mnu_enter_blacksmith")]),
]),

#zs:blacksmith
("blacksmith2", 0, "What do you want to do?", "none",
[    (set_background_mesh, "mesh_pic_market_3"),
    (play_sound,"snd_blacksmith"),

    (store_item_kind_count, reg21, "itm_tools"),# reg21 = player tools count
    (store_troop_gold, reg22, "trp_player"),# reg22 = player gold
],
    [("blacksmith_ek_item"+str(x+1),
    [
        (call_script, "script_equipment_upgrade_requirement", "$temp", x + ek_item_0),
        (try_begin),
            (this_or_next|eq, reg12, 0),#reg12 = troop can use the upgraded item?
            (this_or_next|lt, reg21, reg13),#reg13 = iron & tools count needed
            (lt, reg22, reg14),#reg14 = gold needed
            (disable_menu_option),
        (try_end),
        (str_store_string, s20, "str_upgrade_item_2"),
    ],"{s20}",
    [
        (call_script, "script_equipment_upgrade_requirement", "$temp", x + ek_item_0),
        (troop_remove_items, "trp_player", "itm_tools", reg13),
        (troop_remove_gold, "trp_player", reg14),
        (troop_set_inventory_slot_modifier, "$temp", x + ek_item_0, reg15),
    ]) for x in range(0, 9)]
      +[("back_to_town_menu",[],"Head back.",[(jump_to_menu,"mnu_enter_blacksmith"),(set_show_messages, 1),]),]
  ),
  
("blacksmith_item_low", 0, "What do you want to do?", "none",
[    (set_background_mesh, "mesh_pic_market_3"),
    (play_sound,"snd_blacksmith"),

    (assign, reg11, -1),(assign, reg12, -1),(assign, reg13, -1),
    (assign, reg14, -1),(assign, reg15, -1),(assign, reg16, -1),
    (assign, reg17, -1),(assign, reg18, -1),(assign, reg19, -1),
    (store_mul, ":hero_pos1", "$cur_page", 9),# current page should begin with the $cur_page*9+1 hero.
    (val_add, ":hero_pos1", 1),
    (store_add, ":hero_pos2", ":hero_pos1", 1),(store_add, ":hero_pos3", ":hero_pos1", 2),
    (store_add, ":hero_pos4", ":hero_pos1", 3),(store_add, ":hero_pos5", ":hero_pos1", 4),
    (store_add, ":hero_pos6", ":hero_pos1", 5),(store_add, ":hero_pos7", ":hero_pos1", 6),
    (store_add, ":hero_pos8", ":hero_pos1", 7),(store_add, ":hero_pos9", ":hero_pos1", 8),
    (assign, ":hero_cnt", 0),
    (party_get_num_companion_stacks, ":stack_cnt", "p_main_party"),
    (try_for_range, ":stack_i", 0, ":stack_cnt"),
        (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":stack_i"),
        (this_or_next|eq, ":stack_troop", "trp_player"),
        (is_between, ":stack_troop", companions_begin, quick_battle_troops_end),
        (val_add, ":hero_cnt", 1),
        (try_begin), (eq, ":hero_cnt", ":hero_pos1"), (assign, reg11, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos2"), (assign, reg12, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos3"), (assign, reg13, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos4"), (assign, reg14, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos5"), (assign, reg15, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos6"), (assign, reg16, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos7"), (assign, reg17, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos8"), (assign, reg18, ":stack_troop"),
        (else_try),  (eq, ":hero_cnt", ":hero_pos9"), (assign, reg19, ":stack_troop"),
        (try_end),
    (try_end),
    (store_div, reg20, ":hero_cnt", 10),# reg20 = the last page index
],
[
    ("blacksmith_hero1",[(ge,reg11,0),(str_store_troop_name,s10,reg11)],"{s10}",[(assign,"$temp",reg11),(jump_to_menu,"mnu_blacksmith2_low")]),
    ("blacksmith_hero2",[(ge,reg12,0),(str_store_troop_name,s10,reg12)],"{s10}",[(assign,"$temp",reg12),(jump_to_menu,"mnu_blacksmith2_low")]),
    ("blacksmith_hero3",[(ge,reg13,0),(str_store_troop_name,s10,reg13)],"{s10}",[(assign,"$temp",reg13),(jump_to_menu,"mnu_blacksmith2_low")]),
    ("blacksmith_hero4",[(ge,reg14,0),(str_store_troop_name,s10,reg14)],"{s10}",[(assign,"$temp",reg14),(jump_to_menu,"mnu_blacksmith2_low")]),
    ("blacksmith_hero5",[(ge,reg15,0),(str_store_troop_name,s10,reg15)],"{s10}",[(assign,"$temp",reg15),(jump_to_menu,"mnu_blacksmith2_low")]),
    ("blacksmith_hero6",[(ge,reg16,0),(str_store_troop_name,s10,reg16)],"{s10}",[(assign,"$temp",reg16),(jump_to_menu,"mnu_blacksmith2_low")]),
    ("blacksmith_hero7",[(ge,reg17,0),(str_store_troop_name,s10,reg17)],"{s10}",[(assign,"$temp",reg17),(jump_to_menu,"mnu_blacksmith2_low")]),
    ("blacksmith_hero8",[(ge,reg18,0),(str_store_troop_name,s10,reg18)],"{s10}",[(assign,"$temp",reg18),(jump_to_menu,"mnu_blacksmith2_low")]),
    ("blacksmith_hero9",[(ge,reg19,0),(str_store_troop_name,s10,reg19)],"{s10}",[(assign,"$temp",reg19),(jump_to_menu,"mnu_blacksmith2_low")]),
    ("prev_page", [(gt, "$cur_page", 0)], "Previous page.", [(val_sub, "$cur_page", 1)]),
    ("next_page", [(lt, "$cur_page", reg20)], "Next page.", [(val_add, "$cur_page", 1)]),
    ("back_to_town_menu", [], "Return.", [(jump_to_menu, "mnu_blacksmith")]),
]),
  
("blacksmith2_low", 0, "What do you want to do?", "none",
[    (set_background_mesh, "mesh_pic_market_3"),
    (play_sound,"snd_blacksmith"),

    (store_item_kind_count, reg21, "itm_tools"),# reg21 = player tools count
    (store_troop_gold, reg22, "trp_player"),# reg22 = player gold
],
[
    ("upgrade_item"+str(x+1),
    [
        (call_script, "script_equipment_upgrade_cost", "$temp", x + ek_item_0),
        (try_begin),
            (this_or_next|eq, reg10, 0),#reg10 = troop can use the upgraded item?
            (this_or_next|eq, reg11, 0),#reg10 = troop can use the upgraded item?
            (this_or_next|lt, reg21, reg12),#reg11 = iron & tools count needed
            (lt, reg22, reg13),#reg14 = gold needed
            (disable_menu_option),
        (try_end),
        (troop_get_inventory_slot, ":item", "$temp", x + ek_item_0),
        (try_begin),
          (gt,":item", 0),
          (str_store_item_name, s10, ":item"),# output item name
          (troop_get_inventory_slot_modifier, ":item_mod_cur", "$temp", x + ek_item_0),
          (store_sub, ":out_string", ":item_mod_cur", imod_plain),
          (val_add, ":out_string", "str_imod_plain"),
          (str_store_string, s11, ":out_string"),# output current imod string
        (try_end),
        (str_store_string, s20, "str_upgrade_item"),
        ], "{s20}",
    [
        (call_script, "script_equipment_upgrade_cost", "$temp", x + ek_item_0),
        (eq,reg10,1),
        (eq,reg11,1),
        (troop_remove_items, "trp_player", "itm_tools", reg12),
        (troop_remove_gold, "trp_player", reg13),
        (troop_get_inventory_slot_modifier, ":item_mod_cur", "$temp", x + ek_item_0),
        (troop_get_inventory_slot, ":item", "$temp", x + ek_item_0),
        (call_script, "script_cf_get_item_new_mod", ":item", ":item_mod_cur"),
        (assign, ":item_mod_new", reg0),
        (troop_set_inventory_slot_modifier, "$temp", x + ek_item_0, ":item_mod_new"),
    ]) for x in range(0, 8)]    
      +[("back_to_town_menu",[],"Head back.",[(jump_to_menu,"mnu_blacksmith"),]),]
  ),
      
  
  ##diplomacy begin  
  (
    "dplmc_notification_alliance_declared",0,
    "Alliance Agreement^^{s1} and {s2} have formed an alliance!^{s57}",
    "none",
    [
      (set_background_mesh, "mesh_name_kingdom"),
      (str_clear, s57),
      
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (store_sub, ":faction_1", "$g_notification_menu_var1", kingdoms_begin),
      (store_sub, ":faction_2", "$g_notification_menu_var2", kingdoms_begin),
      (val_mul, ":faction_1", 128),
      (val_add, ":faction_1", ":faction_2"),
      (set_game_menu_tableau_mesh, "tableau_2_factions_mesh", ":faction_1", pos0),
      ],
    [
      ("dplmc_continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),
  
  (
    "dplmc_notification_defensive_declared",0,
    "Defensive Pact^^{s1} and {s2} have agreed to a defensive pact!^{s57}",
    "none",
    [
      (set_background_mesh, "mesh_name_kingdom"),
	  (str_clear, s57),
	
	  (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (store_sub, ":faction_1", "$g_notification_menu_var1", kingdoms_begin),
      (store_sub, ":faction_2", "$g_notification_menu_var2", kingdoms_begin),
      (val_mul, ":faction_1", 128),
      (val_add, ":faction_1", ":faction_2"),
      (set_game_menu_tableau_mesh, "tableau_2_factions_mesh", ":faction_1", pos0),
      ],
    [
      ("dplmc_continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),
  
  (
    "dplmc_notification_trade_declared",0,
    "Trade Agreement^^{s1} and {s2} have signed a trade agreement!^{s57}",
    "none",
    [
      (set_background_mesh, "mesh_name_kingdom"),
	  (str_clear, s57),
	
	  (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (store_sub, ":faction_1", "$g_notification_menu_var1", kingdoms_begin),
      (store_sub, ":faction_2", "$g_notification_menu_var2", kingdoms_begin),
      (val_mul, ":faction_1", 128),
      (val_add, ":faction_1", ":faction_2"),
      (set_game_menu_tableau_mesh, "tableau_2_factions_mesh", ":faction_1", pos0),
      ],
    [
      ("dplmc_continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),
  
  (
    "dplmc_notification_nonaggression_declared",0,
    "Non-aggression Treaty^^{s1} and {s2} have concluded a non-aggression treaty!^{s57}",
    "none",
    [
      (set_background_mesh, "mesh_name_kingdom"),
	  (str_clear, s57),
	
	  (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (store_sub, ":faction_1", "$g_notification_menu_var1", kingdoms_begin),
      (store_sub, ":faction_2", "$g_notification_menu_var2", kingdoms_begin),
      (val_mul, ":faction_1", 128),
      (val_add, ":faction_1", ":faction_2"),
      (set_game_menu_tableau_mesh, "tableau_2_factions_mesh", ":faction_1", pos0),
      ],
    [
      ("dplmc_continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),
  
  (
    "dplmc_question_alliance_offer",0,
    "You Receive an Alliance Offer^^The {s1} wants to form an alliance with you. What is your answer?",
    "none",
    [
      (set_background_mesh, "mesh_set_vassal_title"),
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      ],
    [
      ("dplmc_alliance_offer_accept",[],"Accept",
       [
         (call_script, "script_dplmc_start_alliance_between_kingdoms", "fac_player_supporters_faction", "$g_notification_menu_var1", 1),
         (change_screen_return),
        ]),
      ("dplmc_alliance_offer_reject",[],"Reject",
       [
         (call_script, "script_change_player_relation_with_faction", "$g_notification_menu_var1", -2),
         (change_screen_return),
        ]),
     ]
  ),
  
  (
    "dplmc_question_defensive_offer",0,
    "You Receive a Pact Offer^^The {s1} offers you a defensive pact. What is your answer?",
    "none",
    [
      (set_background_mesh, "mesh_set_vassal_title"),
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      ],
    [
      ("dplmc_defensive_offer_accept",[],"Accept",
       [
         (call_script, "script_dplmc_start_defensive_between_kingdoms", "fac_player_supporters_faction", "$g_notification_menu_var1", 1),
         (change_screen_return),
        ]),
      ("dplmc_defensive_offer_reject",[],"Reject",
       [
         (call_script, "script_change_player_relation_with_faction", "$g_notification_menu_var1", -2),
         (change_screen_return),
        ]),
     ]
  ),
  
  (
    "dplmc_question_trade_offer",0,
    "You Receive a Pact Offer^^The {s1} offers you a trade pact. What is your answer?",
    "none",
    [
      (set_background_mesh, "mesh_set_vassal_title"),
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      ],
    [
      ("dplmc_trade_offer_accept",[],"Accept",
       [
         (call_script, "script_dplmc_start_trade_between_kingdoms", "fac_player_supporters_faction", "$g_notification_menu_var1", 1),
         (change_screen_return),
        ]),
      ("dplmc_trade_offer_reject",[],"Reject",
       [
         (call_script, "script_change_player_relation_with_faction", "$g_notification_menu_var1", -2),
         (change_screen_return),
        ]),
     ]
  ),
  
  (
    "dplmc_question_nonaggression_offer",0,
    "You Receive a Pact Offer^^The {s1} offers you a non-aggression treaty. What is your answer?",
    "none",
    [
      (set_background_mesh, "mesh_set_vassal_title"),
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      ],
    [
      ("dplmc_nonaggression_offer_accept",[],"Accept",
       [
         (call_script, "script_dplmc_start_nonaggression_between_kingdoms", "fac_player_supporters_faction", "$g_notification_menu_var1", 1),
         (change_screen_return),
        ]),
      ("dplmc_nonaggression_offer_reject",[],"Reject",
       [
         (call_script, "script_change_player_relation_with_faction", "$g_notification_menu_var1", -2),
         (change_screen_return),
        ]),
     ]
  ),
  
  (
    "dplmc_notification_alliance_expired",0,
    "Alliance Has Expired^^The alliance between {s1} and {s2} has expired and was degraded to a defensive pact.",
    "none",
    [
      (set_background_mesh, "mesh_name_kingdom"),
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
	  
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      ],
    [
      ("dplmc_continue",[],"Continue",
       [
	   (change_screen_return),
        ]),
     ]
  ),
  
  (
    "dplmc_notification_defensive_expired",0,
    "Defensive Pact Has Expired^^The defensive pact between {s1} and {s2} has expired and was degraded to a trade agreement.",
    "none",
    [
      (set_background_mesh, "mesh_name_kingdom"),
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
	  
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      ],
    [
      ("dplmc_continue",[],"Continue",
       [
	   (change_screen_return),
        ]),
     ]
  ),
  
  
  (
    "dplmc_notification_trade_expired",0,
    "Trade Agreement Has Expired^^The trade agreement between {s1} and {s2} has expired and was degraded to a non-aggression treaty.",
    "none",
    [
      (set_background_mesh, "mesh_name_kingdom"),
      (str_store_faction_name, s1, "$g_notification_menu_var1"),
      (str_store_faction_name, s2, "$g_notification_menu_var2"),
	  
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),
      ],
    [
      ("dplmc_continue",[],"Continue",
       [
	   (change_screen_return),
        ]),
     ]
  ),

  ("dplmc_dictate_terms",menu_text_color(0xFF000000)|mnf_disable_all_keys,
    "Dictate your peace terms.",
    "none",
    [
    (set_background_mesh, "mesh_set_vassal_title"),
    (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),],
    [
      ("dplmc_demand_4000",[(gt, "$g_player_chamberlain", 0),],"Demand 4000 denars",
      [
        (call_script, "script_npc_decision_checklist_peace_or_war", "$g_notification_menu_var1", "fac_player_supporters_faction", -1),
        (assign, ":goodwill", reg0),      
        (store_random_in_range, ":random", 0, 4),
        
        (call_script, "script_change_player_relation_with_faction", "$g_notification_menu_var1", -3),   
        (try_begin),
          (le, ":random", ":goodwill"),
          (call_script, "script_dplmc_pay_into_treasury", 4000),
          (call_script, "script_diplomacy_start_peace_between_kingdoms", "$g_notification_menu_var1", "fac_player_supporters_faction", 1),
          (change_screen_return),
        (else_try),
          (jump_to_menu,"mnu_dplmc_deny_terms"),
        (try_end),                
      ]),
      ("dplmc_demand_8000",[(gt, "$g_player_chamberlain", 0),],"Demand 8000 denars",
       [  
         (call_script, "script_npc_decision_checklist_peace_or_war", "$g_notification_menu_var1", "fac_player_supporters_faction", -1),
         (assign, ":goodwill", reg0), 
         (val_mul, ":goodwill", 2),      
            	 (store_random_in_range, ":random", 0, 10),
         
         (call_script, "script_change_player_relation_with_faction", "$g_notification_menu_var1", -5), 
            	 (try_begin),
            	   (le, ":random", ":goodwill"),
           (call_script, "script_dplmc_pay_into_treasury", 8000),
           (call_script, "script_diplomacy_start_peace_between_kingdoms", "$g_notification_menu_var1", "fac_player_supporters_faction", 1),
           (change_screen_return),
         (else_try),
             (jump_to_menu,"mnu_dplmc_deny_terms"),
         (try_end),
       ]),
      ("dplmc_demand_castle",[
        (assign, ":distance", 100),
        (assign, "$demanded_castle", -1),
        (try_for_range, ":castle", castles_begin, castles_end),
          (store_faction_of_party, ":castle_faction", ":castle"),
          (eq, ":castle_faction", "$g_notification_menu_var1"),
          (try_for_range, ":center", centers_begin, centers_end),
            (store_faction_of_party, ":center_faction", ":center"),
            (eq, ":center_faction", "fac_player_supporters_faction"),
            (store_distance_to_party_from_party, ":tmp_distance", ":center", ":castle"),

            (lt, ":tmp_distance", ":distance"),
            (assign, ":distance", ":tmp_distance"),
            (assign, "$demanded_castle", ":castle"),
            (str_store_party_name, s2, ":castle"),
          (try_end),
        (try_end),
        (is_between, "$demanded_castle", castles_begin,castles_end),
      ],"Demand {s2}.",
       [
        (call_script, "script_npc_decision_checklist_peace_or_war", "$g_notification_menu_var1", "fac_player_supporters_faction", -1),
        (assign, ":goodwill", reg0), 
        (val_mul, ":goodwill", 2),     
        (store_random_in_range, ":random", 0, 12),
          
        (call_script, "script_change_player_relation_with_faction", "$g_notification_menu_var1", -6),
        (try_begin),
          (le, ":random", ":goodwill"),
          (call_script, "script_give_center_to_faction", "$demanded_castle", "fac_player_supporters_faction"),
          (call_script, "script_diplomacy_start_peace_between_kingdoms", "$g_notification_menu_var1", "fac_player_supporters_faction", 1),    
          (change_screen_return),
        (else_try),       
          (jump_to_menu,"mnu_dplmc_deny_terms"),
        (try_end),        ]
       ),       
	  ("dplmc_go_back",[],"Go back",
       [
	     (jump_to_menu,"mnu_question_peace_offer"),
       ]),
    ]
  ),
  
  ("dplmc_deny_terms",menu_text_color(0xFF000000)|mnf_disable_all_keys,
    "The {s1} refuses your terms and is breaking off of negotiations.",
    "none",
    [(set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "$g_notification_menu_var1", pos0),],
    [      
	  ("dplmc_continue",[],"Continue",
       [
       (change_screen_return),
       ]),
    ]
  ),
  
  (
    "dplmc_village_riot_result",mnf_scale_picture,
    "{s9}",
    "none",
    [(try_begin),
       (eq, "$g_battle_result", 1),
       (jump_to_menu, "mnu_dplmc_village_riot_removed"),
     (else_try),
       (set_background_mesh, "mesh_pic_villageriot"),
       (str_store_string, s9, "@Try as you might, you could not defeat the rebelling village."),
     (try_end),
    ],
    [
      ("dplmc_continue",[],"Continue...",
       [(call_script, "script_change_player_relation_with_center", "$g_encountered_party", -3),
        (jump_to_menu, "mnu_village"),]),
    ],
  ),
  
  (
    "dplmc_village_riot_removed",mnf_disable_all_keys,
    "In bloody battle you and your men slaughter the rebels and regain control over the village. But there is not much left you can control.",
    "none",
    [
     (set_background_mesh, "mesh_pic_looted_village"),
     (party_set_slot, "$g_encountered_party", slot_village_infested_by_bandits, 0),
     (call_script, "script_village_set_state",  "$current_town", svs_looted),
     (party_set_slot, "$current_town", slot_center_lair_build_type, 0),
    ],
    [
      ("dplmc_continue",[],"Continue...",
       [     
         (jump_to_menu, "mnu_village"),
       ]),
    ],
  ),
  
  (
    "dplmc_town_riot_removed",mnf_disable_all_keys,
    "In bloody battle you and your men slaughter the rebels and regain control over the town.",
    "none",
    [],
    [
      ("dplmc_continue",[],"Continue...",
       [     
        (party_set_slot, "$g_encountered_party", slot_village_infested_by_bandits, 0),
        (assign, "$new_encounter", 1),
        (try_begin),   
          (party_get_slot, ":town_lord","$g_encountered_party", slot_town_lord),
          (troop_get_slot, ":cur_banner", ":town_lord", slot_troop_banner_scene_prop),
          (gt, ":cur_banner", 0),
          (val_sub, ":cur_banner", banner_scene_props_begin),
          (val_add, ":cur_banner", banner_map_icons_begin),
          (party_set_banner_icon, "$g_encountered_party", ":cur_banner"),   
        (try_end),    
        (jump_to_menu, "mnu_castle_outside"),
       ]),
    ],
  ),
  
  (
    "dplmc_riot_negotiate",mnf_disable_all_keys,
    "You approach the angry crowd and begin negotiations. The leader of the riot demands {reg0} denars. He agrees to lay down arms if you are willing to pay.",
    "none",
    [
      (party_get_slot, ":center_relation", "$g_encountered_party", slot_center_player_relation),
      (val_min, ":center_relation", 0),
      (try_begin),
        (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
        (val_sub, ":center_relation", 75),
        (set_background_mesh, "mesh_pic_townriot"),
      (else_try),
        (val_sub, ":center_relation", 50),
        (set_background_mesh, "mesh_pic_villageriot"),
      (try_end),
      
      (party_get_skill_level, ":persuasion_level", "p_main_party", "skl_persuasion"),
      (val_mul, ":persuasion_level", 2),
      (val_add, ":center_relation", ":persuasion_level"),
      (val_mul, ":center_relation", ":center_relation"),
      (assign, reg0, ":center_relation"),
    ],
    [
      ("dplmc_pay_riot_treasury",
      [
        (gt, "$g_player_chamberlain", 0),
        (store_troop_gold, ":gold", "trp_household_possessions"),
        (ge, ":gold", reg0),
      ],"Induce your chamberlain to pay the money from the treasury.",
       [     
        (call_script, "script_dplmc_withdraw_from_treasury", reg0),
        (party_set_slot, "$g_encountered_party", slot_village_infested_by_bandits, 0),
        (try_begin),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (jump_to_menu, "mnu_castle_outside"),
        (else_try),
          (jump_to_menu, "mnu_village"),
        (try_end),         

       ]),
       ("dplmc_pay_riot_cash",
      [
        (store_troop_gold, ":gold", "trp_player"),
        (ge, ":gold", reg0),
      ],"Pay cash.",
       [     
        (troop_remove_gold, "trp_player", reg0),
        (party_set_slot, "$g_encountered_party", slot_village_infested_by_bandits, 0),
        (try_begin),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (jump_to_menu, "mnu_castle_outside"),
        (else_try),
          (jump_to_menu, "mnu_village"),
        (try_end),         

       ]),      

      ("dplmc_back",[],"Back...",
       [     
        (try_begin),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (jump_to_menu, "mnu_castle_outside"),
        (else_try),
          (jump_to_menu, "mnu_village"),
        (try_end),
       ]),
    ],
  ),
  
  (
    "dplmc_notification_riot",0,
    "The peasants of {s1} launched a riot against you! In a surprise attack, men loyal to you have been slain. The remainder joined the angry crowd.",
    "none",
    [
      (str_store_party_name, s1, "$g_notification_menu_var1"),
      (try_begin),
        (party_slot_eq, "$g_notification_menu_var1", slot_party_type, spt_town),
        (set_background_mesh, "mesh_pic_townriot"),
        (call_script,"script_change_player_effect", -100),
      (else_try),
        (set_background_mesh, "mesh_pic_villageriot"),
        (call_script,"script_change_player_effect", -20),
      (try_end),
      
      ],
    [
      ("dplmc_continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),
  
  (
    "dplmc_notification_appoint_chamberlain",0,
    "As a lord of a fief you can now appoint a chamberlain who resides at you court for a weekly salary of 15 denars. He will handle all financial affairs like collecting and determining taxes, paying wages and managing your estate. In addition he supervises money transfers between kingdoms giving you more diplomatic options.",
    "none",
    [(set_background_mesh, "mesh_set_vassal_title"),],
    [

      ("dplmc_appoint_default",[],"Appoint a prominent nobleman from the area.",
       [
        (call_script, "script_dplmc_appoint_chamberlain"),
        (jump_to_menu, "mnu_dplmc_chamberlain_confirm"),
        ]),	
      ("dplmc_continue",[],"Proceed without chamberlain.",
       [
         (assign, "$g_player_chamberlain", -1), #denied
         (change_screen_return),
        ]),                    
     ]
  ), 
  
  (
    "dplmc_chamberlain_confirm",0,
    "Your chamberlain can be found at your court. You should consult him if you want to give him any financial advice or you need greater amounts of money. You should always make sure that there is enough money in the treasury to pay for political affairs.",
    "none",
    [],
    [
      ("dplmc_continue",[],"Continue...",
       [
         (change_screen_return),
        ]),
     ]
  ),  
  
  (
    "dplmc_notification_appoint_constable",0,
    "As a lord of a fief you can now appoint a constable who resides at you court for a weekly salary of 15 denars. He will recruit new troops and provide information about your army.",
    "none",
    [(set_background_mesh, "mesh_set_vassal_title"),],
    [

      ("dplmc_appoint_default",[],"Appoint a prominent nobleman from the area.",
       [
        (call_script, "script_dplmc_appoint_constable"),
        (jump_to_menu, "mnu_dplmc_constable_confirm"),
        ]),	
      ("dplmc_continue",[],"Proceed without constable.",
       [
         (assign, "$g_player_constable", -1), #denied
         (assign, "$g_constable_training_center", -1),
         (change_screen_return),
        ]),                    
     ]
  ), 
  
  (
    "dplmc_constable_confirm",0,
    "Your constable can be found at your court. You should consult him if you want to recruit new troops or get detailed information about your standing army.",
    "none",
    [],
    [
      ("dplmc_continue",[],"Continue...",
       [
         (change_screen_return),
        ]),
     ]
  ),  
  


  (
    "dplmc_notification_appoint_chancellor",0,
    "As a lord of a fief you can now appoint a chancellor who resides at you court for a weekly salary of 20 denars. He will be the keeper of your seal and conduct the correspondence between you and other important persons.",
    "none",
    [(set_background_mesh, "mesh_set_vassal_title"),],
    [

      ("dplmc_appoint_default",[],"Appoint a prominent nobleman from the area.",
       [
        (call_script, "script_dplmc_appoint_chancellor"),
        (jump_to_menu, "mnu_dplmc_chancellor_confirm"),
        ]),	
      ("dplmc_continue",[],"Proceed without chancellor.",
       [
         (assign, "$g_player_chancellor", -1), #denied
         (change_screen_return),
        ]),                    
     ]
  ), 
  
  (
    "dplmc_chancellor_confirm",0,
    "Your chancellor can be found at your court. You should consult him if you want to send messages or gifts.",
    "none",
    [],
    [
      ("dplmc_continue",[],"Continue...",
       [
         (change_screen_return),
        ]),
     ]
  ), 


  (
    "dplmc_deserters",0,
    "Some of your men don't believe that you will pay their wages and desert. Overall you lose: {s11} men.",
    "none",
    [
      (set_background_mesh, "mesh_pic_deserters"),
      (store_random_in_range, ":random", 1,  "$g_notification_menu_var1"),
      (call_script, "script_dplmc_player_troops_leave", ":random"),
      (call_script,"script_change_player_effect", -30),
      (str_store_string, s11, "@{reg0}"),
    ],
    [
      ("dplmc_continue",[],"Continue...",
       [
         (change_screen_return),
        ]),
     ]
  ),  
  
  (
    "dplmc_negotiate_besieger",0,
    "You appear with a white flag at the top of the wall. After a while a negotiator of {s11} approaches you. He demands {s6} and all associated villages as well as {reg0} denars for safe conduct.",
    "none",
    [
      (party_get_slot, ":besieger", "$current_town", slot_center_is_besieged_by),
      (party_stack_get_troop_id, ":enemy_party_leader", ":besieger", 0),
      (str_store_troop_name, s11, ":enemy_party_leader"),
      (store_faction_of_troop, ":besieger_faction", ":enemy_party_leader"),

      (assign, ":besieger_size", 0),
      (try_for_range, ":lord", active_npcs_begin, active_npcs_end),
        (store_faction_of_troop, ":lord_faction", ":lord"),
        (eq, ":lord_faction", ":besieger_faction"),
        (troop_get_slot, ":led_party", ":lord", slot_troop_leaded_party),
        (party_is_active, ":led_party"),
        
        (party_slot_eq, ":led_party", slot_party_ai_state, spai_accompanying_army),
        (party_slot_eq, ":led_party", slot_party_ai_object, ":besieger"),
        
        (party_is_active, ":besieger"),
        (store_distance_to_party_from_party, ":distance_to_marshal", ":led_party", ":besieger"),
        (lt, ":distance_to_marshal", 25),
        (party_get_num_companions, ":party_size", ":led_party"),
        (val_add, ":besieger_size", ":party_size"),
      (try_end),
         
      (assign, ":garrison_size", 0),
      (party_get_num_companion_stacks, ":num_stacks", "$current_town"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_size, ":stack_size", "$current_town", ":i_stack"),
        (val_add, ":garrison_size", ":stack_size"),
      (try_end),
      (val_sub, ":besieger_size", ":garrison_size"),

      (store_skill_level, ":player_persuasion_skill", "skl_persuasion", "trp_player"),      
      (val_mul, ":player_persuasion_skill", 10),
      (store_sub, "$diplomacy_var", ":besieger_size", ":player_persuasion_skill"),
      (val_mul, "$diplomacy_var", 4),
      (val_max,"$diplomacy_var",500),
      (val_div, "$diplomacy_var", 100),
      (val_mul, "$diplomacy_var", 100),
      (assign, reg0, "$diplomacy_var"),
      
      (str_store_party_name, s6, "$current_town"),
      
    ],
      [
      ("dplmc_comply_treasury",
      [
        (store_troop_gold, ":gold", "trp_household_possessions"), 
        (ge, ":gold", "$diplomacy_var"),      
      ],"Comply and induce your chamberlain to pay the money from the treasury.",
      [
        (call_script, "script_dplmc_withdraw_from_treasury", "$diplomacy_var"),
        (call_script, "script_dplmc_player_center_surrender", "$current_town"),
        (change_screen_return),
      ]),
        
      ("dplmc_comply",
      [
        (store_troop_gold, ":gold", "trp_player"), 
        (ge, ":gold", "$diplomacy_var"),
      ],"Comply and pay the money cash.",
      [
        (troop_remove_gold, "trp_player", "$diplomacy_var"),
        (call_script, "script_dplmc_player_center_surrender", "$current_town"),
        (change_screen_return),
      ]),
        
      ("dplmc_break_off",[],"Break off negotiations.",
       [
          (jump_to_menu, "mnu_town"),
        ]),
     ]
  ),  
  

  (
    "dplmc_messenger",0,
    "Sire, I found {s10} and delivered your message. His answer was {s11}.",
    "none",
    [
        (set_background_mesh, "mesh_pic_messenger"),
        (str_store_troop_name, s10, "$g_notification_menu_var1"),
        (try_begin),
          (eq, "$g_notification_menu_var2", 1),
          (str_store_string, s11, "@positive"),
        (else_try),
          (str_store_string, s11, "@negative"),
        (try_end),
    ],
    [
      ("dplmc_continue",[],"Continue...",
       [
         (change_screen_return),
        ]),
     ]
  ), 
  ##diplomacy end  
  (
    "dplmc_scout",0,
    "Your spy returned from {s10}^^{s11}{s12}",
    "none",
    [
    (set_background_mesh, "mesh_pic_messenger"),
    (str_store_party_name, s10, "$g_notification_menu_var1"),
    (call_script, "script_game_get_center_note", "$g_notification_menu_var1", 0),
    (str_store_string, s11, "@{!}{s0}"),
    (try_begin),
      (this_or_next|is_between, "$g_notification_menu_var1", towns_begin, towns_end),
      (is_between, "$g_notification_menu_var1", castles_begin, castles_end),
      (party_get_slot, ":center_food_store", "$g_notification_menu_var1", slot_party_food_store),
      (call_script, "script_center_get_food_consumption", "$g_notification_menu_var1"),
      (assign, ":food_consumption", reg0),
      (store_div, reg6, ":center_food_store", ":food_consumption"),
      (store_party_size, reg5, "$g_notification_menu_var1"),
      (str_store_string, s11, "@{s11}^^ The current garrison consists of {reg5} men.^The food stock lasts for {reg6} days."),
    (try_end),
    (str_clear, s12),
    (party_get_num_attached_parties, ":num_attached_parties", "$g_notification_menu_var1"),
    (try_begin),
      (gt, ":num_attached_parties", 0),
      (str_store_string, s12, "@^^Additional the following parties are currently inside:^"),
      (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":attached_party", "$g_notification_menu_var1", ":attached_party_rank"),
        (str_store_party_name, s3, ":attached_party"),
        (store_party_size, reg1, ":attached_party"),
        (str_store_string, s12, "@{s12} {s3} with {reg1} troops.^"),
      (try_end),
    (try_end),
    (call_script, "script_update_center_recon_notes", "$g_notification_menu_var1"),
    ],
    [
      ("dplmc_continue",[],"Continue...",
       [
         (change_screen_return),
        ]),
     ]
  ), 
  
  (
    "dplmc_domestic_policy",0,
    "You can now shape the domestic policy of your kingdom. Do you want to change your policy now?",
    "none",
    [
      (try_begin),
          (eq, "$g_players_policy_set", 1),
          (change_screen_return),
      (try_end),    

      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_banner", "fac_player_supporters_faction", pos0),
    ],
    [
      ("dplmc_yes",[],"Yes, I want to change the domestic policy.",
       [
         (start_presentation, "prsnt_dplmc_policy_management"),
        ]),
      ("dplmc_no",[],"No, I don't want to change the domestic policy.",
       [
         (change_screen_return),
        ]),  
     ]
  ), 
  
  (
    "dplmc_affiliate_end",0,
    "{!}{s11}",
    "none",
    [
      (set_background_mesh, "mesh_pic_messenger"),
      (str_store_troop_name, s9, "$g_notification_menu_var1"),
      (try_begin),
        (eq, "$g_player_affiliated_troop", "$g_notification_menu_var1"),
        (str_store_string, s11, "@{playername}, ^^I always knew you were a bad egg, since the day you have pledged allegiance to my clan. ^Did you really think you could set my family against me? You've dropped your mask, you snake! You are an infliction, and I will not bear it anymore. ^Hereby, I disown and ban you from my house. I have urged my family to fight you, and I will warn Calradia lords about your infamy. ^Tremble with fear, you have a deadly enemy! ^^{s9}."),
      (else_try),
        (is_between, "$g_player_affiliated_troop", lords_begin, kingdom_ladies_end),
        (str_store_troop_name, s10, "$g_player_affiliated_troop"),
        (str_store_string, s11, "@{playername},^^ I've received a letter from {s9}, telling me about your disgracefull jiggery-pokery. In the present circumstances, {s9} could not provide evidence. But unlike you, {he/she} is a distinguished member of my family; and since all these years, I never had any reason to distrust {him/her}. I take {his/her} charges for granted. ^Hopefully, you failed to breakup my family unit. Hereby I reject your pledge : you are no longer related to my house. Each membership will retaliate against you in all conscience... ^I would be ashamed to confess how you maliciously fooled me, so I will not challenge you, to not be accountable for your death to my King. However I'm not used to report him every rat I crush while in wilderness, someday I may find you there ! ^^{s10}"),
      (try_end),
    ],
    [
      ("dplmc_continue",[],"Continue...",
       [
         (change_screen_return),
        ]),
     ]
  ), 
  
  ("choose_options_1", 0,
    "Assemble all 16 NPCs at the tavern of the first encountered town?", "none", [],
    [
      ("yes_npcs", [], "Yes",
        [
          (assign, "$g_gether_npcs", 1),
          (jump_to_menu,"mnu_choose_options_2"),
        ]
      ),
      ("no_npcs", [], "No",
        [
          (assign, "$g_gether_npcs", 0),
          (jump_to_menu,"mnu_choose_options_2"),
        ]
      ),
      ("go_back", [], "Go back",
        [
          #(jump_to_menu,"mnu_choose_options_2"),
          (jump_to_menu,"mnu_start_game_options"),
        ]
      ),
    ]),
  
  ("choose_options_2", 0,
    "Choose your game difficulty. It is the most important game option. Please consider it carefully.",
    "none", [],
    [
      ("game_normal", [],
        "Normal",
        [
          (assign, "$g_game_difficulty", 1),
          (jump_to_menu,"mnu_choose_options_end"),
        ]
      ),
      ("game_nightmare", [],
        "Nightmare",
        [
          (assign, "$g_game_difficulty", 2),
          (jump_to_menu,"mnu_choose_options_end"),
        ]
      ),
      ("game_hell", [],
        "Hell",
        [
          (assign, "$g_game_difficulty", 3),
          (jump_to_menu,"mnu_choose_options_end"),
        ]
      ),
      ("game_luanshi", [],
        "luanshi",
        [
          (assign, "$g_game_difficulty", 4),
          (jump_to_menu,"mnu_choose_options_end"),
        ]
      ),
      ("go_back", [],
        "Go back",
        [
          (jump_to_menu,"mnu_choose_options_1"),
        ]
      ),
    ]),

  ("choose_options_3", 0,
    "Use power weapon or not?", "none", [],
    [
      ("yes_npcs", [], "Yes",
        [
          (assign, "$g_use_special_item", 1),
          (jump_to_menu,"mnu_choose_options_end"),
        ]
      ),
      ("no_npcs", [], "No",
        [
          (assign, "$g_use_special_item", 0),
          (jump_to_menu,"mnu_choose_options_end"),
        ]
      ),
      ("go_back", [], "Go back",
        [
          (jump_to_menu,"mnu_choose_options_2"),
        ]
      ),
    ]),
  
  ("choose_options_end", 0,
   "Game options selection complete.", "none", [],
    [
      #("continue", [], "Continue...", [(jump_to_menu,"mnu_start_game_0"),]),
      ("continue", [], "Continue...", [(jump_to_menu,"mnu_game_mode"),]),
      ("go_back", [], "Go back", [(jump_to_menu,"mnu_choose_options_1"),]),
    ]),
    
  #("choose_options_end", 0,
   #"Game options selection complete.", "none", [],
    #[
      #("continue", [], "Continue...", [(jump_to_menu,"mnu_game_mode"),]),
      #("go_back", [], "Go back", [(jump_to_menu,"mnu_choose_options_1"),]),
    #]),
    
  ("game_mode", menu_text_color(0xFF000000)|mnf_disable_all_keys,
    "choosen the game mode", "none", [],
    [
      ("basic", [], "basic",
        [
          (assign, "$game_mode", game_mode_basic),
          (call_script,"script_game_start_mode_basic"),
          (jump_to_menu,"mnu_start_game_0"),
        ]),
      ("heroes", [], "heroes",
        [
          (assign, "$game_mode", game_mode_heroes),
          (call_script,"script_game_start_mode_heroes"),
          (jump_to_menu,"mnu_start_game_0"),
        ]),
    ]),
    
    
  ("town_menu_cheats", 0,
   "CHEATS.", "none", [],
    [
    
      #("summon_drunk",
      #[(party_slot_eq, "$current_town", slot_party_type, spt_town),
      # # (troop_get_slot, ":town", "trp_belligerent_drunk", slot_troop_cur_center),
      # (try_begin),
      #   # (is_between, ":town", towns_begin, towns_end),
      #   (troop_slot_eq, "trp_belligerent_drunk", slot_troop_cur_center, "$current_town"),
      #   (assign, reg10, 1),
      # (else_try),
      #   (assign, reg10, 0),
      # (try_end),
      # ],
      #"{!}{reg10?Dismiss:Get} a drunkard.",
      #[
      #  (try_begin),
      #    (eq, reg10, 1), 
      #    (troop_set_slot, "trp_belligerent_drunk", slot_troop_cur_center, -1),
      #  (else_try),
      #    (troop_set_slot, "trp_belligerent_drunk", slot_troop_cur_center, "$current_town"),
      #  (try_end),
      #]),
      

      ("summon_ass",
      [(party_slot_eq, "$current_town", slot_party_type, spt_town),
       (try_begin),
         # (is_between, ":town", towns_begin, towns_end),
         (troop_slot_eq, "trp_hired_assassin", slot_troop_cur_center, "$current_town"),
         (assign, reg11, 1),
       (else_try),
         (assign, reg11, 0),
       (try_end),
      ],
      "{!}{reg11?Scare away:Hire} an assassin.",
      [
        (try_begin),
          (eq, reg11, 1), 
          (troop_set_slot, "trp_hired_assassin", slot_troop_cur_center, -1),
        (else_try),
          (troop_set_slot, "trp_hired_assassin", slot_troop_cur_center, "$current_town"),
        (try_end),
      ]),

      ("summon_bandit",
      [
       (party_slot_eq, "$current_town", slot_party_type, spt_town),
       (party_get_slot, reg12, "$current_town", slot_center_has_bandits),
       # (try_begin),
         # (party_slot_ge, "$current_town", slot_center_has_bandits, 1),
         # (assign, reg12, 1),
       # (else_try),
         # (assign, reg12, 0),
       # (try_end).
      ],
      "{!}{reg12?Kick out:Get ambushed by} some bandits.",
      [
       (try_begin), #cleanse
         (ge, reg12, 1),
         (party_set_slot, "$current_town", slot_center_has_bandits, 0),
       (else_try), #ambush
         (store_random_in_range, ":bandit", bandits_begin, bandits_end),
         (party_set_slot, "$current_town", slot_center_has_bandits, ":bandit"),
         (assign, "$town_nighttime", 1),
         (assign, "$sneaked_into_town", 0),
         (assign, "$g_defending_against_siege", 0),
         (call_script, "script_cf_enter_center_location_bandit_check"),
         # (assign, "$town_nighttime", 1),
       (try_end),
      ]),

      ("increase_rel",
      [],
      "{!}Increase Relation.",
      [
        (call_script, "script_change_player_relation_with_center", "$current_town", 5),
      ]),

      ("decrease_rel",
      [],
      "{!}Decrease Relation.",
      [
        (call_script, "script_change_player_relation_with_center", "$current_town", -5),
      ]),

    
      ("town_alley",
      [
        (party_slot_eq,"$current_town",slot_party_type, spt_town),
        (eq, "$cheat_mode", 1),
      ],
      "{!}CHEAT: Go to the alley.",
      [
        (party_get_slot, reg11, "$current_town", slot_town_alley),
        (set_jump_mission, "mt_ai_training"),
        (jump_to_scene, reg11),
        (change_screen_mission),
      ]),
      ("castle_cheat_interior",
      [
        (eq, "$cheat_mode", 1),
      ], 
      "{!}CHEAT! Interior.",
      [
        (set_jump_mission,"mt_ai_training"),
        (party_get_slot, ":castle_scene", "$current_town", slot_town_castle),
        (jump_to_scene,":castle_scene"),
        (change_screen_mission),
      ]),
      ("castle_cheat_town_exterior",
      [
        (eq, "$cheat_mode", 1),
      ], 
      "{!}CHEAT! Exterior.",
      [
        (try_begin),
          (party_slot_eq, "$current_town",slot_party_type, spt_castle),
          (party_get_slot, ":scene", "$current_town", slot_castle_exterior),
        (else_try),
          (party_get_slot, ":scene", "$current_town", slot_town_center),
        (try_end),
        (set_jump_mission,"mt_ai_training"),
        (jump_to_scene,":scene"),
        (change_screen_mission),
      ]),
      ("castle_cheat_dungeon",
      [
        (eq, "$cheat_mode", 1),
      ], 
      "{!}CHEAT! Prison.",
      [
        (set_jump_mission,"mt_ai_training"),
        (party_get_slot, ":castle_scene", "$current_town", slot_town_prison),
        (jump_to_scene,":castle_scene"),
        (change_screen_mission),
      ]),
      ("castle_cheat_town_walls",
      [
        (eq, "$cheat_mode", 1),
        (party_slot_eq,"$current_town",slot_party_type, spt_town),
      ], 
      "{!}CHEAT! Town Walls.",
      [
        (party_get_slot, ":scene", "$current_town", slot_town_walls),
        (set_jump_mission,"mt_ai_training"),
        (jump_to_scene,":scene"),
        (change_screen_mission),
      ]),
      ("center_reports",
      [
        (eq, "$cheat_mode", 1),
      ], 
      "{!}CHEAT! Show reports.",
      [
        (jump_to_menu,"mnu_center_reports"),
      ]),
      ("sail_from_port",
      [
        (party_slot_eq,"$current_town",slot_party_type, spt_town),
        (eq, "$cheat_mode", 1),
      ],
      "{!}CHEAT: Sail from port.",
      [
        (assign, "$g_player_icon_state", pis_ship),
        (party_set_flags, "p_main_party", pf_is_ship, 1),
        (party_get_position, pos1, "p_main_party"),
        (map_get_water_position_around_position, pos2, pos1, 6),
        (party_set_position, "p_main_party", pos2),
        (assign, "$g_main_ship_party", -1),
        (change_screen_return),
      ]),
      ("cheat_town_start_siege",
      [
        (eq, "$cheat_mode", 1),
        (party_slot_eq, "$g_encountered_party", slot_center_is_besieged_by, -1),
        (lt, "$g_encountered_party_2", 1),
        (call_script, "script_party_count_fit_for_battle","p_main_party"),
        (gt, reg(0), 1),
        (try_begin),
          (party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
          (assign, reg6, 1),
        (else_try),
          (assign, reg6, 0),
        (try_end),
      ],
      "{!}CHEAT: Besiege the {reg6?town:castle}...",
      [
        (assign,"$g_player_besiege_town","$g_encountered_party"),
        (jump_to_menu, "mnu_castle_besiege"),
      ]),
      ("back_to_town_menu",[],"Head back.",
       [
           (jump_to_menu,"mnu_town"),
        ]),
    ]),
    
  (
    "bank", 0,
    "You visit the merchant's guild.\
 Here you can deposit money and earn interest over time, unless the ruling powers disagree with you.^\
 You can also manage your loans here.\
 {reg9?You have already borrowed {reg9} denars from the guild:To apply for one (up to {reg10} denars) Monthly interest {reg12} /10000, talk to the guild master personally}.\
 ^You have {reg4} denars with you, and {reg6} denars deposited here, Monthly interest {reg11} /10000 ",
 
    "none",
    [
    (set_background_mesh, "mesh_pic_tax_pay"),
    (party_get_slot, reg9, "$current_town", slot_town_player_debt),
    (call_script, "script_get_max_loan", "$current_town"),
    (assign, reg10, reg0),
    
    (call_script, "script_get_bank_rates", "$current_town"),
    (assign, reg11, reg0),
    (assign, reg12, reg1),
    #(call_script, "script_get_interest", "$current_town"),
    #(assign, reg11, reg0),
    
    #(call_script, "script_get_loan_rate", "$current_town"),
    #(assign, reg12, reg0),
    
    (store_troop_gold, reg4, "trp_player"),
    (party_get_slot, reg5, "$current_town", slot_town_seneschal),
    (store_troop_gold, reg6, reg5),
    #(assign, reg7, "$debt_to_merchants_guild"),
    # (set_show_messages, 0),
    ],
    [

        ("bank_storage",
        [
            (party_get_slot, ":seneschal", "$current_town", slot_town_elder),
            #(store_troop_gold, ":seneschal_gold", ":seneschal"),
            (store_free_inventory_capacity, reg7, ":seneschal"),
            (troop_get_inventory_capacity, reg8, ":seneschal"),
            (val_sub, reg4, num_equipment_kinds),
            (store_troop_gold, ":gold", "trp_player"),
            #(ge, ":seneschal_gold", 5000),
            #(ge, ":gold", 100),
            (try_begin),
                (lt, ":gold", 100),
                (disable_menu_option),
            (try_end),
        ],
        "Storage (capacity: {reg7}/{reg8}).",
        [
            (troop_remove_gold, "trp_player", 100),

            (troop_set_auto_equip, reg5, 0),
            (change_screen_loot, reg5),
        ]),

       ("borrow_money",[
         (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
         (gt,"$player_honor",-10),
         (le,":player_debt",0)],"Borrow some money.",
       [
             (jump_to_menu,"mnu_borrow_money"),
        ]),

      ("give_loan",[
        (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
        (store_troop_gold, ":gold", "trp_player"),
        (gt,":player_debt",1000),(ge,":gold",1000),],"Repay 1000 denars of your debt.",
       [
            (troop_remove_gold, "trp_player", 1000),
            (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
            (val_sub,  ":player_debt", 1000),
            (party_set_slot, "$current_town", slot_town_player_debt, ":player_debt"),
            (try_begin),
               (le,  ":player_debt", 0),
               (party_set_slot, "$current_town", slot_town_player_debt_days, 0),
            (try_end),   
        ]),
      ("give_loan_all",[
         (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
         (gt,":player_debt",0),
         (store_troop_gold, ":gold", "trp_player"),
         (ge,":gold",":player_debt"),
        ],"Repay all of your debt.",
       [
       
            (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
            (troop_remove_gold, "trp_player", ":player_debt"),
            (party_set_slot, "$current_town", slot_town_player_debt, 0),
            (party_set_slot, "$current_town", slot_town_player_debt_days, 0),
        ]),

      ("access_deposit",[
      ],"Access your funds.", [
      (start_presentation,"prsnt_deposit_withdraw_money"),]),

      ("give_deposit",[
      (store_troop_gold, ":gold", "trp_player"),(ge,":gold",1000)
      ],"Deposit 1000 denars in the bank.",
       [
            (troop_remove_gold, "trp_player", 1000),
            (troop_add_gold, reg5, 1000),
        ]),
      ("take_deposit",[
      (party_get_slot, ":chest_troop", "$current_town", slot_town_seneschal),
      (store_troop_gold, ":gold", ":chest_troop"),
      (ge,":gold",1000)
      ],"Withdraw 1000 denars from your deposit.",
       [
            (troop_add_gold, "trp_player", 1000),
            (party_get_slot, ":chest_troop", "$current_town", slot_town_seneschal),
            (troop_remove_gold, ":chest_troop", 1000),
        ]),
      ("take_deposit_all",[
            (party_get_slot, ":chest_troop", "$current_town", slot_town_seneschal),
            (store_troop_gold, ":gold", ":chest_troop"),
            (ge,":gold",1)
      ],"Withdraw your entire deposit.",
       [ 
            (party_get_slot, ":chest_troop", "$current_town", slot_town_seneschal),
            (store_troop_gold, ":gold", ":chest_troop"),
            (troop_add_gold, "trp_player", ":gold"),
            (troop_remove_gold, ":chest_troop", ":gold"),
        ]),
   ("trophy_a_trade_trophy_b",[
    (store_item_kind_count,":size","itm_trophy_a","trp_player"),
    (troop_slot_ge,"trp_player", slot_troop_player_class,4),
    (try_begin),
       (lt, ":size", 6),
      (disable_menu_option),
    (try_end),],
       "Trade in your war trophy.",
       [
       (troop_remove_items,"trp_player","itm_trophy_a",6),
       (troop_add_item,"trp_player","itm_trophy_b",0),
       (jump_to_menu,"mnu_bank"),
   ]),       
        
   ("trophy_b_trade_trophy_c",[
    (store_item_kind_count,":size","itm_trophy_b","trp_player"),
    (troop_slot_ge,"trp_player", slot_troop_player_class,8),
    (try_begin),
       (lt, ":size", 6),
      (disable_menu_option),
    (try_end),],
       "Trade in your epic trophy",
      [
       (troop_remove_items,"trp_player","itm_trophy_b",6),
       (troop_add_item,"trp_player","itm_trophy_c",0),
       (jump_to_menu,"mnu_bank"),
   ]),       
       
   ("trophy_b_trade_trophy_a",[
    (store_item_kind_count,":size","itm_trophy_b","trp_player"),
    (store_free_inventory_capacity, ":space", "trp_player"),
    (try_begin),
       (this_or_next|le, ":space", 3),                    
       (lt, ":size", 1),
      (disable_menu_option),
    (try_end),],
       "Trade in your epic trophy",
      [
       (troop_remove_items,"trp_player","itm_trophy_b",1),
       (troop_add_items,"trp_player","itm_trophy_a",4),
       (jump_to_menu,"mnu_bank"),
   ]),       
       
   ("trophy_c_trade_trophy_b",[
    (store_item_kind_count,":size","itm_trophy_c","trp_player"),
    (store_free_inventory_capacity, ":space", "trp_player"),
    (try_begin),
       (this_or_next|le, ":space", 3),                    
       (lt, ":size", 1),
      (disable_menu_option),
    (try_end),],
       "Trade in your epic trophy",
      [
       (troop_remove_items,"trp_player","itm_trophy_c",1),
       (troop_add_items,"trp_player","itm_trophy_b",4),
       (jump_to_menu,"mnu_bank"),
   ]),       
        
      ("back_to_town_menu",[],"Head back.",
       [   
           (jump_to_menu,"mnu_town"),
        ]),
    ]
  ),
    
("borrow_money",0,
   "You are currently have {reg4} denars, and {reg6} denars in your acount, Monthly interest {reg9}/10000. You can borrow {reg7} denars.",
   "none",
   [
    (set_background_mesh, "mesh_pic_tax_pay"),
      (store_troop_gold, ":player_wealth", "trp_player"),
      (assign, reg4, ":player_wealth"),
      (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
      (assign, reg6, ":player_debt"),
	  (call_script, "script_get_max_loan", "$current_town"),
	  (assign, ":max_loan", reg0),
	  
      (assign, reg7, ":max_loan"),
      (store_sub, reg8,":max_loan",":player_debt"),
      
	  (call_script, "script_get_bank_rates", "$current_town"),
	  (assign, ":loan_rating", reg1),
      (assign, reg9, ":loan_rating"),
    ],
   [
      ("ask_for_a_loan_1000.",
       [
        (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
	    (call_script, "script_get_max_loan", "$current_town"),
	    (assign, ":max_loan", reg0),
        (val_sub, ":max_loan",":player_debt"),
        (ge,":max_loan",1000)
       ],"Ask for a loan 1000.",
       [
           (troop_add_gold, "trp_player", 1000),

           (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
           (val_add,":player_debt", 1000),
           (party_set_slot, "$current_town", slot_town_player_debt, ":player_debt"),
        ]),

      ("ask_for_a_loan_5000.",
       [
        (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
	    (call_script, "script_get_max_loan", "$current_town"),
	    (assign, ":max_loan", reg0),
        (val_sub, ":max_loan",":player_debt"),
       (ge,":max_loan",5000)
       ],"Ask for a loan 5000.",
       [
           (troop_add_gold, "trp_player", 5000),

           (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
           (val_add,":player_debt", 5000),
           (party_set_slot, "$current_town", slot_town_player_debt, ":player_debt"),
        ]),

      ("ask_for_a_loan_all",
       [
        (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
	    (call_script, "script_get_max_loan", "$current_town"),
	    (assign, ":max_loan", reg0),
        (val_sub,":max_loan",":player_debt"),
        (gt,":max_loan",0)
       ],"Ask for a loan all.",
       [
           (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
	       (call_script, "script_get_max_loan", "$current_town"),
	       (assign, ":max_loan", reg0),
           (val_sub,":max_loan",":player_debt"),
       
           (troop_add_gold, "trp_player", ":max_loan"),

           (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
           (val_add,":player_debt", ":max_loan"),
           (party_set_slot, "$current_town", slot_town_player_debt, ":player_debt"),
        ]),

      ("access_loan",[
      ],"Access your loan.", [
      (start_presentation,"prsnt_make_a_loan"),]),

      ("not_now_loan.",
       [],"Not now.",
       [ (try_begin),
            (party_get_slot, ":player_debt", "$current_town", slot_town_player_debt),
            (gt,":player_debt", 0),
            (party_set_slot, "$current_town", slot_town_player_debt_days, 1),
         (try_end),   
         (jump_to_menu,"mnu_bank"),
        ]),
    ]
),

	#banks_report  
  (
    "banks_report",0,"{s2}",
    "none",
    [
    (set_background_mesh, "mesh_pic_tax_pay"),
        (assign, ":credit_count", 0), 
        (assign, ":deposit_count", 0), 
        (try_for_range, ":cur_center", towns_begin, towns_end),
            (party_is_active, ":cur_center"),            
            (try_begin), 
            	#(party_slot_eq, ":cur_center", slot_ms_party_operation_type, ms_flag_credit),
                (party_get_slot, ":value", ":cur_center", slot_town_player_debt),
            	(try_begin), 
                    (gt, ":value", 0),
                    (party_get_slot, ":time", ":cur_center", slot_town_player_debt_days),
                    (store_sub, ":time", 31, ":time"),
                    (try_begin), 
                        (ge, ":time", 0), 
                        (assign, reg1, ":time"),
                        (str_store_string, s4, "str_time_credit"),
                    (else_try), 
                        (le, ":time", -7), 
                        (str_store_string, s4, "str_credit_fight"),
                    (else_try), 
                        (str_store_string, s4, "str_time_credit_zero"),
                    (try_end), 
                    (str_store_party_name, s3, ":cur_center"),
                    (assign, reg1, ":value"),
                    (str_store_string, s5, "str_credit_report"),
                    (try_begin), 
                        (eq, ":credit_count", 0),  
                        (str_store_string, s6, "@{s5}"), 
                    (else_try), 
                        (str_store_string, s6, "@{s6} ^{s5}"), 
                    (try_end), 
                    (val_add, ":credit_count", 1),  
            	(try_end), 
            (try_end), 
                           
            (try_begin), 
                (party_get_slot, ":chest_troop", ":cur_center", slot_town_seneschal),
                (store_troop_gold, ":gold", ":chest_troop"),
                (gt, ":gold", 0),
            	(str_store_party_name, s3, ":cur_center"),
            	(assign, reg2, ":gold"),            	
            	(str_store_string, s7, "str_deposit"), 
            	(try_begin), 
                    (eq, ":deposit_count", 0),  
                    (str_store_string, s8, "@{s7}"), 
            	(else_try), 
                    (str_store_string, s8, "@{s8} ^{s7}"), 
            	(try_end), 
            	(val_add, ":deposit_count", 1),  
            (try_end), 
        (try_end),    
        (try_begin), 
            (eq, ":deposit_count", 0),  
            (str_store_string, s8, "str_no_deposit"), 
        (try_end), 
        (try_begin), 
            (eq, ":credit_count", 0),  
            (str_store_string, s6, "str_no_credit"), 
        (try_end), 
        (str_store_string, s2, "str_banks_full_report_str"),
	],
    [
      ("continue",[],"Continue...",
       [(change_screen_return),
        ]),
     ]
  ),
    
    
  (
    "new_kingdom_restoration",0,
    "new_kingdom^^kingdom: {s11} found.",
    "none",
    [
            
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_for_menu", "$g_notification_menu_var1", pos0),
      (str_store_faction_name, s11, "$g_notification_menu_var1"), # restored faction
      (str_store_faction_name, s12, "$g_notification_menu_var2"), # fitful faction
      ],
    [
      ("continue",[],"Continue...", 
        [
          ## start war
          (change_screen_return),
        ]),
     ]
  ),
  
  (
    "intrusion_alarm",0,
    "intrusion_alarm^^kingdom: {s11} will intrusion {s12} near 15 day.",
    "none",
    [
            
      (set_fixed_point_multiplier, 100),
      (position_set_x, pos0, 65),
      (position_set_y, pos0, 30),
      (position_set_z, pos0, 170),
      (set_game_menu_tableau_mesh, "tableau_faction_note_mesh_for_menu", "$g_notification_menu_var1", pos0),
      (str_store_faction_name, s11, "$g_notification_menu_var1"), # restored faction
      (str_store_party_name, s12, "$g_notification_menu_var2"), # fitful faction
      ],
    [
      ("continue",[],"Continue...", 
        [
          (change_screen_return),
        ]),
     ]
  ),
  
  ## restoration end
    
#+freelancer start
#menu_world_map_soldier
    ("world_map_soldier",mnf_enable_hot_keys,
    "What do you need to do soldier?",
    "none",
    [
	 (set_background_mesh, "mesh_pic_soldier_world_map"),
	 (troop_get_slot, "$enlisted_party", "$enlisted_lord", slot_troop_leaded_party), #CABA - to refresh it? maybe not necessessary

	],
	[
        ("join_commander_battle",[
            (party_get_battle_opponent, ":commander_opponent", "$enlisted_party"),
            (gt, ":commander_opponent", 0),
        ],"Follow the commander into battle.",[
            (start_encounter, "$enlisted_party"),
            (change_screen_map),
        ]),
	
    ("enter_city",[
    (party_is_in_any_town,"$enlisted_party"),
    (party_get_cur_town, ":town_no", "$enlisted_party"),
    (str_store_party_name,s1,":town_no"),
    ] ,"enter {s1}.",
    [(party_get_cur_town, ":town_no", "$enlisted_party"),(start_encounter, ":town_no"),(change_screen_map),]),
	
	
        ("commander",[(party_get_battle_opponent, ":commander_opponent", "$enlisted_party"),(lt, ":commander_opponent", 0),],
           "Request audience with your commander.",
        [(jump_to_menu, "mnu_commander_aud"),]),
        
        ("revolt",[(eq,1,0)],"Revolt against the commander!",
        [(jump_to_menu, "mnu_ask_revolt"),]),
        
        ("desert",[],"Desert the army.(keep equipment but lose relations)",
        [(jump_to_menu, "mnu_ask_desert"),]),
        
        ("retire",[
          (store_current_hours, ":day"), 
          
          (troop_get_slot, ":service_day_start", "trp_player", slot_troop_freelancer_start_xp),
          (val_add, ":service_day_start", 30*24),
          (str_store_date, s25, ":service_day_start"),
          (try_begin),
              (lt, ":day", ":service_day_start"),
              (disable_menu_option),
          (try_end),
        ],"retire from service.(Next retire_day: {s25})",
        [(jump_to_menu, "mnu_ask_retire"),]),
        
        ("retire",[
          #(neq, "$freelancer_state", 1),
          (this_or_next|gt, "$players_kingdom", 0),
          (this_or_next|gt, "$g_invite_faction", 0),
          (gt, "$player_has_homage" ,0),
          (store_current_hours, ":day"), 
          (str_store_date, s25, ":day"),
        ],"retire from service.(Next retire_day: {s25})",
        [(jump_to_menu, "mnu_ask_retire"),]),
        
    ("camp",[],"camp.", [(jump_to_menu, "mnu_freelance_camp")]),
        
        
        #("enter_city",[
        # (party_get_attached_to, ":cur_attached_party", "$enlisted_party"),
        # (is_between, ":cur_attached_party", towns_begin, towns_end),
        # (str_store_party_name,s1,":cur_attached_party"),
        # (store_faction_of_party, ":center_faction", ":cur_attached_party"),
        # (store_faction_of_party, ":party_faction", "$enlisted_party"),
        # (eq, ":party_faction", ":center_faction"),
        #],"enter {s1}.", [
        # (party_get_attached_to, ":cur_attached_party", "$enlisted_party"),
        # (is_between, ":cur_attached_party", towns_begin, towns_end),
              # (start_encounter, ":cur_attached_party"),
        # (change_screen_map),
        #]),
        
        
    ("meet_the_doctor",[],"Meet with the doctor for heal.",
    [(jump_to_menu, "mnu_meet_the_doctor")]),
        
        ("report",[],"Commander's Report",
        [(start_presentation, "prsnt_taragoth_lords_report"),]),
        
        ("return_to_duty",[
            (party_get_battle_opponent, ":commander_opponent", "$enlisted_party"),
            (assign,":continue",0),
            (try_begin),
                (troop_is_wounded, "trp_player"),
                (assign, ":continue", 1),
            (else_try),
                (lt, ":commander_opponent", 0),
                (assign, ":continue", 1),
            (else_try),
                (store_faction_of_party,":fac1", ":commander_opponent"),
                (store_faction_of_party,":fac2", "$enlisted_party"),
                (store_relation, ":rel", ":fac1", ":fac2"),
                (ge, ":rel", 0),
                (assign, ":continue", 1),
            (try_end),
            (eq, ":continue", 1),
        ],"Return to duty.",
        [(change_screen_map),
        (assign, "$g_infinite_camping", 1),
        (rest_for_hours_interactive, 24 * 365, 5, 1),
        ]),
        
    ]),
 
  (
    "meet_the_doctor",0,
    "The doctor can heal but need 50 contribution.",
    "none",
    [],
    [
       
        ("heal",[
          (troop_get_slot, ":old_renown", "trp_player", slot_troop_contribution),
          (store_troop_health, ":troop_hp", "trp_player"),
          (try_begin),
              (this_or_next|eq, ":troop_hp", 100),
              (lt, ":old_renown", 50),
              (disable_menu_option),
          (try_end),],
         "YES,I need heal",
         [
         	    (call_script, "script_change_player_contribution", -50),
          (troop_set_health,"trp_player",100),
          (jump_to_menu, "mnu_meet_the_doctor")
         ]
        ),
        
      ("back_to_town_menu",[],"Back.",
       [
           (jump_to_menu,"mnu_world_map_soldier"),
        ]),
    ]
  ),  
 
#menu_aud_with_commander  

  (
    "commander_aud",0,
    "Your request for a meeting is relayed to your commanders camp , and finally {s6} appears from his tent to speak with you.",
    "none",
    [(set_background_mesh, "mesh_pic_soldier_world_map"),(str_store_troop_name, s6, "$enlisted_lord")],
    [
      ("continue",[],
       "Continue...",
       [
        (try_begin),
            (neg|party_is_in_any_town, "$enlisted_party"),
            (start_encounter, "$enlisted_party"),
            (change_screen_map),
        (else_try),
            #Fake that it is a party encounter when enlisted party in a town (lines taken from script_game_event_party_encounter)
        (assign, "$g_encountered_party", "$enlisted_party"),
        (store_faction_of_party, "$g_encountered_party_faction","$g_encountered_party"),
        (store_relation, "$g_encountered_party_relation", "$g_encountered_party_faction", "fac_player_faction"),
        (party_get_slot, "$g_encountered_party_type", "$g_encountered_party", slot_party_type),
        (party_get_template_id,"$g_encountered_party_template","$g_encountered_party"),
        (assign, "$talk_context", tc_party_encounter),
        (call_script, "script_setup_party_meeting", "$g_encountered_party"),
        (try_end),
        ]),
        ("reject_talk_lord",[],"No, nevermind.",
        [(change_screen_map),]),
    ]
  ),
 
    #menu_ask_revolt
    ("ask_revolt",0,
    "Are you sure you want to revolt?",
    "none",
    [(set_background_mesh, "mesh_pic_soldier_rebel"),(str_store_troop_name, s6, "$enlisted_lord")],[
        ("confirm_revolt",[],"Yes, {s6} will be the death of us all, it is time to act!",
        [(jump_to_menu, "mnu_revolt"),]),
        
        ("reject_revolt",[],"No, I am loyal to {s6}.",
        [(change_screen_return),]),
    ]),
	 
    #menu_revolt
    ("revolt",0,
    "Do you want to release the prisoners to help your men?",
    "none",
    [
        (set_background_mesh, "mesh_pic_soldier_rebel"),
        (assign, "$cant_leave_encounter", 1),
        #revert parties to former settings
        (call_script, "script_freelancer_detach_party"),
        
        (call_script, "script_event_player_deserts"),
        #adds other troops to join player revolt
        (call_script, "script_get_desert_troops"),
        #decreases player relation to his commander and faction
        (call_script, "script_change_player_relation_with_troop", "$enlisted_lord", -10),

        (store_troop_faction, ":commander_faction", "$enlisted_lord"),

        (try_begin),
            (party_get_battle_opponent, ":commander_enemy", "$enlisted_party"),
            (gt, ":commander_enemy", 0),
            (store_faction_of_party, ":other_faction", ":commander_enemy"),
            (store_relation, ":relation", ":other_faction", ":commander_faction"),
            (store_sub, ":mod_relation", 100, ":relation"),
            (val_add, ":mod_relation", 5),
            (call_script, "script_change_player_relation_with_faction_ex", ":commander_faction", ":mod_relation"),
        (try_end),
    ],
    [
        ("revolt_prisoners",[],"Yes, I will take the risk for a greater advantage.",
        [
            (party_clear, "p_temp_party_2"),
            #loop adding commander's prisoners to player party as troops
            (party_get_num_prisoner_stacks, ":num_stacks", "$enlisted_party"),
            (try_for_range, ":cur_stack", 0, ":num_stacks"),
                (party_prisoner_stack_get_troop_id , ":prisoner_troop", "$enlisted_party", ":cur_stack"),
                (neg|troop_is_hero,":prisoner_troop", "$enlisted_party", ":cur_stack"),
                (ge, ":prisoner_troop", 1),
                (party_prisoner_stack_get_size, ":stack_size", "$enlisted_party", ":cur_stack"),
                (party_remove_prisoners, "$enlisted_party", ":prisoner_troop", ":stack_size"),
                (party_add_members, "p_temp_party_2", ":prisoner_troop", ":stack_size"),
            (try_end),
            (party_attach_to_party, "p_temp_party_2", "p_main_party"),
            (start_encounter, "$enlisted_party"),
            (change_screen_map),
        ]),

        ("revolt_no_prisoners",[],"No, I don't trust prisoners.",
        [
            (start_encounter, "$enlisted_party"),
            (change_screen_map),
        ]),
        
    ]),
	
 
    #menu_ask_desert
    ("ask_desert",0,
    "Do you want to desert?",
    "none",
    [(set_background_mesh, "mesh_pic_soldier_desert"),],[
        ("confirm_desert",[],"Yes, this is pointless.",
        [(jump_to_menu, "mnu_desert"),]),

        ("reject_desert",[],"No, I am loyal to my commander.",
        [(change_screen_return),]),
    ]),
  
    #menu_desert
    ("desert",0,
    "While in the army you've made some good friends. Some could possibly follow you.",
    "none",
    [
        (set_background_mesh, "mesh_pic_soldier_desert"),
        
        (call_script, "script_freelancer_detach_party"),
        (call_script, "script_event_player_deserts"),
	],
    [
        ("desert_party",[],"Try to convince them to follow you.",[
            #1 in 4 chance of being caught with others
            (store_random_in_range, ":chance_caught", 0, 4),
            (try_begin),
                (eq, ":chance_caught", 0),
            	(assign, "$g_encountered_party", "$enlisted_party"),
                (jump_to_menu, "mnu_captivity_start_wilderness"),
            (else_try),
                (call_script, "script_get_desert_troops"),
            	(call_script, "script_party_restore"),	
                (call_script, "script_set_parties_around_player_ignore_player", 2, 4),
            (try_end),
            (change_screen_map),(display_message, "@You have deserted, and are now wanted!"), ]),

        ("desert_alone",[],"No, I have a better chance alone.",[
            #1 in 10 chance of being caught alone
            (store_random_in_range, ":chance_caught", 0, 10),
            (try_begin),
                (eq, ":chance_caught", 0),
                (assign, "$g_encountered_party", "$enlisted_party"),
                (jump_to_menu, "mnu_captivity_start_wilderness"),
            (else_try),
                (call_script, "script_party_restore"),
                (call_script, "script_set_parties_around_player_ignore_player", 2, 4),
            (try_end),
            (change_screen_map),
            (display_message, "@You have deserted, and are now wanted!"), ]),
    ]
            
        ),
  
    #menu_ask_desert
    ("ask_retire",0,
    "Do you want to retire?",
    "none",
    [(set_background_mesh, "mesh_pic_payment"),],[
      ("confirm_desert",[],"Yes, this is pointless.",[
        (assign, "$freelancer_state", 0),
        (troop_get_slot, ":old_renown", "trp_player", slot_troop_contribution),
        (store_div, ":add_effect", ":old_renown",10),
        (call_script,"script_change_player_effect", ":add_effect"),
        (val_div, ":old_renown", 2),
        (store_mul, ":los_renown", ":old_renown",-1),
        (call_script, "script_change_player_contribution", ":los_renown"),
        (store_mul, ":reward_gold", ":old_renown",4),
        (val_div,":reward_gold", 50),
        (val_mul,":reward_gold", 50),
        (val_min, ":reward_gold", 20000),
        (troop_add_gold, "trp_player", ":reward_gold"),
        (add_xp_to_troop,":old_renown","trp_player"),
        (try_begin),
          (ge, ":old_renown", 500),
          (troop_add_item,"trp_player","itm_trophy_a",0),                  
        (else_try),
          (ge, ":old_renown", 2500),
          (troop_add_item,"trp_player","itm_trophy_b",0),
          (call_script,"script_change_troop_renown", "trp_player" ,10),
        (else_try),
          (ge, ":old_renown", 12500),
          (troop_add_item,"trp_player","itm_trophy_c",0),
          (call_script,"script_change_troop_renown", "trp_player" ,50),
          (call_script,"script_change_player_honor",5),
        (try_end),
        
        (call_script, "script_party_restore"),
        (call_script, "script_event_player_discharge"),
        (change_screen_map),
        (display_message, "@You have retirefor_your_army, and now you free!"), 
      ]),

        ("reject_desert",[],"No, I am loyal to my commander.",
        [(change_screen_return),]),
    ]),
  
    ("freelance_camp",mnf_scale_picture|mnf_enable_hot_keys,
     "You enter camp. What do you want to do soldier?^^{s1}", ## CC
    "none",
    [
     (assign, "$g_player_icon_state", pis_normal),
     (reset_price_rates,0),
     (set_background_mesh, "mesh_pic_camp"),
     (play_sound,"snd_camp"),
     (str_store_troop_name,s2,"$player_cur_troop"),
     (troop_get_slot, ":old_renown", "trp_player", slot_troop_contribution),
     (assign, reg11, ":old_renown"),
     (call_script,"script_get_upgrade_contribution"),
     (assign,reg12,reg0),
     (str_store_string, s1, "@Player's_troop:_{s2}^Contribution:_{reg11}^Update_needs:_{reg12}."),
#
	],
	[
      ("camp_mod_opition",[],"MOD option.", [(start_presentation, "prsnt_mod_option")]),
 	  ("action_prebattle_mod_preferences",[],"PBOD Mod Preferences.",[(start_presentation, "prsnt_pbod_preferences")]), 
      ("action_fix_bug",[],"fix_bug.",[(call_script, "script_raf_fixes"),(jump_to_menu, "mnu_freelance_camp"),]), 
      #("camp_action",[],"Take an action.",[(jump_to_menu, "mnu_camp_action"),]),
      ("camp_special_ability",[],"Choose your special_ability.",[(assign, "$return_menu", "mnu_freelance_camp"),(jump_to_menu, "mnu_camp_set_special_ability"),]),
      ("upgrade_path",[
           (troop_get_upgrade_troop, ":upgrade_troop", "$player_cur_troop", 0),
           (troop_get_slot, ":upgrade_troop2", "$player_cur_troop", slot_troop_upgrade_freelance),
           (this_or_next|gt, ":upgrade_troop2", 1), #make sure troop is valid and not player troop
           (gt, ":upgrade_troop", 1), #make sure troop is valid and not player troop
           (player_has_item,"itm_trophy_c")
      ],"use_trophy_upgrade_troop.",[(troop_remove_item,"trp_player","itm_trophy_c"),(jump_to_menu, "mnu_upgrade_path"),]),
      
      ("upgrade_path_3",[
           (troop_get_upgrade_troop, ":upgrade_troop", "$player_cur_troop", 0),
           (troop_get_slot, ":path_3_troop", "$enlisted_lord", slot_troop_special_troop),
           (this_or_next|ge, ":path_3_troop", 1),
           (gt, ":upgrade_troop", 1), 
           (troop_get_slot, ":cost_troop", ":path_3_troop", slot_troop_upgrade_1),
           (this_or_next|eq, ":cost_troop", "$player_cur_troop"),
           (gt, ":upgrade_troop", 1), 
           (troop_get_slot, ":old_renown", "trp_player", slot_troop_contribution),
           (call_script,"script_get_upgrade_contribution"),
           (assign,":required_xp",reg0),
           (gt, ":old_renown", ":required_xp"), #make sure troop is valid and not player troop
      ],"upgrade_troop.",[
            (call_script,"script_get_upgrade_contribution"),
            (assign,":required_xp",reg0),
            (val_mul,":required_xp",-1),
            (call_script, "script_change_player_contribution", ":required_xp"),
            (jump_to_menu, "mnu_upgrade_path")
      ]),
      
      ("meet_with_quartermaster",[],
      "Meet with the quartermaster.",
      [(call_script, "script_setup_troop_meeting", "trp_quartermaster", -1),]),
      
      ("trade_with_quartermaster",[],
       "Trade with the quartermaster.",
       [
        (store_troop_gold, ":cur_gold", "trp_find_item_cheat"),
        (troop_remove_gold, "trp_find_item_cheat", ":cur_gold"),
        (store_character_level, ":level", "$player_cur_troop"),
        (val_mul,":level",200),
        (troop_add_gold, "trp_find_item_cheat", ":level"),
        
        (call_script, "script_copy_inventory", "$player_cur_troop", "trp_find_item_cheat"),
        (try_for_range, ":i_slot", 0, 10),
          (troop_get_inventory_slot, ":item", "trp_find_item_cheat", ":i_slot"),
          (gt, ":item", -1),
          (troop_add_item,"trp_find_item_cheat",":item"),
          (troop_set_inventory_slot, "trp_find_item_cheat", ":i_slot", -1),
        (try_end),
      (troop_get_inventory_capacity,":cap","trp_find_item_cheat"),
      (try_for_range, ":i", 0, ":cap"),
        (troop_get_inventory_slot,":item","trp_find_item_cheat",":i"),
        (ge, ":item", 0),
        (item_get_type, ":item_type", ":item"),
        (eq, ":item_type", itp_type_goods),
        (troop_remove_item,"trp_find_item_cheat",":item"),
      (try_end),
      
      (try_for_range, ":i", 0, ":cap"),
        (troop_get_inventory_slot,":item_id","trp_find_item_cheat",":i"),
        (ge, ":item_id", 0),
        (item_get_type, ":item_type", ":item_id"),
        (this_or_next|item_has_property, ":item_id", itp_no_pick_up_from_ground),
        (item_has_property, ":item_id", itp_unique),
        (neg|is_between, ":item_type", itp_type_head_armor,itp_type_pistol),
        (troop_remove_item,"trp_find_item_cheat",":item_id"),
      (try_end),
      
        (store_faction_of_party, ":cur_faction", "$enlisted_party"),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat",":cur_faction",itp_type_one_handed_wpn,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat",":cur_faction",itp_type_two_handed_wpn,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat",":cur_faction",itp_type_polearm,3),
        (troop_add_merchandise_with_faction,"trp_find_item_cheat",":cur_faction",itp_type_shield,3),
        (reset_price_rates,0), 
        (try_for_range, ":type", itp_type_horse, itp_type_animal),
          (set_price_rate_for_item_type,":type",50),
        (try_end),
        
        
        
        (set_price_rate_for_item_type,itp_type_horse,33),
        (set_price_rate_for_item_type,itp_type_body_armor,33),
        (change_screen_trade, "trp_find_item_cheat"),
       ]),
      
      ("trophies",[
                   (this_or_next|player_has_item,"itm_trophy_a"),
                   (this_or_next|player_has_item,"itm_trophy_b"),
                   (player_has_item,"itm_trophy_c")],
       "Use trophies to get xp.",
       [
           (jump_to_menu,"mnu_trophy_trade"),
        ]),        
      
      ("contribution_trophy",[(eq,1,0)],"exchange trophy.",[(jump_to_menu, "mnu_contribution_trophy"),]),
      
      ("back",[],"camp.", [(jump_to_menu, "mnu_world_map_soldier")]),
      
    ]),
  
  
  (
    "trophy_trade",0,
    "which trophy would you exchange for xp.",
    "none",
    [],
    [
       
       ("trade_trophy_a1",[(eq,1,0),(player_has_item,"itm_trophy_a")],
       "Trade in your battle trophy.",
       [
       (add_xp_to_troop,2000,"$g_player_troop"),
       (troop_remove_item,"trp_player","itm_trophy_a"),
       (call_script,"script_change_player_effect", 20),
       (jump_to_menu,"mnu_trophy_trade"),
        ]),        
       ("trade_trophy_b1",[(player_has_item,"itm_trophy_b")],
       "Trade in your war trophy.",
       [

       (add_xp_to_troop,10000,"$g_player_troop"),
       (call_script,"script_change_troop_renown", "trp_player" ,20),
       (troop_remove_item,"trp_player","itm_trophy_b"),
       (call_script,"script_change_player_effect", 20),
       (jump_to_menu,"mnu_trophy_trade"),
        ]),	
       ("trade_trophy_c1",[(player_has_item,"itm_trophy_c")],
       "Trade in your epic trophy",
       [
       (add_xp_to_troop,50000,"$g_player_troop"),
       (call_script,"script_change_troop_renown", "trp_player" ,100),
       (call_script,"script_change_player_honor",10),
       (troop_remove_item,"trp_player","itm_trophy_c"),
       (call_script,"script_change_player_effect", 100),
       (jump_to_menu,"mnu_trophy_trade"),
        ]),       
       
      ("back_to_town_menu",[],"Back.",
       [
           (jump_to_menu,"mnu_world_map_soldier"),
        ]),
    ]
  ),  


   ("contribution_trophy",0,
    "which trophy would you exchange^Contribution:_{reg11}.",
    "none",[
        (set_background_mesh, "mesh_pic_soldier_world_map"),
          (troop_get_slot, ":old_renown", "trp_player", slot_troop_contribution),
        (assign, reg11, ":old_renown"),
        ],
    [
        ("Battle_Trophy",[
          (troop_get_slot, ":old_renown", "trp_player", slot_troop_contribution),
          (store_free_inventory_capacity, ":space", "trp_player"),
          (try_begin),
              (this_or_next|le, ":space", 0),                    
              (lt, ":old_renown", 400),
              (disable_menu_option),
          (try_end),],
        "Battle_Trophy",[
            (troop_add_item,"trp_player","itm_trophy_a",0),            
            (call_script, "script_change_player_contribution", -400),
            (jump_to_menu, "mnu_contribution_trophy"),]),

        ("War_Trophy",[
          (troop_get_slot, ":old_renown", "trp_player", slot_troop_contribution),
          (store_free_inventory_capacity, ":space", "trp_player"),
          (try_begin),
              (this_or_next|le, ":space", 0),                    
              (lt, ":old_renown", 2000),
              (disable_menu_option),
          (try_end),],
        "War Trophy",[
            (troop_add_item,"trp_player","itm_trophy_b",0),            
            (call_script, "script_change_player_contribution", -2000),
            (jump_to_menu, "mnu_contribution_trophy"),]),
            
        ("Epic_Trophy",[
          (troop_get_slot, ":old_renown", "trp_player", slot_troop_contribution),
          (store_free_inventory_capacity, ":space", "trp_player"),
          (try_begin),
              (this_or_next|le, ":space", 0),                    
              (lt, ":old_renown", 10000),
              (disable_menu_option),
          (try_end),],
        "Epic Trophy",[
            (troop_add_item,"trp_player","itm_trophy_c",0),            
            (call_script, "script_change_player_contribution", -10000),
            (jump_to_menu, "mnu_contribution_trophy"),]),

      ("back",[],"back", [(jump_to_menu, "mnu_world_map_soldier")]),
            
            
    ]),
    #menu_upgrade_path
   ("upgrade_path",0,
    "In recognition of your excellent service, you have been promoted.",
    "none",[
        (set_background_mesh, "mesh_pic_soldier_world_map"),
        (call_script, "script_freelancer_unequip_troop", "$player_cur_troop"),
        ],
    [
        ("upgrade_path_1",[
            (troop_get_upgrade_troop, ":path_1_troop", "$player_cur_troop", 0),
            (ge, ":path_1_troop", 1),
            (str_store_troop_name, s66, ":path_1_troop"),],
        "{s66}",[
            (troop_get_upgrade_troop, ":cur_troop", "$player_cur_troop", 0),
            (assign, "$player_cur_troop", ":cur_troop"),
            (call_script, "script_freelancer_equip_troop", "$player_cur_troop"),
            (change_screen_map),]),

        ("upgrade_path_2",[
            (troop_get_upgrade_troop, ":path_2_troop", "$player_cur_troop", 1),
            (ge, ":path_2_troop", 1),
            (str_store_troop_name, s67, ":path_2_troop"),],
        "{s67}",[
            (troop_get_upgrade_troop, ":cur_troop", "$player_cur_troop", 1),
            (assign, "$player_cur_troop", ":cur_troop"),
            (call_script, "script_freelancer_equip_troop", "$player_cur_troop"),
            (change_screen_map),]),
           
        ("upgrade_path_4",[
            (troop_get_slot, ":path_3_troop", "$enlisted_lord", slot_troop_special_troop),
            (ge, ":path_3_troop", 1),
            (troop_get_slot, ":cost_troop", ":path_3_troop", slot_troop_upgrade_1),
            (eq, ":cost_troop", "$player_cur_troop"),
            (str_store_troop_name, s67, ":path_3_troop"),],
        "{s67}",[
            (troop_get_slot, ":path_3_troop", "$enlisted_lord", slot_troop_special_troop),
            (assign, "$player_cur_troop", ":path_3_troop"),
            (call_script, "script_freelancer_equip_troop", "$player_cur_troop"),
            (change_screen_map),]),
           
                       
         ("back",[],"I don not want to promoted troop", [
            (call_script, "script_freelancer_equip_troop", "$player_cur_troop"),
            (change_screen_map),]),
            
    ]),
    
   ("upgrade_path_knight",0,
    "In recognition of your excellent service, you have been promoted.",
    "none",[
        (set_background_mesh, "mesh_pic_soldier_world_map"),
        (call_script, "script_freelancer_unequip_troop", "$player_cur_troop"),
        ],
    [      
        ("upgrade_path_3",[
            (store_troop_faction, ":commander_faction", "$enlisted_lord"),	
            (faction_get_slot, ":path_3_troop", ":commander_faction", slot_faction_tier_1_castle_troop),
            (ge, ":path_3_troop", 1), #make sure troop is valid and not player troop
            (str_store_troop_name, s67, ":path_3_troop"),],
        "{s67}",[
            (store_troop_faction, ":commander_faction", "$enlisted_lord"),	
            (faction_get_slot, ":cur_troop", ":commander_faction", slot_faction_tier_1_castle_troop),
            (assign, "$player_cur_troop", ":cur_troop"),
            (call_script, "script_freelancer_equip_troop", "$player_cur_troop"),
            
            (troop_get_slot, ":player_effect", "trp_player", slot_troop_player_effect),
            (troop_get_slot, ":player_class", "trp_player", slot_troop_player_class),
            (call_script,"script_get_player_rank_name"),
            (assign, ":need_effect", reg1),
            (try_begin),
              (is_between, ":player_class", 5, 8),
              (store_sub, ":add_effect", ":need_effect", ":player_effect"), 
              (gt, ":add_effect", 0),
              (call_script,"script_change_player_effect", ":add_effect"),
            (else_try),
              (call_script,"script_change_player_effect", 100),
            (try_end),
            (change_screen_map),]),
            
         ("back",[],"I don not want to promoted troop", [
            (call_script, "script_freelancer_equip_troop", "$player_cur_troop"),
            (change_screen_map),]),
            
    ]),
    
   ("freelancer_train_player_1", 0,
   "Training in your party start. How many opponents will you go against?",
   "none", [],
   [
    ("freelancer_train_player_num_1", [],
    "One.",
    [
        (assign, "$temp", 1),
        (jump_to_menu, "mnu_freelancer_train_player_2"),
    ], "."),

    ("freelancer_train_player_num_2", [],
    "Two.",
    [
        (assign, "$temp", 2),
        (jump_to_menu, "mnu_freelancer_train_player_2"),
    ], "."),

    ("freelancer_train_player_num_3", [],
    "Three.",
    [
        (assign, "$temp", 3),
        (jump_to_menu, "mnu_freelancer_train_player_2"),
    ], "."),

    ("freelancer_train_player_num_4", [],
    "Four.",
    [
        (assign, "$temp", 4),
        (jump_to_menu, "mnu_freelancer_train_player_2"),
    ], "."),

    ("freelancer_train_player_num_5", [],
    "Five.",
    [
        (assign, "$temp", 5),
        (jump_to_menu, "mnu_freelancer_train_player_2"),
    ], "."),

    ("freelancer_train_player_num_6", [],
    "Six.",
    [
        (assign, "$temp", 6),
        (jump_to_menu, "mnu_freelancer_train_player_2"),
    ], "."),

    ("freelancer_train_player_num_7", [],
    "Seven.",
    [
        (assign, "$temp", 7),
        (jump_to_menu, "mnu_freelancer_train_player_2"),
    ], "."),

    ("freelancer_train_player_num_8", [],
    "Eight.",
    [
        (assign, "$temp", 8),
        (jump_to_menu, "mnu_freelancer_train_player_2"),
    ], "."),

    ("go_back", [],
    "Go Back...",
    [
        (change_screen_map),
    ], "."),

   ]),

   ("freelancer_train_player_2", 512,
   "Are you ready to fight?","none", 
   [   ],
   [
    ("train_yes", [],
    "Yes...",
    [
          (assign, ":closest_town", -1),
          (assign, ":minimum_dist", 10000),
          (try_for_range, ":cur_town", towns_begin, towns_end),
            (store_distance_to_party_from_party, ":dist", ":cur_town", "$g_encountered_party"),
            (lt, ":dist", ":minimum_dist"),
            (assign, ":minimum_dist", ":dist"),
            (assign, ":closest_town", ":cur_town"),
          (try_end),           
          (try_begin),         
            (ge, ":closest_town", 0),
            (party_get_slot, ":duel_scene", ":closest_town", slot_town_arena),          
          (try_end),
    
        (modify_visitors_at_site, ":duel_scene"),
        (reset_visitors),
        (troop_set_health, "trp_player", 100),
        (set_visitor, 0, "trp_player"),
        (set_visitors, 1, "$player_cur_troop", "$temp"),
        (set_jump_mission, "mt_freelancer_train_player"),
        (jump_to_scene, ":duel_scene"),
        (change_screen_mission),
    ]),

    ("train_wait", [],
    "Wait...",
    [
        (jump_to_menu, "mnu_freelancer_train_player_1"),
    ]),

   ]),

   ("freelancer_train_player_win", 512,
   "You win the fight, and you got {reg1} contribution.",
   "none", 
   [
    (store_character_level, ":var_0", "$player_cur_troop"),
    (val_mul, ":var_0", "$temp"),
    (val_div, ":var_0", 2),
    (assign, reg1, ":var_0"),
    (call_script, "script_change_player_contribution", ":var_0"),
   ],
   [
    ("continue", [],"Continue...", [(change_screen_map)]),
   ]),

   ("freelancer_train_player_lose", 512,
   "You lose the fight, and you got nothing.",
   "none", [],
   [
    ("continue", [],"Continue...", [(change_screen_map)] ),
   ]),
    
#+freelancer end   
    
  #oim_rich_visitor
  ("oim_rich_visitor",mnf_disable_all_keys,"{s2}",
  "none",
    [
    (store_character_level, ":level", "trp_player"), 
    (store_random_in_range, reg20, ":level", 50),
    (try_begin),
      (gt, reg20, 30),  
      (str_store_string, s2, "@There is gourds. It's better to return to the tavern..."),
    (else_try), 
      (str_store_string, s2, "@You sought that the visitor is alone"),
    (try_end), 
  ],
     [
      ("attack", [
    ],"Pursue the townsman.",
       [
      #
      (assign,"$all_doors_locked",1),
      #(assign, "$g_next_menu", "mnu_oim_getman_sneack_in"),
      #(party_get_slot, ":sneak_scene", "$current_town",slot_town_alley), # slot_town_gate),
      (party_get_slot, ":sneak_scene", "$current_town", slot_town_center),
      (modify_visitors_at_site,":sneak_scene"),
      (reset_visitors),
      (set_visitors, 0, "trp_player", 1),
      (set_jump_entry, 0),           
      (set_jump_mission,"mt_oim_tavern_rich_man_hunt"),
      (jump_to_scene,":sneak_scene"),
      (change_screen_mission), 
      (val_add,"$g_sneaak_time", 1),
      (try_begin),
        (gt, reg20, 30),  
        (assign, "$g_is_quick_battle", -2),
      (else_try), 
        (assign, "$g_is_quick_battle", 0),
      (try_end), 
    ]),

      ("go_back_dot", [], "Go back.",
       [
      (assign, "$g_is_quick_battle", 0),
      (jump_to_menu, "mnu_town"),
    ]),

       ] 
    ),

  ("oim_rich_visitor_result",mnf_disable_all_keys,"{s2}",
  "none",
    [
    (try_begin),
      (eq, "$g_battle_result", -1),
      (set_background_mesh, "mesh_pic_wounded"),   
      (str_store_string, s2, "@You lost the fight. And gourds taken you as an prisoner..."),
    (else_try), 
      (this_or_next|is_between, "$g_main_attacker_agent", armor_merchants_begin, armor_merchants_end),
      (this_or_next|is_between, "$g_main_attacker_agent", weapon_merchants_begin, weapon_merchants_end),
      (is_between, "$g_main_attacker_agent", goods_merchants_begin, goods_merchants_end),
      (str_store_string, s2, "@The man is dead... You found only a small sum of money and loot his goods..."),
    (else_try), 
      (str_store_string, s2, "@The man is dead... You found only a small sum of money and his weapon..."),
    (try_end), 
  ],
     [
      ("continue", [(eq, "$g_battle_result", -1),], "Continue...",
       [
      (store_troop_gold, ":gold", "trp_player"),
      (val_mul, ":gold", 15), 
      (val_div, ":gold", 100), 
      (troop_remove_gold, "trp_player", ":gold"),
      (assign, "$g_main_attacker_agent", -1),
      (assign, "$g_player_is_captive", 1),
      (assign,"$auto_menu",-1),
      (assign, "$capturer_party", "$g_encountered_party"),
      (jump_to_menu, "mnu_captivity_castle_taken_prisoner"),
    ]),

      ("continue", [(neq, "$g_battle_result", -1),], "Continue...",
       [
      (store_faction_of_party, ":party_faction", "$g_encountered_party"), 
      (gt, "$g_main_attacker_agent", -1), 
      (troop_clear_inventory, "trp_temp_array_b"),
      (try_begin), 
        (eq, "$g_main_attacker_agent", "trp_assassin"),
        (troop_add_item, "trp_temp_array_b", "itm_assasin_hood_4", 0),
        (troop_add_item, "trp_temp_array_b", "itm_armor7", 0),
        (call_script, "script_troop_add_gold", "trp_player", 1000), 
      (else_try),
        (eq, "$g_main_attacker_agent", "trp_sarranid_assasin_2"),
        (troop_add_item, "trp_temp_array_b", "itm_armor8", 0),
        (troop_add_item, "trp_temp_array_b", "itm_assasin_hood_3", 0),
        (call_script, "script_troop_add_gold", "trp_player", 2000), 
      (else_try),
      
        (eq, "$g_main_attacker_agent", "trp_belligerent_drunk"),
        #(troop_add_item, "trp_player", "$g_attacker_drawn_weapon", 0),
        (troop_remove_items, "trp_belligerent_drunk", "$g_attacker_drawn_weapon", 1),
        (store_random_in_range, "$g_attacker_drawn_weapon", "itm_sword_medieval_a","itm_mace_1"),
        (troop_add_item, "trp_belligerent_drunk", "$g_attacker_drawn_weapon", 0),
        (store_random_in_range, ":gold", 5, 16), 
        (val_mul, ":gold", 100), 
        (call_script, "script_troop_add_gold", "trp_player", ":gold"), 
      (else_try),
        (faction_get_slot, ":town_troop", ":party_faction",  slot_faction_town_walker_male_troop),
        (eq, "$g_main_attacker_agent", ":town_troop"),
        (store_random_in_range, ":gold", 5, 16), 
        (val_mul, ":gold", 1000), 
        (call_script, "script_troop_add_gold", "trp_player", ":gold"), 
        #(troop_add_item, "trp_player", "$g_attacker_drawn_weapon", 0),
        #(jump_to_menu, "mnu_auto_return_to_map"),
      (else_try),
        (faction_get_slot, ":castle_troop", ":party_faction",  slot_faction_tier_1_castle_troop),
        (this_or_next|eq, "$g_main_attacker_agent", ":castle_troop"),
        (this_or_next|is_between, "$g_main_attacker_agent", armor_merchants_begin, armor_merchants_end),
        (this_or_next|is_between, "$g_main_attacker_agent", weapon_merchants_begin, weapon_merchants_end),
        (is_between, "$g_main_attacker_agent", goods_merchants_begin, goods_merchants_end),
        #(call_script, "script_copy_inventory", "$g_main_attacker_agent", "trp_find_item_cheat"),
        
        #(call_script, "script_copy_inventory", "$g_main_attacker_agent", "trp_temp_array_b"),
        (troop_clear_inventory, "trp_temp_array_b"),
        (party_get_skill_level, ":player_party_looting", "p_main_party", "skl_looting"),
        (val_mul, ":player_party_looting", 3),
        (try_for_range, ":i_slot", num_equipment_kinds ,max_inventory_items + 1),
          (store_random_in_range, ":rand", 0, 100), 
          (ge, ":rand", ":player_party_looting"),
          
          (troop_get_inventory_slot, ":item", "$g_main_attacker_agent", ":i_slot"),
          (troop_set_inventory_slot, "trp_temp_array_b", ":i_slot", ":item"),
          (troop_get_inventory_slot_modifier, ":imod", "$g_main_attacker_agent", ":i_slot"),
          (troop_set_inventory_slot_modifier, "trp_temp_array_b", ":i_slot", ":imod"),
          
          (try_begin),
            (this_or_next|is_between, "$g_main_attacker_agent", armor_merchants_begin, armor_merchants_end),
            (this_or_next|is_between, "$g_main_attacker_agent", weapon_merchants_begin, weapon_merchants_end),
            (is_between, "$g_main_attacker_agent", goods_merchants_begin, goods_merchants_end),
            (troop_set_inventory_slot, "$g_main_attacker_agent", ":i_slot", -1),
          (try_end),
        (try_end),
        
      (try_end),
      
      (troop_add_item, "trp_temp_array_b", "$g_attacker_drawn_weapon", 0),
      (troop_sort_inventory, "trp_temp_array_b"),
      (call_script, "script_change_player_honor", -1), 
      (jump_to_menu, "mnu_auto_return_to_map"),
      (change_screen_loot, "trp_temp_array_b"),
      (assign, "$g_main_attacker_agent", -1),
    ]),
    
    ] 
    ),  

  ("oim_rich_visitor_meal",mnf_disable_all_keys,"you decide to have a rest to wait for somebody.",
  "none",
    [
  ],
     [
      ("start_resting", [],"Start resting.",
       [
        (assign, "$g_is_quick_battle", -1),
        (change_screen_map),    

        (assign, "$auto_enter_town", "$current_town"),
        (assign, "$g_town_visit_after_rest", 1),
        (store_random_in_range, ":random_no", 1, 6), 
        (rest_for_hours, ":random_no", 5, 0), #rest while not attackable  
       ]),
     ("back_to_town_menu",[],"Back.",
       [
          (jump_to_menu, "mnu_town_trade"),
       ]),
    
    ],
    ),  

  (
    "world_map_precision",0,
    "Please choose the precision of the world map.",
    "none",
    [],
    [

      ("map_precision_1",[],"Very Low.",
       [
        (assign, "$temp_2", 6),
        (start_presentation, "prsnt_world_map"),
       ]
      ),
      ("map_precision_2",[],"Low.",
       [
        (assign, "$temp_2", 5),
        (start_presentation, "prsnt_world_map"),
       ]
      ),
      ("map_precision_3",[],"Medium.",
       [
        (assign, "$temp_2", 4),
        (start_presentation, "prsnt_world_map"),
      ]
       ),
      ("map_precision_4",[],"High.",
       [
        (assign, "$temp_2", 3),
        (start_presentation, "prsnt_world_map"),
      ]
       ),
      ("map_precision_5",[],"Ultra High.",
       [
        (assign, "$temp_2", 2),
        (start_presentation, "prsnt_world_map"),
      ]
       ),
      ("go_back",[],"Go back.",
       [(jump_to_menu,"mnu_reports"),]
       ),
      ]
  ),

  (
    "battlefield_size",0,
    "Please choose the size of battlefield. Current battlefield is {s3}.",
    "none",
    [
      (store_add, ":dest_string", "str_battlefield_small", "$g_random_scene_size"),
      (str_store_string, s3, ":dest_string"),
    ],
    [
    
      ("battlefield_Default",[],"Default.", [(call_script, "script_set_random_scene_size"),]),
      ("battlefield_small",[],"Small.", [(assign, "$g_random_scene_size", 0),]),
      ("battlefield_normal",[],"Normal.", [(assign, "$g_random_scene_size", 1),]),
      ("battlefield_large",[],"Large.", [(assign, "$g_random_scene_size", 2),]),
      ("battlefield_extra_large",
       [
        (party_get_current_terrain, ":terrain_type", "p_main_party"),
        (neg|is_between, ":terrain_type", rt_mountain_forest, rt_desert_forest+1),
       ],"Extra large", [(assign, "$g_random_scene_size", 3),]),
       
      ("go_back",[],"Go back.",
       [
       (jump_to_menu,"$g_next_menu"),]
       ),
      ]
  ),

   ("necromancy", 0,
   "Use_your_necromancy_skills. Costs_your and_Dark Energy might with your blood_(hp).^Dark Energy:_{reg11},^necromancy level:_{reg12}","none",
     [
        (troop_get_slot, ":old_renown", "trp_player", slot_troop_player_soul_point),
        (assign, reg11, ":old_renown"),
        (store_skill_level, ":power", skl_necromancy, "trp_player"),
        (assign, reg12, ":power"),
     ],
     [ 
      ("necro_back",[],"Go_back",[(jump_to_menu,"mnu_camp"),]),
     
      ("camp_manage_gems_2",[],"put your gems to chess.",[(jump_to_menu,"mnu_camp_manage_gems"),]),
     
      ("necro_create_troop", [],"Use_your_necromancy_skills create_item.",[(assign, "$cur_page", 0),(jump_to_menu,"mnu_necro_create_troop"),]),
      ("necro_create_undead_weak", [],"Use_your_necromancy_skills Create_undead.",[(assign, "$cur_page", 0),(jump_to_menu,"mnu_necro_create_undead_weak"),]),
      ("necro_create_undead", [],"Use_your_necromancy_skills Create_undead.",[(assign, "$cur_page", 0),(jump_to_menu,"mnu_necro_create_undead"),]),
      ("necro_create_item", [],"Use_your_necromancy_skills create_item.",[(assign, "$cur_page", 0),(jump_to_menu,"mnu_necro_create_item"),]),
      
      ("necro_sg",[],"upgrade sg_small to sg_big.",[(assign, "$cur_page", 0),(jump_to_menu,"mnu_necro_sg"),]),
      
      ("necro_heal",[
          (eq, 1, 0),
          (troop_get_slot, ":old_renown", "trp_player", slot_troop_player_soul_point),
          (store_troop_health, ":troop_hp", "trp_player"),
          (try_begin),
              (this_or_next|eq, ":troop_hp", 100),
              (lt, ":old_renown", 100),
              (disable_menu_option),
          (try_end),],
         "Use_50 soul_point heal your self",
         [
          (call_script, "script_change_player_soul_point", -100),
          (troop_set_health,"trp_player",100),
          (jump_to_menu, "mnu_necromancy")
         ]),    
         
      ("necro_prisoner_soul",[
          (store_num_regular_prisoners, ":num_regular_prisoners"),
          (try_begin),
              (lt, ":num_regular_prisoners", 1),
              (disable_menu_option),
          (try_end),],
         "kill_all_prisoner get soul_point ",
         [
          (assign, ":total_income", 0),
          (play_sound,"snd_man_die"),
          (play_sound,"snd_skeleton_death"),
          (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
          (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
            (party_prisoner_stack_get_troop_id, ":troop_no", "p_main_party", ":i_stack"),
            (neg|troop_is_hero, ":troop_no"),
            (party_prisoner_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
            (store_character_level, ":sell_price", ":troop_no"),
            (val_div, ":sell_price", 5),
            (val_add, ":sell_price", 1),
            (store_mul, ":stack_total_price", ":sell_price", ":stack_size"),
            (val_add, ":total_income", ":stack_total_price"),
            (party_remove_prisoners, "p_main_party", ":troop_no", ":stack_size"),
          (try_end),
          (call_script,"script_change_player_soul_point",":total_income"),
          (jump_to_menu, "mnu_necromancy")
         ]),      
          
      ("necro_upgrade_party",[
          (store_num_regular_prisoners, ":num_regular_prisoners"),
          (try_begin),
              (lt, ":num_regular_prisoners", 1),
              (disable_menu_option),
          (try_end),],
         "kill_all_prisoner to upgrade your party (If your party hero knows trainer, more bettet effect)",
         [
          (assign, ":total_income", 0),
          (play_sound,"snd_man_yell"),
          (play_sound,"snd_man_die"),
          (play_sound,"snd_skeleton_death"),
          (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
          (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
            (party_prisoner_stack_get_troop_id, ":troop_no", "p_main_party", ":i_stack"),
            (neg|troop_is_hero, ":troop_no"),
            (party_prisoner_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
            (call_script, "script_get_troop_max_hp", ":troop_no"),
            (assign, ":sell_price", reg0),
            
            (store_mul, ":stack_total_price", ":sell_price", ":stack_size"),
            (val_add, ":total_income", ":stack_total_price"),
            (party_remove_prisoners, "p_main_party", ":troop_no", ":stack_size"),
          (try_end),
          (val_mul, ":total_income", 10),
          (call_script, "script_upgrade_main_party", ":total_income"),          
          (jump_to_menu, "mnu_necromancy")
         ]),      
          
    ("necro_create_elemental",
     [
      (store_skill_level,":power",skl_necromancy,"trp_player"),
      (eq,"$background_answer_3",cb3_student),
      (this_or_next|eq, "$background_answer_2",cb2_apprentice),
      (ge, ":power", 5),
     
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",1000),
      (assign,reg13,":cost"),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_skeletons, cost {reg13} Dark Energy",
     [
      (assign,":cost",-1000),
      (call_script, "script_change_player_soul_point", ":cost"),
      (store_random_in_range, ":rand", 0, 13),
      
      (try_for_range, ":unused", 0, 10),
        (store_random_in_range, ":rand", "trp_air_elemental", "trp_fire_elemental_3"),
        (party_add_members,"p_main_party",":rand",1),
      (try_end),
      
      
      (jump_to_menu,"mnu_necromancy"),
     ]),
  
        
    ("necro_create_skeletons",
     [
      (store_troop_health,":hp","trp_player",1),
      (store_skill_level,":power",skl_necromancy,"trp_player"),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",300),
      (store_mul, ":cost_add", ":power", 50),
      (val_add,":cost",":cost_add"),
      (assign,reg13,":cost"),
      (try_begin),
        (this_or_next|neg|gt,":hp",20),
        (this_or_next|neg|ge, ":local_2", 10),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_skeletons, cost {reg13} Dark Energy",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
      
      (try_for_range, ":unused", 0, ":end_time"),
        (store_skill_level,":power",skl_necromancy,"trp_player"),
        (store_troop_health,":hp","trp_player",1),
        (val_sub,":hp",10),
        (troop_set_health,"trp_player",":hp"),
        (play_sound,"snd_skeleton_yell"),
        #(display_message,QSTR+587,6843044),
        (assign,":cost",-300),
        (store_mul, ":cost_add", ":power", -50),
        (val_add,":cost",":cost_add"),
        (call_script, "script_change_player_soul_point", ":cost"),
        (val_add,":power",3),
        (store_div, ":low_power", ":power", 3),
        (store_random_in_range, ":rand", ":low_power", ":power"),
        (try_begin),
          (is_between, ":rand", 0, 3),
          (party_add_members,"p_main_party","trp_skeleton",10),
        (else_try),
          (is_between, ":rand", 3, 6),
          (party_add_members,"p_main_party","trp_zombie_1",10),
        (else_try),
          (is_between, ":rand", 6, 9),
          (party_add_members,"p_main_party","trp_wight",3),
          (party_add_members,"p_main_party","trp_skeleton",3),
          (party_add_members,"p_main_party","trp_zombie_1",4),
        (else_try),
          (is_between, ":rand", 9, 12),
          (party_add_members,"p_main_party","trp_dullahan",4),
          (party_add_members,"p_main_party","trp_skeleton",2),
          (party_add_members,"p_main_party","trp_zombie_1",2),
        (else_try),
          (is_between, ":rand", 12, 13),
          (party_add_members,"p_main_party","trp_vampire_1",3),
        (else_try),
          (party_add_members,"p_main_party","trp_wraith",1),
        (try_end),
        (try_begin),
          (store_random_in_range, ":rand", 0, 100),
          (lt, ":rand", 20),
          (call_script,"script_change_player_effect", -5),
        (try_end),
      (try_end),
      (jump_to_menu,"mnu_necromancy"),
     ]),
  
   ]),

   ("necro_create_undead_weak", 0,
   "Use_your_necromancy_skills_to_raise_undead_troops. Costs_your and_Dark Energy might with your blood_(hp).^Dark Energy:_{reg11},^necromancy level:_{reg12}","none",
    [
        (troop_get_slot, ":old_renown", "trp_player", slot_troop_player_soul_point),
        (assign, reg11, ":old_renown"),
        (store_skill_level, ":power", skl_necromancy, "trp_player"),
        (assign, reg12, ":power"),
    ],
   [ 

    ("necro_back",[],"Go_back",[(jump_to_menu,"mnu_necromancy"),]),
    
    ("prev_page", [
      (try_begin),
        (le, "$cur_page", 0),
        (disable_menu_option),
      (try_end),
    ], "Previous page.", [(val_sub, "$cur_page", 1),(jump_to_menu, "mnu_necro_create_undead_weak")]),
      
    ("next_page", [
      (try_begin),
        (gt, "$cur_page", 3),
        (disable_menu_option),
      (try_end),
    ], "Next page.", [(val_add, "$cur_page", 1),(jump_to_menu, "mnu_necro_create_undead_weak")]),
   
    ("necro_prisoner_to_imp",
     [
      (eq, "$cur_page", 0),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sulfur"),
      (item_get_slot, reg11, "itm_sulfur", slot_item_num_for_necro),
      
      (assign,":cost_1",150),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (store_num_regular_prisoners, reg10),
        (this_or_next|neg|ge, reg10, 3),
        (this_or_next|neg|ge, ":local_2", 9),  
        (this_or_next|neg|ge, reg11, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "Use prisoners Summon_3 imp, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2}).",
     [
        (play_sound,"snd_man_die"),
        
      (try_begin),
        (key_is_down, key_left_shift),
        (assign, ":end_time", 100),
      (else_try),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
        
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1),  
        (store_num_regular_prisoners, ":local_2"),
        (ge, ":local_2", 1),  
        (assign,":cost_1",-150),
        (item_slot_ge, "itm_sulfur", slot_item_num_for_necro, 1),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_sulfur",-1),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (try_for_range, ":unused", 0, 3),
          (assign, ":lowest_level", 9999),
          (assign, ":lowest_troop", 0),
          (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
          (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
            (neg|troop_is_hero, ":stack_troop"),
            (store_character_level, ":troop_level", ":stack_troop"),
            (try_begin),
                (lt, ":troop_level", ":lowest_level"),
                (assign, ":lowest_level", ":troop_level"),
                (assign, ":lowest_troop", ":stack_troop"),
            (try_end),
          (try_end),
          (remove_troops_from_prisoners, ":lowest_troop", 1),
          (str_store_troop_name, s1, ":lowest_troop"),
          (display_message, "@USE {s1} as sacrificed."),
          (store_character_level, ":sell_price", ":lowest_troop"),
          (try_begin),
            (ge, ":sell_price", 50),
            (assign, ":replacement","trp_demon_8"),
          (else_try), 
            (ge, ":sell_price", 40),
            (assign, ":replacement","trp_demon_3"),
          (else_try), 
            (ge, ":sell_price", 30),
            (assign, ":replacement","trp_demon_1_2"),
          (else_try), 
            (ge, ":sell_price", 25),
            (assign, ":replacement","trp_demon_2"),
          (else_try), 
            (ge, ":sell_price", 15),
            (assign, ":replacement","trp_demon_1_3"),
          (else_try),
            (assign, ":replacement", "trp_demon_1"),
          (try_end),
          (party_add_members,"p_main_party",":replacement",1),
        (try_end),
        
        
        (try_begin),
          (store_random_in_range, ":rand", 0, 100),
          (lt, ":rand", 20),
          (call_script,"script_change_player_effect", -5),
        (try_end),
      (try_end),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_prisoner",
     [
      (eq, "$cur_page", 0),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (assign,":cost_1",30),
      (assign,reg13,":cost_1"),
      (str_store_troop_name, s1, "trp_draugr_1"),
      (try_begin),
        (store_num_regular_prisoners, reg10),
        (this_or_next|neg|ge, reg10, 1),
        (this_or_next|neg|ge, ":local_2", 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "Use prisoners creat {s1}, cost {reg13} Dark Energy. (now you have {reg10} ).",
     [
        (play_sound,"snd_man_die"),
      (try_begin),
        (key_is_down, key_left_shift),
        (assign, ":end_time", 100),
      (else_try),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
        
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1),  
        (store_num_regular_prisoners, ":local_2"),
        (ge, ":local_2", 1),  
        (play_sound,"snd_man_die"),
        (assign,":cost_1",-30),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (try_begin),
          (assign, ":lowest_level", 9999),
          (assign, ":lowest_troop", 0),
          (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
          (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
            (neg|troop_is_hero, ":stack_troop"),
            (store_character_level, ":troop_level", ":stack_troop"),
            (try_begin),
                (lt, ":troop_level", ":lowest_level"),
                (assign, ":lowest_level", ":troop_level"),
                (assign, ":lowest_troop", ":stack_troop"),
            (try_end),
          (try_end),
          (remove_troops_from_prisoners, ":lowest_troop", 1),
          (str_store_troop_name, s1, ":lowest_troop"),
          (display_message, "@USE {s1} as sacrificed."),
        (try_end),
        
        (store_character_level, ":sell_price", ":lowest_troop"),
        (try_begin),
          (ge, ":sell_price", 60),
          (assign, ":replacement","trp_lich_3"),
        (else_try), 
          (ge, ":sell_price", 45),
          (assign, ":replacement","trp_draugr_lord"),
        (else_try), 
          (ge, ":sell_price", 35),
          (assign, ":replacement","trp_draugr_3"),
        (else_try), 
          (ge, ":sell_price", 25),
          (assign, ":replacement","trp_draugr_2"),
        (else_try),
          (assign, ":replacement", "trp_draugr_1"),
        (try_end),
        
        (party_add_members,"p_main_party",":replacement",1),
      (try_end),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_prisoner_to_mummy",
     [
      (eq, "$cur_page", 0),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (assign,":cost_1",10),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (store_num_regular_prisoners, reg10),
        (this_or_next|neg|ge, reg10, 1),
        (this_or_next|neg|ge, ":local_2", 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "Use prisoners creat mummy, cost {reg13} Dark Energy. (now you have {reg10} ).",
     [
        (play_sound,"snd_man_die"),
      (try_begin),
        (key_is_down, key_left_shift),
        (assign, ":end_time", 100),
      (else_try),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
        
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1),  
        (store_num_regular_prisoners, ":local_2"),
        (ge, ":local_2", 1),  
        (play_sound,"snd_man_die"),
        (assign,":cost_1",-10),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (try_begin),
          (assign, ":lowest_level", 9999),
          (assign, ":lowest_troop", 0),
          (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
          (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
            (neg|troop_is_hero, ":stack_troop"),
            (store_character_level, ":troop_level", ":stack_troop"),
            (try_begin),
                (lt, ":troop_level", ":lowest_level"),
                (assign, ":lowest_level", ":troop_level"),
                (assign, ":lowest_troop", ":stack_troop"),
            (try_end),
          (try_end),
          (remove_troops_from_prisoners, ":lowest_troop", 1),
          (str_store_troop_name, s1, ":lowest_troop"),
          (display_message, "@USE {s1} as sacrificed."),
        (try_end),
        (store_character_level, ":sell_price", ":lowest_troop"),
        (try_begin),
          (is_between, ":lowest_troop", "trp_red_dragon", "trp_lich_dragon"),
          (assign, ":replacement","trp_bone_dragon"),
        (else_try), 
          (eq, ":lowest_troop", "trp_lich_dragon"),
          (assign, ":replacement","trp_lich_dragon"),
        (else_try), 
          (ge, ":sell_price", 35),
          (assign, ":replacement","trp_zombie_3"),
        (else_try), 
          (ge, ":sell_price", 25),
          (assign, ":replacement","trp_zombie_2"),
        (else_try),
          (assign, ":replacement", "trp_zombie_1"),
        (try_end),
        (party_add_members,"p_main_party",":replacement",1),
      (try_end),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_prisoner_to_vampire",
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_intelligence", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s3,"itm_mercury"),
      (item_get_slot, reg12, "itm_mercury", slot_item_num_for_necro),
      (assign,":cost_1",100),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (store_num_regular_prisoners, reg10),
        (this_or_next|neg|ge, reg10, 1),
        (this_or_next|neg|ge, ":local_2", 8),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "Use prisoners Summon_2 vampire, cost {reg13} Dark Energy.need 1{s2}1{s3} (now you have {reg11}{s2} {reg12}{s3}).",
     [
        (play_sound,"snd_man_die"),
      (assign,":cost_1",-400),
        (play_sound,"snd_man_die"),
      (try_begin),
        (key_is_down, key_left_shift),
        (assign, ":end_time", 100),
      (else_try),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
        
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1),  
        (store_num_regular_prisoners, ":local_2"),
        (ge, ":local_2", 1),  
        (play_sound,"snd_man_die"),
        (assign,":cost_1",-100),
        (item_slot_ge, "itm_mercury", slot_item_num_for_necro, 1),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_mercury",-1),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (try_for_range, ":unused", 0, 3),
          (assign, ":lowest_level", 9999),
          (assign, ":lowest_troop", 0),
          (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
          (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
            (neg|troop_is_hero, ":stack_troop"),
            (store_character_level, ":troop_level", ":stack_troop"),
            (try_begin),
                (lt, ":troop_level", ":lowest_level"),
                (assign, ":lowest_level", ":troop_level"),
                (assign, ":lowest_troop", ":stack_troop"),
            (try_end),
          (try_end),
          (remove_troops_from_prisoners, ":lowest_troop", 1),
          (str_store_troop_name, s1, ":lowest_troop"),
          (display_message, "@USE {s1} as sacrificed."),
        
          (store_character_level, ":sell_price", ":lowest_troop"),
          (try_begin),
            (is_between, ":lowest_troop", "trp_red_dragon", "trp_lich_dragon"),
            (assign, ":replacement","trp_ghost_dragon"),
          (else_try), 
            (ge, ":sell_price", 45),
            (assign, ":replacement","trp_wraith"),
          (else_try), 
            (ge, ":sell_price", 30),
            (assign, ":replacement","trp_wight"),
          (else_try), 
            (ge, ":sell_price", 20),
            (assign, ":replacement","trp_ghost"),
          (else_try),
            (assign, ":replacement", "trp_skeleton"),
          (try_end),
        
          (party_add_members,"p_main_party",":replacement",1),
        (try_end),
      (try_end),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_prisoner_to_werewolf_1",
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_trade", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sulfur"),
      (item_get_slot, reg11, "itm_sulfur", slot_item_num_for_necro),

      
      
      (assign,":cost_1",200),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (store_num_regular_prisoners, reg10),
        (this_or_next|neg|ge, reg10, 1),
        (this_or_next|neg|ge, ":local_2", 8),  
        (this_or_next|neg|ge, reg11, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "Use prisoners Summon_1 werewolf, cost {reg13} Dark Energy.need 1{s2}1{s3} (now you have {reg11}{s2} {reg12}{s3}).",
     [
        (play_sound,"snd_man_die"),
      (assign,":cost_1",-200),
      (call_script, "script_change_player_necro_item","itm_sulfur",-1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (try_begin),
        (assign, ":lowest_level", 9999),
        (assign, ":lowest_troop", 0),
        (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
          (neg|troop_is_hero, ":stack_troop"),
          (store_character_level, ":troop_level", ":stack_troop"),
          (try_begin),
            (lt, ":troop_level", ":lowest_level"),
            (assign, ":lowest_level", ":troop_level"),
            (assign, ":lowest_troop", ":stack_troop"),
          (try_end),
        (try_end),
        (remove_troops_from_prisoners, ":lowest_troop", 1),
        (str_store_troop_name, s1, ":lowest_troop"),
        (display_message, "@USE {s1} as sacrificed."),
      (try_end),
      (party_add_members,"p_main_party","trp_vampire_assassin",1),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_imp_to_demon",
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_trade", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sulfur"),
      (item_get_slot, reg11, "itm_sulfur", slot_item_num_for_necro),

      (str_store_troop_name,s3,"trp_demon_1_2"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_demon_1_2"),
      (str_store_troop_name,s4,"trp_demon_3"),
      (assign,":cost_1",400),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-400),
      (call_script, "script_change_player_necro_item","itm_sulfur",-1),
      (remove_troops_from_companions, "trp_demon_1_2", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_demon_3",1),
      (try_begin),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 20),
        (call_script,"script_change_player_effect", -5),
      (try_end),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_imp_to_demon",
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_trade", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sulfur"),
      (item_get_slot, reg11, "itm_sulfur", slot_item_num_for_necro),

      (str_store_troop_name,s3,"trp_demon_1_3"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_demon_1_3"),
      (str_store_troop_name,s4,"trp_demon_8"),
      (assign,":cost_1",1000),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-1000),
      (call_script, "script_change_player_necro_item","itm_sulfur",-1),
      (remove_troops_from_companions, "trp_demon_1_3", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_demon_8",1),
      (try_begin),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 20),
        (call_script,"script_change_player_effect", -5),
      (try_end),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_werewolf_to_mummy",
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_trade", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sg_human_small"),
      (item_get_slot, reg11, "itm_sg_human_small", slot_item_num_for_necro),
      (str_store_troop_name,s3,"trp_werewolf_1_a"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_werewolf_1_a"),
      (str_store_troop_name,s4,"trp_mummy_4"),
      (assign,":cost_1",1000),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-1000),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-1),
      (remove_troops_from_companions, "trp_werewolf_1_a", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_mummy_4",1),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_fighter_woman_to_valkyrie",
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_persuasion", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sg_human_small"),
      (item_get_slot, reg11, "itm_sg_human_small", slot_item_num_for_necro),

      (str_store_troop_name,s3,"trp_fighter_woman"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_fighter_woman"),
      (str_store_troop_name,s4,"trp_nord_valkyrie_1"),
      (assign,":cost_1",500),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (assign,":cost_1",-500),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-1),
      (remove_troops_from_companions, "trp_fighter_woman", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_nord_valkyrie_1",1),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_sword_sister_to_angle",
     [
      (eq, "$cur_page", 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (item_slot_eq, "itm_book_weapon_mastery", slot_item_book_read, 1),
      (str_store_item_name,s2,"itm_sg_human_small"),
      (item_get_slot, reg11, "itm_sg_human_small", slot_item_num_for_necro),

      (str_store_troop_name,s3,"trp_sword_sister"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_sword_sister"),
      (str_store_troop_name,s4,"trp_angle"),
      (assign,":cost_1",1000),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (assign,":cost_1",-1000),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-1),
      (remove_troops_from_companions, "trp_sword_sister", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_angle",1),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_sword_sister_to_demon_human_5_2",
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_trade", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sg_human_small"),
      (item_get_slot, reg11, "itm_sg_human_small", slot_item_num_for_necro),

      (str_store_troop_name,s3,"trp_sword_sister"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_sword_sister"),
      (str_store_troop_name,s4,"trp_demon_human_5_2"),
      (assign,":cost_1",1000),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (assign,":cost_1",-1000),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-1),
      (remove_troops_from_companions, "trp_sword_sister", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_demon_human_5_2",1),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_sword_sister_to_demon_human_5_2",
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_trade", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sg_human_small"),
      (item_get_slot, reg11, "itm_sg_human_small", slot_item_num_for_necro),

      (str_store_troop_name,s3,"trp_demon_7"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_demon_7"),
      (str_store_troop_name,s4,"trp_demon_5"),
      (assign,":cost_1",1666),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-1666),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-1),
      (remove_troops_from_companions, "trp_demon_7", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_demon_5",1),
      (try_begin),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 20),
        (call_script,"script_change_player_effect", -5),
      (try_end),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),
    ("necro_sword_sister_to_demon_human_5_2",
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_trade", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sg_human_small"),
      (item_get_slot, reg11, "itm_sg_human_small", slot_item_num_for_necro),

      (str_store_troop_name,s3,"trp_demon_human_5_1"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_demon_human_5_1"),
      (str_store_troop_name,s4,"trp_demon_6"),
      (assign,":cost_1",1666),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-1666),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-1),
      (remove_troops_from_companions, "trp_demon_human_5_1", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_demon_6",1),
      (try_begin),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 20),
        (call_script,"script_change_player_effect", -5),
      (try_end),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

    ("necro_wight_to_wraith",
     [
      (eq, "$cur_page", 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (item_slot_eq, "itm_book_intelligence", slot_item_book_read, 1),
      (str_store_item_name,s2,"itm_sg_black_small"),
      (item_get_slot, reg11, "itm_sg_human_small", slot_item_num_for_necro),


      (str_store_troop_name,s3,"trp_demon_4_2"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_demon_4_2"),
      (str_store_troop_name,s4,"trp_demon_4_3"),
      (assign,":cost_1",1000),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-1000),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-1),
      (remove_troops_from_companions, "trp_demon_4_2", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_demon_4_3",1),
      (try_begin),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 20),
        (call_script,"script_change_player_effect", -5),
      (try_end),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),


    ("necro_wight_to_wraith",
     [
      (eq, "$cur_page", 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (item_slot_eq, "itm_book_intelligence", slot_item_book_read, 1),
      (str_store_item_name,s2,"itm_sg_human_small"),
      (item_get_slot, reg11, "itm_sg_human_small", slot_item_num_for_necro),


      (str_store_troop_name,s3,"trp_wight"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_wight"),
      (str_store_troop_name,s4,"trp_wraith"),
      (assign,":cost_1",1000),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-1000),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-1),
      (remove_troops_from_companions, "trp_wight", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_wraith",1),
      (try_begin),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 20),
        (call_script,"script_change_player_effect", -5),
      (try_end),
      (jump_to_menu,"mnu_necro_create_undead_weak"),
     ]),

   ]),


   ("necro_create_undead", 0,
   "Use_your_necromancy_skills_to_raise_undead_troops. Costs_your and_Dark Energy might with your blood_(hp).^Dark Energy:_{reg11},^necromancy level:_{reg12}","none",
    [
        (troop_get_slot, ":old_renown", "trp_player", slot_troop_player_soul_point),
        (assign, reg11, ":old_renown"),
        (store_skill_level, ":power", skl_necromancy, "trp_player"),
        (assign, reg12, ":power"),
    ],
   [ 
   
    ("necro_back",[],"Go_back",[(jump_to_menu,"mnu_necromancy"),]),
    
    ("prev_page", 
    [
      (try_begin),
        (le, "$cur_page", 0),
        (disable_menu_option),
      (try_end),
    ], "Previous page.", [(val_sub, "$cur_page", 1),(jump_to_menu, "mnu_necro_create_undead")]),
      
    ("next_page", [
      (try_begin),
        (gt, "$cur_page", 3),
        (disable_menu_option),
      (try_end),
    ], "Next page.", [(val_add, "$cur_page", 1),(jump_to_menu, "mnu_necro_create_undead")]),
    
    ("necro_titan",#
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_tactics", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",2700),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),

      (try_begin),
        (this_or_next|neg|ge, ":local_2", 5),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_titan, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-2700),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_titan_1",1),
      (try_begin),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 20),
        (call_script,"script_change_player_effect", -10),
      (try_end),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
    ("necro_angle",#
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_prisoner_management", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",2800),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 6),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_angle, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-2800),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_angle",3),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
    ("necro_green_dragon",#
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_weapon_mastery", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",3400),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_dragon, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-3400),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_green_dragon",2),
      (try_begin),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 20),
        (call_script,"script_change_player_effect", -10),
      (try_end),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
    ("necro_red_dragon",#
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_weapon_mastery", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",3400),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_dragon, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-3400),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_red_dragon",2),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
    ("necro_fire_dragon",#
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_weapon_mastery", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",3400),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_dragon, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-3400),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_fire_dragon",2),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
    ("necro_bone_dragon",#
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_intelligence", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",3200),
      (assign,reg13,":cost"),
      (assign,":sell","itm_mercury"),
      (assign,":price",0),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_dragon, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_mercury"),
      (assign,":price",0),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-3200),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_bone_dragon",2),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
 
    ("necro_troll",#
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_persuasion", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",1500),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_troll, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-1500),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_troll_1",2),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
    ("necro_cyclop",#
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_leadership", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",2900),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_cyclop, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-2900),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_cyclop",2),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
    ("necro_ent_1",#
     [
      (eq, "$cur_page", 1),
      (neg|eq,"$background_type",cb_forester),
      (neg|eq,"$background_answer_3",cb3_poacher),
      (item_slot_eq, "itm_book_leadership", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",1000),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_ent, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-1000),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_ent_1",2),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
    ("necro_ent_2",#
     [
      (eq, "$cur_page", 1),
      (neg|eq,"$background_type",cb_forester),
      (neg|eq,"$background_answer_3",cb3_poacher),
      (item_slot_eq, "itm_book_leadership", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",1000),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_ent, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-1000),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_ent_2",2),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
    ("necro_giant",
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_persuasion", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",1000),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_giant, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-1000),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_giant_1_3",2),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
 
    ("necro_giant2",
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_persuasion", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",1000),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_giant, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),

      (assign,":cost",-1000),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_giant_1_2",2),

      (jump_to_menu,"mnu_necro_create_undead"),
     ]),

    ("necro_create_lich",
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_intelligence", slot_item_book_read, 1),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",1500),
      (assign,reg13,":cost"),
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_giant, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_sg_human_small"),
      (assign,":price",-1),
      (call_script, "script_change_player_necro_item",":sell",":price"),
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost",-1500),
      (call_script, "script_change_player_soul_point", ":cost"),
      (party_add_members,"p_main_party","trp_lich_1",3),
      (jump_to_menu,"mnu_necro_create_undead"),
     ]),
   ]),
   
   
   ("necro_create_item", 0,
   "Use_your_skills_to_create_item. Costs_your and_Dark Energy might.^Dark Energy:_{reg10}","none",
    [
        (troop_get_slot, ":old_renown", "trp_player", slot_troop_player_soul_point),
        (assign, reg10, ":old_renown"),
        
      (str_store_item_name,s1,"itm_sg_human_big"),
      (item_get_slot, reg11, "itm_sg_human_big", slot_item_num_for_necro),
      
      (str_store_item_name,s2,"itm_sg_black_big"),
      (item_get_slot,reg12,"itm_sg_black_big",slot_item_num_for_necro),

      (str_store_item_name,s3,"itm_sg_yellow_big"),
      (item_get_slot,reg13,"itm_sg_yellow_big",slot_item_num_for_necro),

      (str_store_item_name,s4,"itm_sg_orange_big"),
      (item_get_slot,reg14,"itm_sg_orange_big",slot_item_num_for_necro),
      
      (str_store_item_name,s5,"itm_sg_orange_small"),
      (item_get_slot,reg15,"itm_sg_orange_small",slot_item_num_for_necro),
      
      (str_store_item_name,s6,"itm_sg_blue_big"),
      (item_get_slot,reg16,"itm_sg_blue_big",slot_item_num_for_necro),
      
      (str_store_item_name,s7,"itm_sg_blue_small"),
      (item_get_slot,reg17,"itm_sg_blue_small",slot_item_num_for_necro),
      
      (str_store_item_name,s8,"itm_sg_purple_big"),
      (item_get_slot,reg18,"itm_sg_purple_big",slot_item_num_for_necro),
      
      (str_store_item_name,s9,"itm_sg_purple_small"),
      (item_get_slot,reg19,"itm_sg_purple_small",slot_item_num_for_necro),
      
      (str_store_item_name,s10,"itm_sg_green_big"),
      (item_get_slot,reg20,"itm_sg_green_big",slot_item_num_for_necro),
      
      (str_store_item_name,s11,"itm_sg_green_small"),
      (item_get_slot,reg21,"itm_sg_green_small",slot_item_num_for_necro),
      
     (try_begin),
       (item_slot_eq, "itm_book_weapon_mastery", slot_item_book_read, 1),
       (assign, reg22, 1),
     (else_try),
       (assign, reg22, 0),
     (try_end),
     (try_begin),
       (item_slot_eq, "itm_book_engineering", slot_item_book_read, 1),
       (assign, reg23, 1),
     (else_try),
       (assign, reg23, 0),
     (try_end),
     (try_begin),
       (item_slot_eq, "itm_book_trade", slot_item_book_read, 1),
       (assign, reg24, 1),
     (else_try),
       (assign, reg24, 0),
     (try_end),
     (try_begin),
       (item_slot_eq, "itm_book_prisoner_management", slot_item_book_read, 1),
       (assign, reg25, 1),
     (else_try),
       (assign, reg25, 0),
     (try_end),
      
        #(set_background_mesh, "mesh_skl_necromancy"),
    ],
   [ 
    ("Go_back",[],"Go_back",[(jump_to_menu,"mnu_necromancy"),]),
    
    ("prev_page", [
      (try_begin),
        (le, "$cur_page", 0),
        (disable_menu_option),
      (try_end),
    ], "Previous page.", [(val_sub, "$cur_page", 1),(jump_to_menu, "mnu_necro_create_item")]),
      
    ("next_page", [
      (try_begin),
        (gt, "$cur_page", 3),
        (disable_menu_option),
      (try_end),
    ], "Next page.", [(val_add, "$cur_page", 1),(jump_to_menu, "mnu_necro_create_item")]),
    
    ("necro_iron_to_gold",
     [
      (eq, "$cur_page", 0),
     
      (assign,":cost",300),
      (assign,reg13,":cost"),
      
      (str_store_item_name,s1,"itm_iron"),
      (store_item_kind_count,reg10,"itm_iron","trp_player"),
      
      (str_store_item_name,s2,"itm_sulfur"),
      (item_get_slot, reg11, "itm_sulfur", slot_item_num_for_necro),

      (str_store_item_name,s3,"itm_mercury"),
      (item_get_slot, reg12, "itm_mercury", slot_item_num_for_necro),
      
      (str_store_item_name,s4,"itm_trophy_a"),
      (try_begin),
        (this_or_next|neg|ge, reg10, 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_{s3}, cost {reg13} Dark Energy.need 3{s1}1{s2}1{s3} (now you have {reg10}{s1} {reg11}{s2} {reg12}{s3}).",
     [
      (assign,":cost",-300),
      (call_script, "script_change_player_soul_point", ":cost"),
      (troop_remove_items,"trp_player","itm_iron",3),
      (call_script, "script_change_player_necro_item","itm_sulfur",-1),
      (call_script, "script_change_player_necro_item","itm_mercury",-1),
      (call_script, "script_change_player_necro_item","itm_trophy_a",3),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
     
    ("necro_trophy",
     [
      (eq, "$cur_page", 0),
      (assign,":cost",3000),
      (troop_slot_ge,"trp_player", slot_troop_player_class,4),
      (assign,reg13,":cost"),
      (str_store_item_name,s3,"itm_trophy_b"),
      (str_store_item_name,s1,"itm_crystal"),
      (item_get_slot, reg10, "itm_crystal", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),
        (this_or_next|neg|ge, reg10, 3),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_{s3}, cost {reg13} Dark Energy,need 3{s1}(now you have {reg10}{s1})",
     [
      (assign,":cost",-3000),
      (call_script, "script_change_player_soul_point", ":cost"),
      (call_script, "script_change_player_necro_item","itm_crystal",-3),
      (troop_add_item,"trp_player","itm_trophy_b",0),            
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
     
    ("necro_trophy",
     [
      (eq, "$cur_page", 0),
      (eq,1,0),
      (store_free_inventory_capacity,":local_2","p_main_party"),
      (assign,":cost",25000),
      (troop_slot_ge,"trp_player", slot_troop_player_class,8),
      (assign,reg13,":cost"),
      (str_store_item_name,s3,"itm_trophy_c"),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_{s3}, cost {reg13} Dark Energy",
     [
      (assign,":cost",-25000),
      (call_script, "script_change_player_soul_point", ":cost"),
      (troop_add_item,"trp_player","itm_trophy_c",0),            
      (jump_to_menu,"mnu_necro_create_item"),
     ]),

    ("necro_strength",
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_weapon_mastery", slot_item_book_read, 1),
      (assign,":cost",5000),
      (assign,reg9,":cost"),
      
      (str_store_item_name,s1,"itm_sg_human_big"),
      (item_get_slot,reg10,"itm_sg_human_big",slot_item_num_for_necro),
      
      (str_store_item_name,s2,"itm_sg_black_big"),
      (item_get_slot,reg11,"itm_sg_black_big",slot_item_num_for_necro),

      (str_store_item_name,s3,"itm_sg_yellow_big"),
      (item_get_slot,reg12,"itm_sg_yellow_big",slot_item_num_for_necro),

      (str_store_item_name,s4,"itm_sg_orange_big"),
      (item_get_slot,reg13,"itm_sg_orange_big",slot_item_num_for_necro),
      
      (str_store_item_name,s5,"itm_sg_orange_small"),
      (item_get_slot,reg14,"itm_sg_orange_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, reg10, 2),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (this_or_next|neg|ge, reg13, 1),  
        (this_or_next|neg|ge, reg14, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_strength_Potion, cost {reg9} Dark Energy ,need 2{s1}1{s2}1{s3}1{s4}1{s5} (now you have {reg10}{s1} {reg11}{s2} {reg12}{s3} {reg13}{s4} {reg14}{s5}).",
     [
      (call_script, "script_change_player_soul_point", -5000),
      (call_script, "script_change_player_necro_item","itm_sg_human_big",-2),
      (call_script, "script_change_player_necro_item","itm_sg_black_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_yellow_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_orange_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_orange_small",-1),
      (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (troop_raise_attribute,":stack_troop",ca_strength,1),
      (try_end),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
    ("necro_agility",
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_engineering", slot_item_book_read, 1),
      (assign,":cost",5000),
      (assign,reg9,":cost"),
      
      (str_store_item_name,s1,"itm_sg_human_big"),
      (item_get_slot,reg10,"itm_sg_human_big",slot_item_num_for_necro),
      
      (str_store_item_name,s2,"itm_sg_black_big"),
      (item_get_slot,reg11,"itm_sg_black_big",slot_item_num_for_necro),

      (str_store_item_name,s3,"itm_sg_yellow_big"),
      (item_get_slot,reg12,"itm_sg_yellow_big",slot_item_num_for_necro),

      (str_store_item_name,s4,"itm_sg_blue_big"),
      (item_get_slot,reg13,"itm_sg_blue_big",slot_item_num_for_necro),
      
      (str_store_item_name,s5,"itm_sg_blue_small"),
      (item_get_slot,reg14,"itm_sg_blue_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, reg10, 2),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (this_or_next|neg|ge, reg13, 1),  
        (this_or_next|neg|ge, reg14, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_agility_Potion, cost {reg9} Dark Energy ,need 2{s1}1{s2}1{s3}1{s4}1{s5} (now you have {reg10}{s1} {reg11}{s2} {reg12}{s3} {reg13}{s4} {reg14}{s5}).",
     [
      (call_script, "script_change_player_soul_point", -5000),
      (call_script, "script_change_player_necro_item","itm_sg_human_big",-2),
      (call_script, "script_change_player_necro_item","itm_sg_black_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_yellow_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_blue_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_blue_small",-1),
      (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (troop_raise_attribute,":stack_troop",ca_agility,1),
      (try_end),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
    ("necro_intelligence",
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_trade", slot_item_book_read, 1),
      (assign,":cost",5000),
      (assign,reg9,":cost"),
      
      (str_store_item_name,s1,"itm_sg_human_big"),
      (item_get_slot,reg10,"itm_sg_human_big",slot_item_num_for_necro),
      
      (str_store_item_name,s2,"itm_sg_black_big"),
      (item_get_slot,reg11,"itm_sg_black_big",slot_item_num_for_necro),

      (str_store_item_name,s3,"itm_sg_yellow_big"),
      (item_get_slot,reg12,"itm_sg_yellow_big",slot_item_num_for_necro),

      (str_store_item_name,s4,"itm_sg_purple_big"),
      (item_get_slot,reg13,"itm_sg_purple_big",slot_item_num_for_necro),
      
      (str_store_item_name,s5,"itm_sg_purple_small"),
      (item_get_slot,reg14,"itm_sg_purple_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, reg10, 2),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (this_or_next|neg|ge, reg13, 1),  
        (this_or_next|neg|ge, reg14, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_intelligence_Potion, cost {reg9} Dark Energy ,need 2{s1}1{s2}1{s3}1{s4}1{s5} (now you have {reg10}{s1} {reg11}{s2} {reg12}{s3} {reg13}{s4} {reg14}{s5}).",
     [
      (call_script, "script_change_player_soul_point", -5000),
      (call_script, "script_change_player_necro_item","itm_sg_human_big",-2),
      (call_script, "script_change_player_necro_item","itm_sg_black_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_yellow_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_purple_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_purple_small",-1),
      (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (troop_raise_attribute,":stack_troop",ca_intelligence,1),
      (try_end),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
    ("necro_charisma",
     [
      (eq, "$cur_page", 0),
      (item_slot_eq, "itm_book_prisoner_management", slot_item_book_read, 1),
      (assign,":cost",5000),
      (assign,reg9,":cost"),
      
      (str_store_item_name,s1,"itm_sg_human_big"),
      (item_get_slot,reg10,"itm_sg_human_big",slot_item_num_for_necro),
      
      (str_store_item_name,s2,"itm_sg_black_big"),
      (item_get_slot,reg11,"itm_sg_black_big",slot_item_num_for_necro),

      (str_store_item_name,s3,"itm_sg_yellow_big"),
      (item_get_slot,reg12,"itm_sg_yellow_big",slot_item_num_for_necro),

      (str_store_item_name,s4,"itm_sg_green_big"),
      (item_get_slot,reg13,"itm_sg_green_big",slot_item_num_for_necro),
      
      (str_store_item_name,s5,"itm_sg_green_small"),
      (item_get_slot,reg14,"itm_sg_green_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, reg10, 2),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (this_or_next|neg|ge, reg13, 1),  
        (this_or_next|neg|ge, reg14, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_charisma_Potion, cost {reg9} Dark Energy ,need 2{s1}1{s2}1{s3}1{s4}1{s5} (now you have {reg10}{s1} {reg11}{s2} {reg12}{s3} {reg13}{s4} {reg14}{s5}).",
     [
      (call_script, "script_change_player_soul_point", -5000),
      (call_script, "script_change_player_necro_item","itm_sg_human_big",-2),
      (call_script, "script_change_player_necro_item","itm_sg_black_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_yellow_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_green_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_green_small",-1),
      (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
      (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (troop_raise_attribute,":stack_troop",ca_charisma,1),
      (try_end),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),

    ("necro_cannon",
     [
      (eq, "$cur_page", 0),
      (this_or_next|eq,"$background_answer_3",cb3_craftsman),
      (item_slot_eq, "itm_book_engineering", slot_item_book_read, 1),
      (assign,":cost",20000),
      (assign,":sell","itm_tools"),
      (assign,":price",2),
      (store_troop_gold, ":player_gold", "trp_player"),
      (store_item_kind_count,reg11,"itm_hand_cannon","trp_player"),
      (store_item_kind_count,reg12,"itm_hand_cannon_2","trp_player"),
      (store_item_kind_count,reg13,"itm_hand_cannon_3","trp_player"),
      (assign,":end_item",-1),
        (this_or_next|ge, reg11, 1),
        (this_or_next|ge, reg12, 1),
        (ge, reg13, 1),
      (try_begin),
        (ge, reg11, 1),
        (assign,":begin_item","itm_hand_cannon"),
        (assign,":end_item","itm_hand_cannon_2"),
      (else_try),
        (ge, reg12, 1),
        (assign,":begin_item","itm_hand_cannon_2"),
        (assign,":end_item","itm_hand_cannon_3"),
        (val_add, ":price",1),
      (else_try),
        (ge, reg13, 1),
        (assign,":begin_item","itm_hand_cannon_3"),
        (assign,":end_item","itm_hand_cannon_4"),
        (val_add, ":price",2),
      (try_end),
      (str_store_item_name,s3,":begin_item"),
      (str_store_item_name,s4,":end_item"),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (store_item_kind_count,reg10,":sell","trp_player"),
      (try_begin),
        (this_or_next|neg|gt,":end_item",-1),  
        (this_or_next|neg|ge,reg10,":price"),  
        (neg|ge, ":player_gold", ":cost"),
        (disable_menu_option),
      (try_end),
     ],
      "upgrade weapon {s3} to {s4}, need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (assign,":sell","itm_tools"),
      (assign,":price",2),
      (troop_remove_gold,"trp_player",20000),
      (store_item_kind_count,reg11,"itm_hand_cannon","trp_player"),
      (store_item_kind_count,reg12,"itm_hand_cannon_2","trp_player"),
      (store_item_kind_count,reg13,"itm_hand_cannon_3","trp_player"),
      (assign,":end_item",-1),
      (try_begin),
        (ge, reg11, 1),
        (assign,":begin_item","itm_hand_cannon"),
        (assign,":end_item","itm_hand_cannon_2"),
      (else_try),
        (ge, reg12, 1),
        (assign,":begin_item","itm_hand_cannon_2"),
        (assign,":end_item","itm_hand_cannon_3"),
        (val_add, ":price",1),
      (else_try),
        (ge, reg13, 1),
        (assign,":begin_item","itm_hand_cannon_3"),
        (assign,":end_item","itm_hand_cannon_4"),
        (val_add, ":price",2),
      (try_end),
      (gt,":end_item",-1),
      (troop_remove_items,"trp_player",":begin_item",1),
      (troop_add_items,"trp_player",":end_item",1),
      (troop_remove_items,"trp_player",":sell",":price"),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),


    ("necro_clay_to_golem",
     [
      (eq, "$cur_page", 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_clay"),
      (assign,":price",2),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",100),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 1),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Create_1 golem, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
        
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1), 
        (item_slot_ge, "itm_clay", slot_item_num_for_necro, 2),
        (assign,":cost_1",-100),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_clay",-2),
        (party_add_members,"p_main_party","trp_golem_1",1),
      (try_end),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
     
    ("necro_clay_to_golem",
     [
      (eq, "$cur_page", 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_clay"),
      (assign,":price",15),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",1500),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 1),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Create_1 golem, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (assign,":cost_1",-1500),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (call_script, "script_change_player_necro_item","itm_clay",-15),
      (party_add_members,"p_main_party","trp_gargoyle",1),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
   
     
    ("necro_clay_to_golem",
     [
      (eq, "$cur_page", 1),
      (eq,"$background_answer_3",cb3_craftsman),
      (item_slot_eq, "itm_book_engineering", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_silver"),
      (assign,":price",3),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",500),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 1),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Create_1 silver golem, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
        
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1), 
        (item_slot_ge, "itm_silver", slot_item_num_for_necro, 3),
        (assign,":cost_1",-500),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_silver",-3),
        (party_add_members,"p_main_party","trp_golem_2",1),
      (try_end),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
   
   
    ("necro_clay_to_golem",
     [
      (eq, "$cur_page", 1),
      (this_or_next|eq,"$background_answer_3",cb3_craftsman),
      (item_slot_eq, "itm_book_engineering", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_iron"),
      (assign,":price",1),
      (assign,reg12,":price"),
      (store_item_kind_count,reg10,":sell","trp_player"),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",150),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 1),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Create_1 iron golem, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
        
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1), 
        (item_slot_ge, "itm_iron", slot_item_num_for_necro, 1),
        (assign,":cost_1",-150),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_iron",-1),
        (party_add_members,"p_main_party","trp_golem_3",1),
      (try_end),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
     
    ("necro_clay_to_golem",
     [
      (eq, "$cur_page", 1),
      (eq,"$background_answer_3",cb3_craftsman),
      (eq, "$background_answer_2",cb2_apprentice),
      #(item_slot_eq, "itm_book_engineering", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_trophy_a"),
      (assign,":price",1),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",200),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 1),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Create_1 gold golem, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
        
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1), 
        (item_slot_ge, "itm_trophy_a", slot_item_num_for_necro, 1),
        (assign,":cost_1",-200),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_trophy_a",-1),
        (party_add_members,"p_main_party","trp_golem_4",1),
      (try_end),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
     
    ("necro_golem_to_inferno",
     [
      (eq, "$cur_page", 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sulfur"),
      (item_get_slot, reg11, "itm_sulfur", slot_item_num_for_necro),

      (str_store_troop_name,s3,"trp_golem_1"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_golem_1"),
      (str_store_troop_name,s4,"trp_inferno"),
      (assign,":cost_1",300),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-300),
      (call_script, "script_change_player_necro_item","itm_sulfur",-1),
      (remove_troops_from_companions, "trp_golem_1", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_inferno",1),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),

    ("necro_inferno_to_huge_inferno",
     [
      (eq, "$cur_page", 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (str_store_item_name,s2,"itm_sg_human_small"),
      (item_get_slot, reg11, "itm_sg_human_small", slot_item_num_for_necro),

      (str_store_troop_name,s3,"trp_inferno"),
      (party_count_companions_of_type, reg12, "p_main_party", "trp_inferno"),
      (str_store_troop_name,s4,"trp_huge_inferno"),
      (assign,":cost_1",500),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|ge, reg11, 1),  
        (this_or_next|neg|ge, reg12, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (disable_menu_option),
      (try_end),
     ],
     "raising {s3} as {s4}, cost {reg13} Dark Energy.need 1{s2} (now you have {reg11}{s2} {reg12}{s3}).",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-500),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-1),
      (remove_troops_from_companions, "trp_inferno", 1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_huge_inferno",1),
      (jump_to_menu,"mnu_necro_create_item"),
     ]),

    ("necro_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":cost",1000),
      (assign,reg13,":cost"),
      
      (str_store_item_name,s1,"itm_silver"),
      (item_get_slot, reg10, "itm_silver", slot_item_num_for_necro),
      
      (str_store_item_name,s2,"itm_sg_human_big"),
      (item_get_slot, reg11, "itm_sg_human_big", slot_item_num_for_necro),
      
      (str_store_item_name,s4,"itm_holy_cross"),
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),
        (this_or_next|neg|ge, reg10, 1),  
        (this_or_next|neg|ge, reg11, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_{s3}, cost {reg13} Dark Energy.need 1{s1}1{s2} (now you have {reg10}{s1} {reg11}{s2}).",
     [
      (assign,":cost",-1000),
      (call_script, "script_change_player_soul_point", ":cost"),
      
      (call_script, "script_change_player_necro_item","itm_silver",-1),
      (call_script, "script_change_player_necro_item","itm_sg_human_big",-1),
      (troop_add_item,"trp_player","itm_holy_cross",0),    
              
      (jump_to_menu,"mnu_necro_create_item"),
     ]),

    ("necro_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":cost",3000),
      (assign,reg13,":cost"),
      
      (str_store_item_name,s1,"itm_sg_blood"),
      (store_item_kind_count,reg10,"itm_sg_blood","trp_player"),
      
      (str_store_item_name,s2,"itm_diamonds"),
      (store_item_kind_count,reg11,"itm_diamonds","trp_player"),
      
      (str_store_item_name,s4,"itm_chest_1"),
      (try_begin),
        (this_or_next|player_has_item,"itm_chest_1"),  
        (this_or_next|neg|ge, reg10, 1),  
        (this_or_next|neg|ge, reg11, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_{s3}, cost {reg13} Dark Energy.need 1{s1}1{s2} (now you have {reg10}{s1} {reg11}{s2}).",
     [
      (assign,":cost",-3000),
      (call_script, "script_change_player_soul_point", ":cost"),
      
      (troop_remove_items,"trp_player","itm_sg_blood",1),
      (troop_remove_items,"trp_player","itm_diamonds",1),
      (troop_add_item,"trp_player","itm_chest_1",0),    
              
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
    ("necro_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":cost",4000),
      (assign,reg13,":cost"),
      
      (str_store_item_name,s1,"itm_sg_blood"),
      (store_item_kind_count,reg10,"itm_sg_blood","trp_player"),
      
      (str_store_item_name,s2,"itm_diamonds"),
      (store_item_kind_count,reg11,"itm_diamonds","trp_player"),
      
      (str_store_item_name,s4,"itm_chest_2"),
      (try_begin),
        (this_or_next|player_has_item,"itm_chest_2"),  
        (this_or_next|neg|ge, reg10, 1),  
        (this_or_next|neg|ge, reg11, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_{s3}, cost {reg13} Dark Energy.need 1{s1}1{s2} (now you have {reg10}{s1} {reg11}{s2}).",
     [
      (assign,":cost",-4000),
      (call_script, "script_change_player_soul_point", ":cost"),
      
      (troop_remove_items,"trp_player","itm_sg_blood",1),
      (troop_remove_items,"trp_player","itm_diamonds",1),
      (troop_add_item,"trp_player","itm_chest_2",0),    
              
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
    ("necro_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":cost",5000),
      (assign,reg13,":cost"),
      
      (str_store_item_name,s1,"itm_sg_blood"),
      (store_item_kind_count,reg10,"itm_sg_blood","trp_player"),
      
      (str_store_item_name,s2,"itm_diamonds"),
      (store_item_kind_count,reg11,"itm_diamonds","trp_player"),
      
      (str_store_item_name,s4,"itm_chest_3"),
      (try_begin),
        (this_or_next|player_has_item,"itm_chest_3"),  
        (this_or_next|neg|ge, reg10, 1),  
        (this_or_next|neg|ge, reg11, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_{s3}, cost {reg13} Dark Energy.need 1{s1}1{s2} (now you have {reg10}{s1} {reg11}{s2}).",
     [
      (assign,":cost",-5000),
      (call_script, "script_change_player_soul_point", ":cost"),
      
      (troop_remove_items,"trp_player","itm_sg_blood",1),
      (troop_remove_items,"trp_player","itm_diamonds",1),
      (troop_add_item,"trp_player","itm_chest_3",0),    
              
      (jump_to_menu,"mnu_necro_create_item"),
     ]),
    ("necro_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":cost",6000),
      (assign,reg13,":cost"),
      
      (str_store_item_name,s1,"itm_sg_blood"),
      (store_item_kind_count,reg10,"itm_sg_blood","trp_player"),
      
      (str_store_item_name,s2,"itm_diamonds"),
      (store_item_kind_count,reg11,"itm_diamonds","trp_player"),
      
      (str_store_item_name,s4,"itm_chest_4"),
      (try_begin),
        (this_or_next|player_has_item,"itm_chest_4"),  
        (this_or_next|neg|ge, reg10, 1),  
        (this_or_next|neg|ge, reg11, 1),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Create_{s3}, cost {reg13} Dark Energy.need 1{s1}1{s2} (now you have {reg10}{s1} {reg11}{s2}).",
     [
      (assign,":cost",-6000),
      (call_script, "script_change_player_soul_point", ":cost"),
      
      (troop_remove_items,"trp_player","itm_sg_blood",1),
      (troop_remove_items,"trp_player","itm_diamonds",1),
      (troop_add_item,"trp_player","itm_chest_4",0),    
              
      (jump_to_menu,"mnu_necro_create_item"),
     ]),


   ]),

   ("necro_create_troop", 0,
   "Use_your_skills_to_create_item. Costs_your and_Dark Energy might.^Dark Energy:_{reg10}","none",
    [
        (troop_get_slot, ":old_renown", "trp_player", slot_troop_player_soul_point),
        (assign, reg10, ":old_renown"),
        
    ],
   [ 
   
    ("prev_page", 
    [
      (try_begin),
        (le, "$cur_page", 0),
        (disable_menu_option),
      (try_end),
    ], "Previous page.", [(val_sub, "$cur_page", 1),(jump_to_menu, "mnu_necro_create_troop")]),
      
    ("next_page", [
      (try_begin),
        (gt, "$cur_page", 3),
        (disable_menu_option),
      (try_end),
    ], "Next page.", [(val_add, "$cur_page", 1),(jump_to_menu, "mnu_necro_create_troop")]),
   
    ("Go_back",[],"Go_back",[(jump_to_menu,"mnu_necromancy"),]),
   
    ("necro_ent_1",#
     [
      (eq, "$cur_page", 1),
      (this_or_next|eq,"$background_type",cb_forester),
      (eq,"$background_answer_3",cb3_poacher),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",500),
      (assign,reg13,":cost"),
      (assign,":sell","itm_crystal"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_ent, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
        
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1), 
        (item_slot_ge, "itm_crystal", slot_item_num_for_necro, 1),
        (assign,":cost_1",-500),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_crystal",-1),
        (party_add_members,"p_main_party","trp_ent_1",1),
      (try_end),

      (jump_to_menu,"mnu_necro_create_troop"),
     ]),
   
    ("necro_ent_2",#
     [
      (eq, "$cur_page", 1),
      (this_or_next|eq,"$background_type",cb_forester),
      (eq,"$background_answer_3",cb3_poacher),

      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":cost",500),
      (assign,reg13,":cost"),
      (assign,":sell","itm_crystal"),
      (assign,":price",1),
      (assign,reg11,":price"),
      (str_store_item_name,s2,":sell"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|ge, reg10, reg11),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost"),
        (disable_menu_option),
      (try_end),
     ],
     "Summon_ent, cost {reg13} Dark Energy ,need {reg11}{s2} (now you have {reg10}{s2}).",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
        
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1), 
        (item_slot_ge, "itm_crystal", slot_item_num_for_necro, 1),
        (assign,":cost_1",-500),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_crystal",-1),
        (party_add_members,"p_main_party","trp_ent_2",1),
      (try_end),

      (jump_to_menu,"mnu_necro_create_troop"),
     ]),
   
    ("necro_bone_to_skeleton",
     [
      (eq, "$cur_page", 0),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
      (assign,":sell","itm_skeleton"),
      (assign,":price",3),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",200),
      (assign,reg13,":cost_1"),
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 10),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Create 10 skeletons, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
      
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 10), 
        (item_slot_ge, "itm_skeleton", slot_item_num_for_necro, 3),
        (assign,":cost_1",-200),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_skeleton",-3),
        (play_sound,"snd_skeleton_yell"),
        (store_random_in_range, ":rand", 0, 6),
        (try_begin),
          (eq,":rand",1),
          (party_add_members,"p_main_party","trp_se_skirmisher",8),
          (party_add_members,"p_main_party","trp_skeleton_lord",2),
        (else_try),
          (eq,":rand",2),
          (party_add_members,"p_main_party","trp_se_pikeman_1",8),
          (party_add_members,"p_main_party","trp_skeleton_lord",2),
        (else_try),
          (eq,":rand",3),
          (party_add_members,"p_main_party","trp_se_billman_1",6),
          (party_add_members,"p_main_party","trp_skeleton_halberd",4),
        (else_try),
          (eq,":rand",4),
          (party_add_members,"p_main_party","trp_se_pikeman_2",6),
          (party_add_members,"p_main_party","trp_skeleton_spearman",4),
        (else_try),
          (eq,":rand",5),
          (party_add_members,"p_main_party","trp_se_musketeer_1",6),
          (party_add_members,"p_main_party","trp_skeleton_archer",4),
        (else_try),
          (party_add_members,"p_main_party","trp_skeleton",10),
        (try_end),
      (try_end),
      (jump_to_menu,"mnu_necro_create_troop"),
     ]),

    ("necro_bone_to_mummy",
     [
      (eq, "$cur_page", 0),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_skeleton"),
      (assign,":price",3),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",150),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 3),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Create_3 mummy, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
      
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1), 
        (item_slot_ge, "itm_skeleton", slot_item_num_for_necro, 3),
        (assign,":cost_1",-150),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_skeleton",-3),
        (play_sound,"snd_skeleton_yell"),
        (party_add_members,"p_main_party","trp_mummy_1",3),
      (try_end),
      (jump_to_menu,"mnu_necro_create_troop"),
     ]),
   
    ("necro_bone_to_ghosts",
     [
      (eq, "$cur_page", 0),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_mercury"),
      (assign,":price",1),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",300),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 1),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Create_3 ghosts, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
      
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 1), 
        (item_slot_ge, "itm_mercury", slot_item_num_for_necro, 1),
        (assign,":cost_1",-300),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_mercury",-1),
        (play_sound,"snd_skeleton_yell"),
        (party_add_members,"p_main_party","trp_wight",3),
      (try_end),
      (jump_to_menu,"mnu_necro_create_troop"),
     ]),
   
    ("necro_crystal_to_pixie",
     [
      (eq, "$cur_page", 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_crystal"),
      (assign,":price",1),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",100),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 6),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Create_1 pixie, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (try_begin),
        (key_is_down, key_left_control),
        (assign, ":end_time", 10),
      (else_try),
        (assign, ":end_time", 1),
      (try_end),
      (try_for_range, ":unused", 0, ":end_time"),
        (party_get_free_companions_capacity,":local_2","p_main_party"),
        (ge, ":local_2", 2), 
        (item_slot_ge, "itm_crystal", slot_item_num_for_necro, 1),
        (assign,":cost_1",-100),
        (troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (call_script, "script_change_player_soul_point", ":cost_1"),
        (call_script, "script_change_player_necro_item","itm_crystal",-1),
        (play_sound,"snd_skeleton_yell"),
        (store_random_in_range, ":rand", 0, 3),
        (try_begin),
          (eq,":rand",0),
          (party_add_members,"p_main_party","trp_dryad",2),
        (else_try),
          (party_add_members,"p_main_party","trp_dryad",1),
          (party_add_members,"p_main_party","trp_pixie",1),
        (else_try),
          (party_add_members,"p_main_party","trp_pixie",2),
        (try_end),
      (try_end),
      (jump_to_menu,"mnu_necro_create_troop"),
     ]),
   
    ("necro_bone_to_eye",
     [
      (eq, "$cur_page", 1),
      (item_slot_eq, "itm_book_tactics", slot_item_book_read, 1),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_crystal"),
      (assign,":price",1),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",400),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 12),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Summon_3 evil eye, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-400),
      (call_script, "script_change_player_necro_item","itm_crystal",-1),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_undead_magic_1",4),
      (jump_to_menu,"mnu_necro_create_troop"),
     ]),
   
    ("necro_bone_to_demon_4",
     [
      (eq, "$cur_page", 2),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_sulfur"),
      (assign,":price",2),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",500),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 6),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Summon_1 demon_4, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (play_sound,"snd_skeleton_yell"),
      (assign,":cost_1",-500),
      (call_script, "script_change_player_necro_item","itm_sulfur",-2),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_demon_4",2),
      (jump_to_menu,"mnu_necro_create_troop"),
     ]),

    ("necro_bone_to_demon_5",
     [
      (eq, "$cur_page", 2),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      (assign,":sell","itm_crystal"),
      (assign,":price",2),
      (assign,reg12,":price"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_store_item_name,s2,":sell"),
      
      (assign,":cost_1",500),
      (assign,reg13,":cost_1"),
      
      (try_begin),
        (this_or_next|neg|ge, ":local_2", 6),  
        (this_or_next|neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, ":cost_1"),
        (neg|ge, reg10, reg12),  
        (disable_menu_option),
      (try_end),
     ],
     "Use {s2} Summon_1 demon_4, cost {reg12} {s2} {reg13} Dark Energy",
     [
      (assign,":cost_1",-500),
      (call_script, "script_change_player_necro_item","itm_crystal",-2),
      (call_script, "script_change_player_soul_point", ":cost_1"),
      (party_add_members,"p_main_party","trp_we_recruit",1),
      (jump_to_menu,"mnu_necro_create_troop"),
     ]),


    ("necro_prisoner_to_orc",
     [
      (eq, "$cur_page", 2),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
        (assign, ":num_goblin", 0),
        (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
          (neg|troop_is_hero, ":stack_troop"),
          (party_prisoner_stack_get_size, ":stack_size","p_main_party",":i_stack"),
          (val_add, ":num_goblin", ":stack_size"),
        (try_end),
      
      (try_begin),
        (this_or_next|neg|ge, ":num_goblin", 5),
        (neg|ge, ":local_2", 1),  
        (disable_menu_option),
      (try_end),
     ],
     "Use 5 goblin prisoners creat orc.",
     [
        
      (try_for_range, ":unused", 0, 5),
        (assign, ":lowest_level", 9999),
        (assign, ":lowest_troop", 0),
        (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
          (neg|troop_is_hero, ":stack_troop"),
          (store_character_level, ":troop_level", ":stack_troop"),
          (try_begin),
            (lt, ":troop_level", ":lowest_level"),
            (assign, ":lowest_level", ":troop_level"),
            (assign, ":lowest_troop", ":stack_troop"),
          (try_end),
        (try_end),
        (remove_troops_from_prisoners, ":lowest_troop", 1),
        (str_store_troop_name, s1, ":lowest_troop"),
        (display_message, "@USE {s1} as sacrificed."),
        (play_sound,"snd_hbgoblin_die"),
        (store_character_level, ":sell_price", ":lowest_troop"),
        (try_begin),
          (ge, ":sell_price", 25),
          (assign, ":replacement","trp_orc_blackorc"),
        (else_try), 
          (ge, ":sell_price", 15),
          (assign, ":replacement","trp_orc_warrior"),
        (else_try),
          (assign, ":replacement", "trp_orc"),
        (try_end),
        (party_add_members,"p_main_party",":replacement",1),
      (try_end),
      (play_sound,"snd_troll_yell"),
      (jump_to_menu,"mnu_necro_create_troop"),
     ]),
     
    ("necro_prisoner_to_ogre",
     [
      (eq, "$cur_page", 2),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
        (assign, ":num_goblin", 0),
        (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
          (neg|troop_is_hero, ":stack_troop"),
          (party_prisoner_stack_get_size, ":stack_size","p_main_party",":i_stack"),
          (val_add, ":num_goblin", ":stack_size"),
        (try_end),
      
      (try_begin),
        (this_or_next|neg|ge, ":num_goblin", 5),
        (neg|ge, ":local_2", 1),  
        (disable_menu_option),
      (try_end),
     ],
     "Use 10 goblin prisoners creat ogre.",
     [

      (try_for_range, ":unused", 0, 5),
        (assign, ":lowest_level", 9999),
        (assign, ":lowest_troop", 0),
        (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
          (neg|troop_is_hero, ":stack_troop"),
          (store_character_level, ":troop_level", ":stack_troop"),
          (try_begin),
            (lt, ":troop_level", ":lowest_level"),
            (assign, ":lowest_level", ":troop_level"),
            (assign, ":lowest_troop", ":stack_troop"),
          (try_end),
        (try_end),
        (remove_troops_from_prisoners, ":lowest_troop", 1),
        (str_store_troop_name, s1, ":lowest_troop"),
        (display_message, "@USE {s1} as sacrificed."),
        (store_character_level, ":sell_price", ":lowest_troop"),
        (try_begin),
          (ge, ":sell_price", 25),
          (assign, ":replacement","trp_ogre_war"),
        (else_try), 
          (ge, ":sell_price", 15),
          (assign, ":replacement","trp_ogre"),
        (else_try),
          (assign, ":replacement", "trp_ogre_young"),
        (try_end),
        (party_add_members,"p_main_party",":replacement",1),
        (play_sound,"snd_hbgoblin_die"),
      (try_end),
      (play_sound,"snd_troll_yell"),

      (jump_to_menu,"mnu_necro_create_troop"),
     ]),
     
    ("necro_prisoner_to_orc2",
     [
      (eq, "$cur_page", 2),
      (eq,"$background_type",cb_nomad),
      (eq,"$background_answer_2",cb2_steppe_child),
      (party_get_free_companions_capacity,":local_2","p_main_party"),
      
        (assign, ":num_goblin", 0),
        (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
          (neg|troop_is_hero, ":stack_troop"),
          (party_prisoner_stack_get_size, ":stack_size","p_main_party",":i_stack"),
          (val_add, ":num_goblin", ":stack_size"),
        (try_end),
      
      (try_begin),
        (this_or_next|neg|ge, ":num_goblin", 10),
        (neg|ge, ":local_2", 1),  
        (disable_menu_option),
      (try_end),
     ],
     "Use 10 goblin prisoners creat ogre.",
     [
      (assign, "$add_1000", 1),
      (try_for_range, ":unused", 0, 10),
        (assign, ":lowest_level", 9999),
        (assign, ":lowest_troop", 0),
        (party_get_num_prisoner_stacks, ":num_stacks", "p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_prisoner_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
          (neg|troop_is_hero, ":stack_troop"),
          (store_character_level, ":troop_level", ":stack_troop"),
          (try_begin),
            (lt, ":troop_level", ":lowest_level"),
            (assign, ":lowest_level", ":troop_level"),
            (assign, ":lowest_troop", ":stack_troop"),
          (try_end),
        (try_end),
        (remove_troops_from_prisoners, ":lowest_troop", 1),
        (str_store_troop_name, s1, ":lowest_troop"),
        (display_message, "@USE {s1} as sacrificed."),
        (play_sound,"snd_hbgoblin_die"),
        (store_character_level, ":sell_price", ":lowest_troop"),
        (store_random_in_range, ":rand", 0, 10),
        (try_begin),
          (ge, ":sell_price", 55),
          (try_begin),
            (ge, ":rand", 8),
            (assign, ":replacement","trp_troll_2"),
          (else_try), 
            (ge, ":rand", 6),
            (assign, ":replacement","trp_cyclop"),
          (else_try), 
            (ge, ":rand", 4),
            (assign, ":replacement","trp_ogre_cannon"),
          (else_try), 
            (ge, ":rand", 2),
            (assign, ":replacement","trp_orc_big_boss"),
          (else_try),
            (assign, ":replacement", "trp_demon_4_3"),
          (try_end),
        (else_try), 
          (ge, ":sell_price", 45),
          (try_begin),
            (ge, ":rand", 8),
            (assign, ":replacement","trp_troll_1"),
          (else_try), 
            (ge, ":rand", 6),
            (assign, ":replacement","trp_demon_4_2"),
          (else_try), 
            (ge, ":rand", 4),
            (assign, ":replacement","trp_orc_blackorc"),
          (else_try), 
            (ge, ":rand", 2),
            (assign, ":replacement","trp_ogre_mega"),
          (else_try),
            (assign, ":replacement", "trp_ogre_war"),
          (try_end),
        (else_try), 
          (ge, ":sell_price", 35),
          (try_begin),
            (ge, ":rand", 8),
            (assign, ":replacement","trp_ogre_war"),
          (else_try), 
            (ge, ":rand", 6),
            (assign, ":replacement","trp_ogre_war"),
          (else_try), 
            (ge, ":rand", 4),
            (assign, ":replacement","trp_orc_blackorc_boss"),
          (else_try), 
            (ge, ":rand", 2),
            (assign, ":replacement","trp_ogre"),
          (else_try),
            (assign, ":replacement", "trp_orc_blackorc_boss"),
          (try_end),
        (else_try), 
          (ge, ":sell_price", 25),
          (try_begin),
            (ge, ":rand", 8),
            (assign, ":replacement","trp_orc_veterun_arrer"),
          (else_try), 
            (ge, ":rand", 6),
            (assign, ":replacement","trp_orc_veteran_boar"),
          (else_try), 
            (ge, ":rand", 4),
            (assign, ":replacement","trp_orc_veterun_blackorc"),
          (else_try), 
            (ge, ":rand", 2),
            (assign, ":replacement","trp_ogre"),
          (else_try),
            (assign, ":replacement", "trp_goblin_knight"),
          (try_end),
        (else_try),
          (try_begin),
            (ge, ":rand", 6),
            (store_random_in_range, ":replacement", "trp_orc", "trp_orc_veterun_blackorc"),
          (else_try),
            (store_random_in_range, ":replacement", "trp_goblin_footman", "trp_rat_bomber"),
          (try_end),
        (try_end),
        (party_add_members,"p_main_party",":replacement",1),
      (try_end),
      (play_sound,"snd_troll_yell"),
      (assign, "$add_1000", 0),
      (jump_to_menu,"mnu_necro_create_troop"),
     ]),
     
   ]),

#mnu_necro_sg
   (
    "necro_sg",0,"upgrade small sg to big sg",
    "none",
    [
        (troop_get_slot, ":old_renown", "trp_player", slot_troop_player_soul_point),
        (assign, reg10, ":old_renown"),
            
      (str_store_item_name,s1,"itm_sg_human_small"),
      (item_get_slot, reg11, "itm_sg_human_small", slot_item_num_for_necro),

      
      (str_store_item_name,s2,"itm_sg_purple_small"),
      (item_get_slot,reg12,"itm_sg_purple_small",slot_item_num_for_necro),

      (str_store_item_name,s3,"itm_sg_black_small"),
      (item_get_slot,reg13,"itm_sg_black_small",slot_item_num_for_necro),

      (str_store_item_name,s4,"itm_sg_green_small"),
      (item_get_slot,reg14,"itm_sg_green_small",slot_item_num_for_necro),
      
      (str_store_item_name,s5,"itm_sg_orange_small"),
      (item_get_slot,reg15,"itm_sg_orange_small",slot_item_num_for_necro),
      
      (str_store_item_name,s6,"itm_sg_yellow_small"),
      (item_get_slot,reg16,"itm_sg_yellow_small",slot_item_num_for_necro),
      
      (str_store_item_name,s7,"itm_sg_blue_small"),
      (item_get_slot,reg17,"itm_sg_blue_small",slot_item_num_for_necro),
      
      
      (str_store_item_name,s9,"itm_sg_human_big"),
      (item_get_slot,reg19,"itm_sg_human_big",slot_item_num_for_necro),
      
      (str_store_item_name,s10,"itm_sg_purple_big"),
      (item_get_slot,reg20,"itm_sg_purple_big",slot_item_num_for_necro),

      (str_store_item_name,s11,"itm_sg_black_big"),
      (item_get_slot,reg21,"itm_sg_black_big",slot_item_num_for_necro),

      (str_store_item_name,s12,"itm_sg_green_big"),
      (item_get_slot,reg22,"itm_sg_green_big",slot_item_num_for_necro),
      
      (str_store_item_name,s13,"itm_sg_orange_big"),
      (item_get_slot,reg23,"itm_sg_orange_big",slot_item_num_for_necro),
      
      (str_store_item_name,s14,"itm_sg_yellow_big"),
      (item_get_slot,reg24,"itm_sg_yellow_big",slot_item_num_for_necro),
      
      (str_store_item_name,s15,"itm_sg_blue_big"),
      (item_get_slot,reg25,"itm_sg_blue_big",slot_item_num_for_necro),
      
      
      
      #(set_background_mesh, "mesh_skl_necromancy"),
    ],


    [
    
    ("prev_page", 
    [
      (try_begin),
        (le, "$cur_page", 0),
        (disable_menu_option),
      (try_end),
    ], "Previous page.", [(val_sub, "$cur_page", 1),(jump_to_menu, "mnu_necro_sg")]),
      
    ("next_page", [
      (try_begin),
        (gt, "$cur_page", 3),
        (disable_menu_option),
      (try_end),
    ], "Next page.", [(val_add, "$cur_page", 1),(jump_to_menu, "mnu_necro_sg")]),
    
    ("Go_back",[],"Go_back",[(jump_to_menu,"mnu_necromancy"),]),
    
    ("necro_sg_human",
     [
      (eq, "$cur_page", 0),
       (item_get_slot,":num","itm_sg_human_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":num", 6),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, 1000),
        (disable_menu_option),
      (try_end),
      ],"upgrade sg_human",
       [
       (item_get_slot,":num","itm_sg_human_small",slot_item_num_for_necro),
       (ge, ":num", 6),  
      (call_script, "script_change_player_soul_point", -1000),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-6),
      (call_script, "script_change_player_necro_item","itm_sg_human_big",1),
        ]),
   
   ("necro_sg_purple",
     [
      (eq, "$cur_page", 0),
       (item_get_slot,":num","itm_sg_purple_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":num", 6),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, 1000),
        (disable_menu_option),
      (try_end),
   ],"upgrade sg_purple",
       [
       (item_get_slot,":num","itm_sg_purple_small",slot_item_num_for_necro),
       (ge, ":num", 6),  
      (call_script, "script_change_player_soul_point", -1000),
      (call_script, "script_change_player_necro_item","itm_sg_purple_small",-6),
      (call_script, "script_change_player_necro_item","itm_sg_purple_big",1),
        ]),
  
   ("necro_sg_black",
     [
      (eq, "$cur_page", 0),
       (item_get_slot,":num","itm_sg_black_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":num", 6),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, 1000),
        (disable_menu_option),
      (try_end),
   ],"upgrade sg_black",
       [
       (item_get_slot,":num","itm_sg_black_small",slot_item_num_for_necro),
       (ge, ":num", 6),  
      (call_script, "script_change_player_soul_point", -1000),
      (call_script, "script_change_player_necro_item","itm_sg_black_small",-6),
      (call_script, "script_change_player_necro_item","itm_sg_black_big",1),
        ]),
   
   ("necro_sg_green",
     [
      (eq, "$cur_page", 0),
       (item_get_slot,":num","itm_sg_green_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":num", 6),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, 1000),
        (disable_menu_option),
      (try_end),
   ],"upgrade sg_green",
       [
       (item_get_slot,":num","itm_sg_green_small",slot_item_num_for_necro),
       (ge, ":num", 6),  
      (call_script, "script_change_player_soul_point", -1000),
      (call_script, "script_change_player_necro_item","itm_sg_green_small",-6),
      (call_script, "script_change_player_necro_item","itm_sg_green_big",1),
        ]),
   
   ("necro_sg_orange",
     [
      (eq, "$cur_page", 0),
       (item_get_slot,":num","itm_sg_orange_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":num", 6),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, 1000),
        (disable_menu_option),
      (try_end),
   ],"upgrade sg_orange",
       [
       (item_get_slot,":num","itm_sg_orange_small",slot_item_num_for_necro),
       (ge, ":num", 6),  
      (call_script, "script_change_player_soul_point", -1000),
      (call_script, "script_change_player_necro_item","itm_sg_orange_small",-6),
      (call_script, "script_change_player_necro_item","itm_sg_orange_big",1),
        ]),
   
   ("necro_sg_yellow",
     [
      (eq, "$cur_page", 0),
       (item_get_slot,":num","itm_sg_yellow_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":num", 6),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, 1000),
        (disable_menu_option),
      (try_end),
   ],"upgrade sg_yellow",
       [
       (item_get_slot,":num","itm_sg_yellow_small",slot_item_num_for_necro),
       (ge, ":num", 6),  
       
      (call_script, "script_change_player_soul_point", -1000),
      (call_script, "script_change_player_necro_item","itm_sg_yellow_small",-6),
      (call_script, "script_change_player_necro_item","itm_sg_yellow_big",1),
        ]),
   
   ("necro_sg_blue",
     [
      (eq, "$cur_page", 0),
       (item_get_slot,":num","itm_sg_blue_small",slot_item_num_for_necro),
      (try_begin),
        (this_or_next|neg|ge, ":num", 6),  
        (neg|troop_slot_ge, "trp_player", slot_troop_player_soul_point, 1000),
        (disable_menu_option),
      (try_end),
      ],"upgrade sg_blue",
       [
       (item_get_slot,":num","itm_sg_blue_small",slot_item_num_for_necro),
       (ge, ":num", 6),  
      (call_script, "script_change_player_soul_point", -1000),
      (call_script, "script_change_player_necro_item","itm_sg_blue_small",-6),
      (call_script, "script_change_player_necro_item","itm_sg_blue_big",1),
   ]),
    
    
    
      ("necro_destroy_sg",
     [
      (eq, "$cur_page", 1),
      (str_store_item_name,s8,"itm_sg_human_small"),
       (item_get_slot,":num","itm_sg_human_small",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  
        (disable_menu_option),
      (try_end),
      ],"destroy {s8} to soul",
       [
       (item_get_slot,":num","itm_sg_human_small",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",-1),
        ]),
   
      ("necro_destroy_sg",
     [
      (eq, "$cur_page", 1),
      (str_store_item_name,s8,"itm_sg_purple_small"),
       (item_get_slot,":num","itm_sg_purple_small",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  
        (disable_menu_option),
      (try_end),
      ],"destroy {s8} to soul",
       [
       (item_get_slot,":num","itm_sg_purple_small",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_purple_small",-1),
        ]),
   
      ("necro_destroy_sg",
     [
      (eq, "$cur_page", 1),
      (str_store_item_name,s8,"itm_sg_black_small"),
       (item_get_slot,":num","itm_sg_black_small",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  
        (disable_menu_option),
      (try_end),
      ],"destroy {s8} to soul",
       [
       (item_get_slot,":num","itm_sg_black_small",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_black_small",-1),
        ]),

      ("necro_destroy_sg",
     [
      (eq, "$cur_page", 1),
      (str_store_item_name,s8,"itm_sg_green_small"),
       (item_get_slot,":num","itm_sg_green_small",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  
        (disable_menu_option),
      (try_end),
      ],"destroy {s8} to soul",
       [
       (item_get_slot,":num","itm_sg_green_small",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_green_small",-1),
        ]),
   
      ("necro_destroy_sg",
     [
      (eq, "$cur_page", 1),
      (str_store_item_name,s8,"itm_sg_orange_small"),
       (item_get_slot,":num","itm_sg_orange_small",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  
        (disable_menu_option),
      (try_end),
      ],"destroy {s8} to soul",
       [
       (item_get_slot,":num","itm_sg_orange_small",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_orange_small",-1),
        ]),
      
      ("necro_destroy_sg",
     [
      (eq, "$cur_page", 1),
      (str_store_item_name,s8,"itm_sg_yellow_small"),
       (item_get_slot,":num","itm_sg_yellow_small",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  
        (disable_menu_option),
      (try_end),
      ],"destroy {s8} to soul",
       [
       (item_get_slot,":num","itm_sg_yellow_small",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_yellow_small",-1),
        ]),
   
      ("necro_destroy_sg",
     [
      (eq, "$cur_page", 1),
      (str_store_item_name,s8,"itm_sg_blue_small"),
       (item_get_slot,":num","itm_sg_blue_small",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  
        (disable_menu_option),
      (try_end),
      ],"destroy {s8} to soul",
       [
       (item_get_slot,":num","itm_sg_blue_small",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_blue_small",-1),
        ]),
   
      ("necro_destroy_sg_human",
     [
      (eq, "$cur_page", 2),

       (item_get_slot,":num","itm_sg_human_big",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  

        (disable_menu_option),
      (try_end),
      ],"destroy {s9} to {s1}",
       [
       (item_get_slot,":num","itm_sg_human_big",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_human_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_human_small",4),
        ]),

      ("necro_destroy_sg_purple",
     [
      (eq, "$cur_page", 2),

       (item_get_slot,":num","itm_sg_purple_big",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  

        (disable_menu_option),
      (try_end),
      ],"destroy {s10} to {s2}",
       [
       (item_get_slot,":num","itm_sg_purple_big",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_purple_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_purple_small",4),
        ]),

      ("necro_destroy_sg_black",
     [
      (eq, "$cur_page", 2),

       (item_get_slot,":num","itm_sg_black_big",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  

        (disable_menu_option),
      (try_end),
      ],"destroy {s11} to {s3}",
       [
       (item_get_slot,":num","itm_sg_black_big",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_black_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_black_small",4),
        ]),

      ("necro_destroy_sg_green",
     [
      (eq, "$cur_page", 2),

       (item_get_slot,":num","itm_sg_green_big",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  

        (disable_menu_option),
      (try_end),
      ],"destroy {s12} to {s4}",
       [
       (item_get_slot,":num","itm_sg_green_big",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_green_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_green_small",4),
        ]),

      ("necro_destroy_sg_orange",
     [
      (eq, "$cur_page", 2),

       (item_get_slot,":num","itm_sg_orange_big",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  

        (disable_menu_option),
      (try_end),
      ],"destroy {s13} to {s5}",
       [
       (item_get_slot,":num","itm_sg_orange_big",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_orange_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_orange_small",4),
        ]),

      ("necro_destroy_sg_yellow",
     [
      (eq, "$cur_page", 2),

       (item_get_slot,":num","itm_sg_yellow_big",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  

        (disable_menu_option),
      (try_end),
      ],"destroy {s14} to {s6}",
       [
       (item_get_slot,":num","itm_sg_yellow_big",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_yellow_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_yellow_small",4),
        ]),

      ("necro_destroy_sg_blue",
     [
      (eq, "$cur_page", 2),

       (item_get_slot,":num","itm_sg_blue_big",slot_item_num_for_necro),
      (try_begin),
        (neg|ge, ":num", 1),  

        (disable_menu_option),
      (try_end),
      ],"destroy {s15} to {s7}",
       [
       (item_get_slot,":num","itm_sg_blue_big",slot_item_num_for_necro),
       (ge, ":num", 1),  
      (call_script, "script_change_player_soul_point", 1000),
      (call_script, "script_change_player_necro_item","itm_sg_blue_big",-1),
      (call_script, "script_change_player_necro_item","itm_sg_blue_small",4),
        ]),
    
   ("necro_sg_back",[],"back",[(jump_to_menu,"mnu_necromancy"),]),
     ]
  ),
  
   ("camp_manage_gems", 0,
   "put your gems to chess","none",
    [],
   [ 
   
    ("necro_back",[],"Go_back",[(jump_to_menu,"mnu_necromancy"),]),
    
    ("prev_page", 
    [
      (try_begin),
        (le, "$cur_page", 0),
        (disable_menu_option),
      (try_end),
    ], "Previous page.", [(val_sub, "$cur_page", 1),(jump_to_menu, "mnu_camp_manage_gems")]),
      
    ("next_page", [
      (try_begin),
        (gt, "$cur_page", 5),
        (disable_menu_option),
      (try_end),
    ], "Next page.", [(val_add, "$cur_page", 1),(jump_to_menu, "mnu_camp_manage_gems")]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 0),
      (assign,":sell","itm_trophy_a"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_trophy_a"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 0),
      (assign,":sell","itm_silver"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_silver"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),
    
    ("necro_to_chest",
     [
      (eq, "$cur_page", 0),
      (assign,":sell","itm_clay"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_clay"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 0),
      (assign,":sell","itm_skeleton"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_skeleton"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 0),
      (assign,":sell","itm_sulfur"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sulfur"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 0),
      (assign,":sell","itm_crystal"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_crystal"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 0),
      (assign,":sell","itm_mercury"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_mercury"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 1),
      (assign,":sell","itm_trophy_a"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_trophy_a"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 1),
      (assign,":sell","itm_silver"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_silver"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),
    
    ("necro_to_player",
     [
      (eq, "$cur_page", 1),
      (assign,":sell","itm_clay"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_clay"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 1),
      (assign,":sell","itm_skeleton"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_skeleton"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 1),
      (assign,":sell","itm_sulfur"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sulfur"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 1),
      (assign,":sell","itm_crystal"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_crystal"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 1),
      (assign,":sell","itm_mercury"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_mercury"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":sell","itm_sg_human_small"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_human_small"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":sell","itm_sg_purple_small"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_purple_small"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":sell","itm_sg_black_small"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_black_small"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":sell","itm_sg_green_small"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_green_small"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":sell","itm_sg_orange_small"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_orange_small"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":sell","itm_sg_yellow_small"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_yellow_small"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 2),
      (assign,":sell","itm_sg_blue_small"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_blue_small"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 3),
      (assign,":sell","itm_sg_human_small"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_human_small"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 3),
      (assign,":sell","itm_sg_purple_small"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_purple_small"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 3),
      (assign,":sell","itm_sg_black_small"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_black_small"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 3),
      (assign,":sell","itm_sg_green_small"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_green_small"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 3),
      (assign,":sell","itm_sg_orange_small"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_orange_small"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 3),
      (assign,":sell","itm_sg_yellow_small"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_yellow_small"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 3),
      (assign,":sell","itm_sg_blue_small"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_blue_small"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 4),
      (assign,":sell","itm_sg_human_big"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_human_big"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 4),
      (assign,":sell","itm_sg_purple_big"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_purple_big"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 4),
      (assign,":sell","itm_sg_black_big"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_black_big"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 4),
      (assign,":sell","itm_sg_green_big"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_green_big"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 4),
      (assign,":sell","itm_sg_orange_big"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_orange_big"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 4),
      (assign,":sell","itm_sg_yellow_big"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_yellow_big"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),

    ("necro_to_chest",
     [
      (eq, "$cur_page", 4),
      (assign,":sell","itm_sg_blue_big"),
      (store_item_kind_count, reg10, ":sell", "trp_player"),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"put {s2} to chest , now you have {reg10} {s2}",
       [
      (assign,":sell","itm_sg_blue_big"),
      (troop_remove_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",1),
        ]),


    ("necro_to_player",
     [
      (eq, "$cur_page", 5),
      (assign,":sell","itm_sg_human_big"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_human_big"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 5),
      (assign,":sell","itm_sg_purple_big"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_purple_big"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 5),
      (assign,":sell","itm_sg_black_big"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_black_big"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 5),
      (assign,":sell","itm_sg_green_big"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_green_big"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 5),
      (assign,":sell","itm_sg_orange_big"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_orange_big"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 5),
      (assign,":sell","itm_sg_yellow_big"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_yellow_big"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),

    ("necro_to_player",
     [
      (eq, "$cur_page", 5),
      (assign,":sell","itm_sg_blue_big"),
      (item_get_slot, reg10, ":sell", slot_item_num_for_necro),
      (str_clear, s2),
      (str_store_item_name,s2,":sell"),
      
      (try_begin),
        (this_or_next|neg|troop_ensure_inventory_space, "trp_player", 1),(neg|ge, reg10, 1),  
        (disable_menu_option),
      (try_end),
      ],"get {s2} from chest , now {reg10} {s2} in chest",
       [
      (assign,":sell","itm_sg_blue_big"),
      (troop_add_items,"trp_player",":sell",1),
      (call_script, "script_change_player_necro_item",":sell",-1),
        ]),
   ]),
  
  
  
  ("next_rank_notify", 0,"stub","none", 
  [
    (jump_to_menu, "mnu_auto_return_to_map"),
    (assign, reg11, "$g_notification_menu_var1"),
    (play_sound, "snd_new_month"),
    (start_presentation, "prsnt_next_rank_notify"),
  ],[]),
  
   ("camp_set_special_ability", 0,
   "{s1}^{s2}^{s3}","none",
     [
         (troop_get_slot, ":special","trp_player", slot_troop_special_ability),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 0),
         (call_script, "script_str_store_key_name", s8, "$key_special_2"), #F9
         (str_store_string, s1, "@your special: {s10} ^clicked {s8} use"),
         
         (troop_get_slot, ":special","trp_player", slot_troop_special_ability_extra),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 1),
         (call_script, "script_str_store_key_name", s8, "$key_special_4"), #F9
         (str_store_string, s4, "@your special_extra: {s10} ^clicked {s8} use"),
         
         (troop_get_slot, ":special","trp_player", slot_troop_special_ability_passive),
         (call_script, "script_get_special_ability_text_to_s2", ":special", 2),
         (str_store_string, s3, "@your special_extra: {s10}"),
         
         
         (set_background_mesh, "mesh_pic_book_1"),
         (play_sound,"snd_camp"),
     ],
     [ 
      ("camp_special_ability",[],"Choose your special_ability.",
       [(assign, "$cur_page", 0),(jump_to_menu, "mnu_camp_special_ability"),
        ]
       ),
      ("camp_special_ability_extra",[],"Choose your extra special_ability.",
       [(assign, "$cur_page", 0),(jump_to_menu, "mnu_camp_special_ability_extra"),
        ]
       ),

      ("camp_special_ability_passive",[],"Choose your special_ability_passive.",
       [(assign, "$cur_page", 0),(jump_to_menu, "mnu_camp_special_ability_passive"),
        ]
       ),
      ("necro_back",[],"Go_back",[(jump_to_menu,"$return_menu"),]),
   ]),
  
  ("camp_manage_item", 0,
   "What do you want to do?","none",
   [
     (assign, "$g_player_icon_state", pis_normal),
     (set_background_mesh, "mesh_pic_chest"),
     (play_sound,"snd_camp"),
   ],
   [ 
     
     ("camp_manage_bookcase",
      [
        (call_script, "script_get_num_of_item_by_type", "trp_bookcase", itp_type_book),
        (assign, ":num_books", reg0),
        (gt, ":num_books", 0),
      ],"Manage your bookcase.",
     [
      (start_presentation, "prsnt_book_management"),
      (assign, "$g_selected_book_slot", -1),
      ]
     ),
     
     #("camp_manage_bookcase_2",[],"put your book to bookcase.",[(start_presentation, "prsnt_book_exchange"),]),
	 ("camp_manage_bookcase_2",[],"put your book to bookcase.",[(change_screen_loot, "trp_bookcase"),]),

     #("camp_manage_bookcase_3",[],"put your magic to bookcase.",[(start_presentation, "prsnt_magic_book_exchange"),]),

     #("camp_manage_gems",[],"put your gems to chess.",[(start_presentation, "prsnt_gem_exchange"),]),
	 ("camp_manage_gems",[],"put your gems to chess.",[(change_screen_loot, "trp_trainer_5"),]),
	 
     ("bank_storage",
        [
            (store_free_inventory_capacity, reg7, "trp_trainer_1"),
            (troop_get_inventory_capacity, reg8, "trp_trainer_1"),
            
            (store_item_kind_count,":has_chest","itm_chest_1","trp_trainer_5"),
            (this_or_next|ge,":has_chest",1),
            (player_has_item,"itm_chest_1")
        ],
        "Storage (capacity: {reg7}/{reg8}).",
        [
            (troop_set_auto_equip, "trp_trainer_1", 0),
            (change_screen_loot, "trp_trainer_1"),
        ]
     ),
     ("bank_storage",
        [
            (store_free_inventory_capacity, reg7, "trp_trainer_2"),
            (troop_get_inventory_capacity, reg8, "trp_trainer_2"),
            (store_item_kind_count,":has_chest","itm_chest_2","trp_trainer_5"),
            (this_or_next|ge,":has_chest",1),
            (player_has_item,"itm_chest_2")
        ],
        "Storage (capacity: {reg7}/{reg8}).",
        [
            (troop_set_auto_equip, "trp_trainer_2", 0),
            (change_screen_loot, "trp_trainer_2"),
        ]
     ),
     ("bank_storage",
        [
            (store_free_inventory_capacity, reg7, "trp_trainer_3"),
            (troop_get_inventory_capacity, reg8, "trp_trainer_3"),
            (store_item_kind_count,":has_chest","itm_chest_3","trp_trainer_5"),
            (this_or_next|ge,":has_chest",1),
            (player_has_item,"itm_chest_3")
        ],
        "Storage (capacity: {reg7}/{reg8}).",
        [
            (troop_set_auto_equip, "trp_trainer_3", 0),
            (change_screen_loot, "trp_trainer_3"),
        ]
     ),
     ("bank_storage",
        [
            (store_free_inventory_capacity, reg7, "trp_trainer_4"),
            (troop_get_inventory_capacity, reg8, "trp_trainer_4"),
            (store_item_kind_count,":has_chest","itm_chest_4","trp_trainer_5"),
            (this_or_next|ge,":has_chest",1),
            (player_has_item,"itm_chest_4")
        ],
        "Storage (capacity: {reg7}/{reg8}).",
        [
            (troop_set_auto_equip, "trp_trainer_4", 0),
            (change_screen_loot, "trp_trainer_4"),
        ]
     ),
     
     
     ("necro_back",[],"Go_back",[(jump_to_menu,"mnu_camp"),]),
  ]),
  
  ("adventure_object",0,"{s3}","none", 
   [
    (call_script, "script_party_count_members_with_full_health", "$g_encountered_party"),
    (assign, ":var_0", reg0),
    (try_begin),
        (eq, ":var_0", 0),
        (assign, "$guards_killed", 1),
    (else_try),
        (assign, "$guards_killed", 0),
    (try_end),
    
    (call_script, "script_get_spawn_rate", 0),
    (assign, ":spawn_rate", reg20),
    (str_store_party_name, s10, "$g_encountered_party"),
    (call_script, "script_set_adventure_object_background"),
    (try_begin),
      (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 1),
      (eq, "$g_battle_result", -1),
      (eq, "$guards_killed", 0),
      (ge, "$g_encountered_party", 0),
      (party_is_active, "$g_encountered_party"),
      (str_store_string, s3, "@You didnt managed to defeat the guards. All you can do is flee and plan to taka vengence in future."),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_experiance_stone"),
      (try_begin),
        (eq, "$guards_killed", 1),
        (ge, "$g_encountered_party", 0),
        (party_is_active, "$g_encountered_party"),
        (party_template_get_slot, ":basic_gold", "$g_encountered_party_template", slot_party_template_basic_gold),
        (party_template_get_slot, ":bonus_gold", "$g_encountered_party_template", slot_party_template_bonus_gold),
        (val_mul, ":bonus_gold", ":spawn_rate"),
        (val_add, ":basic_gold", ":bonus_gold"),
        (assign, reg2, ":basic_gold"),
        (str_store_string, s3, "@You can aproach an experiance stone. You feel its energy and know that it will give you {reg2} experiance points."),
      (else_try),
        (eq, "$guards_killed", 0),
        (party_is_active, "$g_encountered_party"),
        (party_get_num_companions, reg1, "$g_encountered_party"),
        (party_template_get_slot, ":basic_gold", "$g_encountered_party_template", slot_party_template_basic_gold),
        (party_template_get_slot, ":bonus_gold", "$g_encountered_party_template", slot_party_template_bonus_gold),
        (val_mul, ":bonus_gold", ":spawn_rate"),
        (val_add, ":basic_gold", ":bonus_gold"),
        (assign, reg2, ":basic_gold"),
        (str_store_string, s3, "@You see experiance stone guarded by {reg1} troops. You know that touching it wil give you {reg2} experiance points."),
      (try_end),
    (else_try),
      (this_or_next|party_template_slot_eq,"$g_encountered_party_template", slot_party_template_type, treasure),
      (party_template_slot_eq,"$g_encountered_party_template", slot_party_template_type, bank),
      (try_begin),
        (eq, "$guards_killed", 1),
        (ge, "$g_encountered_party", 0),
        (party_is_active, "$g_encountered_party"),
        (party_template_get_slot, ":basic_gold", "$g_encountered_party_template", slot_party_template_basic_gold),
        (party_template_get_slot, ":bonus_gold", "$g_encountered_party_template", slot_party_template_bonus_gold),
        (val_mul, ":bonus_gold", ":spawn_rate"),
        (val_add, ":basic_gold", ":bonus_gold"),
        (assign, reg2, ":basic_gold"),
        (store_sub, reg3, ":basic_gold",500),
        
        (party_template_get_slot, ":var_1", "$g_encountered_party_template", slot_party_template_rewards_type),
        (try_begin),
            (gt, ":var_1", 0),
            (str_store_string, s4, "@ and some artifact "),
        (else_try),
            (str_clear, s4),
        (try_end),
           
           
        (try_begin),
           (eq, "$g_encountered_party_template", "pt_dragon_utopia"),
           (str_store_string, s3, "@dragon_utopia_text_defeat"),
        (else_try),
           (is_between, "$g_encountered_party_template", "pt_derelict_ship_1", "pt_derelict_ship_5"),
           (str_store_string, s3, "@derelict_ship_text_defeat"),
        (else_try),
           (is_between, "$g_encountered_party_template", "pt_derelict_ship_5", "pt_bank_end"),
           (str_store_string, s3, "@Ghost_ship_text_defeat"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_ruins"),
           (str_store_string, s3, "@ruins_text_defeat"),
        (else_try),
           (is_between, "$g_encountered_party_template", "pt_keep_1", "pt_ruins"),
           (str_store_string, s3, "@keep_text_defeat"),
        (else_try),
           (is_between, "$g_encountered_party_template", "pt_obelisk_1", "pt_obelisk_end"),
           (str_store_string, s3, "@obelisk_text_defeat"),
        (else_try),
           (this_or_next|eq, "$g_encountered_party_template", "pt_pyramid"),
           (eq, "$g_encountered_party_template", "pt_crypt"),
           (str_store_string, s3, "@crypt_text_defeat"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_ivory_tower"),
           (str_store_string, s3, "@ivory_tower_text_defeat"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_evil_tower"),
           (str_store_string, s3, "@evil_tower_text_defeat"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_treasure_chest_1"),
           (str_store_string, s3, "@treasure_chest_1_text"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_treasure_chest_2"),
           (str_store_string, s3, "@treasure_chest_2_text"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_treasure_chest_3"),
           (str_store_string, s3, "@treasure_chest_3_text"),
        (else_try),
           (str_store_string, s3, "@You can now begin to collect loot, it is at least {reg2} gold {s4}here."),
        (try_end),
        
      (else_try),
        (eq, "$guards_killed", 0),
        (party_is_active, "$g_encountered_party"),
        (party_get_num_companions, reg1, "$g_encountered_party"),
        (party_template_get_slot, ":basic_gold", "$g_encountered_party_template", slot_party_template_basic_gold),
        (party_template_get_slot, ":bonus_gold", "$g_encountered_party_template", slot_party_template_bonus_gold),
        (val_mul, ":bonus_gold", ":spawn_rate"),
        (val_add, ":basic_gold", ":bonus_gold"),
        (assign, reg2, ":basic_gold"),
        (party_template_get_slot, ":var_1", "$g_encountered_party_template", slot_party_template_rewards_type),
        (try_begin),
            (gt, ":var_1", 0),
            (str_store_string, s4, "@ and some artifact"),
        (else_try),
            (str_clear, s4),
        (try_end),

        (try_begin),
           (eq, "$g_encountered_party_template", "pt_dragon_utopia"),
           (str_store_string, s3, "@dragon_utopia_text"),
        (else_try),
           (is_between, "$g_encountered_party_template", "pt_derelict_ship_1", "pt_derelict_ship_5"),
           (str_store_string, s3, "@derelict_ship_text"),
        (else_try),
           (is_between, "$g_encountered_party_template", "pt_derelict_ship_5", "pt_bank_end"),
           (str_store_string, s3, "@Ghost_ship_text"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_ruins"),
           (str_store_string, s3, "@ruins_text"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_keep_6"),
           (str_store_string, s3, "@Sea Raider Landing_text"),
        (else_try),
           (is_between, "$g_encountered_party_template", "pt_keep_1", "pt_keep_6"),
           (str_store_string, s3, "@keep_text"),
        (else_try),
           (is_between, "$g_encountered_party_template", "pt_obelisk_1", "pt_obelisk_end"),
           (str_store_string, s3, "@obelisk_text"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_crypt"),
           (str_store_string, s3, "@crypt_text"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_pyramid"),
           (str_store_string, s3, "@pyramid_text"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_ivory_tower"),
           (str_store_string, s3, "@ivory_tower_text"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_evil_tower"),
           (str_store_string, s3, "@evil_tower_text"),
        (else_try),
           (eq, "$g_encountered_party_template", "pt_dwarven_treasury"),
           (str_store_string, s3, "@dwarven_treasury_text"),
        (else_try),
          (str_store_string, s3, "@You see enemy({reg1}) guarding a loot. It is at least {reg2} gold{s4}."),
        (try_end),
      (try_end),
    (else_try),
      (this_or_next|eq, "$g_encountered_party_template", "pt_genie_lamp"),
      (this_or_next|eq, "$g_encountered_party_template", "pt_genie_lamp_2"),
      (this_or_next|eq, "$g_encountered_party_template", "pt_golem_factory"),
      (eq, "$g_encountered_party_template", "pt_dragon_fly_hive"),
      (party_template_get_slot, ":recruit", "$g_encountered_party_template", slot_party_template_extra_troop),
        (call_script, "script_get_spawn_rate", 1),
        (assign, ":spawn_rate", reg20),
        (store_mul, ":max_num", ":spawn_rate", 1),
        (val_add, ":max_num", 1),
          (try_begin),
            (this_or_next|eq, "$g_encountered_party_template", "pt_genie_lamp"),
            (eq, "$g_encountered_party_template", "pt_genie_lamp_2"),
            (val_mul, ":max_num", 3),
          (try_end),
        (assign, reg5, ":max_num"),
        (str_store_troop_name_by_count, s1, ":recruit", reg5),
      (try_begin),
        (eq, "$guards_killed", 1),
        (ge, "$g_encountered_party", 0),
        (party_is_active, "$g_encountered_party"),
        (str_store_string, s3, "@A_town man_noble join you."),
      (else_try),
        (eq, "$guards_killed", 0),
        (party_is_active, "$g_encountered_party"),
        (party_get_num_companions, reg1, "$g_encountered_party"),
        (try_begin),
          (this_or_next|eq, "$g_encountered_party_template", "pt_genie_lamp"),
          (eq, "$g_encountered_party_template", "pt_genie_lamp_2"),
          (str_store_string, s3, "@genie_lamp text"),
        (else_try),
          (str_store_string, s3, "@You see enemy({reg1}) guarding dwelling. There are total {reg5} {s2} in captivity. they will join you after defeating guards"),
        (try_end),
      (try_end),
    (else_try),
      (party_template_slot_eq,"$g_encountered_party_template", slot_party_template_type, lair),
      (party_template_get_slot, ":recruit", "$g_encountered_party_template", slot_party_template_extra_troop),
        (party_template_get_slot, ":recruit", "$g_encountered_party_template", slot_party_template_extra_troop),
        (call_script, "script_get_spawn_rate", 1),
        (assign, ":spawn_rate", reg20),
        (store_mul, ":max_num", ":spawn_rate", 1),
        (val_add, ":max_num", 1),
      
          (try_begin),
            (eq, "$g_encountered_party_template", "pt_portal_of_glory_2"),
            (val_mul, ":max_num", 2),
          (try_end),

        (assign, reg3, ":max_num"),
        
        (call_script, "script_game_get_join_cost", ":recruit"),
        (assign, ":join_cost", reg0),
        (assign, reg4, ":join_cost"),
        (str_store_troop_name_by_count, s2, ":recruit", reg3),
        
      (try_begin),
        (eq, "$guards_killed", 1),
        (ge, "$g_encountered_party", 0),
        (party_is_active, "$g_encountered_party"),
        
        (str_store_string, s3, "@You can now recruit creatures. There are total {reg3} {s2} for rectuitment. Each cost {reg4}."),
      (else_try),
        (eq, "$guards_killed", 0),
        (party_is_active, "$g_encountered_party"),
        (party_get_num_companions, reg1, "$g_encountered_party"),
        (str_store_string, s3, "@You see enemy({reg1}) guarding dwelling. There are total {reg3} {s2} for rectuitment. Each cost {reg4} and can be recruited after defeating guards"),
      (try_end),
    (try_end),
    
      (try_begin),
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, -1),
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          (party_get_template_id, ":template", "$g_encountered_party"),  
          (neq,":template", "pt_portal_1"),
          (neq,":template", "pt_portal_2"),
          (neq,":template", "pt_portal_3"),
          (neq,":template", "pt_portal_4"),
          (remove_party, "$g_encountered_party"),
        (try_end),  
        
        (assign,"$auto_menu",-1),
        (assign, "$g_mt_mode", 0),
        (assign, "$g_leave_encounter", 0),
        (change_screen_map),
      (try_end),
    
   ],
   [

      ("camp_special_ability",[
        (neg|eq, "$guards_killed", 1),
      ],"Choose your special_ability.",[(assign, "$return_menu", "mnu_adventure_object"),(jump_to_menu, "mnu_camp_set_special_ability"),]),

      ("toggle_weapons",
        [
        (neg|eq, "$guards_killed", 1),
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (try_begin),
            (eq, "$g_weapons_set_no", 0),
            (assign, reg1, 2),
          (else_try),
            (assign, reg1, 1),
          (try_end),
        ],
        "Toggle weapons to set {reg1} for heroes.",
        [
          (val_add, "$g_weapons_set_no", 1),
          (val_mod, "$g_weapons_set_no", 2),
          (call_script, "script_all_toggle_weapons_set", 0),
        ]),

      ("change_commander_simple_encounter",
        [
          (neg|eq, "$guards_killed", 1),
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_of_heroes", reg0),
          (gt, ":num_of_heroes", 1),
          (str_store_troop_name,s7,"$g_player_troop"),
          (set_player_troop, "$g_player_troop"),
        ],
        "Change commander.(Current commander: {s7})",
        [
          (start_presentation, "prsnt_change_commander"),
        ]),
## CC
   
    ("attack_guards", 
     [
        (neg|eq, "$guards_killed", 1),
        (store_troop_health, ":var_0", "$g_player_troop", 0),
        (ge, ":var_0", 10),
     ],
      "Attack the guards...",
     [
        (assign, "$g_strength_contribution_of_player", 100),
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 1),
        (ge, "$g_encountered_party", 0),
        (call_script, "script_encounter_calculate_fit"),
        (call_script, "script_encounter_init_variables"),
        (assign, "$g_enemy_party", "$g_encountered_party"),
        (party_clear, "p_temp_casualties"),
        (set_party_battle_mode),
        (call_script, "script_calculate_battle_advantage"),
        (set_battle_advantage, reg0),
        (try_begin),
          (assign, ":bandit_lair_scene_to_use", 0),
          (try_begin),
            (eq, "$g_encountered_party_template", "pt_keep_6"),
            (assign, ":bandit_lair_scene_to_use", "scn_lair_sea_raiders_2"),
          (else_try),
            (is_between, "$g_encountered_party_template", "pt_derelict_ship_1", "pt_bank_end"),
            (assign, ":bandit_lair_scene_to_use", "scn_derelict_ship"),
            (is_between, "$g_encountered_party_template", "pt_derelict_ship_5", "pt_bank_end"),
            (store_random_in_range, ":chance", 0, 4),
            (eq, ":chance", 0),
            (assign, ":bandit_lair_scene_to_use", "scn_ship_battle"),
          (else_try),
            (this_or_next|eq,"$g_encountered_party_template", "pt_keep_3"),
            (this_or_next|eq,"$g_encountered_party_template", "pt_keep_2"),
            (eq, "$g_encountered_party_template", "pt_keep_4"),
            (store_random_in_range, ":chance", 0, 5),
            (eq, ":chance", 0),
            (assign, ":bandit_lair_scene_to_use", "scn_Ruined_Fort_island"),
          (else_try),
            (this_or_next|eq,"$g_encountered_party_template", "pt_keep_1"),
            (this_or_next|eq,"$g_encountered_party_template", "pt_keep_5"),
            (eq, "$g_encountered_party_template", "pt_orc_tower"),
            (assign, ":bandit_lair_scene_to_use", "scn_Ruined_Fort"),
          (else_try),
            (this_or_next|eq,"$g_encountered_party_template", "pt_treant_thicket"),
            (eq,"$g_encountered_party_template", "pt_treetop_tower"),
            (assign, ":bandit_lair_scene_to_use", "scn_Forest_Hideout"),
          (else_try),
            (this_or_next|eq,"$g_encountered_party_template", "pt_dragon_fly_hive"),
            (this_or_next|eq, "$g_encountered_party_template", "pt_dragon_cave_2"),
            (eq, "$g_encountered_party_template", "pt_dragon_cave_4"),
            (assign, ":bandit_lair_scene_to_use", "scn_lair_forest_bandits"),
          (else_try),
            (this_or_next|eq,"$g_encountered_party_template", "pt_crypt"),
            (this_or_next|eq,"$g_encountered_party_template", "pt_sepulcher"),
            (eq,"$g_encountered_party_template", "pt_ruins"),
            (assign, ":bandit_lair_scene_to_use", "scn_Ruins"),
          (else_try),
            (this_or_next|eq,"$g_encountered_party_template", "pt_cyclops_cave"),
            (this_or_next|eq,"$g_encountered_party_template", "pt_behemoth_cave"),
            (eq,"$g_encountered_party_template", "pt_dragon_cave_3"),
            (assign, ":bandit_lair_scene_to_use", "scn_Canyon"),
          (else_try),
            (this_or_next|eq, "$g_encountered_party_template", "pt_pyramid_2"),
            (eq, "$g_encountered_party_template", "pt_pyramid"),
            (assign, ":bandit_lair_scene_to_use", "scn_dungeon"),
          (else_try),
            (this_or_next|eq, "$g_encountered_party_template", "pt_dwarven_treasury"),
            (eq, "$g_encountered_party_template", "pt_dwarven_treasury"),
            (assign, ":bandit_lair_scene_to_use", "scn_lair_mountain_bandits"),
          (else_try),
            (this_or_next|eq, "$g_encountered_party_template", "pt_evil_tower"),
            (this_or_next|eq, "$g_encountered_party_template", "pt_forsaken_palace_3"),
            (this_or_next|eq, "$g_encountered_party_template", "pt_vampire_palace_1"),
            (eq, "$g_encountered_party_template", "pt_forsaken_palace_2"),
            (assign, ":bandit_lair_scene_to_use", "scn_dungeons_tower"),
          (else_try),
            (this_or_next|eq, "$g_encountered_party_template", "pt_forsaken_palace_1"),
            (this_or_next|eq, "$g_encountered_party_template", "pt_forsaken_palace_4"),

            (this_or_next|eq, "$g_encountered_party_template", "pt_vampire_palace_2"),
            (this_or_next|eq, "$g_encountered_party_template", "pt_vampire_palace_3"),
            (eq, "$g_encountered_party_template", "pt_dragon_utopia"),
            (assign, ":bandit_lair_scene_to_use", "scn_lair_dark"),
          (else_try),
            (this_or_next|eq, "$g_encountered_party_template", "pt_school_of_magic_2"),
            (eq,"$g_encountered_party_template", "pt_forsaken_palace_1"),
            (assign, ":bandit_lair_scene_to_use", "scn_The_Arena"),
          (else_try),
            (this_or_next|eq, "$g_encountered_party_template", "pt_witch_hut_2"),
            (eq, "$g_encountered_party_template", "pt_witch_hut_2"),
            (assign, ":bandit_lair_scene_to_use", "scn_Swamp_Bridge"),
          (else_try),
            (this_or_next|eq, "$g_encountered_party_template", "pt_imp_cache_2"),
            (eq, "$g_encountered_party_template", "pt_dragon_cave_5"),
            (assign, ":bandit_lair_scene_to_use", "scn_Volcanic_cave"),
          (else_try),
            (this_or_next|eq, "$g_encountered_party_template", "pt_hall_of_shadows"),
            (eq, "$g_encountered_party_template", "pt_subterranean_gate"),
            (assign, ":bandit_lair_scene_to_use", "scn_dungeons_pass"),
          (else_try),
            (this_or_next|eq, "$g_encountered_party_template", "pt_dragon_cave_1"),
            (this_or_next|eq, "$g_encountered_party_template", "pt_dragon_cave_3"),
            (eq, "$g_encountered_party_template", "pt_dragon_vault"),
            (assign, ":bandit_lair_scene_to_use", "scn_lair_steppe_bandits"),
          (else_try),
            (is_between, "$g_encountered_party_template", "pt_camp_fire", "pt_treasure_end"),
            (eq, "$g_encountered_party_template", "pt_experiance_stone"),
            (call_script,"script_get_village_type","$g_encountered_party"),
            (assign,":village_type",reg0),
            (party_get_position, pos4, "$g_encountered_party"),
            (position_get_z, ":elevation", pos4),
            (try_begin),
              (map_get_water_position_around_position, pos5, pos4, 3),
              (gt, pos5, 0),
              (assign, ":bandit_lair_scene_to_use", "scn_lair_sea_raiders"),
            (else_try),
              (gt, ":elevation", 500),
              (assign, ":bandit_lair_scene_to_use", "scn_lair_mountain_bandits"),
            (else_try),
              (eq,":village_type",plain_village),
              (assign, ":bandit_lair_scene_to_use", "scn_lair_forest_bandits"),
            (else_try),
              (eq,":village_type",snow_village),
              (assign, ":bandit_lair_scene_to_use", "scn_lair_taiga_bandits"),
            (else_try),
              (eq,":village_type",desert_village),
              (assign, ":bandit_lair_scene_to_use", "scn_lair_desert_bandits"),
            (else_try),
              (assign, ":bandit_lair_scene_to_use", "scn_lair_steppe_bandits"),
            (try_end),
          (try_end),
          (gt, ":bandit_lair_scene_to_use", 0),
          (modify_visitors_at_site, ":bandit_lair_scene_to_use"),
          (reset_visitors),
          (jump_to_scene, ":bandit_lair_scene_to_use"),
          (assign, "$g_battle_result", 0),
          (set_jump_mission,"mt_lead_charge_for_bandit_lair"),
        (else_try),
          (eq, "$g_encountered_party_template", "pt_troll_bridge"),
          (store_random_in_range, ":scene_to_use", "scn_bridge_1", "scn_bridge_15"),
          (jump_to_scene, ":scene_to_use"),
          (assign, "$g_battle_result", 0),
          (set_jump_mission, "mt_lead_charge"),
        (else_try),
          (assign, "$g_random_scene_size", 0),
          (call_script, "script_setup_random_scene"),
          (assign, "$g_battle_result", 0),
          (set_jump_mission, "mt_lead_charge"),
        (try_end),
        (change_screen_mission),
    ]),

    ("obelisk", 
     [
        (party_template_slot_eq,"$g_encountered_party_template", slot_party_template_type, obelisk),
        (eq, "$guards_killed", 1),
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2),
     ],
     "Gather reward...",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 0),
        (call_script, "script_get_spawn_rate", 0),
        (assign, ":spawn_rate", reg20),
        (party_template_get_slot, ":basic_gold", "$g_encountered_party_template", slot_party_template_basic_gold),
        (party_template_get_slot, ":bonus_gold", "$g_encountered_party_template", slot_party_template_bonus_gold),
        (val_mul, ":bonus_gold", ":spawn_rate"),
        (val_add, ":basic_gold", ":bonus_gold"),
        (assign, reg1, ":basic_gold"),
        (display_message, "@After touching a stone you recieved {reg1} experiance points"),
        
        (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
          (troop_is_hero, ":stack_troop"),
          (party_add_xp_to_stack, "p_main_party", ":i_stack", ":basic_gold"),
        (try_end),
        (party_add_xp, "p_main_party", ":basic_gold"),
        
        (party_template_get_slot, ":item_no", "$g_encountered_party_template", slot_party_template_rewards_type),
        (try_begin),
          (gt, ":item_no", 0),
          (str_store_item_name, s0, ":item_no"),
          (item_set_slot, ":item_no", slot_item_special_given, 1),
          (display_message, "@After touching a stone you recieved {s0} "),
        (try_end),
        
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          (remove_party, "$g_encountered_party"),
        (try_end),   
        (assign, "$g_mt_mode", 0),
        (assign,"$auto_menu",-1),
        (change_screen_map),
     ]),


    ("experiance_stone", 
     [
        (eq,"$g_encountered_party_template", "pt_experiance_stone"),
        (eq, "$guards_killed", 1),
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2),
     ],
     "Gather reward...",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 0),
        (call_script, "script_get_spawn_rate", 0),
        (assign, ":spawn_rate", reg20),
        (party_template_get_slot, ":basic_gold", "$g_encountered_party_template", slot_party_template_basic_gold),
        (party_template_get_slot, ":bonus_gold", "$g_encountered_party_template", slot_party_template_bonus_gold),
        (val_mul, ":bonus_gold", ":spawn_rate"),
        (val_add, ":basic_gold", ":bonus_gold"),
        (assign, reg1, ":basic_gold"),
        (display_message, "@After touching a stone you recieved {reg1} experiance points"),
        
        (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
          (troop_is_hero, ":stack_troop"),
          (party_add_xp_to_stack, "p_main_party", ":i_stack", ":basic_gold"),
        (try_end),
        (party_add_xp, "p_main_party", ":basic_gold"),
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          (remove_party, "$g_encountered_party"),
        (try_end),   
        (assign, "$g_mt_mode", 0),
        (assign,"$auto_menu",-1),
        (change_screen_map),
     ]),

    ("gather_reward", 
     [
        (this_or_next|party_template_slot_eq,"$g_encountered_party_template", slot_party_template_type, treasure),
        (party_template_slot_eq,"$g_encountered_party_template", slot_party_template_type, bank),
        (eq, "$guards_killed", 1),
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2),
     ],
     "Gather reward...",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, -1),
        (call_script, "script_get_spawn_rate", 0),
        (assign, ":spawn_rate", reg20),
        
        (party_template_get_slot, ":basic_gold", "$g_encountered_party_template", slot_party_template_basic_gold),
        (party_template_get_slot, ":bonus_gold", "$g_encountered_party_template", slot_party_template_bonus_gold),
        (val_mul, ":bonus_gold", ":spawn_rate"),
        (val_add, ":basic_gold", ":bonus_gold"),
        (try_begin),
          (gt, ":basic_gold", 0),
          (assign, reg1, ":basic_gold"),
          (troop_add_gold, "trp_player", ":basic_gold"),
        (try_end),
        
    ]),

    ("gather_reward_chest_1", 
     [
        (eq,"$g_encountered_party_template", "pt_treasure_chest_1"),
        (eq, "$guards_killed", 1),
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2),
     ],
     "Gather reward...",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 0),
        (call_script, "script_get_spawn_rate", 0),
        (assign, ":spawn_rate", reg20),
        (party_template_get_slot, ":basic_gold", "$g_encountered_party_template", slot_party_template_basic_gold),
        (party_template_get_slot, ":bonus_gold", "$g_encountered_party_template", slot_party_template_bonus_gold),
        (val_mul, ":bonus_gold", ":spawn_rate"),
        (val_add, ":basic_gold", ":bonus_gold"),
        (val_add, ":basic_gold", -500),
        (party_add_xp, "p_main_party", ":basic_gold"),

     ]),

    ("gather_reward_lair", 
     [
        (party_template_slot_eq,"$g_encountered_party_template", slot_party_template_type, lair),
        (eq, "$guards_killed", 1),
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2),
     ],
     "Gather reward...",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, -1),
        (call_script, "script_get_spawn_rate", 1),
        (assign, ":spawn_rate", reg20),
        (party_template_get_slot, ":basic_gold", "$g_encountered_party_template", slot_party_template_basic_gold),
        (party_template_get_slot, ":bonus_gold", "$g_encountered_party_template", slot_party_template_bonus_gold),
        (val_mul, ":bonus_gold", ":spawn_rate"),
        (val_add, ":basic_gold", ":bonus_gold"),
        (try_begin),
            (gt, ":basic_gold", 0),
            (assign, reg1, ":basic_gold"),
            (display_message, "@While looting you found some piles of gold. You now have {reg1} gold more."),
            (troop_add_gold, "trp_player", ":basic_gold"),
        (try_end),
        (party_template_get_slot, ":recruit", "$g_encountered_party_template", slot_party_template_extra_troop),
        (store_mul, ":max_num", ":spawn_rate", 1),
        (val_add, ":max_num", 1),
        (try_begin),
          (this_or_next|eq, "$g_encountered_party_template", "pt_genie_lamp"),
          (this_or_next|eq, "$g_encountered_party_template", "pt_genie_lamp_2"),
          (this_or_next|eq, "$g_encountered_party_template", "pt_golem_factory"),
          (eq, "$g_encountered_party_template", "pt_dragon_fly_hive"),
        
          (try_begin),
            (this_or_next|eq, "$g_encountered_party_template", "pt_genie_lamp"),
            (eq, "$g_encountered_party_template", "pt_genie_lamp_2"),
            (assign, ":max_num", 3),
          (try_end),
        
          (str_store_troop_name,s1,":recruit"),
          (assign, reg5, ":max_num"),
          (party_add_members,"p_main_party",":recruit",reg5),
          (display_message, "@A_town man_noble join you1."),
        (else_try),
          (store_faction_of_party, ":culture", "$g_encountered_party"),
          (try_for_range, ":slot_no", slot_faction_infantry_1_troop, slot_faction_infantry_end_troop),
            (faction_set_slot, ":culture", ":slot_no", 0),
          (try_end),
        
          (try_begin),
            (eq, "$g_encountered_party_template", "pt_portal_of_glory_2"),
            (val_mul, ":max_num", 2),
          (try_end),
          (faction_set_slot, ":culture", slot_faction_infantry_1_troop, ":recruit"),
          (party_set_slot, "$g_encountered_party", slot_center_infantry_1_number, ":max_num"),
          (try_begin),
            (eq, "$g_encountered_party_template", "pt_golem_factory_2"),
            (store_mul, ":max_num2", ":max_num", 3),
            (val_div, ":max_num2", 2),
            (store_mul, ":max_num3", ":max_num", 2),
            (faction_set_slot, ":culture", slot_faction_infantry_2_troop, "trp_golem_4"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_2_number, ":max_num"),
            
            (faction_set_slot, ":culture", slot_faction_infantry_3_troop, "trp_golem_2"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_3_number, ":max_num"),
            
            (faction_set_slot, ":culture", slot_faction_infantry_4_troop, "trp_golem_3"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_4_number, ":max_num2"),

            (faction_set_slot, ":culture", slot_faction_infantry_5_troop, "trp_golem_1"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_5_number, ":max_num3"),
          (else_try),
            (eq, "$g_encountered_party_template", "pt_forsaken_palace_1"),
            (store_mul, ":max_num3", ":max_num", 2),
            (faction_set_slot, ":culture", slot_faction_infantry_2_troop, "trp_demon_3"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_2_number, ":max_num"),
            
            (faction_set_slot, ":culture", slot_faction_infantry_3_troop, "trp_demon_1_2"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_3_number, ":max_num3"),
          (else_try),
            (eq, "$g_encountered_party_template", "pt_forsaken_palace_3"),
            (store_mul, ":max_num3", ":max_num", 2),
            (faction_set_slot, ":culture", slot_faction_infantry_2_troop, "trp_demon_8"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_2_number, ":max_num"),
            
            (faction_set_slot, ":culture", slot_faction_infantry_3_troop, "trp_demon_1_3"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_3_number, ":max_num3"),
          (else_try),
            (eq, "$g_encountered_party_template", "pt_pyramid_2"),
            (store_mul, ":max_num2", ":max_num", 3),
            (val_div, ":max_num2", 2),
            (store_mul, ":max_num3", ":max_num", 2),
            (faction_set_slot, ":culture", slot_faction_infantry_2_troop, "trp_mummy_3"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_2_number, ":max_num"),
            
            (faction_set_slot, ":culture", slot_faction_infantry_3_troop, "trp_werewolf_1_a"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_3_number, ":max_num"),
            
            (faction_set_slot, ":culture", slot_faction_infantry_4_troop, "trp_mummy_2"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_4_number, ":max_num2"),

            (faction_set_slot, ":culture", slot_faction_infantry_5_troop, "trp_mummy_1"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_5_number, ":max_num3"),
          (else_try),
            (eq, "$g_encountered_party_template", "pt_sepulcher"),
            (store_mul, ":max_num2", ":max_num", 3),
            (val_div, ":max_num2", 2),
            (store_mul, ":max_num3", ":max_num", 2),
            (faction_set_slot, ":culture", slot_faction_infantry_2_troop, "trp_dullahan"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_2_number, ":max_num"),
                        
            (faction_set_slot, ":culture", slot_faction_infantry_3_troop, "trp_wight"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_3_number, ":max_num2"),

            (faction_set_slot, ":culture", slot_faction_infantry_4_troop, "trp_ghost"),
            (party_set_slot, "$g_encountered_party", slot_center_infantry_4_number, ":max_num3"),
          (try_end),
          (assign, "$g_prsnt_param_1", -1),
          (assign, "$g_prsnt_param_2", 0),
          (start_presentation, "prsnt_town_recruit_troops"),
        (try_end),
        
    ]),

    ("loot_guards", 
     [
        (eq, "$guards_killed", 1),
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 1),
     ],
     "Lets first loot guards",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 2),
        (party_clear, "p_temp_party"),
        (try_begin),
          (try_begin),
            (gt, "$g_ally_party", 0),
            (call_script, "script_party_add_party", "$g_ally_party", "p_temp_party"), #Add remaining prisoners to ally TODO: FIX it.
          (else_try),
            (party_get_num_attached_parties, ":num_quick_attachments", "p_main_party"),
            (gt, ":num_quick_attachments", 0),
            (party_get_attached_party_with_rank, ":helper_party", "p_main_party", 0),
            (call_script, "script_party_add_party", ":helper_party", "p_temp_party"), #Add remaining prisoners to our reinforcements
          (try_end),
          (troop_clear_inventory, "trp_temp_troop"),
          (troop_clear_inventory, "trp_find_item_cheat"),
          (party_get_num_companion_stacks, ":num_stacks", "p_temp_casualties"), 
          (try_for_range, ":stack_no", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":stack_troop", "p_temp_casualties", ":stack_no"), 
            (try_begin),              
              (party_stack_get_size, ":stack_size", "p_temp_casualties", ":stack_no"),
              (party_stack_get_troop_id, ":stack_troop", "p_temp_casualties", ":stack_no"),
              (gt, ":stack_size", 0),              
              (party_add_members, "p_total_enemy_casualties", ":stack_troop", ":stack_size"), #addition_to_p_total_enemy_casualties
              (party_stack_get_num_wounded, ":stack_wounded_size", "p_temp_casualties", ":stack_no"),
              (gt, ":stack_wounded_size", 0),
              (party_wound_members, "p_total_enemy_casualties", ":stack_troop", ":stack_wounded_size"),
            (try_end),
          (try_end),
                    
          (call_script, "script_party_calculate_loot", "p_total_enemy_casualties"), #p_encountered_party_backup changed to total_enemy_casualties      
                        
          #(gt, reg0, 0),          
          (troop_sort_inventory, "trp_temp_troop"),
          ## CC
          # Autoloot: Instead of just displaying the loot screen, we display a loot management menu instead
          (call_script, "script_get_num_heroes_of_party", "p_main_party", 0),
          (assign, ":num_companions", reg0),
          (try_begin),
            (gt, ":num_companions", 1),
            (assign, "$return_menu", "mnu_adventure_object"),
            (jump_to_menu, "mnu_manage_loot_pool"),
          (else_try),
            (change_screen_loot, "trp_temp_troop"),
          (try_end),
        (try_end),
    
        (party_clear, "p_total_enemy_casualties"),
     ]),

    ("leave_no_attack",
      [
        (this_or_next|eq, "$guards_killed", 0),
        (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 2),
      ],
      "Leave...",
      [
        (try_begin),
            (party_is_active, "$g_encountered_party"),
            (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 0),
        (try_end),
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          
          (remove_party, "$g_encountered_party"),
        (try_end),   
        (assign, "$g_mt_mode", 0),
        #(assign,"$auto_menu",-1),
        (change_screen_map),
    ]),    
              
    ("leave_defeat",
      [
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 1),
        (eq, "$g_battle_result", -1),
        (eq, "$guards_killed", 0),
        (ge, "$g_encountered_party", 0),
      ],
      "Continue...",
      [
        (try_begin),
            (party_is_active, "$g_encountered_party"),
            (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 0),
        (try_end),
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          (remove_party, "$g_encountered_party"),
        (try_end),  

        (assign, "$g_leave_encounter", 0),
        (assign, "$g_mt_mode", 0),
        (assign,"$auto_menu",-1),
        (change_screen_map),
    ]),

  ]),

  ("adventure_object_1",0,"{s3}","none", 
   [
    (troop_get_slot,":renown","trp_player",slot_troop_renown),
    (str_store_party_name, s10, "$g_encountered_party"),
    (call_script, "script_set_adventure_object_background"),
    
    (try_begin),
      (eq,"$g_encountered_party_template", "pt_library_of_enlightenment"),
      (str_store_string, s3, "@Library add_int"),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_arena"),
      (str_store_string, s3, "@Arena_add_str"),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_training_ground"),
      (str_store_string, s3, "@Mercenary Camp_add_agi"),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_school_of_magic"),
      (str_store_string, s3, "@Black Market_text_1."),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_witch_hut_1"),
      (str_store_string, s3, "@Witch's Hut add_cha"),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_tree_of_knowledge"),
      (str_store_string, s3, "@tree_of_knowledge_text_1."),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_fountain"),
      (str_store_string, s3, "@fountain_text_1."),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_temple"),
      (str_store_string, s3, "@temple_text_1."),
      (play_sound,"snd_lair_monastery"),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_prison"),
      (str_store_string, s3, "@prison_text_1."),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_wind_mill"),
      (store_random_in_range,":local_1",0,200),
      (val_div,":renown",10),
      (val_add,":renown",":local_1"),
      (val_add,":renown",500),
      (assign,reg0,":renown"),
      (str_store_string, s3, "@wind_mill_give_money {reg0}."),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_stables"),
      (str_store_string, s3, "@stables_text_1."),
      (play_sound,"snd_lair_nomad"),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_tavern"),
      (str_store_string, s3, "@tavern_text_1."),
    (else_try),
      (eq,"$g_encountered_party_template", "pt_watchtower"),
      (str_store_string, s3, "@watchtower_text_1."),
    (else_try),
      (this_or_next|eq,"$g_encountered_party_template", "pt_portal_1"),
      (this_or_next|eq,"$g_encountered_party_template", "pt_portal_2"),
      (this_or_next|eq,"$g_encountered_party_template", "pt_portal_3"),
      (eq,"$g_encountered_party_template", "pt_portal_4"),
      (str_store_string, s3, "@portal_text_1."),
    (else_try),
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_1"),
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_2"),
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_3"),
      (eq,"$g_encountered_party_template", "pt_battlefield_4"),
      (str_store_string, s3, "@battlefield_1."),
      
    (else_try),
      (eq,"$g_encountered_party_template", "pt_camp_2"),
      (str_store_string, s3, "@camp_2_text_1."),
    (try_end),
    
      (try_begin),
        (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, -1),
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (party_is_active, "$g_encountered_party"),
          (party_get_template_id, ":template", "$g_encountered_party"),  
          (neq,":template", "pt_portal_1"),
          (neq,":template", "pt_portal_2"),
          (neq,":template", "pt_portal_3"),
          (neq,":template", "pt_portal_4"),
          (remove_party, "$g_encountered_party"),
        (try_end),  
        
        (assign,"$auto_menu",-1),
        (assign, "$g_mt_mode", 0),
        (assign, "$g_leave_encounter", 0),
        (change_screen_map),
      (try_end),
   ],
   [

    ("battlefield_soul", 
     [
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_1"),
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_2"),
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_3"),
      (eq,"$g_encountered_party_template", "pt_battlefield_4"),
      (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
     ],"get soul in battlefield.",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 1),
        (party_get_skill_level, ":power", "p_main_party", "skl_necromancy"),
        (try_begin),
          (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_1"),
          (eq,"$g_encountered_party_template", "pt_battlefield_2"),
          (store_random_in_range, ":rand", 10, 100),
        (else_try),
          (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_3"),
          (eq,"$g_encountered_party_template", "pt_battlefield_4"),
          (store_random_in_range, ":rand", 20, 200),
        (try_end),
        (store_mul, ":cost_add", ":power", ":rand"),
        (call_script, "script_change_player_soul_point", ":cost_add"),
        (party_is_active, "$g_encountered_party"),
        (remove_party, "$g_encountered_party"),
        (assign, "$g_leave_encounter", 0),
        (change_screen_map),
    ]),
    ("battlefield_summon", 
     [
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_1"),
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_2"),
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_3"),
      (eq,"$g_encountered_party_template", "pt_battlefield_4"),
      (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
     ],"summon undead in battlefield.",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, -1),

        (party_clear, "p_temp_party"),
        (play_sound,"snd_skeleton_death"),
        (party_get_skill_level, ":power", "p_main_party", "skl_necromancy"),
        (store_random_in_range, ":troop_size", 0, 10),
        (try_begin),
          (eq,"$g_encountered_party_template", "pt_battlefield_1"),
          (store_random_in_range, ":troop_size", 5, 10),
          (try_begin),
            (ge, ":power", 6),
            (party_add_members,"p_temp_party","trp_skeleton_archer",":troop_size"),
          (else_try),
            (ge, ":power", 3),
            (party_add_members,"p_temp_party","trp_se_musketeer_2",":troop_size"),
          (else_try),
            (party_add_members,"p_temp_party","trp_se_musketeer_1",":troop_size"),
          (try_end),
        (else_try),
          (eq,"$g_encountered_party_template", "pt_battlefield_2"),
          (store_random_in_range, ":troop_size", 5, 10),
          (try_begin),
            (ge, ":power", 9),
            (party_add_members,"p_temp_party","trp_draugr_lord",":troop_size"),
          (else_try),
            (ge, ":power", 6),
            (party_add_members,"p_temp_party","trp_draugr_3",":troop_size"),
          (else_try),
            (ge, ":power", 3),
            (party_add_members,"p_temp_party","trp_draugr_1",":troop_size"),
          (else_try),
            (party_add_members,"p_temp_party","trp_draugr_1",":troop_size"),
          (try_end),
        (else_try),
          (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_3"),
          (eq,"$g_encountered_party_template", "pt_battlefield_4"),
          (val_add,":power",3),
          (store_div, ":low_power", ":power", 3),
          (store_random_in_range, ":rand", ":low_power", ":power"),
          (try_begin),
            (is_between, ":rand", 0, 3),
            (party_add_members,"p_temp_party","trp_skeleton",10),
          (else_try),
            (is_between, ":rand", 3, 6),
            (party_add_members,"p_temp_party","trp_zombie_1",10),
          (else_try),
            (is_between, ":rand", 6, 9),
            (party_add_members,"p_temp_party","trp_wight",3),
            (party_add_members,"p_temp_party","trp_skeleton",3),
            (party_add_members,"p_temp_party","trp_zombie_1",4),
          (else_try),
            (is_between, ":rand", 9, 12),
            (party_add_members,"p_temp_party","trp_dullahan",4),
            (party_add_members,"p_temp_party","trp_skeleton",2),
            (party_add_members,"p_temp_party","trp_zombie_1",2),
          (else_try),
            (is_between, ":rand", 12, 13),
            (party_add_members,"p_temp_party","trp_vampire_1",3),
          (else_try),
            (party_add_members,"p_temp_party","trp_wraith",1),
          (try_end),
        (try_end),
        (change_screen_exchange_with_party, "p_temp_party"),
        
    ]),
    ("battlefield_loot", 
     [
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_1"),
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_2"),
      (this_or_next|eq,"$g_encountered_party_template", "pt_battlefield_3"),
      (eq,"$g_encountered_party_template", "pt_battlefield_4"),
      (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
     ],
      "loot battlefield.",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, -1),

        (troop_clear_inventory, "trp_find_item_cheat"),
        (play_sound,"snd_lair_undead"),
        (call_script,"script_change_player_party_morale",-50),
        (str_store_string, s3, "@battlefield_loot."),
        (try_begin),
          (eq,"$g_encountered_party_template", "pt_battlefield_1"),
          (store_random_in_range, ":rand", 100, 1001), 
          (store_random_in_range, ":rand_3", 1, 3), 
        (else_try),
          (eq,"$g_encountered_party_template", "pt_battlefield_2"),
          (store_random_in_range, ":rand", 150, 2501), 
          (store_random_in_range, ":rand_3", 2, 5), 
        (else_try),
          (eq,"$g_encountered_party_template", "pt_battlefield_3"),
          (store_random_in_range, ":rand", 1000, 5001), 
          (store_random_in_range, ":rand_3", 3, 6), 
        (else_try),
          (eq,"$g_encountered_party_template", "pt_battlefield_4"),
          (store_random_in_range, ":rand", 500, 2001), 
          (store_random_in_range, ":rand_3", 5, 9), 
        (try_end),
        (troop_add_gold, "trp_player", ":rand"),
        (call_script, "script_gamble", ":rand_3"),
        (change_screen_loot, "trp_find_item_cheat"),
        
    ]),
    ("tree_of_knowledge", 
     [
      (eq,"$g_encountered_party_template", "pt_tree_of_knowledge"),
      
      (str_store_item_name,s2,"itm_diamonds"),
      (store_item_kind_count,reg11,"itm_diamonds","trp_player"),
      (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
      (try_begin),
        (neg|ge, reg11, 1),  
        (disable_menu_option),
      (try_end),
     ],
      "give tree 1{s2} (now you have {reg11}{s2}).",
     [
          (troop_remove_items,"trp_player","itm_diamonds",1),
          (display_message, "@tree_of_knowledge_text_2"),
          (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 1),
          (play_sound,"snd_add_exp"),
          (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
          (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
            (neg|troop_is_hero, ":stack_troop"),
            (party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),
            (call_script, "script_game_get_upgrade_xp", ":stack_troop"),
            (store_mul, ":xp_to_add", ":stack_size", reg0),
            (party_add_xp_to_stack, "p_main_party", ":i_stack", ":xp_to_add"),
          (else_try),  
            (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
            (troop_is_hero, ":stack_troop"),
            (party_add_xp_to_stack, "p_main_party", ":i_stack", 5000),
          (try_end),


        (party_is_active, "$g_encountered_party"),
        (remove_party, "$g_encountered_party"),
        (assign, "$g_leave_encounter", 0),
        (change_screen_map),
    ]),

    ("fountain", 
     [
      (eq,"$g_encountered_party_template", "pt_fountain"),
      (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
     ],
      "drink water in fountain.",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 1),
        (store_random_in_range, ":rand_2", 0, 10), 
        (try_begin),
          (is_between, ":rand_2", 0, 2),
          (heal_party, "p_main_party"),
          (play_sound,"snd_good_moral"),
          (display_message, "@heal fountain"),
          (call_script,"script_change_player_party_morale",100),
          (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
          (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":stack_troop","p_main_party",":i_stack"),
            (troop_is_hero, ":stack_troop"),
            (str_store_troop_name, s5, ":stack_troop"),
            (store_random_in_range, ":rand", 0, 5),
            (try_begin),
              (eq, ":rand", 1),
              (troop_raise_attribute,":stack_troop",ca_strength,1),
              (display_log_message, "@ {s5}'s Strength have increased!."),
            (else_try),
              (eq, ":rand", 2),
              (troop_raise_attribute,":stack_troop",ca_agility,1),
              (display_log_message, "@ {s5}'s Agility have increased!."),
            (else_try),
              (eq, ":rand", 3),
              (troop_raise_attribute,":stack_troop",ca_intelligence,1),
              (display_log_message, "@ {s5}'s Intelligence have increased!."),
            (else_try),
              (eq, ":rand", 4),
              (troop_raise_attribute,":stack_troop",ca_charisma,1),
              (display_log_message, "@ {s5}'s Charisma have increased!."),
            (else_try),
              (try_for_range, ":proficiency_no", 0, 7),
                (troop_raise_proficiency, ":stack_troop", ":proficiency_no", 20),
              (try_end),
              (display_log_message, "@ {s5}'s weapon proficiencies has increased!."),
            (try_end),
          (try_end),
        (else_try),
          (is_between, ":rand_2", 2, 7),
          (heal_party, "p_main_party"),
          (play_sound,"snd_good_moral"),
          (display_message, "@normal fountain"),
          (call_script,"script_change_player_party_morale",50),
        (else_try),
          (play_sound,"snd_quest_failed"),
          (call_script, "script_party_wound_all_members", "p_main_party"),
          (display_message, "@posion fountain"),
        (try_end),
    
    


        (party_is_active, "$g_encountered_party"),
        (remove_party, "$g_encountered_party"),
        (assign, "$g_leave_encounter", 0),
        (change_screen_map),
    ]),
    ("temple", 
     [
       (eq,"$g_encountered_party_template", "pt_temple"),
       (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
     ],
      "pray in temple.",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 1),
        (display_log_message, "@temple_text_2"),
        (val_add,"$g_pray_time", 1),
        (get_player_agent_kill_count, ":var_2"),
        (get_player_agent_kill_count, ":var_3", 1),
        (val_add, ":var_2", ":var_3"),
        (troop_clear_inventory, "trp_find_item_cheat"),
        (assign, ":special_item_in_loot", 0),
        (try_begin),
          (ge,"$g_pray_time", 3),
          (ge,"$g_drink_time", 50),
          (item_slot_eq, "itm_sanguine_rose", slot_item_special_given, 0),
          (item_set_slot, "itm_sanguine_rose", slot_item_special_given, 1),
          (assign, ":special_item_in_loot", "itm_sanguine_rose"),
          (dialog_box,"@give_sanguine_rose_text", "@temple epiphany"),
        (else_try),
          (ge,"$g_pray_time", 1),
          (ge, "$g_total_victories", 4),
          (item_slot_eq, "itm_nurgle_chosen_armor", slot_item_special_given, 0),
          (item_set_slot, "itm_nurgle_chosen_armor", slot_item_special_given, 1),
          (troop_add_item, "trp_find_item_cheat", "itm_nurgle_chosen_leg"),
          (troop_add_item, "trp_find_item_cheat", "itm_nurgle_chosen_hand"),
          (troop_add_item, "trp_find_item_cheat", "itm_nurgle_shield_1"),
          (assign, ":special_item_in_loot", "itm_nurgle_chosen_armor"),
          (dialog_box,"@give_nurgle_chosen_armor_text", "@temple epiphany"),
        (else_try),
          (ge,"$g_pray_time", 1),
          (ge, "$g_total_victories", 20),
          (item_slot_eq, "itm_frankenstein_head", slot_item_special_given, 0),
          (item_set_slot, "itm_frankenstein_head", slot_item_special_given, 1),
          (assign, ":special_item_in_loot", "itm_frankenstein_head"),
          (dialog_box,"@give_frankenstein_head_text", "@temple epiphany"),
        (else_try),
          (ge,"$g_pray_time", 1),
          (ge, ":var_2", 5000),
          (item_slot_eq, "itm_khorne_helm", slot_item_special_given, 0),
          (item_set_slot, "itm_khorne_helm", slot_item_special_given, 1),
          (assign, ":special_item_in_loot", "itm_khorne_helm"),
          (dialog_box,"@give_slaughter_axe_text", "@temple epiphany"),
        (else_try),
          (ge,"$g_pray_time", 5),
          (ge, ":var_2", 10000),
          (item_slot_eq, "itm_khorne_axe", slot_item_special_given, 0),
          (item_set_slot, "itm_khorne_axe", slot_item_special_given, 1),
          (assign, ":special_item_in_loot", "itm_khorne_axe"),
          (dialog_box,"@give_khorne_axe_text", "@temple epiphany"),
        (else_try),
          (ge,"$g_pray_time", 10),
          (ge, ":var_2", 2500),
          (ge, "$g_total_victories", 250),
          (item_slot_eq, "itm_morrigan", slot_item_special_given, 0),
          (item_set_slot, "itm_morrigan", slot_item_special_given, 1),
          (assign, ":special_item_in_loot", "itm_morrigan"),
          (dialog_box,"@give_morrigan_text", "@temple epiphany"),
        (else_try),
          (ge,"$g_pray_time", 10),
          (ge, ":var_2", 5000),
          (ge, "$g_total_victories", 500),
          (item_slot_eq, "itm_flame_blade", slot_item_special_given, 0),
          (item_set_slot, "itm_flame_blade", slot_item_special_given, 1),
          (assign, ":special_item_in_loot", "itm_flame_blade"),
          (dialog_box,"@give_flame_blade_text", "@temple epiphany"),
        (else_try),
          (ge,"$g_pray_time", 2),
          (ge, "$player_right_to_rule", 50),
          (item_slot_eq, "itm_calibur", slot_item_special_given, 0),
          (item_set_slot, "itm_calibur", slot_item_special_given, 1),
          (assign, ":special_item_in_loot", "itm_calibur"),
          (dialog_box,"@give_calibur_text", "@temple epiphany"),
        (else_try),
          (ge,"$g_pray_time", 5),
          (ge, "$player_right_to_rule", 99),
          (item_slot_eq, "itm_calibur", slot_item_special_given, 1),
          (item_set_slot, "itm_calibur", slot_item_special_given, 2),
          (store_random_in_range, ":rand_2", 0, 2), 
          (try_begin),
            (eq, ":rand_2", 0),
            (item_slot_eq, "itm_excalibur_1", slot_item_special_given, 0),
            (item_set_slot, "itm_excalibur_1", slot_item_special_given, 1),
            (dialog_box,"@give_excalibur_text", "@temple epiphany"),
          (else_try),
            (item_slot_eq, "itm_excalibur_2", slot_item_special_given, 0),
            (item_set_slot, "itm_excalibur_2", slot_item_special_given, 1),
            (assign, ":special_item_in_loot", "itm_excalibur_2"),
            (dialog_box,"@give_excalibur_text", "@temple epiphany"),
          (try_end),
        (else_try),
          (ge,"$g_pray_time", 10),
          (store_troop_gold, ":wealth", "trp_player"),
          (ge, ":wealth", 50000),
          (item_slot_eq, "itm_ramun_jacket", slot_item_special_given, 0),
          (item_set_slot, "itm_ramun_jacket", slot_item_special_given, 1),
          (assign, ":special_item_in_loot", "itm_ramun_jacket"),
          (dialog_box,"@give_ramun_jacket_text", "@temple epiphany"),
        (else_try),
          (ge,"$g_pray_time", 20),
          (assign, ":total_item_value", 0),
          (troop_get_inventory_capacity, ":capacity", "trp_player"),
          (try_for_range, ":i_inv", 0, ":capacity"),
            (troop_get_inventory_slot, ":item", "trp_player", ":i_inv"),
            (ge, ":item", 0),
            (store_item_value, ":item_value", ":item"),
            (val_add, ":total_item_value", ":item_value"),
          (try_end),
          (ge, ":total_item_value", 100000),
          (item_slot_eq, "itm_midas_hand", slot_item_special_given, 0),
          (item_set_slot, "itm_midas_hand", slot_item_special_given, 1),
          (assign, ":special_item_in_loot", "itm_midas_hand"),
          (dialog_box,"@give_midas_hand_text", "@temple epiphany"),
        (else_try),
          (ge,"$g_pray_time", 10),
          (ge,"$g_total_quests_completed", 10),
          (item_slot_eq, "itm_fast_travel_boot", slot_item_special_given, 0),
          (item_set_slot, "itm_fast_travel_boot", slot_item_special_given, 1),
          (assign, ":special_item_in_loot", "itm_fast_travel_boot"),
          (dialog_box,"@give_fast_travel_boot_text", "@temple epiphany"),
        (try_end),
        (try_begin),
          (neq, ":special_item_in_loot", 0),
          (assign, "$loot_screen_shown", 1),
          (troop_add_item, "trp_find_item_cheat", ":special_item_in_loot"),
          (str_store_item_name, s2, ":special_item_in_loot"),
          (display_message, "@Bonus! A {s2}.", 0x00ff00),
          (display_message, "@unique_items get!.", 0x00ff00),
          (play_sound,"snd_artifact_get"),
          (call_script,"script_change_player_effect", 30),
          (change_screen_loot, "trp_find_item_cheat"),
        (try_end),
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, -1),
     ]),

    ("prison", 
     [
       (eq,"$g_encountered_party_template", "pt_prison"),
       (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
     ],
      "Look at the prisoners..",
     [
        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, -1),
        (store_random_in_range, ":rand_3", 2, 5), 
        (try_for_range, ":unused", 0, ":rand_3"),
          (store_random_in_range, ":rand", village_troops_begin, kingdom_troops_end),
          (store_random_in_range, ":rand_2", 2, 7), 
          (party_add_members,"p_temp_party",":rand",":rand_2"),
        (try_end),


        (change_screen_exchange_with_party, "p_temp_party"),
     ]),

    ("market", 
     [
      (eq,"$g_encountered_party_template", "pt_school_of_magic"),
      (party_slot_eq, "$g_encountered_party", slot_party_ai_substate, 0),
     ],
     "Black Market...",
     [

        (party_set_slot, "$g_encountered_party", slot_party_ai_substate, -1),
        
        (troop_clear_inventory, "trp_find_item_cheat"),
       (reset_item_probabilities, 100),
       (set_merchandise_modifier_quality, 1000),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_body_armor,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_head_armor,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_foot_armor,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_hand_armor,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_one_handed_wpn,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_two_handed_wpn,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_polearm,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_shield,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_bow,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_crossbow,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_thrown,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_pistol,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_musket,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_arrows,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_bolts,5),
       (troop_add_merchandise, "trp_find_item_cheat", itp_type_bullets,5),
        (change_screen_trade, "trp_find_item_cheat"),

    ]),
    ("castle_wait",
      [
        (eq,"$g_encountered_party_template", "pt_tavern"),
        (assign, ":can_rest", 1),
        (str_clear, s1),
        (try_begin),
          (assign, reg1, 200),
          (str_store_string, s1, "@ ({reg1} denars per night)"),
          (store_troop_gold, ":gold", "trp_player"),
          (lt, ":gold", reg1),
          (assign, ":can_rest", 0),
        (try_end),
        (eq, ":can_rest", 1),
      ],
      "Wait here for some time{s1}.",
      [
        (assign, "$auto_enter_town", "$current_town"),
        (assign, "$g_town_visit_after_rest", 1),
        (assign, "$g_last_rest_center", "$current_town"),
        (assign, "$g_last_rest_payment_until", -1),

        (rest_for_hours_interactive, 24 * 7, 5, 0), #rest while not attackable
        (change_screen_return),
    ]),

    ("portal",
      [
        (eq,"$g_encountered_party_template", "pt_portal_1"),
      ],
      "use portal to random portal.",
      [
      (assign, ":result", -1),
      (assign, ":total_portal", 0),

      (try_for_parties, ":party_no"),
         (party_slot_eq, ":party_no", slot_party_type, spt_portal_1),
         (neg|eq, ":party_no", "$g_encountered_party"),
         (val_add, ":total_portal", 1),
      (try_end),

      (gt, ":total_portal", 0),
      (store_random_in_range, ":random_center", 0, ":total_portal"),
      (assign, ":total_portal", 0),
      (try_for_parties, ":center_no"),
        (eq, ":result", -1),
        (party_slot_eq, ":center_no", slot_party_type, spt_portal_1),
        (neg|eq, ":center_no", "$g_encountered_party"),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":result", ":center_no"),
      (try_end),
      (gt, ":result", -1),
      (party_relocate_near_party, "p_main_party", ":result", 3),
      (change_screen_map),
      (play_sound,"snd_gate"),
    ]),

    ("portal",
      [
        (eq,"$g_encountered_party_template", "pt_portal_2"),
      ],
      "use portal to random portal.",
      [
      (assign, ":result", -1),
      (assign, ":total_portal", 0),

      (try_for_parties, ":party_no"),
         (party_slot_eq, ":party_no", slot_party_type, spt_portal_2),
         (neg|eq, ":party_no", "$g_encountered_party"),
         (val_add, ":total_portal", 1),
      (try_end),

      (gt, ":total_portal", 0),
      (store_random_in_range, ":random_center", 0, ":total_portal"),
      (assign, ":total_portal", 0),
      (try_for_parties, ":center_no"),
        (eq, ":result", -1),
        (party_slot_eq, ":center_no", slot_party_type, spt_portal_2),
        (neg|eq, ":center_no", "$g_encountered_party"),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":result", ":center_no"),
      (try_end),
      (gt, ":result", -1),
      (party_relocate_near_party, "p_main_party", ":result", 3),
      (change_screen_map),
      (play_sound,"snd_gate"),
    ]),
    
    ("portal",
      [
        (eq,"$g_encountered_party_template", "pt_portal_3"),
      ],
      "use portal to random portal.",
      [
      (assign, ":result", -1),
      (assign, ":total_portal", 0),

      (try_for_parties, ":party_no"),
         (party_slot_eq, ":party_no", slot_party_type, spt_portal_3),
         (neg|eq, ":party_no", "$g_encountered_party"),
         (val_add, ":total_portal", 1),
      (try_end),

      (gt, ":total_portal", 0),
      (store_random_in_range, ":random_center", 0, ":total_portal"),
      (assign, ":total_portal", 0),
      (try_for_parties, ":center_no"),
        (eq, ":result", -1),
        (party_slot_eq, ":center_no", slot_party_type, spt_portal_3),
        (neg|eq, ":center_no", "$g_encountered_party"),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":result", ":center_no"),
      (try_end),
      (gt, ":result", -1),
      (party_relocate_near_party, "p_main_party", ":result", 3),
      (change_screen_map),
      (play_sound,"snd_gate"),
    ]),
    
    ("portal",
      [
        (eq,"$g_encountered_party_template", "pt_portal_4"),
      ],
      "use portal to random portal.",
      [
      (assign, ":result", -1),
      (assign, ":total_portal", 0),

      (try_for_parties, ":party_no"),
         (party_slot_eq, ":party_no", slot_party_type, spt_portal_4),
         (neg|eq, ":party_no", "$g_encountered_party"),
         (val_add, ":total_portal", 1),
      (try_end),

      (gt, ":total_portal", 0),
      (store_random_in_range, ":random_center", 0, ":total_portal"),
      (assign, ":total_portal", 0),
      (try_for_parties, ":center_no"),
        (eq, ":result", -1),
        (party_slot_eq, ":center_no", slot_party_type, spt_portal_4),
        (neg|eq, ":center_no", "$g_encountered_party"),
        (val_sub, ":random_center", 1),
        (lt, ":random_center", 0),
        (assign, ":result", ":center_no"),
      (try_end),
      (gt, ":result", -1),
      (party_relocate_near_party, "p_main_party", ":result", 3),
      (change_screen_map),
      (play_sound,"snd_gate"),
    ]),
        
    ("leave_no_attack", [],
     "Leave...",
     [
    
        (str_store_troop_name, s5, "trp_player"),
        (try_begin),
          (eq,"$g_encountered_party_template", "pt_library_of_enlightenment"),
          (troop_raise_attribute,"trp_player",ca_intelligence,1),
          (display_log_message, "@ {s5}'s Intelligence have increased!."),
          (play_sound,"snd_add_exp"),
        (else_try),
          (eq,"$g_encountered_party_template", "pt_arena"),
          (troop_raise_attribute,"trp_player",ca_strength,1),
          (display_log_message, "@ {s5}'s Strength have increased!."),
          (play_sound,"snd_add_exp"),
        (else_try),
          (eq,"$g_encountered_party_template", "pt_training_ground"),
          (troop_raise_attribute,"trp_player",ca_agility,1),
          (display_log_message, "@ {s5}'s Agility have increased!."),
          (play_sound,"snd_add_exp"),
        (else_try),
          (eq,"$g_encountered_party_template", "pt_witch_hut_1"),
          (troop_raise_attribute,"trp_player",ca_charisma,1),
          (display_log_message, "@ {s5}'s Charisma have increased!."),
          (play_sound,"snd_add_exp"),
        (else_try),
          (eq,"$g_encountered_party_template", "pt_wind_mill"),
          (play_sound,"snd_chest"),
          (troop_add_gold,"trp_player",reg0),
        (else_try),
          (eq,"$g_encountered_party_template", "pt_watchtower"),
          (assign, "$g_cartographer_uses", 3),
          (try_for_parties, ":bandit_camp"),
            (gt, ":bandit_camp", "p_spawn_points_end"),
            (party_get_template_id, ":template", ":bandit_camp"),
            (this_or_next|is_between, ":template", "pt_steppe_bandit_lair", "pt_looter_lair"),
            (this_or_next|is_between, ":template", "pt_cloud_temple_2", "pt_lair_end"),
            (this_or_next|is_between, ":template", "pt_dragon_utopia", "pt_bank_end"),
            (this_or_next|is_between, ":template", "pt_experiance_stone", "pt_treasure_end"),
            (is_between, ":template", "pt_library_of_enlightenment", "pt_enhancement_end"),
            (party_set_flags, ":bandit_camp", pf_disabled, 0),
          (try_end),
        (else_try),
          (eq,"$g_encountered_party_template", "pt_stables"),
          (play_sound,"snd_chest"),
          (troop_add_gold,"trp_player",reg0),
          (troop_get_inventory_capacity, ":inv_cap", "trp_player"),
          (try_for_range, ":i_slot", 0, ":inv_cap"),
            (troop_get_inventory_slot, ":item", "trp_player", ":i_slot"),
            (gt, ":item", -1),
            (item_get_type, ":type", ":item"),
            (eq, ":type", itp_type_horse),
            (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
            (this_or_next|eq, ":imod", imod_lame),
            (this_or_next|eq, ":imod", imod_swaybacked),
            (eq, ":imod", imod_stubborn),
            (troop_set_inventory_slot_modifier, "trp_player", ":i_slot",0),
          (try_end),
          (assign, "$g_stables_uses", 7),
        (try_end),
        (try_begin),
            (party_is_active, "$g_encountered_party"),
            (party_set_slot, "$g_encountered_party", slot_party_ai_substate, 0),
        (try_end),
        (try_begin),
          (ge, "$g_encountered_party", 0),
          (neq,"$g_encountered_party_template", "pt_portal_1"),
          (neq,"$g_encountered_party_template", "pt_portal_2"),
          (neq,"$g_encountered_party_template", "pt_portal_3"),
          (neq,"$g_encountered_party_template", "pt_portal_4"),
          (party_is_active, "$g_encountered_party"),
          (remove_party, "$g_encountered_party"),
        (try_end),   
        (assign, "$g_mt_mode", 0),
        (assign,"$auto_menu",-1),
        (change_screen_map),
        
     ]),
    
  ]),
  
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#-#-#-#Hunting Mod begin#-#-#-#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
("camp_hunting_or_poaching", mnf_scale_picture, "{s5}", "none",
[
	(set_background_mesh, "mesh_pic_hunting"), #set background pic
	#First determine if it is a good climate to hunt here (not desert)
	(party_get_current_terrain, ":terrain" , "p_main_party"),
	(try_begin), #if terrain is not desert
		#conditions
		(neq, ":terrain", rt_desert),
		
		#actions
		(str_store_string, s11, "@From the look of this land, it is safe for you to guess there is plenty of game for you to hunt here."),
		# Find the closest town, village, or castle to the player's party
		
		#initialization of closest determinationtion
		(assign, ":closest_settlement", 0),
		(assign, ":closest_distance", 9999999999),
		(party_get_position, pos10, "p_main_party"),
		(str_store_string, s6, "@the_settlement_of"),
		
		#first try towns
		(try_for_range, ":cur_town", towns_begin, towns_end),
			(party_get_position, pos11, ":cur_town"),
			(get_distance_between_positions, ":cur_distance", pos10, pos11),
			(lt, ":cur_distance", ":closest_distance"),
			(assign, ":closest_distance", ":cur_distance"),
			(assign, ":closest_settlement", ":cur_town"),
			(str_store_string, s6, "@the_town_of"),
		(try_end),
		
		#now castles
		(try_for_range, ":cur_castle", castles_begin, castles_end),
			(party_get_position, pos11, ":cur_castle"),
			(get_distance_between_positions, ":cur_distance", pos10, pos11),
			(lt, ":cur_distance", ":closest_distance"),
			(assign, ":closest_distance", ":cur_distance"),
			(assign, ":closest_settlement", ":cur_castle"),
			(str_store_string, s6, "@the_castle_of"),
		(try_end),
		
		#finally villages
		(try_for_range, ":cur_village", villages_begin, villages_end),
			(party_get_position, pos11, ":cur_village"),
			(get_distance_between_positions, ":cur_distance", pos10, pos11),
			(lt, ":cur_distance", ":closest_distance"),
			(assign, ":closest_distance", ":cur_distance"),
			(assign, ":closest_settlement", ":cur_village"),
			(str_store_string, s6, "@the_village_of"),
		(try_end),
		
		#final calculations and stuff
		(store_faction_of_party, reg7, ":closest_settlement"), #get the faction of the closest settlement
		(str_store_faction_name, s7, reg7), #store the name of the faction in s7
		(str_store_party_name, s8, ":closest_settlement"), #store the name of the closest settlement in s8
		(str_store_string, s9, "@You are closest to {s6} {s8}, which is owned by {s7}."),
		(try_begin),
			#conditions
			(eq, "$players_kingdom", reg7), #player is in kingdom
			(eq, "$player_has_homage", 1), #player is vassal
			
			#actions
			(str_store_string, s10, "@You are a member of the {s7} nobility, so by the laws of the land, you are allowed to hunt here as you please."),
			(assign,reg31, 0),
		(else_try),
			#conditions
			(neq, "$players_kingdom", reg7), #player is not in kingdom 
			
			#actions
			(str_store_string, s10, "@You are not a member of the {s7} nobility, so you are not allowed to hunt in these lands. If you do so, there is a possibility you will be caught in the act and face charges."),
			(assign, reg31, 1),
		(else_try),
			#conditions
			(neq, "$player_has_homage", 1), #player is not vassal (but is a mercenary)
			
			#actions
			(str_store_string, s10, "@You are a member of the {s7} nobility, so by the laws of the land, you are allowed to hunt here as you please."),
			(assign, reg31, 2),
		(try_end),
		
		#finally, build the string to display
		(str_store_string, s5, "@{s11} {s9} {s10}"),
		
	(else_try), #if the terrain is desert
		#conditions
		(eq, ":terrain", rt_desert),
		
		#actions
		(str_store_string,s5,"@You are in the middle of the desert, so it is impossible for you to hunt here."),
		(assign, reg31, -1),
		
	(else_try), #if the terrain is ocean or river
		#conditions
		(this_or_next|eq,":terrain",rt_water),
		(eq,":terrain",rt_river),
		
		#actions
		(str_store_string,s5,"@You are in the middle of the water, so it is impossible for you to find boar or deer here!"),
		(assign, reg31, -1),
		
	(try_end),
	
	
	
],
[

	   ("start_poaching",[
			(this_or_next|eq, reg31, 1),
			(eq, reg31, 2),
	   ],"{!}Attempt to poach for some animals.",
       [
			(jump_to_menu, "mnu_poaching"),		
        ]
       ),
	   
	   	   ("start_hunting",[
				(eq, reg31, 0),
	   ],"{!}Attempt to hunt for some animals.",
       [
			(jump_to_menu, "mnu_hunting"),
        ]
       ),
	   
		#Return to the camp menu.
	   ("back_to_camp_menu",[],"{!}Back to camp menu.",
       [
         (jump_to_menu, "mnu_camp"),
        ]
       ),
],
),

("poaching", mnf_scale_picture, "You prepare for the poach. {s5}", "none",
[
		(set_background_mesh, "mesh_pic_hunting"), #set background pic
		(call_script, "script_get_max_skill_of_player_party", "skl_tracking"),
		(assign, ":max_skill", reg0),
		(assign, ":max_skill_owner", reg1),
		(assign, reg2, ":max_skill"),
		(str_store_troop_name, s11, ":max_skill_owner"),
		
		(try_begin),
			(eq, ":max_skill_owner", "trp_player"),
			(str_store_string,s5, "@As the party member with the highest tarcking skill ({reg3}), you will lead the poach. You will be frozen in place until hunting is finished, and you will not be able to abort. Would you like to begin?"),
		(else_try),
			(str_store_string,s5, "@As the party member with the highest tracking skill ({reg3}), {s11} will lead the poach. You will be frozen in place until hunting is finished, and you will not be able to abort. Would you like to begin?"),
		(try_end),
],
[

		#Actually begin to poach
	   ("start_poach",[],"{!}Start your poach.",
       [
         	(call_script,"script_initialize_hunting_time", reg1, "p_main_party"),
			
			#slots
			(party_set_slot, "p_main_party", slot_party_is_hunting, 2),
			(party_set_slot, "p_main_party", slot_party_hunting_land, reg7),	
			
			#relations (only changed in poaching, so changed here)
			#(call_script, "script_change_player_relation_with_faction", "fac_manhunters", -15),
			#(call_script, "script_change_player_relation_with_faction", reg7, -15),
			
			#log
			(str_store_troop_name, s9,reg1),
			(display_log_message, "@{s9} leads your party on a hunt...",0x0000FF),
			(party_set_extra_text, "p_main_party", "@Poaching"),
			     

           (assign, "$g_infinite_camping", 0),
		   
           (rest_for_hours, 9999999, 5, 1), #rest while attackable, interupted by simple_trigger
		   (change_screen_return),
        ]
       ),
	   
		#Return to the camp menu.
	   ("back_to_camp_menu",[],"{!}Back to camp menu.",
       [
         (jump_to_menu, "mnu_camp"),
        ]
       ),
],
),
  
("hunting", mnf_scale_picture, "You prepare for the hunt. {s5}", "none",
[
		(set_background_mesh, "mesh_pic_hunting"), #set background pic
		(call_script, "script_get_max_skill_of_player_party", "skl_tracking"),
		(assign, ":max_skill", reg0),
		(assign, ":max_skill_owner", reg1),
		(assign, reg2, ":max_skill"),
		(str_store_troop_name, s11, ":max_skill_owner"),
		
		(try_begin),
			(eq, ":max_skill_owner", "trp_player"),
			(str_store_string,s5, "@As the party member with the highest tarcking skill ({reg3}), you will lead the hunt. You will be frozen in place until hunting is finished, and you will not be able to abort. Would you like to begin?"),
		(else_try),
			(str_store_string,s5, "@As the party member with the highest tracking skill ({reg3}), {s11} will lead the hunt. You will be frozen in place until hunting is finished, and you will not be able to abort. Would you like to begin?"),
		(try_end),
],
[

		#Actually begin to hunt.
	   ("start_hunt",[],"{!}Start your hunt.",
       [
			(call_script,"script_initialize_hunting_time", reg1, "p_main_party"),
			(call_script,"script_set_hunting_found","p_main_party"),
			#slots
			(party_set_slot, "p_main_party", slot_party_is_hunting, 1),
			(party_set_slot, "p_main_party", slot_party_hunting_land, reg7),	
			
			#relations (only changed in poaching, so not changed here)
			#(call_script, "script_change_player_relation_with_faction", "fac_manhunters", -15),
			#(call_script, "script_change_player_relation_with_faction", reg7, -15),
			
			#log
			(str_store_troop_name, s9,reg1),
			(display_log_message, "@{s9} leads your party on a hunt...",0x0000FF),
			(party_set_extra_text, "p_main_party", "@Hunting"),
			     

           (assign, "$g_infinite_camping", 0),
		   
           (rest_for_hours, 9999999, 5, 1), #rest while attackable, interupted by simple_trigger
		   (change_screen_return),
        ]
       ),
	   
		#Return to the camp menu.
	   ("back_to_camp_menu",[],"{!}Back to camp menu.",
       [
         (jump_to_menu, "mnu_camp"),
        ]
       ),
],
),



  ("hunting_2",0,"{10}","none",
   [
       (party_get_slot, ":amount", "p_main_party", slot_party_hunting_amount),
       (party_get_slot, ":item", "p_main_party", slot_party_hunting_found),
       (str_store_item_name, s1, ":item"),
       (assign,reg5, ":amount"),
       (try_begin),
         (gt, 1, ":amount"),
         (str_store_string, s10, "@You have encountered a herd of {reg5}{s1}. What do you want to do?"),
       (else_try),
         (eq, 1, ":amount"),
         (str_store_string, s10, "@You have encountered a lone {s1}. What do you want to do?"),
       (else_try),
         (str_store_string, s10, "@There are no remaining animals to slay."),
       (try_end),
       (set_background_mesh, "mesh_pic_cattle"),
   ],
    [
      ("hunt_go",[  
       (party_get_slot, ":num_boars", "p_main_party", slot_party_hunting_amount),
       (gt,":num_boars", 0),
      ],"Hunt some of the animals.",
       [
          (assign, "$loot_screen_shown", 0),
          (troop_clear_inventory, "trp_temp_troop"),
          
          (set_jump_mission,"mt_hunting"),
          (set_jump_entry, 0),
          (call_script, "script_setup_random_scene"),
          (jump_to_menu, "mnu_after_hunt"),
          (change_screen_mission),
        ]
       ),
      ("leave",[],"Leave.",
       [(change_screen_map),
        ]
       ),
       
       
       
       
      ]
  ),
  
  ("after_hunt",0,
    "{s1}",
    "none",
    [
      (set_background_mesh, "mesh_pic_cattle"),
       (party_get_slot, ":amount", "p_main_party", slot_party_hunting_amount),
       (party_get_slot, ":item", "p_main_party", slot_party_hunting_found),
       (str_store_item_name, s2, ":item"),
          
          
      (try_begin),
        (eq, "$loot_screen_shown", 0),
        (assign, "$loot_screen_shown", 1),
        (gt, "$hunted_animals", 0),
        (val_sub, ":amount", "$hunted_animals"),
        (party_set_slot, "p_main_party", slot_party_hunting_amount, ":amount"),
        (troop_clear_inventory, "trp_temp_troop"),
        (try_begin),
          (eq, ":item", "itm_boar"),
          (troop_add_items, "trp_temp_troop", "itm_pork", "$hunted_animals"),
          (troop_add_items, "trp_temp_troop", "itm_raw_leather", "$hunted_animals"),
          
        (else_try),
          (this_or_next|eq, ":item", "itm_spider_wild"),
          (is_between, ":item", "itm_wolf_wild","itm_gorgon_1_wild"),
          (troop_add_items, "trp_temp_troop", "itm_raw_leather", "$hunted_animals"),
          (store_random_in_range, ":num", -5, "$hunted_animals"),
          (gt, ":num", 0),
          (troop_add_items, "trp_temp_troop", ":item", 1),
        (else_try),
          (is_between, ":item", "itm_gorgon_1_wild","itm_griffin_wild"),
          (troop_add_items, "trp_temp_troop", "itm_cattle_meat", "$hunted_animals"),
          (troop_add_items, "trp_temp_troop", "itm_butter", "$hunted_animals"),
          (troop_add_items, "trp_temp_troop", "itm_raw_leather", "$hunted_animals"),
        (else_try),
          (eq, ":item", "itm_griffin_wild"),
          (store_random_in_range, ":num", "itm_sg_human_small", "itm_sg_human_big"),
          (troop_add_items, "trp_temp_troop", ":num", "$hunted_animals"),
          (store_random_in_range, ":num", -5, "$hunted_animals"),
          (gt, ":num", 0),
          (troop_add_items, "trp_temp_troop", ":item", 1),
        (else_try),
          (eq, ":item", "itm_unicorn_wild"),
          (store_random_in_range, ":num", "itm_sg_human_small", "itm_sg_human_big"),
          (troop_add_items, "trp_temp_troop", ":num", "$hunted_animals"),
          (store_random_in_range, ":num", -5, "$hunted_animals"),
          (gt, ":num", 0),
          (troop_add_items, "trp_temp_troop", ":item", 1),
        (else_try),
          (troop_add_items, "trp_temp_troop", "itm_deer_meat", "$hunted_animals"),
          (store_random_in_range, ":num", 1, "$hunted_animals"),
          (troop_add_items, "trp_temp_troop", "itm_raw_leather", ":num"),
        (try_end),
        (troop_sort_inventory, "trp_temp_troop"),
        (change_screen_loot, "trp_temp_troop"),
      (else_try),
        (gt, "$hunted_animals", 0),
        (assign, reg6, "$hunted_animals"),
        (str_store_string, s1, "@You successfully hunted {reg6} {s2}."),
      (else_try),
        (str_store_string, s1, "@You have lost track of the animals."),
      (end_try),
      
    ],
    [
      ("continue",[],"Continue.",
        [
          (change_screen_map),
        ]
      ),
      
    ]
  ),
  
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
#-#-#-#Hunting Mod end#-#-#-#
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
  
 ]
# modmerger_start version=201 type=2
try:
    component_name = "game_menus"
    var_set = { "game_menus" : game_menus }
    from modmerger import modmerge
    modmerge(var_set)
except:
    raise
# modmerger_end

import header_scenes
from template_tools import *
from module_scenes import scenes

sorted_scenes = sorted(scenes)
for i in xrange(len(sorted_scenes)):
  current_scene = list(sorted_scenes[i])
  current_scene[1] = get_flags_from_bitmap(header_scenes, "sf_", current_scene[1])
  sorted_scenes[i] = tuple(current_scene)

choose_scene_template = Game_Menu_Template(
  id="choose_scenes_",
  text="Choose a scene: (Page {current_page} of {num_pages})",
  optn_id="choose_scene_",
  optn_text="{list_item[0]}{list_item[1]}",
  optn_consq = [
    (jump_to_scene, "scn_{list_item[0]}"),
    (change_screen_mission)
  ]
)

game_menus += choose_scene_template.generate_menus(sorted_scenes)